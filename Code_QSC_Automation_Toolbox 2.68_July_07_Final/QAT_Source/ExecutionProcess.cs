using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Globalization;
using System.Text;
using System.Xml;
using System.Net;
using System.Text.RegularExpressions;
using System.Configuration;
using System.IO;
using System.Diagnostics;
using System.Threading;
using QRAPI;
using System.Windows.Shapes;
using System.Windows.Data;
using Utility;
using System.Collections.ObjectModel;
using AudioPrecision.API;
using System.Data.SqlClient;
using System.Diagnostics.Eventing.Reader;
using System.Net.Mail;
//using Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;
using System.Drawing;
using System.Drawing.Imaging;
using DUT_QSys;
using System.Net.NetworkInformation;
using QSC_Test_Automation.USBPlayBack;
using QSC_Test_Automation.USBPlayBack.CoreAudioApi;
using System.Web.Script.Serialization;
using CecSharp;
using Microsoft.Win32;
using System.Security.Cryptography;
using System.Windows.Forms.DataVisualization.Charting;
using System.Net.Mime;
using ICSharpCode.SharpZipLib.GZip;
using ICSharpCode.SharpZipLib.Tar;

namespace QSC_Test_Automation
{
    class ExecutionProcess
    {
        public delegate void executionCompleteDelegate(string state);
        public delegate Tuple<MessageBoxResult,string> executionMessageBoxDelegate(string messageBoxTest, string messageBoxCaption, MessageBoxButton messageBoxButton, MessageBoxImage messageBoxImage);
        public delegate bool updateExecutionStatusDelegate(TreeViewExplorer PlanExecution, string StatusInfo);
        public delegate string ExecutionLoopCountDelegate(string LoopValue);
       
        public delegate void LoopValueDelegate(string Loopvalue);
        public delegate void RemainingTimeDelegate(DateTime RemainingTime);
        public delegate void DurationTypeeDelegate(string durationType);

        AutoResetEvent autoevent = null;
        executionMessageBoxDelegate ExecutionMessageBox;
        updateExecutionStatusDelegate UpdateExecutionStatus;
        ExecutionLoopCountDelegate ExecutionLoopCount;
        LoopValueDelegate loopvalue;
        RemainingTimeDelegate RemainingTime;
        DurationTypeeDelegate DurationType;
        
        [DllImport("user32.dll")]
        private static extern int SetForegroundWindow(IntPtr hWnd);
        private const int SW_SHOWNORMAL = 1;
        private const int SW_SHOWMAXIMIZED = 3;
        private const int SW_RESTORE = 9;
        private const int SW_MINIMIZE = 6;
        [DllImport("user32.dll")]

        private static extern
        bool IsIconic(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
        
        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        
        //string ExecutionMessage = "";
        List<DUT_DeviceItem> selectedDutDeviceItemList = new List<DUT_DeviceItem>();
        List<DUT_DeviceItem> selectedExternalDeviceItemList = new List<DUT_DeviceItem>();
        TreeViewExplorer treeViewExplorerExecutionRootItem = null;

        List<TreeViewExplorer> checkedTestsuites = new List<TreeViewExplorer>();
        List<TreeViewExplorer> checkedTestplans = new List<TreeViewExplorer>();
        List<TreeViewExplorer> checkedTestcases = new List<TreeViewExplorer>();

        DBConnection QscDatabase = new DBConnection();

        private Firmwareupgradation FirmwareAction = new Firmwareupgradation();
        private Responsalyzer ResponsalyzerAction = new Responsalyzer();
        private logs log_object = new logs();

        QsysPairingData QPD;
        string designCode_UsingIP = string.Empty;

        Rpc rpc = new Rpc();
        System.Data.DataTable Datatable1 = new System.Data.DataTable();
        System.Data.DataTable tble = new System.Data.DataTable();
        DataTableReader read = null;
       // public List<string> set_status = new List<string>();
        //public List<string> get_status = new List<string>();
        List<Int32> TAID = new List<Int32>();
        public string getoup; public string getouptype; public string getoupvalue; public string getoupposition;
        Process qsyDesignProcess = new Process();
        //Process emulateprocess = new Process();
        Process emulateprocess_designeraction = new Process();
 
        string localpathfile, localpathfile_txt;

        ArrayList availablecores = new ArrayList();
        string desgnname = string.Empty;
        string Original_desgnname = string.Empty;
        string applicationPassword = "devicelock";
        string username_default = "admin";
        public string selectedCoreIPAddress = string.Empty;
        public string backup_selectedCoreIPAddress = string.Empty;
        bool? current_CoreBackup = null;
        string versionForDeploy = string.Empty;
        string netPairNameForDeploy = string.Empty;
        string backup_versionForDeploy = string.Empty;
        string backup_netPairNameForDeploy = string.Empty;
        bool isBackupCoreAvailable = false;

        string[] selectedCoreSystemSiteID = null;
        string[] BackupselectedCoreSystemSiteID = null;

        // string qsysPath_global_toclear_incancel=string.Empty ;
        //string  buildPath_global_toclear_incancel = string.Empty;

        string localdirectorypath = string.Empty;
        public bool hasdesign = false;
        public bool hasSetPassword = false;
        private bool isPasswordRestore = false;
        private bool isPasswordRestoreblank = false;
        Dictionary<string,string> passwordRestoreblank = new Dictionary<string, string>();
        List<string> netpairnames = new List<string>();
        List<string> netpairnamesblank = new List<string>();
        Dictionary<string, string> passwordRestore = new Dictionary<string, string>();
        Dictionary<string[], bool[]> restoreTelnetSettings = new Dictionary<string[], bool[]>();
        Dictionary<string[], bool[]> restoreTelnetSettings_blank = new Dictionary<string[], bool[]>();
        Dictionary<string, Tuple<bool, string>> firmwareversion_Alldevices = new Dictionary<string, Tuple<bool, string>>();
        string timecreated_GUIcheck = string.Empty;

        List<Tuple<string, string>> telnetresponses = new List<Tuple<string, string>>();

        List<string> DUTcheckedTP = new List<string>();
        List<string> checkedTP = new List<string>();
        List<string> checkedTC = new List<string>();
        List<string> passedTP = new List<string>();
        List<string> passedTC = new List<string>();
        List<string> FailedTC_inTP = new List<string>();
        List<string> passedTC_inTP = new List<string>();
        List<string> deviceNameInDesign = new List<string>();
        List<string> devicesInDesign = new List<string>();

        List<string> checkedTCReport = new List<string>();     
        List<string> passedTCReport = new List<string>();

        ReportDBConnection report_connection = new ReportDBConnection();
        private DBConnection connect = new DBConnection();
        CecSharpClient open_libcec = new CecSharpClient();

        string execution_starttime = string.Empty;
        string execution_endtime = string.Empty;
        string TS_execution_starttime = string.Empty;
        string TS_execution_endtime = string.Empty;
        string TP_execution_starttime = string.Empty;
        string TP_execution_endtime = string.Empty;
        string TC_execution_starttime = string.Empty;
        string TC_execution_endtime = string.Empty;

        string TP_count = string.Empty;
        string Passed_TP_count = string.Empty;
        string Failed_TP_count = string.Empty;
        Int32 BackGround_TP_Count = 0;
        string TC_count = string.Empty;
        string Passed_TC_count = string.Empty;
        string Failed_TC_count = string.Empty;

        string Failed_Loop_Iteration = string.Empty;

        List<string> TP_BGM_Status = new List<string>();
        List<string> TS_BGM_Status = new List<string>();

        string Pass = @"\Images\Pass.png";
        string Fail = @"\Images\Failed.png";
        string progress = @"\Images\Progress.png";
        string Incomplete = @"\Images\Incomplete.png";
        string BackgroundFailure= @"\Images\BackgroundFailure.png";

        string TC_ExecutionStatus = string.Empty;//for Pass/Fail indicatior

        string mstrDesignName = string.Empty;
        string mstrDesignStatus = string.Empty;


        Int32 MailFailedCount = 0;
        Int32 total_tc_count = 0;

		Int32 mstrTotalTestCaseExecuted = 0;
        Int32 mstrTotalTestCasePassed = 0;
        Int32 mstrTotalTestCaseIncomplete = 0;
        Int32 mstrTotalTestCaseFailed = 0;


        Int32 mstrTotalTestCaseExecutedFinal = 0;
        Int32 mstrTotalTestCasePassedFinal = 0;
        Int32 mstrTotalTestCaseIncompleteFinal = 0;
        Int32 mstrTotalTestCaseFailedFinal = 0;


        string mstrBuildVersion = "Not Available";
        string mstrTestPlanName = string.Empty;
        public List<string> Execution_SummaryDict = null;      
        private Int32 dupExecID = 0;
        private string Redeployed_Design = string.Empty;
        //string restoresuccess = string.Empty;
        private string SuiteStatus = string.Empty;
        public ObservableCollection<GetExecutionLoop> lcolExecutionLoop = new ObservableCollection<GetExecutionLoop>();

        int TSpassed = 0, TSfailed = 0, TSincomplete = 0;
        string mstrTestSuitePased = string.Empty;
        string mstrTestSuiteFailed = string.Empty;
        string mstrTestSuiteIncomplete = string.Empty;

        private bool isOkSelected = false;
        private bool isCancelSelected = false;
        private bool isFirmwareOkSelected = false;
        private bool isFirmwareCancelSelected = false;

        private string preferenceQSDInstalledpath = string.Empty;

        Int32 SuiteExecutionUniqueID = 0;
        Int32 PlanExecutionUniqueID = 0;
        Int32 CaseExecutionUniqueID = 0;
        string LoopItearations = "No Loop";
        bool IsTestCaseAvailable = false;

        Test_Execution runnerWindowInstance = null;
        private string coreLogonTokenvalue = string.Empty;
        public string CoreLogonToken
        {
            get { return coreLogonTokenvalue; }
            set { coreLogonTokenvalue = value; }
        }

        private string coreLogonTokenBackupvalue = string.Empty;
        public string CoreLogonToken_Backup
        {
            get { return coreLogonTokenBackupvalue; }
            set { coreLogonTokenBackupvalue = value; }
        }

        private Tuple<bool,string> core_New_FirmwareVersionvalue = new Tuple<bool, string>(true, string.Empty);
        public Tuple<bool, string> core_New_FirmwareVersion
        {
            get { return core_New_FirmwareVersionvalue; }
            set { core_New_FirmwareVersionvalue = value; }
        }

        private Tuple<bool, string> Backup_core_New_FirmwareVersionvalue = new Tuple<bool, string>(true, string.Empty);
        public Tuple<bool, string> Backup_core_New_FirmwareVersion
        {
            get { return Backup_core_New_FirmwareVersionvalue; }
            set { Backup_core_New_FirmwareVersionvalue = value; }
        }

        private string sshPrivatekeyFilePathvalue = string.Empty;
        public string sshPrivatekeyFilePath
        {
            get { return sshPrivatekeyFilePathvalue; }
            set { sshPrivatekeyFilePathvalue = value; }
        }

        public void StartExecutionThread(TreeViewExplorer parentTreeViewExplorerExecutionRootItem,
                                         List<DUT_DeviceItem> parentSelectedDutDeviceItemList,
                                         executionCompleteDelegate ExecutionComplete,
                                         executionMessageBoxDelegate parentExecutionMessageBox,
                                         updateExecutionStatusDelegate parentUpdateExecutionStatus,
                                         AutoResetEvent parentMutex,
                                         ExecutionLoopCountDelegate ParentExecutionLoopCount,
                                         LoopValueDelegate ParentloopValue,
                                         RemainingTimeDelegate ParentRemainingTime,
                                         DurationTypeeDelegate ParentDurationType, Test_Execution test_Execution, List<DUT_DeviceItem> parentselectedExternalDeviceItemList
                                         )
        {
            try
            {
                CultureInfo ci = CultureInfo.CreateSpecificCulture(CultureInfo.CurrentCulture.Name);
                ci.DateTimeFormat.ShortDatePattern = "MM-dd-yyyy";
                Thread.CurrentThread.CurrentCulture = ci;
                autoevent = parentMutex;
                autoevent.WaitOne();

                treeViewExplorerExecutionRootItem = parentTreeViewExplorerExecutionRootItem;

                selectedDutDeviceItemList = parentSelectedDutDeviceItemList;
                selectedExternalDeviceItemList = parentselectedExternalDeviceItemList;

                ExecutionMessageBox = parentExecutionMessageBox;

                UpdateExecutionStatus = parentUpdateExecutionStatus;

                ExecutionLoopCount = ParentExecutionLoopCount;

                loopvalue = ParentloopValue;

                RemainingTime = ParentRemainingTime;

                DurationType = ParentDurationType;

                runnerWindowInstance = test_Execution;

                autoevent.Set();
                autoevent.WaitOne();

                Execute(treeViewExplorerExecutionRootItem, selectedDutDeviceItemList);

                ExecutionComplete("completed");
                if(runnerWindowInstance.MsgAuto)
                {
                    runnerWindowInstance.Dispatcher.Invoke(() =>
                    {
                        runnerWindowInstance.Close();
                    });
                }
               
            }
            catch (Exception ex)
            {
                ExecutionComplete("cancel finished");

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (runnerWindowInstance.MsgAuto)
                {
                    runnerWindowInstance.MsgAuto = false;
                }
            }

        }
        
        bool Execute(TreeViewExplorer SuiteExecution, bool ExeComplete, Int32 EXid, string query, string TypeOfLoop, bool RedeployedDesign, string LoopIteration, string suiteCnt,string LoopType,DateTime InputTime,string TE_BuildVersion, string TSA_BuildVersion)
        {
            try
            {
                SuiteExecution.SummaryAdded = false;
                SuiteExecution.PASS = 0;
                SuiteExecution.FAIL = 0;
                SuiteExecution.EXEC = 0;
                SuiteExecution.INCOM = 0;
                mstrTotalTestCaseExecuted = 0;
                mstrTotalTestCasePassed = 0;
                mstrTotalTestCaseIncomplete = 0;
                mstrTotalTestCaseFailed = 0;
                total_tc_count = 0;
                checkedTP.Clear();
                BackGround_TP_Count = 0;
                TC_ExecutionStatus = string.Empty;
                hasSetPassword = false;

                SuiteExecution.TYPELOOP = TypeOfLoop;
                bool? current;
                if ((((current = SuiteExecution.IsChecked) == true) || ((current = SuiteExecution.IsChecked) == null)) && ((current = SuiteExecution.IsChecked) != false))
                {
                    SuiteExecution.IsImageVisibility = Visibility.Visible;
                    SuiteExecution.TCBackGroundResult.Clear();
                    UpdateExecuteStatusInformation(SuiteExecution, progress);
                    ExeComplete = true;
                    TS_execution_starttime = DateTime.Now.ToString();
                    checkedTestsuites.Add(SuiteExecution);
                    //writeinqsysfile("");
                    //writeinqsysfile("Testsuite Name :" + SuiteExecution.ItemName);
                    foreach(TreeViewExplorer tp in SuiteExecution.Children)
                    {
                        if(tp.IsChecked==true || tp.IsChecked==null)
                        {
                            foreach(TreeViewExplorer tc in tp.Children)
                            {
                                if(tc.IsChecked==true)
                                {
                                    tc.UpdatestatusInfo = string.Empty;
                                    tc.IsImageVisibility = Visibility.Collapsed;
                                    tc.TCINCOM = false;
                                }
                            }
                        }
                    }
                    DeviceDiscovery.WriteToLogFile("Execution Started for Test Suite: " + SuiteExecution.ItemName);
                    ////string Date_time_Suite = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                    string Date_time_Suite = suiteCnt;
                    Int64 plantimestamp = 0;
                    SuiteExecutionUniqueID = SuiteExecutionUniqueID + 1;
                    SuiteExecution.EXID = SuiteExecutionUniqueID;


                    if (LoopType == "Duration" || LoopType == "Number Of Times")
                        Resettings(SuiteExecution.ItemName, Convert.ToInt32(LoopIteration), SuiteExecutionUniqueID);               

                    //TempTestSuiteName
                    query = "Insert into TempSuiteTable values('" + EXid + "','In Progress',@TSName,'" + SuiteExecution.EXEC.ToString() + "','" + SuiteExecution.PASS.ToString() + "','" + SuiteExecution.FAIL.ToString() + "','" + SuiteExecution.INCOM.ToString() + "','Background Verification Incomplete',' " + DateTime.Now.ToString() + "','" + string.Empty + "','"+ TSA_BuildVersion + "','" + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "--" + Environment.OSVersion.ToString() + "','" + DateTime.Today.ToString() + "','" + string.Empty + "','" + string.Empty + "','" + LoopIteration + "','" + SuiteExecution.EXID + "')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                    PlanExecutionUniqueID = 0;
                    foreach (TreeViewExplorer PlanExecution in SuiteExecution.Children)
                    {
                        bool? current3;
                        if ((((current3 = PlanExecution.IsChecked) == true) || ((current3 = PlanExecution.IsChecked) == null)) && (current3 = PlanExecution.IsChecked) != false)
                        {
                            plantimestamp += 1;
                            PlanExecution.INCOM = 0;
                            if(LoopType=="Duration")
                            {
                                if (InputTime >= DateTime.Now)
                                {
                                    bool planstatus;
                                    
                                   if(!PlanExecution.HasDesign)
                                        planstatus = ExecuteIndividualScriptTestPlan(PlanExecution, EXid, SuiteExecution.ItemKey, SuiteExecution.ItemName, RedeployedDesign, Date_time_Suite, LoopIteration, plantimestamp.ToString(), SuiteExecution.EXID, LoopType, InputTime, TE_BuildVersion,TSA_BuildVersion);
                                   else
                                        planstatus = ExecuteIndividualTestPlan(PlanExecution, EXid, SuiteExecution.ItemKey, SuiteExecution.ItemName, RedeployedDesign, Date_time_Suite, LoopIteration, plantimestamp.ToString(), SuiteExecution.EXID, LoopType, InputTime, TE_BuildVersion, TSA_BuildVersion);
                                    if (planstatus==true)
                                    {
                                        loopvalue(string.Empty);
                                        ExecutionLoopCount("Waiting for execution completion");
                                        //ExecutionMessage = "Waiting for execution completion";
                                        //ExecutionLoopCount(ExecutionMessage);
                                        UpdateExecuteStatusInformation(PlanExecution, Incomplete);
                                        UpdateExecuteStatusInformation(PlanExecution.Parent, Incomplete);
                                        PlanExecution.IsImageVisibility = Visibility.Visible;
                                        PlanExecution.Parent.IsImageVisibility = Visibility.Visible;
                                        Failed_TC_count = "Incomplete";
                                        Passed_TC_count= "Incomplete";
                                        query = "Update TempSuiteTable set status='Incomplete',EndTime='"+DateTime.Now.ToString()+ "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        query = "Update TempTestPlanTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',TotalIncompleteTestCase = '" + PlanExecution.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIteration + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.EXID + "'";
                                        // query = "Update TempTestPlanTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIteration + "' and PlanExecutionUniqueID='" + PlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        query = "Update TempExecutionTable set status='Incomplete' where ExecID='" + EXid + "' ";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        //  return false;
                                        ExeComplete = false;
                                    }

                                }
                                else
                                {
                                    loopvalue(string.Empty);
                                    ExecutionLoopCount("Waiting for execution completion");
                                    //ExecutionMessage = "Waiting for execution completion";
                                    //ExecutionLoopCount(ExecutionMessage);
                                    UpdateExecuteStatusInformation(PlanExecution, Incomplete);
                                    UpdateExecuteStatusInformation(PlanExecution.Parent, Incomplete);
                                    PlanExecution.IsImageVisibility = Visibility.Visible;
                                    PlanExecution.Parent.IsImageVisibility = Visibility.Visible;
                                    foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                                    {
                                        if (TestExecution.IsChecked == true)
                                        {
                                            TestExecution.IsImageVisibility = Visibility.Visible;
                                            UpdateExecuteStatusInformation(TestExecution, Incomplete);
                                            PlanExecution.INCOM += 1;
                                            PlanExecution.Parent.INCOM += 1;
                                            treeViewExplorerExecutionRootItem.INCOM += 1;
                                            TestExecution.TCINCOM = true;
                                            TestExecution.ExecutionIncompleteStatus = "Completed";
                                        }
                                    }

                                    if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                                    {
                                        qsyDesignProcess.Kill();
                                    }

                                    Failed_TC_count = "Incomplete";
                                    Passed_TC_count = "Incomplete";

                                    query = "Update TempSuiteTable set  status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',TotalIncompleteTestCase = '" + PlanExecution.Parent.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.Parent.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.Parent.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.Parent.FAIL.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                    //query = "Update TempSuiteTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                    query = "Update TempTestPlanTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',TotalIncompleteTestCase = '" + PlanExecution.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIteration + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.EXID + "'";
                                    //query = "Update TempTestPlanTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='Duration elapsed' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIteration + "' and PlanExecutionUniqueID='" + PlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                    // return false;
                                    ExeComplete = false;
                                }                           

                            }
                            else
                            {
                                if(!PlanExecution.HasDesign)
                                    ExecuteIndividualScriptTestPlan(PlanExecution, EXid, SuiteExecution.ItemKey, SuiteExecution.ItemName, RedeployedDesign, Date_time_Suite, LoopIteration, plantimestamp.ToString(), SuiteExecution.EXID, LoopType, InputTime, TE_BuildVersion,TSA_BuildVersion);
                                else
                                    ExecuteIndividualTestPlan(PlanExecution, EXid, SuiteExecution.ItemKey, SuiteExecution.ItemName, RedeployedDesign, Date_time_Suite, LoopIteration, plantimestamp.ToString(), SuiteExecution.EXID, LoopType, InputTime, TE_BuildVersion, TSA_BuildVersion);
                            }                          
                        }                    

                        //if (TC_ExecutionStatus == Fail)
                        //{
                        //    UpdateExecuteStatusInformation(SuiteExecution, Fail);
                        //    query = "Update TempSuiteTable set status='Fail' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                        //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        //}


                        if (Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete")
                        {

                            query = "Update TempSuiteTable set status='Incomplete' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            query = "Update TempTestPlanTable set status='Incomplete' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIteration + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.EXID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }

                    }

                    if(SuiteExecution.Children.Count==0)
                    {
                        hasSetPassword = true;
                        IsTestCaseAvailable = true;
                        UpdateExecuteStatusInformation(SuiteExecution, Pass);
                        SuiteExecution.ExecutionIncompleteStatus = "Completed";
                    }

                    DeviceDiscovery.WriteToLogFile("Background Monitoring Ended for Test Suite: " + SuiteExecution.ItemName);

                    TP_count = checkedTP.Count().ToString();
                    Passed_TP_count = passedTP.Count().ToString();
                    Failed_TP_count = (checkedTP.Count() - passedTP.Count()).ToString();

                    if (ExeComplete==true)
                    {
                    if (TP_count != "0")
                    {
                        if (TP_count == Passed_TP_count)
                        {
                            UpdateExecuteStatusInformation(SuiteExecution, Pass);
                            query = "Update TempSuiteTable set status='Pass' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                        else
                        {
                            if (BackGround_TP_Count.ToString() == TP_count)
                            {
                                UpdateExecuteStatusInformation(SuiteExecution, BackgroundFailure);
                            }
                            else
                            {
                                UpdateExecuteStatusInformation(SuiteExecution, Fail);
                            }
                            query = "Update TempSuiteTable set status='Fail' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                    }
                }
                    passedTC_inTP.Clear();
                    FailedTC_inTP.Clear();



                    if (SuiteStatus == "Fail")
                    {
                        UpdateExecuteStatusInformation(SuiteExecution, Fail);
                        query = "Update TempSuiteTable set status='Fail' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                    }

                    string coreinfo = GetCoreInfoFromDesign(checkedTP);
                    string buildversion = GetCoreVersionFromCore(deviceNameInDesign);
                    if(string.IsNullOrEmpty(buildversion))
                    {
                        string TP_buildversion = string.Empty;

                        if (selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0)
                        {
                            var systemDetails = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                            TP_buildversion = systemDetails["FirmwareVersion"];
                        }
                        else
                        {
                            TP_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                        }

                        if (string.IsNullOrEmpty(TP_buildversion))
                        {
                            TP_buildversion = "Not Available";
                        }
                    }
                    mstrBuildVersion = buildversion;

                    TS_execution_endtime = DateTime.Now.ToString();
                    query = "Insert into Testsuite_Report values('" + EXid + "',@TSName, '" + TS_execution_starttime + "', '" + TS_execution_endtime + "',' " + TP_count + "', '" + Passed_TP_count + "', '" + Failed_TP_count + "', '" + TC_count + "', '" + Passed_TC_count + "', '" + Failed_TC_count + "', '" + TSA_BuildVersion + "',@CoreInfo, '" + LoopIteration + "','" + Redeployed_Design + "')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, "@CoreInfo", coreinfo, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                    mstrBuildVersion = buildversion;

                    if (SuiteExecution.Children.Count == 0)
                        query = "Update TempSuiteTable set BackGroundVerification='No Background Verification',EndTime='" + TS_execution_endtime + "', status='Pass' where Execid='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                    else
                        query = "Update TempSuiteTable set EndTime='" + TS_execution_endtime + "' where Execid='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIteration + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";

                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                    query = "Update TempExecutionTable set Build='" + TE_BuildVersion + "' where Execid='" + EXid + "'";
                    tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                    passedTC.Clear();
                    checkedTC.Clear();
                    //checkedTP.Clear();
                    passedTP.Clear();
                    deviceNameInDesign.Clear();
                }

                return ExeComplete;
            }
            catch (Exception ex)
            {
                SuiteExecution.ExecutionIncompleteStatus = "Incomplete";

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15011", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return ExeComplete;
            }
        }

        private string get_qsys_fileversion(string preferencepath)
        {
            try

            {
                string Qsys_fW_version = string.Empty;
                string Productname = string.Empty;

                if (preferencepath != string.Empty)
                {

                    //FileInfo confirm_exename = new FileInfo(preferencepath);
                    //confirm_exename.ge
                    //////confirm_exename.
                    //var versionInfo1 = FileVersionInfo.G (preferencepath);
                    var versionInfo = FileVersionInfo.GetVersionInfo(preferencepath);
                    Productname = versionInfo.ProductName;
                    if ((Productname != null) & (Productname == "Q-SYS"))
                    {
                        if (versionInfo != null)
                            Qsys_fW_version = versionInfo.ProductVersion;

                    }

                }


                //return Qsys_fW_version;


                return Qsys_fW_version;
            }


            catch (Exception ex)
            {

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECXXXXX", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }
        }

        public void TP_Write_logs(List<logitems> core_logwrite, List<logitems> others_logwrite, string Testsuites, string Plans, string Testcase, string Testaction, Int32 EXid, string From_function, string Date_time_Suite, string Qsys_firmware, string rerun, bool isPeripheralQsysyLog, bool isQREM)
        {
            try
            {
                string pathtowrite = string.Empty;
                string testaction_logs = string.Empty;
                string testcase_logs = string.Empty;
                string Execution_ID_logs = string.Empty;
                string Testsuite_logs = string.Empty;
                //string Date_time = string.Empty;
                string testplan_logs = string.Empty;
                string create_header = string.Empty;
                string total_devices = string.Empty;
                string devices_builds = string.Empty;
                List<string> temp_list_build = new List<string>();
                List<string> temp_list_devices = new List<string>();
                string testplan_datetime = string.Empty;
                string testcase_datetime = string.Empty;
                string core_build = string.Empty;
                //Bitmap saveimage = null;

                Dictionary<string, string> coreipaddresslist = new Dictionary<string, string>();
                Dictionary<string, string> otherdeviceiplist = new Dictionary<string, string>();
                //string Qsys_firmware_ok = string.Empty;


                //if (Qsys_firmware!=string.Empty)
                //{
                //    Qsys_firmware_ok = Qsys_firmware;

                ////}
                //Qsys_firmware = string.Empty;

                if ((others_logwrite != null) && (others_logwrite.Count > 0))
                {
                    foreach (logitems build_devicesname in others_logwrite)
                    {
                        if (!temp_list_devices.Contains(build_devicesname.devicenameinDesign))
                        {
                            //temp_list_build.Add(build_devicesname.temp_build);
                            temp_list_devices.Add(build_devicesname.devicenameinDesign);
                            testcase_datetime = build_devicesname.TC_timestamp;
                            testplan_datetime = build_devicesname.TP_timestamp;
                        }

                        if (build_devicesname.Otherips != null && !otherdeviceiplist.Keys.Contains(build_devicesname.Otherips) && build_devicesname.Otherips != "Not Applicable")
                        { otherdeviceiplist.Add(build_devicesname.Otherips, build_devicesname.devicenameinDesign); }
                    }
                }

                if ((core_logwrite != null) && (core_logwrite.Count > 0))
                {
                    foreach (logitems build_devicesname in core_logwrite)
                    {
                        if (!temp_list_devices.Contains(build_devicesname.devicenameinDesign))
                        {
                            //core_build = build_devicesname.temp_build;
                            temp_list_devices.Add(build_devicesname.devicenameinDesign);
                            testcase_datetime = build_devicesname.TC_timestamp;
                            testplan_datetime = build_devicesname.TP_timestamp;
                        }

                        if (build_devicesname.coreipaddress != null && !coreipaddresslist.Keys.Contains(build_devicesname.coreipaddress) & build_devicesname.coreipaddress != "Not Applicable")
                        { coreipaddresslist.Add(build_devicesname.coreipaddress, build_devicesname.devicenameinDesign); }
                    }
                }
                //if (core_build == string.Empty)
                //{
                //    if ((temp_list_build.Count > 0))
                //        if ((temp_list_build[0].ToString() != null) && (temp_list_build[0].ToString() != string.Empty))
                //            core_build = temp_list_build[0].ToString();
                if (isQREM)
                {
                    var systemDetails = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);

                    if(systemDetails.ContainsKey("FirmwareVersion"))
                        devices_builds = systemDetails["FirmwareVersion"];

                    if (string.IsNullOrEmpty(devices_builds) && BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0)
                    {
                        var bakupsystemDetails = GetQREMSystemDetails(BackupselectedCoreSystemSiteID[2]);

                        if (bakupsystemDetails.ContainsKey("FirmwareVersion"))
                            devices_builds = bakupsystemDetails["FirmwareVersion"];                        
                    }
                }
                else
                {
                    if ((selectedCoreIPAddress != "Not Applicable") && (selectedCoreIPAddress != string.Empty))
                    {
                        devices_builds = XmlReadToGetDesignversion(selectedCoreIPAddress);
                    }

                    if (((devices_builds == null) || (devices_builds == string.Empty)) && (backup_selectedCoreIPAddress != "Not Applicable") && (backup_selectedCoreIPAddress != string.Empty))
                    {
                        devices_builds = XmlReadToGetDesignversion(backup_selectedCoreIPAddress);

                        if ((devices_builds == null))
                            devices_builds = string.Empty;
                    }
                }

                if ((others_logwrite != null) || (core_logwrite != null))
                {
                    if (((others_logwrite != null)&&(others_logwrite.Count > 0)) || ((core_logwrite != null)&&(core_logwrite.Count > 0)))
                    {
                        total_devices = string.Join(",", temp_list_devices.ToArray());


                        if (!Directory.Exists(QatConstants.QATServerPath + "\\Logs"))
                        {
                            Directory.CreateDirectory(QatConstants.QATServerPath + "\\Logs");
                        }

                        Execution_ID_logs = QatConstants.QATServerPath + "\\Logs" + "\\" + EXid.ToString();

                        if (!Directory.Exists(Execution_ID_logs))
                        {
                            Directory.CreateDirectory(Execution_ID_logs);
                        }

                        Testsuites = filtername(Testsuites);
                        Testsuite_logs = Execution_ID_logs + "\\" + Testsuites + "_" + Date_time_Suite;

                        if (!Directory.Exists(Testsuite_logs))
                        {
                            Directory.CreateDirectory(Testsuite_logs);
                            string TS = EXid.ToString() + "\\" + Testsuites + "_" + Date_time_Suite;
                            string query = "update TempSuiteTable set TestSuiteLogPath='" + TS + "' where ExecID='" + EXid + "' and Testsuitename=@TSName";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuites, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }

                        Plans = filtername(Plans);
                        if (Qsys_firmware != string.Empty)
                        {
                            testplan_logs = Execution_ID_logs + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime + "_" + Qsys_firmware;
                        }
                        else
                        {
                            testplan_logs = Execution_ID_logs + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime;
                        }

                        if (!Directory.Exists(testplan_logs))
                        {
                            Directory.CreateDirectory(testplan_logs);
                            string TP;
                            if (Qsys_firmware != string.Empty)
                            {
                                TP = EXid.ToString() + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime + "_" + Qsys_firmware;
                            }
                            else
                            {
                                TP = EXid.ToString() + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime;
                            }

                            string query = "update TempTestPlanTable set TestPlanLogPath='" + TP + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuites, "@TPName", Plans, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }

                        if (((From_function == "test_case") | (From_function == "LogVerification") | (From_function == "Background_LogVerification_start") | (From_function == "Background_LogVerification_end")) & (Testcase != string.Empty))
                        {
                            Testcase = filtername(Testcase);
                            testcase_logs = testplan_logs + "\\" + Testcase + "_" + testcase_datetime;
                            if (!Directory.Exists(testcase_logs))
                            {
                                Directory.CreateDirectory(testcase_logs);
                                string TC = string.Empty;
                                if (Qsys_firmware != string.Empty)
                                {
                                    TC = EXid.ToString() + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime + "_" + Qsys_firmware + "\\" + Testcase + "_" + testcase_datetime;
                                }
                                else
                                {
                                    TC = EXid.ToString() + "\\" + Testsuites + "_" + Date_time_Suite + "\\" + Plans + "_" + testplan_datetime + "\\" + Testcase + "_" + testcase_datetime;
                                }

                                string query = "update TempTestCaseTable set TestCaseLogPath='" + TC + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuites, "@TPName", Plans, "@TCName", Testcase, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            }

                            if ((Testaction != string.Empty) & ((From_function == "LogVerification") | (From_function == "test_case")))
                            {
                                Testaction = filtername(Testaction);
                                testaction_logs = testcase_logs + "\\" + rerun + Testaction;
                                if (!Directory.Exists(testaction_logs))
                                {
                                    Directory.CreateDirectory(testaction_logs);
                                }

                                if (From_function == "LogVerification")
                                {
                                    testaction_logs = testaction_logs + "\\" + From_function;
                                    if (!Directory.Exists(testaction_logs))
                                    {
                                        Directory.CreateDirectory(testaction_logs);
                                    }
                                }

                                //if (From_function == "Background_LogVerification_start")
                                //{
                                //    testaction_logs = testcase_logs + "\\" + From_function;
                                //    if (!Directory.Exists(testaction_logs))
                                //    {
                                //        Directory.CreateDirectory(testaction_logs);

                                //    }
                                //}
                                //if (From_function == "Background_LogVerification_end")
                                //{
                                //    testaction_logs = testcase_logs + "\\" + From_function;
                                //    if (!Directory.Exists(testaction_logs))
                                //    {
                                //        Directory.CreateDirectory(testaction_logs);

                                //    }
                                //}
                            }

                            if (From_function == "Background_LogVerification_start")
                            {

                                testaction_logs = testcase_logs + "\\" + "BM_start" + "\\" + "Logverification";
                                if (!Directory.Exists(testaction_logs))
                                {
                                    Directory.CreateDirectory(testaction_logs);
                                }
                            }
                            else if (From_function == "Background_LogVerification_end")
                            {

                                testaction_logs = testcase_logs + "\\" + "BM_end" + "\\" + "Logverification";
                                if (!Directory.Exists(testaction_logs))
                                {
                                    Directory.CreateDirectory(testaction_logs);
                                }
                            }

                            pathtowrite = testaction_logs;
                        }
                        else { pathtowrite = testplan_logs; }
                    }
                }

                if ((core_logwrite != null) && (core_logwrite.Count > 0))
                {
                    foreach (logitems execution in core_logwrite)
                    {
                        create_header = headerformat(desgnname, devices_builds, total_devices);
                        if (execution.Logtype != null)
                        {
                            if (execution.Logtype == "ilog")
                            {
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                            }
                            if (execution.Logtype == "kernallog")
                            {
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                            }
                            if (execution.Logtype == "siplog")
                            {
                                //write_logs(pathtowrite, execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + ".txt", execution.Fullresponse, create_header);
                            }
                            if (execution.Logtype == "eventlog")
                            {                              
                                string filetype = string.Empty;
                                if (core_New_FirmwareVersion.Item1)
                                    filetype = ".json";
                                else
                                    filetype = ".txt";

                                //write_logs(pathtowrite, execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.status + filetype, execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + filetype, execution.Fullresponse, create_header);
                            }
                            if (execution.Logtype == "Qsyslog")
                            {
                                //write_logs(pathtowrite, execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + ".txt", execution.Fullresponse, create_header);
                            }

                            if (execution.Logtype == "Qsys_UCI")
                            {
                                //write_logs(pathtowrite, execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + ".txt", execution.Fullresponse, create_header);
                            }

                            if (execution.Logtype == "Windows_event_log")
                            {
                                //write_logs(pathtowrite, execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                                if (!string.IsNullOrEmpty(execution.status))
                                    write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                                else
                                    write_logs(pathtowrite, rerun + execution.Logtype + ".txt", execution.Fullresponse, create_header);
                            }
                        }
                    }

                    if ((coreipaddresslist != null) && (coreipaddresslist.Count > 0))
                    {
                        if ((From_function != "LogVerification") & (From_function != "Background_LogVerification_start") & (From_function != "Background_LogVerification_end"))
                        {
                            foreach (var execution in coreipaddresslist)
                            {
                                //if((execution.coreipaddress!=null)& (execution.coreipaddress != string.Empty))
                                //string pathforconfiglog = System.IO.Path.Combine(pathtowrite, "Configlog" + "_" + core_logwrite[0].devicenameinDesign + ".qsyslog");

                                if ((execution.Key != string.Empty) && (execution.Key != "Not Applicable"))
                                {
                                    string pathforconfiglog = System.IO.Path.Combine(pathtowrite, execution.Value + ".qsyslog");

                                    if (isQREM)
                                    {
                                        DownloadFromWebClientactual_reflectCore(selectedCoreSystemSiteID[0], pathforconfiglog, "https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/cores/" + selectedCoreSystemSiteID[1] + "/system_state", DeviceDiscovery.QREM_Token);
                                    }
                                    else
                                    {
                                        if (core_New_FirmwareVersion.Item1)
                                            DownloadFromWebClient(execution.Key, pathforconfiglog, "http://" + execution.Key + "/api/v0/cores/self/system_state", true, string.Empty);
                                        else
                                            DownloadFromWebClient(execution.Key, pathforconfiglog, "http://" + execution.Key + "/cgi-bin/system_state", false, username_default);
                                    }
                                }

                                //WebClient webClient = new WebClient();
                                //webClient.Credentials = new NetworkCredential("admin", applicationPassword);
                                //if(execution !=string.Empty)
                                //    webClient.DownloadFile("http://" + execution + "/cgi-bin/system_state", pathforconfiglog);
                                //webClient.Dispose();
                            }

                            if (isPeripheralQsysyLog)
                            {
                                foreach (var execution in otherdeviceiplist)
                                {
                                    if ((execution.Key != string.Empty) && (execution.Key != "Not Applicable"))
                                    {
                                        string pathforconfiglog = System.IO.Path.Combine(pathtowrite, execution.Value + ".qsyslog");

                                        DownloadFromWebClient(execution.Key, pathforconfiglog, "http://" + execution.Key + "/cgi-bin/system_state", false, username_default);
                                    }
                                }
                            }
                        }
                    }

                   

                }

                if ((others_logwrite != null) && (others_logwrite.Count > 0))
                {
                    foreach (logitems execution in others_logwrite)
                    {
                        create_header = headerformat(desgnname, devices_builds, total_devices);

                        if (execution.Logtype == "ilog")
                        {
                            if (!string.IsNullOrEmpty(execution.status))
                                write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                            else
                                write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                        }
                        if (execution.Logtype == "kernallog")
                        {
                            if (!string.IsNullOrEmpty(execution.status))
                                write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + "_" + execution.status + ".txt", execution.Fullresponse, create_header);
                            else
                                write_logs(pathtowrite, rerun + execution.Logtype + "_" + execution.devicenameinDesign + ".txt", execution.Fullresponse, create_header);
                        }
                    }
                }

                if (From_function == "test_plan")
                {
                    string path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + EXid.ToString();
                    string filePath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + EXid.ToString() + @"\CECLog.txt";

                    if (Directory.Exists(path) && Directory.Exists(pathtowrite))
                    {
                        if (File.Exists(filePath))
                        {
                            File.Copy(filePath, pathtowrite + @"\CECLog.txt", true);
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECXXXXX", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public string filtername(string TSTPTC)
        {
            string newTSTPTC_Start = string.Empty;
            string newTSTPTC_end = string.Empty;
            //string Final_TSTPTC = string.Empty;
            try
            {
                if (TSTPTC!=string.Empty)

                {
                   TSTPTC= NeatFileName(TSTPTC);
                   if(TSTPTC.Length>21)
                    {
                        newTSTPTC_Start = TSTPTC.Substring(0, 15);
                        newTSTPTC_end= TSTPTC.Substring(TSTPTC.Length - 5);
                        TSTPTC = newTSTPTC_Start + "~" + newTSTPTC_end;
                    }

                    return TSTPTC;
                }

                return TSTPTC;
            }
            catch(Exception ex)
             {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return TSTPTC;                
            }
        }

        private void DownloadFromWebClient(string execution, string pathforconfiglog, string uriPath, bool newAPImethod, string username)
        {           
            try
            {                   
                 bool check = DownloadFromWebClientactual(execution, pathforconfiglog, uriPath, newAPImethod,username);

                if(!check)
                {
                    string token = string.Empty;
                    var val = Corelogon(execution, applicationPassword, out token);
					/////If primary core, assign new token in CoreLogonToken else if backup core, assign new token CoreLogonToken_Backup
                    if(execution == selectedCoreIPAddress)
                        CoreLogonToken = token;
                    else if(execution ==backup_selectedCoreIPAddress)
                        CoreLogonToken_Backup = token;

                    DownloadFromWebClientactual(execution, pathforconfiglog, uriPath, newAPImethod, username);
                }                
                
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        private bool DownloadFromWebClientactual(string execution, string pathforconfiglog, string uriPath, bool newAPImethod, string username)
        {         
            try
            {
                using (WebClient webClient = new WebClient())
                {
                    if (newAPImethod == true)
                    {
						/////If primary core, use CoreLogonToken else if backup core, use CoreLogonToken_Backup
                        if (execution == selectedCoreIPAddress)
                            webClient.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + CoreLogonToken);
                        else if (execution == backup_selectedCoreIPAddress)
                            webClient.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + CoreLogonToken_Backup);
                    }
                    else
                        webClient.Credentials = new NetworkCredential(username, applicationPassword);                    

                    if (execution != string.Empty)                    
                        webClient.DownloadFile(uriPath, pathforconfiglog);
                    
                    webClient.Dispose();
                }                 
                
                return true;
            }
            catch (Exception ex)
            {
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);

                    if (ex.Message != "Thread was being aborted." && ex.Message != "Unable to connect to the remote server")
                    {
                        DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                        //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }


                    if (ex.Message == "Unable to connect to the remote server")
                    {
                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(execution, selectedDutDeviceItemList);
                        //MessageBox.Show("Exception\n " + deviceName + " Device is not available while Log Verification", "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }

                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                     return false;
                }

                return true;
            }
        }
       
        public string headerformat(string designname, string version, string alldevices)
        {
            string sd = string.Empty;
            
            sd = "################################################################################################################################################" + "\r\n"+ "\r\n"+"Design_Name : " + designname + "\r\n" + "\r\n" + "Devices     : " + alldevices + "\r\n" + "\r\n" + "Firmware    : "+version + "\r\n"+ "\r\n"+ "################################################################################################################################################";
            return sd; 
        }

        public void write_logs(string text,string filename,string response,string header)
        {
            try
            {
                bool emptystringcheck;
                if (emptystringcheck = string.IsNullOrWhiteSpace(response))
                    response = "No new logs received from DUT during this execution";
                string path = System.IO.Path.Combine(text, filename);
                if (!File.Exists(path))
                {
                    using (File.Create(path))
                        File.SetAttributes(path, FileAttributes.Normal);
                    using (StreamWriter sw = File.CreateText(path))
                    {
                        //sw.WriteLine(header);
                        
                        sw.WriteLine(string.Format("{0}\r\n{1}", header,response));
                                               
                    }
                }
              
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15022", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        void Resettings(string suitename, int LoopCount, int testSuiteID)
        {
            try
            {
                foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                {
                    if (Suite.IsChecked == true || Suite.IsChecked == null)
                    {
                        if ((Suite.ItemName == suitename) && (Suite.EXID == testSuiteID))
                        {
                            Suite.ExecutionIncompleteStatus = "Incomplete";
                                Suite.ExecutionStatus = "Pass";
                                Suite.ExecutionBackgroundstart = "Pass";
                                Suite.ExecutionBackgroundend = "Pass";

                                foreach (TreeViewExplorer Plan in Suite.Children)
                                {
                                    Plan.ExecutionIncompleteStatus = "Incomplete";
                                    Plan.ExecutionStatus = "Pass";
                                    Plan.ExecutionBackgroundstart = "Pass";
                                    Plan.ExecutionBackgroundend = "Pass";

                                    foreach (TreeViewExplorer Cases in Plan.Children)
                                    {
                                        Cases.ExecutionIncompleteStatus = "Incomplete";
                                        Cases.ExecutionStatus = "Pass";
                                        Cases.ExecutionBackgroundstart = "Pass";
                                        Cases.ExecutionBackgroundend = "Pass";
                                    }
                                }
                            }
                        //}
                    }

                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15022", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        void Execute(TreeViewExplorer treeViewExplorerExecutionRootItem, List<DUT_DeviceItem> selectedDutDeviceItemList)
        {
            treeViewExplorerExecutionRootItem.PASS = 0;
            treeViewExplorerExecutionRootItem.FAIL = 0;
            treeViewExplorerExecutionRootItem.EXEC = 0;
            treeViewExplorerExecutionRootItem.INCOM = 0;
           
            preferenceQSDInstalledpath = Properties.Settings.Default.Designversion.ToString();
            Int32 mstrTotalTestCaseExecuted = 0;
            Int32 mstrTotalTestCasePassed = 0;
            Int32 mstrTotalTestCaseIncomplete = 0;
            Int32 mstrTotalTestCaseFailed = 0;

            mstrTotalTestCaseExecutedFinal = 0;
            mstrTotalTestCasePassedFinal = 0;
            mstrTotalTestCaseIncompleteFinal = 0;
            mstrTotalTestCaseFailedFinal = 0;

            SuiteExecutionUniqueID = 0;
            PlanExecutionUniqueID = 0;
           
            BackGround_TP_Count = 0;
            Passed_TC_count = string.Empty;
            Failed_TC_count = string.Empty;
       
            MailFailedCount = 0;
            Execution_SummaryDict = new List<string>();
            ExecutionLoopCount(string.Empty);
            //ExecutionMessage = string.Empty;
            //ExecutionLoopCount(ExecutionMessage);
            TP_BGM_Status.Clear();
            TS_BGM_Status.Clear();
            int count = 0;
            DUTcheckedTP.Clear();
            string TypeOfLooping = string.Empty;

            bool threadAbort = false;
            bool ExeComplete = false;
            bool skipDUTandDesigner = true;

            dupExecID = 0;

            TSpassed = 0;
            TSfailed = 0;
            TSincomplete = 0;
            mstrTestSuitePased = string.Empty;
            mstrTestSuiteFailed = string.Empty;
            mstrTestSuiteIncomplete = string.Empty;
            checkedTC.Clear();
            checkedTP.Clear();
            checkedTCReport.Clear();
            passedTCReport.Clear();
            passedTC.Clear();
            passedTP.Clear();
            LoopItearations = "No Loop";
            //DeviceDiscovery.Cancelclick = false;
            TestSuiteCount = 0;
            //ExecutionMessage = string.Empty;
            //ExecutionLoopCount(ExecutionMessage);
            lcolExecutionLoop = new ObservableCollection<GetExecutionLoop>();

            Dictionary<string, string> restoresuccess = new Dictionary<string, string>();
            try
            {
                if (treeViewExplorerExecutionRootItem.DataGridCollection != null)
                {
                    lcolExecutionLoop = treeViewExplorerExecutionRootItem.DataGridCollection;
                }

                string query = string.Empty;
                if (treeViewExplorerExecutionRootItem.Children.Count > 0)
                {
                    loopvalue(string.Empty);
                    foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                    {
                   
                        Suite.IsImageVisibility = Visibility.Collapsed;
                        Suite.UpdatestatusInfo = string.Empty;
                        Suite.ExecutionIncompleteStatus = "Incomplete";
                        Suite.ExecutionStatus = "Pass";
                        Suite.ExecutionBackgroundstart = "Pass";
                        Suite.ExecutionBackgroundend = "Pass";
                        Suite.PASS = 0;
                        Suite.FAIL = 0;
                        Suite.EXEC = 0;
                        Suite.INCOM = 0;
                        if ((Suite.IsChecked == true || Suite.IsChecked == null) && (Suite.IsChecked != false))
                        {
                            count++;
                            Suite.SummaryAdded = false;
                        }

                        foreach (TreeViewExplorer Plan in Suite.Children)
                        {
                            Plan.IsImageVisibility = Visibility.Collapsed;
                            Plan.UpdatestatusInfo = string.Empty;
                            Plan.ExecutionIncompleteStatus = "Incomplete";
                            Plan.ExecutionStatus = "Pass";
                            Plan.ExecutionBackgroundstart = "Pass";
                            Plan.ExecutionBackgroundend = "Pass";
                            Plan.PASS = 0;
                            Plan.FAIL = 0;
                            Plan.EXEC = 0;
                            Plan.INCOM = 0;
                            if ((Plan.IsChecked == true || Plan.IsChecked == null) && (Plan.IsChecked != false) && (skipDUTandDesigner != false))
                            {
                                if (Plan.HasDesign == true)
                                {
                                    skipDUTandDesigner = false;
                                }
                            }

                            foreach (TreeViewExplorer Cases in Plan.Children)
                            {
                                Cases.IsImageVisibility = Visibility.Collapsed;
                                Cases.UpdatestatusInfo = string.Empty;
                                Cases.ExecutionIncompleteStatus = "Incomplete";
                                Cases.ExecutionStatus = "Pass";
                                Cases.ExecutionBackgroundstart = "Pass";
                                Cases.ExecutionBackgroundend = "Pass";
                                Cases.PASS = 0;
                                Cases.FAIL = 0;
                                Cases.EXEC = 0;
                                Cases.INCOM = 0;
                                Cases.TCINCOM = false;
                            }
                        }
                    }

                    if (count == 0)
                    {
                        ExecutionMessageBox("Please select Testsuite for Execution", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                    else if (count > 0)
                    {
                        if ((skipDUTandDesigner)||(preferenceQSDInstalledpath != string.Empty))
                        {
                            
                            if ((skipDUTandDesigner) || (selectedDutDeviceItemList.Count > 0))
                            {
                                string TE_BuildVersion = "Not Available";
                                Int32 EXid = 0;

                                if (!skipDUTandDesigner)
                                {
                                    string exepath = preferenceQSDInstalledpath;
                                    string designerversion = string.Empty;

                                //var ddd = System.IO.Path.GetDirectoryName(versInfo.FileName);
                                System.IO.FileInfo fileinfo = new FileInfo(exepath);

                                string buildInfoFilePath = System.IO.Path.Combine(fileinfo.DirectoryName, "build.info");
                                
                                if (System.IO.File.Exists(buildInfoFilePath))
                                {
                                    using (StreamReader exeBuildVersions = new StreamReader(buildInfoFilePath))
                                    {
                                        designerversion = exeBuildVersions.ReadToEnd().Replace("\n", string.Empty);
                                    }
                                    
                                }
                                else
                                {
                                    var versInfo = FileVersionInfo.GetVersionInfo(exepath);
                                    designerversion = versInfo.FileVersion.Trim();
                                }

                                var warningMessageShow = getCoreNameAndVersion(treeViewExplorerExecutionRootItem, designerversion);
                                    if (warningMessageShow != null)
                                    {
                                        if (warningMessageShow.Item1)
                                        {
                                            string message = "Selected Q-sys Designer's build version(" + designerversion + ") and selected core version are different.\n" + warningMessageShow.Item2 + "\n Do you want to upgrade/downgrade Core to match Q-sys Designer build version ?\n For remote core currently firmware updgrade not supported";
                                            
                                            var messageResult = ExecutionMessageBox(message, "Q-Sys Designer Version Mismatch", MessageBoxButton.YesNo, MessageBoxImage.Warning);

                                            if ((messageResult.Item1 == MessageBoxResult.Yes))
                                            {
                                                isOkSelected = true;
                                                isCancelSelected = false;
                                            }
                                            else if ((messageResult.Item1 == MessageBoxResult.No))
                                            {
                                                isCancelSelected = true;
                                                isOkSelected = false;
                                            }
                                        }
                                        else
                                        {
                                            isCancelSelected = true;
                                            isOkSelected = false;
                                        }
                                    }
                                    else
                                {
                                    isCancelSelected = true;
                                    isOkSelected = false;
                                }
                                //string TE_BuildVersion = "Not Available";
                                var firstCoreVersion = getFirstCoreNameAndVersion(treeViewExplorerExecutionRootItem);

                                if (firstCoreVersion != null)
                                {
                                    if (firstCoreVersion.Item1)
                                    {
                                            TE_BuildVersion = firstCoreVersion.Item2.Trim();
                                        }
                                }
                                var firmwareMessageShow = getFirmwareContainsTestCase(treeViewExplorerExecutionRootItem);
                                if (firmwareMessageShow != null)
                                {
                                        if (firmwareMessageShow.Item1)
                                        {
                                            var messageResult = ExecutionMessageBox("Do you want to QAT to close all Q-Sys Designer windows without saving anything?\n\nSelect No if you want user interface to Q-Sys Designer properly before firmware upgrade/downgrade test. This option will wait for the user interface whenever firmware upgrade/downgrade steps shows up and QAT will never close the manually opened QSD.", "Closing the QSD during Firmware Upgrade/Downgrade", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                                              
                                            if ((messageResult.Item1 == MessageBoxResult.Yes))
                                            {
                                                isFirmwareOkSelected = true;
                                                isFirmwareCancelSelected = false;
                                            }
                                            else if ((messageResult.Item1 == MessageBoxResult.No))
                                            {
                                                isFirmwareCancelSelected = true;
                                                isFirmwareOkSelected = false;
                                            }
                                        }
                                        else
                                        {
                                            isFirmwareCancelSelected = true;
                                            isFirmwareOkSelected = false;
                                        }

                                        if (firmwareMessageShow.Item3.Count > 0)
                                        {
                                            var messageResult = ExecutionMessageBox("The following devices are not available in the network to execute Script Verification\n\t" + string.Join("\n\t", firmwareMessageShow.Item3) + "\nDo you want to continue?", "QAT-Warning", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                                       
                                            if (messageResult.Item1 != MessageBoxResult.Yes)
                                                return;
                                        }
                                }
                                else
                                {
                                    isFirmwareCancelSelected = true;
                                    isFirmwareOkSelected = false;
                                }

                                    if (Properties.Settings.Default.AfterExecutionCompletion == true || Properties.Settings.Default.AfterTestCaseFails == true || Properties.Settings.Default.AutomationPauses == true || Properties.Settings.Default.ApplicationCrashes == true)
                                    {
                                        var messageResult = ExecutionMessageBox("Email notification enabled. Are you sure want to continue sending email?", "Sending email confirmation", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                                        if (messageResult.Item1 == MessageBoxResult.No)
                                        {
                                            Properties.Settings.Default.AfterExecutionCompletion = false;
                                            Properties.Settings.Default.AfterTestCaseFails = false;
                                            Properties.Settings.Default.AutomationPauses = false;
                                            Properties.Settings.Default.ApplicationCrashes = false;
                                        }
                                    }

                                restoreTelnetSettings.Clear();
                                restoreTelnetSettings_blank.Clear();
                                passwordRestoreblank.Clear();
                                passwordRestore.Clear();

                                autoevent.Set();
                                if (runnerWindowInstance.autoevent_Reset_Delay)
                                {
                                    Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                                }
								
                                autoevent.WaitOne();
                                bool chkDevcieNmae = ChkDUTConfigSelection();

                                if (chkDevcieNmae)
                                    return;

                                autoevent.Set();
                                if (runnerWindowInstance.autoevent_Reset_Delay)
                                {
                                    Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                                }
								
                                autoevent.WaitOne();
								
                                bool isSetPassword;
                                bool chkPassword = SetPassword(out isSetPassword);

                                if (!isSetPassword)
                                    return;

                                    EXid = get_ExecutionID(TE_BuildVersion);
                                    dupExecID = EXid;
                                    restoresuccess = redeploy_on_request(treeViewExplorerExecutionRootItem);
                                }
                                else
                                {
                                    EXid = get_ExecutionID(TE_BuildVersion);
                                    dupExecID = EXid;
                                }

                                //restoreTelnetSettings.Clear();
                               
                                Failed_Loop_Iteration = string.Empty;
                                bool IsExecuted = false;
                                int suiteCnt = 0;
                             
                                foreach (TreeViewExplorer SuiteExecution in treeViewExplorerExecutionRootItem.Children)
                                {
                                    string TSA_BuildVersion = "Not Available";
                                    if (SuiteExecution.IsChecked == true || SuiteExecution.IsChecked == null)
                                    {
                                        if (!skipDUTandDesigner)
                                        {
                                            var currenTestsuiteCoresVersion = getcurrentTSCoresNameAndVersion(SuiteExecution);
                                            if (currenTestsuiteCoresVersion != null)
                                            {
                                                if (currenTestsuiteCoresVersion.Item1)
                                                {
                                                    TSA_BuildVersion = currenTestsuiteCoresVersion.Item2.Trim();
                                                }
                                            }
                                        }
                                    }

                                    ExecutionLoopCount(string.Empty);
                                    //ExecutionMessage = string.Empty;
                                    //ExecutionLoopCount(ExecutionMessage);
                                    LoopItearations = "No Loop"; 
                                    suiteCnt += 1;
                                    BackGround_TP_Count = 0;
                                    checkedTP.Clear();
                                    Passed_TC_count = string.Empty;
                                    Failed_TC_count = string.Empty;
                                    IsTestCaseAvailable = false;
                                    DurationType(string.Empty);
                                    //MailFailedCount = 0;

                                    //// restore check cores
                                    //if (Properties.Settings.Default.Restorecheckbox.ToString() == "true")
                                    //{
                                    //restoresuccess = redeploy_on_request(treeViewExplorerExecutionRootItem);
                                    //}


                                    SuiteStatus = string.Empty;                                                    
                                    IsExecuted = false;
                                    if (lcolExecutionLoop != null && lcolExecutionLoop.Count > 0)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Loop Execution Values Count: " + lcolExecutionLoop.Count);
                                        foreach (var items in lcolExecutionLoop)
                                        {
                                            if (SuiteExecution.IsChecked == true || SuiteExecution.IsChecked == null)
                                            {
                                                if (treeViewExplorerExecutionRootItem.ExecutionDelay != null && treeViewExplorerExecutionRootItem.ExecutionDelay != string.Empty)
                                                {
                                                    if (items.TestSuiteName == SuiteExecution.ItemName)
                                                        SuiteExecuteDelay(treeViewExplorerExecutionRootItem.ExecutionDelay, treeViewExplorerExecutionRootItem.ExecutionDelayTime);
                                                }


                                                if (items.TestSuiteName == SuiteExecution.ItemName)
                                                {
                                                    IsExecuted = true;
                                                    DeviceDiscovery.WriteToLogFile("Loop Execution TestSuite Name: " + SuiteExecution.ItemName);
                                                    loopvalue(string.Empty);
                                                    int textboxValue = 0;
                                                    string comboboxvalue = string.Empty;
                                                    if (items.TypeOfLoopOption == string.Empty)
                                                    {
                                                        
                                                        //TempExecutionTable
                                                        query = "Update TempExecutionTable set status='In Progress' where ExecID='" + EXid + "'";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                        int FailedCount = 0;
                                                        SuiteStatus = string.Empty;
                                                        Failed_TC_count = "0";
                                                        //MailFailedCount = 0;
                                                        string NoLoop = "No Loop";
                                                        TypeOfLooping += NoLoop + ",";
                                                        ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop");
                                                        //ExecutionMessage = "Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop";
                                                        //ExecutionLoopCount(ExecutionMessage);
                                                        
                                                        ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, NoLoop, items.blnRedeployedDesign, "No Loop", suiteCnt.ToString(),"No Loop", DateTime.Now, TE_BuildVersion,TSA_BuildVersion);

                                                        if ((Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete") || (TC_count == string.Empty && Passed_TC_count == string.Empty && Failed_TC_count == string.Empty))
                                                        {
                                                            if (TC_count == string.Empty)
                                                                TC_count = "0";
                                                            mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                            mstrTotalTestCasePassed =  0;
                                                            mstrTotalTestCaseFailed =  0;
                                                            if (IsTestCaseAvailable == false)
                                                                mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                            mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                            mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                            mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                            mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                        }
                                                        else
                                                        {
                                                            if (TC_count == string.Empty)
                                                                TC_count = "0";
                                                            if (Passed_TC_count == string.Empty)
                                                                Passed_TC_count = "0";
                                                            if (Failed_TC_count == string.Empty)
                                                                Failed_TC_count = "0";
                                                            mstrTotalTestCaseExecuted =  Int32.Parse(TC_count);
                                                            mstrTotalTestCasePassed = Int32.Parse(Passed_TC_count);
                                                            mstrTotalTestCaseFailed = Int32.Parse(Failed_TC_count);
                                                            if (IsTestCaseAvailable == false)
                                                                mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                            mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                            mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                            mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                            mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                        }

                                                        Failed_Loop_Iteration += "0" + ",";
                                                        if (Failed_TC_count != "0" && Failed_TC_count != string.Empty)
                                                        {
                                                            FailedCount++;
                                                        }

                                                        if (FailedCount == 0 && ExeComplete == true && hasdesign == false && hasSetPassword == true)
                                                        {
                                                            if (SuiteStatus == "Fail" || SuiteExecution.TCBackGroundResult.Contains("Fail"))
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Pass" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                            SuiteExecution.SummaryAdded = true;
                                                        }
                                                        else
                                                        {
                                                            if (Failed_TC_count == "Incomplete")
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Incomplete" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                            SuiteExecution.SummaryAdded = true;
                                                        }

                                                        //TempSuiteTable
                                                        query = "Update TempSuiteTable set TotalTestCaseExecuted='" + SuiteExecution.EXEC.ToString() + "',TotalPassedTestCase='" + SuiteExecution.PASS.ToString() + "',TotalFailedTestCase='" + SuiteExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + SuiteExecution.INCOM.ToString() + "',Build='" + TSA_BuildVersion + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='No Loop' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                    }

                                                    if (items.TypeOfLoopOption == "Number Of Times")
                                                    {
                                                        loopvalue(string.Empty);
                                                        //TempExecutionTable
                                                        query = "Update TempExecutionTable set status='In Progress' where ExecID='" + EXid + "'";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                        int FailedCount = 0;
                                                        Failed_TC_count = string.Empty;
                                                        textboxValue = Int32.Parse(items.NumOfLoop);
                                                        string NumberOfTimes = "Number Of Times: " + textboxValue;
                                                        DeviceDiscovery.WriteToLogFile("Loop Execution Number Of Times Value: " + NumberOfTimes);
                                                        TypeOfLooping += NumberOfTimes + ",";
                                                       // MailFailedCount = 0;
                                                        for (int i = 1; i <= textboxValue; i++)
                                                        {                                                            
                                                            LoopItearations = i.ToString();
                                                            SuiteStatus = string.Empty;
                                                            Failed_TC_count = "0";
                                                            ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + i.ToString() + " out of " + textboxValue + " times, remaining number of times : " + (textboxValue - i));

                                                            //ExecutionMessage = ("Executing ( " + SuiteExecution.ItemName + " ) loop : " + i.ToString() + " out of " + textboxValue + " times, remaining number of times : " + (textboxValue - i));
                                                            //ExecutionLoopCount(ExecutionMessage);
                                                            ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, NumberOfTimes, items.blnRedeployedDesign, i.ToString(), suiteCnt.ToString() + "L" + i.ToString(), "Number Of Times",DateTime.Now, TE_BuildVersion, TSA_BuildVersion);

                                                            if ((Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete") || (TC_count == string.Empty && Passed_TC_count == string.Empty && Failed_TC_count == string.Empty))
                                                            {
                                                                if (TC_count == string.Empty)
                                                                    TC_count = "0";
                                                                mstrTotalTestCaseExecuted =  Int32.Parse(TC_count);
                                                                mstrTotalTestCasePassed =  0;
                                                                mstrTotalTestCaseFailed =  0;
                                                                if (IsTestCaseAvailable == false)
                                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                            }
                                                            else
                                                            {
                                                                if (TC_count == string.Empty)
                                                                    TC_count = "0";
                                                                if (Passed_TC_count == string.Empty)
                                                                    Passed_TC_count = "0";
                                                                if (Failed_TC_count == string.Empty)
                                                                    Failed_TC_count = "0";
                                                                mstrTotalTestCaseExecuted =  Int32.Parse(TC_count);
                                                                mstrTotalTestCasePassed =  Int32.Parse(Passed_TC_count);
                                                                mstrTotalTestCaseFailed =  Int32.Parse(Failed_TC_count);
                                                                if (IsTestCaseAvailable == false)
                                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                            }

                                                            if (Failed_TC_count != "0" && Failed_TC_count != string.Empty && Failed_TC_count != "Incomplete")
                                                            {
                                                                FailedCount++;
                                                            }

                                                            //TempSuiteTable
                                                            query = "Update TempSuiteTable set TotalTestCaseExecuted='" + SuiteExecution.EXEC.ToString() + "',TotalPassedTestCase='" + SuiteExecution.PASS.ToString() + "',TotalFailedTestCase='" + SuiteExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + SuiteExecution.INCOM.ToString() + "',Build='" + TSA_BuildVersion + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + i.ToString() + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        }

                                                        if (textboxValue == 0)
                                                        {
                                                            Failed_TC_count = "0";
                                                            ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + 0 + " out of " + textboxValue + " times");

                                                            //ExecutionMessage = "Executing ( " + SuiteExecution.ItemName + " ) loop : " + 0 + " out of " + textboxValue + " times";
                                                            //ExecutionLoopCount(ExecutionMessage);
                                                            ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, NumberOfTimes, items.blnRedeployedDesign, "0", suiteCnt.ToString(),"Number Of Times", DateTime.Now, TE_BuildVersion, TSA_BuildVersion);
                                                            if (Failed_TC_count != "0" && Failed_TC_count != string.Empty)
                                                            {
                                                                FailedCount++;
                                                            }
                                                        }

                                                        Failed_Loop_Iteration += FailedCount + ",";
                                                        int passcount = 0;
                                                        if (FailedCount == 0 && ExeComplete == true && hasdesign == false && hasSetPassword == true)
                                                        {
                                                            passcount = textboxValue - FailedCount;
                                                            if (SuiteStatus == "Fail" || SuiteExecution.TCBackGroundResult.Contains("Fail"))
                                                                //Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + FailedCount + "*" + NumberOfTimes + "*" + "Failed");
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Pass" + "*" + passcount + "*" + NumberOfTimes + "*" + "Passed");
                                                            SuiteExecution.SummaryAdded = true;
                                                        }
                                                        else
                                                        {
                                                            if (Failed_TC_count == "Incomplete")
                                                            {
                                                                int Incomplete = FailedCount - passcount;
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Incomplete" + "*" + Incomplete + "*" + NumberOfTimes + "*" + "Incomplete");
                                                            }
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + FailedCount + "*" + NumberOfTimes + "*" + "Failed");

                                                            SuiteExecution.SummaryAdded = true;
                                                        }                                                     
                                                    }

                                                    if (items.TypeOfLoopOption == "Duration")
                                                    {
                                                        LoopItearations = "No Loop"; 
                                                        //TempExecutionTable
                                                        query = "Update TempExecutionTable set status='In Progress' where ExecID='" + EXid + "'";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                       // MailFailedCount = 0;
                                                        Failed_TC_count = string.Empty;
                                                        //DeviceDiscovery.CurrentTime = DateTime.Now;
                                                        textboxValue = Int32.Parse(items.NumOfLoop);
                                                        comboboxvalue = items.txtDurCmbSelectedValue;
                                                        string Dur = "Duration " + textboxValue + " " + comboboxvalue;
                                                        string Duration = "Duration: " + textboxValue;
                                                        DeviceDiscovery.WriteToLogFile("Loop Execution Duration Value: " + Duration);
                                                        TypeOfLooping += Duration + ",";
                                                        //DeviceDiscovery.InputTime = DeviceDiscovery.CurrentTime;
                                                        DateTime InputTime = DateTime.Now;
                                                        if (comboboxvalue == "Hour")
                                                        {
                                                            InputTime = DateTime.Now.AddHours(textboxValue);
                                                        }

                                                        if (comboboxvalue == "Minute")
                                                        {
                                                            InputTime = DateTime.Now.AddMinutes(textboxValue);

                                                        }

                                                        int DurationCount = 0;
                                                        int FailedCount = 0;
                                                        loopvalue("Duration");

                                                        RemainingTime(InputTime);
                                                        DurationType(comboboxvalue);
                                                        while (InputTime >= DateTime.Now)
                                                        {
                                                           // InputTime = DeviceDiscovery.InputTime;
                                                            SuiteStatus = string.Empty;
                                                            DurationCount++;
                                                            LoopItearations = DurationCount.ToString();
                                                            Failed_TC_count = "0";

                                                            if (comboboxvalue == "Minute")
                                                            {
                                                                ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + Dur + ", remaining duration : ");
                                                                //ExecutionMessage = ("Executing ( " + SuiteExecution.ItemName + " ) loop : " + Dur + ", remaining duration : ");
                                                                //ExecutionLoopCount(ExecutionMessage);
                                                            }

                                                            if (comboboxvalue == "Hour")
                                                            {
                                                                ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + Dur + ", remaining duration : ");
                                                                //ExecutionMessage = ("Executing ( " + SuiteExecution.ItemName + " ) loop : " + Dur + ", remaining duration : ");
                                                                //ExecutionLoopCount(ExecutionMessage);
                                                            }
                                                            
                                                            ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, Duration, items.blnRedeployedDesign, DurationCount.ToString(), suiteCnt.ToString() + "L" + DurationCount.ToString(), "Duration", InputTime, TE_BuildVersion, TSA_BuildVersion);


                                                            if ((Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete") || (TC_count == string.Empty && Passed_TC_count == string.Empty && Failed_TC_count == string.Empty))
                                                            {
                                                                if (TC_count == string.Empty)
                                                                    TC_count = "0";
                                                                mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                                mstrTotalTestCasePassed = 0;
                                                                mstrTotalTestCaseFailed = 0;
                                                                if (IsTestCaseAvailable == false)
                                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;


                                                            }
                                                            else
                                                            {
                                                                if (TC_count == string.Empty)
                                                                    TC_count = "0";
                                                                if (Passed_TC_count == string.Empty)
                                                                    Passed_TC_count = "0";
                                                                if (Failed_TC_count == string.Empty)
                                                                    Failed_TC_count = "0";
                                                                mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                                mstrTotalTestCasePassed = Int32.Parse(Passed_TC_count);
                                                                mstrTotalTestCaseFailed = Int32.Parse(Failed_TC_count);
                                                                if (IsTestCaseAvailable == false)
                                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;


                                                               
                                                            }

                                                            if (Failed_TC_count != "0" && Failed_TC_count != string.Empty && Failed_TC_count != "Incomplete")
                                                            {
                                                                FailedCount++;
                                                            }

                                                            //TempSuiteTable
                                                            query = "Update TempSuiteTable set TotalTestCaseExecuted='" + SuiteExecution.EXEC.ToString() + "',TotalPassedTestCase='" + SuiteExecution.PASS.ToString() + "',TotalFailedTestCase='" + SuiteExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + SuiteExecution.INCOM.ToString() + "',Build='" + TSA_BuildVersion + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + DurationCount.ToString() + "' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        }

                                                        loopvalue(string.Empty);
                                                        ExecutionLoopCount(string.Empty);
                                                        //ExecutionMessage = string.Empty;
                                                        //ExecutionLoopCount(ExecutionMessage);
                                                                                                                
                                                        //Failed_Loop_Iteration +=  DurationFailedCount.Length.ToString()+ ",";
                                                        Failed_Loop_Iteration += FailedCount + ",";
                                                        int passcount = 0;
                                                        if (FailedCount == 0 && ExeComplete == true && hasdesign == false && hasSetPassword == true)
                                                        {
                                                            passcount = DurationCount - FailedCount;
                                                            if (SuiteStatus == "Fail" || SuiteExecution.TCBackGroundResult.Contains("Fail"))
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + FailedCount + "*" + Dur + "*" + "Failed");
                                                            // Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Pass" + "*" + passcount + "*" + Dur + "*" + "Passed");

                                                            SuiteExecution.SummaryAdded = true;
                                                        }
                                                        else
                                                        {
                                                            if (Failed_TC_count == "Incomplete")
                                                            {
                                                                int Incomplete = FailedCount - passcount;
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Incomplete" + "*" + Incomplete + "*" + Dur + "*" + "Incomplete");
                                                            }
                                                            else
                                                                Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + FailedCount + "*" + Dur + "*" + "Failed");

                                                            SuiteExecution.SummaryAdded = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        if (!IsExecuted)
                                        {
                                            if (SuiteExecution.IsChecked == true || SuiteExecution.IsChecked == null)
                                            {
                                                loopvalue(string.Empty);
                                                LoopItearations = "No Loop";

                                                if (treeViewExplorerExecutionRootItem.ExecutionDelay != null && treeViewExplorerExecutionRootItem.ExecutionDelay != string.Empty)
                                                {
                                                    SuiteExecuteDelay(treeViewExplorerExecutionRootItem.ExecutionDelay, treeViewExplorerExecutionRootItem.ExecutionDelayTime);
                                                }

                                                SuiteStatus = string.Empty;
                                                //TempExecutionTable
                                                query = "Update TempExecutionTable set status='In Progress' where ExecID='" + EXid + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                // MailFailedCount = 0;
                                                int FailedCount = 0;
                                                Failed_TC_count = "0";
                                                string NoLoop = "No Loop";
                                                TypeOfLooping += NoLoop + ",";
                                                ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop");
                                                //ExecutionMessage = ("Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop");
                                                //ExecutionLoopCount(ExecutionMessage);
                                                ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, "No Loop", true, "No Loop", suiteCnt.ToString(), "No Loop", DateTime.Now, TE_BuildVersion, TSA_BuildVersion);

                                                if ((Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete") || (TC_count == string.Empty && Passed_TC_count == string.Empty && Failed_TC_count == string.Empty))
                                                {
                                                    if (TC_count == string.Empty)
                                                        TC_count = "0";
                                                    mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                    mstrTotalTestCasePassed = 0;
                                                    mstrTotalTestCaseFailed = 0;
                                                    if (IsTestCaseAvailable == false)
                                                        mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                    mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                    mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                    mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                    mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                }
                                                else
                                                {
                                                    if (TC_count == string.Empty)
                                                        TC_count = "0";
                                                    if (Passed_TC_count == string.Empty)
                                                        Passed_TC_count = "0";
                                                    if (Failed_TC_count == string.Empty)
                                                        Failed_TC_count = "0";
                                                    mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                    mstrTotalTestCasePassed = Int32.Parse(Passed_TC_count);
                                                    mstrTotalTestCaseFailed = Int32.Parse(Failed_TC_count);
                                                    if (IsTestCaseAvailable == false)
                                                        mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                    mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                    mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                    mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                    mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                                }

                                                Failed_Loop_Iteration += "0" + ",";
                                                if (Failed_TC_count != "0" && Failed_TC_count != string.Empty)
                                                {
                                                    FailedCount++;
                                                }
                                                if (FailedCount == 0 && ExeComplete == true && hasdesign == false && hasSetPassword == true)
                                                {
                                                    if (SuiteStatus == "Fail" || SuiteExecution.TCBackGroundResult.Contains("Fail"))
                                                        Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                    else
                                                        Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Pass" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);

                                                    SuiteExecution.SummaryAdded = true;
                                                }
                                                else
                                                {
                                                    if (Failed_TC_count == "Incomplete")
                                                        Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Incomplete" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                    else
                                                        Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);

                                                    SuiteExecution.SummaryAdded = true;
                                                }

                                                //TempSuiteTable
                                                query = "Update TempSuiteTable set TotalTestCaseExecuted='" + SuiteExecution.EXEC.ToString() + "',TotalPassedTestCase='" + SuiteExecution.PASS.ToString() + "',TotalFailedTestCase='" + SuiteExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + SuiteExecution.INCOM.ToString() + "',Build='" + TSA_BuildVersion + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='No Loop' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (SuiteExecution.IsChecked == true || SuiteExecution.IsChecked == null)
                                        {
                                            loopvalue(string.Empty);
                                            LoopItearations = "No Loop";
                                            if (treeViewExplorerExecutionRootItem.ExecutionDelay != null && treeViewExplorerExecutionRootItem.ExecutionDelay != string.Empty)
                                            {
                                                SuiteExecuteDelay(treeViewExplorerExecutionRootItem.ExecutionDelay, treeViewExplorerExecutionRootItem.ExecutionDelayTime);
                                            }
                                            SuiteStatus = string.Empty;
                                            //TempExecutionTable
                                            query = "Update TempExecutionTable set status='In Progress' where ExecID='" + EXid + "' ";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            //  MailFailedCount = 0;
                                            int FailedCount = 0;
                                            Failed_TC_count = "0";
                                            TypeOfLooping = "No Loop";
                                            ExecutionLoopCount("Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop");
                                            //ExecutionMessage = ("Executing ( " + SuiteExecution.ItemName + " ) loop : " + "No Loop");
                                            //ExecutionLoopCount(ExecutionMessage);
                                            ExeComplete = Execute(SuiteExecution, ExeComplete, EXid, query, "No Loop", true, "No Loop", suiteCnt.ToString(), "No Loop", DateTime.Now, TE_BuildVersion,TSA_BuildVersion);
                                            //Failed_Loop_Iteration += NoLoopFailedCount.Length.ToString() + ",";
                                            if (Failed_TC_count != "0" && Failed_TC_count != string.Empty)
                                            {
                                                FailedCount++;
                                            }
                                            Failed_Loop_Iteration += "0" + ",";
                                            if (FailedCount == 0 && ExeComplete == true && hasdesign == false && hasSetPassword == true)
                                            {
                                                if (SuiteStatus == "Fail" || SuiteExecution.TCBackGroundResult.Contains("Fail"))
                                                    Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                else
                                                    Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Pass" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                SuiteExecution.SummaryAdded = true;
                                            }
                                            else
                                            {
                                                if (Failed_TC_count == "Incomplete")
                                                    Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Incomplete" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                else
                                                    Execution_SummaryDict.Add(SuiteExecution.ItemName + "*" + "Fail" + "*" + string.Empty + "*" + "No Loop" + "*" + string.Empty);
                                                SuiteExecution.SummaryAdded = true;
                                            }
                                            if ((Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete") || (TC_count == string.Empty && Passed_TC_count == string.Empty && Failed_TC_count == string.Empty))
                                            {
                                                if (TC_count == string.Empty)
                                                    TC_count = "0";
                                                mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                mstrTotalTestCasePassed = 0;
                                                mstrTotalTestCaseFailed = 0;
                                                if (IsTestCaseAvailable == false)
                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;
                                            }
                                            else
                                            {
                                                if (TC_count == string.Empty)
                                                    TC_count = "0";
                                                if (Passed_TC_count == string.Empty)
                                                    Passed_TC_count = "0";
                                                if (Failed_TC_count == string.Empty)
                                                    Failed_TC_count = "0";
                                                mstrTotalTestCaseExecuted = Int32.Parse(TC_count);
                                                mstrTotalTestCasePassed = Int32.Parse(Passed_TC_count);
                                                mstrTotalTestCaseFailed = Int32.Parse(Failed_TC_count);
                                                if (IsTestCaseAvailable == false)
                                                    mstrTotalTestCaseIncomplete = mstrTotalTestCaseExecuted - (mstrTotalTestCasePassed + mstrTotalTestCaseFailed);

                                                mstrTotalTestCaseExecutedFinal = mstrTotalTestCaseExecutedFinal + mstrTotalTestCaseExecuted;
                                                mstrTotalTestCasePassedFinal = mstrTotalTestCasePassedFinal + mstrTotalTestCasePassed;
                                                mstrTotalTestCaseFailedFinal = mstrTotalTestCaseFailedFinal + mstrTotalTestCaseFailed;
                                                mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + mstrTotalTestCaseIncomplete;                                             
                                            }

                                            //TempSuiteTable
                                            query = "Update TempSuiteTable set TotalTestCaseExecuted='" + SuiteExecution.EXEC.ToString() + "',TotalPassedTestCase='" + SuiteExecution.PASS.ToString() + "',TotalFailedTestCase='" + SuiteExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + SuiteExecution.INCOM.ToString() + "',Build='" + TSA_BuildVersion + "' where ExecID='" + EXid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='No Loop' and SuiteExecutionUniqueID='" + SuiteExecution.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", SuiteExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            DUTcheckedTP.Clear();
                                            passedTP.Clear();
                                            deviceNameInDesign.Clear();
                                        }
                                    }

                                    SuiteExecution.ExecutionIncompleteStatus = "Completed";
                                }

                                checkedTP.Clear();

                                execution_endtime = DateTime.Now.ToString();
                                query = "Update Executiontable set end_time='" + execution_endtime + "' where ExecutionID='" + EXid + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                if (TypeOfLooping.EndsWith(","))
                                {
                                    TypeOfLooping = TypeOfLooping.TrimEnd().Substring(0, TypeOfLooping.Length - 1);
                                    DeviceDiscovery.WriteToLogFile("TypeOfLooping: " + TypeOfLooping);
                                }

                                query = "Update Executiontable set TypeOfLoop='" + TypeOfLooping + "' where ExecutionID='" + EXid + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                if (Failed_Loop_Iteration.EndsWith(","))
                                {
                                    Failed_Loop_Iteration = Failed_Loop_Iteration.TrimEnd().Substring(0, Failed_Loop_Iteration.Length - 1);
                                    DeviceDiscovery.WriteToLogFile("Failed Loop: " + Failed_Loop_Iteration);
                                }

                                query = "Update Executiontable set Failed_Loop_Info='" + Failed_Loop_Iteration + "' where ExecutionID='" + EXid + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                query = "Update TempExecutionTable set status='Completed',Testsuitename=@TSName,Build='" + TE_BuildVersion + "',TotalTestCaseExecuted='" + treeViewExplorerExecutionRootItem.EXEC.ToString() + "',TotalPassedTestCase='" + treeViewExplorerExecutionRootItem.PASS.ToString() + "',TotalFailedTestCase='" + treeViewExplorerExecutionRootItem.FAIL.ToString() + "',TotalIncompleteTestCase='" + treeViewExplorerExecutionRootItem.INCOM.ToString() + "',Iterations='" + TypeOfLooping + "',Date='" + DateTime.Today.ToString() + "' where ExecID='" + EXid + "'";
                                 //query = "Update TempExecutionTable set status='Completed',Testsuitename=@TSName,Build='" + TE_BuildVersion + "',TotalTestCaseExecuted='" + mstrTotalTestCaseExecutedFinal.ToString() + "',TotalPassedTestCase='" + mstrTotalTestCasePassedFinal.ToString() + "',TotalFailedTestCase='" + mstrTotalTestCaseFailedFinal.ToString() + "',TotalIncompleteTestCase='" + mstrTotalTestCaseIncompleteFinal.ToString() + "',Iterations='" + TypeOfLooping + "',Date='" + DateTime.Today.ToString() + "',Inprogresstime='" + DateTime.Now.ToString() + "' where ExecID='" + EXid + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", WebTestSuiteName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);


                                if (Passed_TC_count == "Incomplete" && Failed_TC_count == "Incomplete")
                                {
                                    query = "Update TempExecutionTable set status='Incomplete' where ExecID='" + EXid + "' ";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                }

                                Executionsummary();

                                if (Properties.Settings.Default.AfterExecutionCompletion == true && Execution_SummaryDict != null && Execution_SummaryDict.Count > 0)
                                    SendEmail("Completed", false, string.Empty, 0, 0, skipDUTandDesigner);
                            }
                            else
                            {
                                ExecutionMessageBox("Select Dut Configuration settings", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                                checkedTC.Clear();
                                checkedTP.Clear();
                                DUTcheckedTP.Clear();
                            }
                        }
                        else
                        {
                            ExecutionMessageBox("Please select designer version in preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        }

                    }
                    else
                    {
                        ExecutionMessageBox("Please add Testsuites for execution", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
                else
                {
                    ExecutionMessageBox("Please add Testsuites for execution", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            catch (Exception ex)
            {
                string query = "Update Executiontable set end_time='" + DateTime.Now.ToString() + "',User_Stopped='Yes' where ExecutionID='" + dupExecID + "'";
                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15011", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                if (ex.Message == "Thread was being aborted.")
                    threadAbort = true;
                try
                {
                    if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                    {
                        qsyDesignProcess.Kill();
                    }

                }
                catch (Exception)
                {

                }

                if ((checkprocess(emulateprocess_designeraction)) && (!emulateprocess_designeraction.HasExited))
                {
                    emulateprocess_designeraction.Kill();
                }
                if (TypeOfLooping.EndsWith(","))
                {
                    TypeOfLooping = TypeOfLooping.TrimEnd().Substring(0, TypeOfLooping.Length - 1);
                    DeviceDiscovery.WriteToLogFile("TypeOfLooping: " + TypeOfLooping);
                }
              



                string str = "Test Cancelled by User";
              


                bool isCancelSelected = false;

                foreach (TreeViewExplorer ts in treeViewExplorerExecutionRootItem.Children)
                {
                    mstrTotalTestCaseIncomplete = 0;
                    if (ts.IsChecked == true || ts.IsChecked == null)
                    {

                        foreach (TreeViewExplorer tp in ts.Children)
                        {
                            if (tp.IsChecked == true || tp.IsChecked == null)
                            {
                                foreach (TreeViewExplorer tc in tp.Children)
                                {
                                    if (tc.IsChecked == true)
                                    {
                                        if (tc.ExecutionIncompleteStatus == "Completed" && tc.UpdatestatusInfo.Contains("Progress"))
                                        {
                                            tc.ExecutionIncompleteStatus = "Incomplete";
                                            tp.ExecutionIncompleteStatus = "Incomplete";
                                        }
                                        if ((tc.ExecutionIncompleteStatus == "Completed" || tc.ExecutionIncompleteStatus == "Incomplete") && tc.UpdatestatusInfo == string.Empty)
                                        {
                                            tc.UpdatestatusInfo = Incomplete;
                                            tp.IsImageVisibility = Visibility.Visible;
                                        }
                                        if (tc.ExecutionIncompleteStatus == "Incomplete")
                                        {
                                            try
                                            {
                                                if (tc.TCINCOM == false)
                                                {
                                                    tp.INCOM += 1;
                                                    ts.INCOM += 1;
                                                    treeViewExplorerExecutionRootItem.INCOM += 1;
                                                    tc.TCINCOM = true;
                                                }

                                                query = "Update TempSuiteTable set TotalIncompleteTestCase = '" + ts.INCOM.ToString() + "',TotalTestCaseExecuted = '" + ts.EXEC.ToString() + "',TotalPassedTestCase='" + ts.PASS.ToString() + "',TotalFailedTestCase='" + ts.FAIL.ToString() + "'where ExecID='" + dupExecID + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopItearations + "' and SuiteExecutionUniqueID='" + ts.EXID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", ts.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                query = "Update TempTestPlanTable set TotalIncompleteTestCase = '" + tp.INCOM.ToString() + "',TotalTestCaseExecuted = '" + tp.EXEC.ToString() + "',TotalPassedTestCase='" + tp.PASS.ToString() + "',TotalFailedTestCase='" + tp.FAIL.ToString() + "'where ExecID='" + dupExecID + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopItearations + "' and PlanExecutionUniqueID='" + tp.EXID + "' and SuiteAlongwithplanandcaseExecid='" + ts.EXID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", ts.ItemName, "@TPName", tp.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                query = "Update TempExecutionTable set TotalIncompleteTestCase='" + treeViewExplorerExecutionRootItem.INCOM.ToString() + "',TotalTestCaseExecuted='" + treeViewExplorerExecutionRootItem.EXEC.ToString() + "',[TotalPassedTestCase]='" + treeViewExplorerExecutionRootItem.PASS.ToString() + "',[TotalFailedTestCase]='" + treeViewExplorerExecutionRootItem.FAIL.ToString() + "',Iterations='" + TypeOfLooping + "' where ExecID='" + dupExecID + "' ";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }
                                            catch (Exception ex1)
                                            {
                                                //MessageBox.Show(ex1.Message);
                                            }


                                            //mstrTotalTestCaseIncomplete = mstrTotalTestCaseIncomplete + 1;
                                            //mstrTotalTestCaseIncompleteFinal = mstrTotalTestCaseIncompleteFinal + 1;

                                            tc.IsImageVisibility = Visibility.Visible;
                                            UpdateExecuteStatusInformation(tc, Incomplete);

                                            if (isCancelSelected == false)
                                            {
                                                query = "Update TempTestCaseTable set status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + str + "' where ExecID='" + dupExecID + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and  CaseExecutionUniqueID='" + tc.EXID + "' and TestCaseLoopIteratios='" + LoopItearations + "' and SuiteAlongwithplanandcaseExecid='" + ts.EXID + "' and CaseAlogPlanExecutionUniqueID='" + tp.EXID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", ts.ItemName, "@TPName", tp.ItemName, "@TCName", tc.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            }
                                        }
                                    }
                                }

                                if (tp.ExecutionIncompleteStatus == "Completed" && tp.UpdatestatusInfo.Contains("Progress"))
                                {
                                    tp.ExecutionIncompleteStatus = "Incomplete";
                                    ts.UpdatestatusInfo = Incomplete;
                                }

                                if (tp.ExecutionIncompleteStatus == "Incomplete")
                                {
                                    tp.IsImageVisibility = Visibility.Visible;
                                    UpdateExecuteStatusInformation(tp, Incomplete);
                                    ts.UpdatestatusInfo = Incomplete;
                                    if (isCancelSelected == false)
                                    {
                                        query = "Update TempTestPlanTable set TotalIncompleteTestCase='" + tp.INCOM.ToString() + "',TotalTestCaseExecuted='" + tp.EXEC.ToString() + "',[TotalPassedTestCase]='" + tp.PASS.ToString() + "',[TotalFailedTestCase]='" + tp.FAIL.ToString() + "',status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + str + "' where ExecID='" + dupExecID + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + tp.EXID + "'  and TestPlanLoopIteratios='" + LoopItearations + "'  and SuiteAlongwithplanandcaseExecid='" + ts.EXID + "'";
                                        //query = "Update TempTestPlanTable set TotalIncompleteTestCase='" + mstrTotalTestCaseIncomplete + "',status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + str + "' where ExecID='" + dupExecID + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + PlanExecutionUniqueID + "' and TestPlanLoopIteratios='" + LoopItearations + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", ts.ItemName, "@TPName", tp.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                    }
                                }

                                if (tp.incompleteStatus == "Incomplete" && tp.incompleteTPID != 0)
                                {
                                    query = "update TempPlanBackground set status='Incomplete' , EndTime='" + DateTime.Now.ToString() + "' where  TempPlanBackground_ID='" + tp.incompleteTPID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                }
                            }
                        }

                        if (ts.ExecutionIncompleteStatus == "Incomplete")
                        {
                            ts.IsImageVisibility = Visibility.Visible;
                            UpdateExecuteStatusInformation(ts, Incomplete);
                            if (!ts.SummaryAdded)
                                Execution_SummaryDict.Add(ts.ItemName + "*" + "Incomplete" + "*" + string.Empty + "*" + "Cancelled" + "*" + string.Empty);

                            if (isCancelSelected == false)
                            {

                                query = "Update TempSuiteTable set TotalIncompleteTestCase='" + ts.INCOM.ToString() + "',TotalTestCaseExecuted='" + ts.EXEC.ToString() + "',[TotalPassedTestCase]='" + ts.PASS.ToString() + "',[TotalFailedTestCase]='" + ts.FAIL.ToString() + "',status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + str + "' where ExecID='" + dupExecID + "' and Testsuitename=@TSName and SuiteExecutionUniqueID='" + ts.EXID + "' and TestSuiteLoopIteratios='" + LoopItearations + "'";
                                //query = "Update TempSuiteTable set TotalIncompleteTestCase='" + mstrTotalTestCaseIncomplete + "',status='Incomplete',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + str + "' where ExecID='" + dupExecID + "' and Testsuitename=@TSName  and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "' and TestSuiteLoopIteratios='" + LoopItearations + "'  ";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", ts.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                isCancelSelected = true;
                            }
                        }

                        else if (ts.ExecutionIncompleteStatus == "Completed" && !ts.SummaryAdded)
                        {
                            if (ts.UpdatestatusInfo.Contains("Fail") || ts.TCBackGroundResult.Contains("Fail"))
                            {
                                Execution_SummaryDict.Add(ts.ItemName + "*" + "Fail" + "*" + "0" + "*" + ts.TYPELOOP + "*" + "Failed");
                            }
                            else if (ts.UpdatestatusInfo.Contains("Incomplete"))
                            {
                                Execution_SummaryDict.Add(ts.ItemName + "*" + "Incomplete" + "*" + string.Empty + "*" + "Cancelled" + "*" + string.Empty);
                            }
                            ts.SummaryAdded = true;
                        }

                        Executionsummary();
                    }

                    if (isCancelSelected == true)
                    {
                        query = "Update TempExecutionTable set status='Incomplete',TotalIncompleteTestCase='" + treeViewExplorerExecutionRootItem.INCOM.ToString() + "',TotalTestCaseExecuted='" + treeViewExplorerExecutionRootItem.EXEC.ToString() + "',[TotalPassedTestCase]='" + treeViewExplorerExecutionRootItem.PASS.ToString() + "',[TotalFailedTestCase]='" + treeViewExplorerExecutionRootItem.FAIL.ToString() + "',Iterations='" + TypeOfLooping + "' where ExecID='" + dupExecID + "' ";
                        // query = "Update TempExecutionTable set status='Incomplete',TotalIncompleteTestCase='" + mstrTotalTestCaseIncompleteFinal + "',Iterations='" + TypeOfLooping + "' where ExecID='" + dupExecID + "' ";
                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                    }
                }

                //privateTest(tblList);
            }
            finally
            {
                string query = "Update TempExecutionTable set EndDateTime='"+ DateTime.Now.ToString() + "' where ExecID='"+ dupExecID + "' ";
                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                
                if(open_libcec != null)
                {
                    open_libcec.Close();
                    open_libcec.SetLogEnable(false, 0);
                }

                List<string> IsDeviceLaunchSucess = new List<string>();
                DurationType(string.Empty);
                if ((restoresuccess != null))
                {
                    string filename = string.Empty;
                    string path = string.Empty;
                    if (restoresuccess.Count > 0)
                    {
                        foreach (KeyValuePair<string, string> entry in restoresuccess)
                        {
                            if ((entry.Key != string.Empty) & (entry.Value != string.Empty))
                            {
                                filename = System.IO.Path.GetFileName(entry.Value);
                                path = System.IO.Path.GetDirectoryName(entry.Value);
                                if ((filename != string.Empty) & (path != string.Empty))
                                {
                                    if (File.Exists(entry.Value))
                                    {
                                        var notavailableDevices = Load_and_Launch_restore(path, filename, entry.Key);
                                        if (notavailableDevices.Item2 != string.Empty)
                                            IsDeviceLaunchSucess.Add(notavailableDevices.Item2);

                                        File.SetAttributes(entry.Value, FileAttributes.Normal);
                                    }
                                }
                            }
                        }

                        if (IsDeviceLaunchSucess.Count > 0)
                            ExecutionMessageBox("Exception\n  " + string.Join("\n  ", IsDeviceLaunchSucess) + "\nDesign restore failed. Reason: Deploy fail or check core is available in network", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                    }

                    if (Directory.Exists(path))
                    {
                        System.IO.DirectoryInfo infodirect = new DirectoryInfo(path);

                        foreach (FileInfo file in infodirect.GetFiles())
                        {
                            file.Delete();
                        }
                    }
                }

                ///Telnet restore for blank
                List<string> IsDeviceNotAvailableTelnetlst = new List<string>();
                List<string> IsDeviceAvailableInNtwrkTelnetlst = new List<string>();

                Dictionary<string, Tuple<bool, string>> firmwareversion_Alldevices_restore = new Dictionary<string, Tuple<bool, string>>();
                foreach (var item in firmwareversion_Alldevices)
                {
                    var isNewver = firmwareVersioncheck(item.Key);
                    firmwareversion_Alldevices_restore.Add(item.Key, new Tuple<bool, string>(isNewver.Item1, isNewver.Item2));
                }
                
                var totalrestoreTelnetSettings = restoreTelnetSettings.Concat(restoreTelnetSettings_blank).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.First().Value);

                foreach (var ipforRestore in totalrestoreTelnetSettings)
                {
                    string strResponse = string.Empty;
                    if (ipforRestore.Key[0] != string.Empty & ipforRestore.Key[0] != "Not Applicable")
                    {
                        Tuple<bool, bool> chkPasswordState = new Tuple<bool, bool>(false, false);
                        bool isNewver = firmwareversion_Alldevices_restore[ipforRestore.Key[0]].Item1;

                        if (isNewver && (ipforRestore.Key[1].ToUpper().Contains("CORE")))
                        {
                            chkPasswordState = RestoreSSH(ipforRestore.Key[0], ipforRestore.Value[1], out strResponse);
                        }
                        else
                        {
                            chkPasswordState = HttpGet("http://" + ipforRestore.Key[0] + "/cgi-bin/access_config?telnet=" + ipforRestore.Value[0].ToString().ToLower() + "&ssh=" + ipforRestore.Value[1].ToString().ToLower(), applicationPassword, "EC15011", ipforRestore.Key[0], firmwareversion_Alldevices_restore[ipforRestore.Key[0]].Item2, out strResponse);
                        }

                        if (!chkPasswordState.Item1 || chkPasswordState.Item2)
                        {
                            string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ipforRestore.Key[0], selectedDutDeviceItemList);
                            bool iscoreprst = IsCorePresent(ipforRestore.Key[0]);

                            if (strResponse == "403" && iscoreprst && !IsDeviceAvailableInNtwrkTelnetlst.Contains(deviceName))
                                IsDeviceAvailableInNtwrkTelnetlst.Add(deviceName);
                            else if (!IsDeviceNotAvailableTelnetlst.Contains(deviceName))
                                IsDeviceNotAvailableTelnetlst.Add(deviceName);
                        }
                    }
                }
				
                if (IsDeviceNotAvailableTelnetlst.Count > 0 && IsDeviceAvailableInNtwrkTelnetlst.Count > 0)
                    ExecutionMessageBox("The following devices are not available in network so telnet/ssh restore will be aborted\n   " + string.Join("\n   ", IsDeviceNotAvailableTelnetlst) + "\nThe following devices password removed, so telnet/ssh restore will be aborted" + string.Join("\n  ", IsDeviceAvailableInNtwrkTelnetlst), "Telnet/ssh Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                else if (IsDeviceNotAvailableTelnetlst.Count > 0)
                    ExecutionMessageBox("The following devices are not available in network so telnet/ssh restore will be aborted\n   " + string.Join("\n   ", IsDeviceNotAvailableTelnetlst), "Telnet/ssh Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                else if (IsDeviceAvailableInNtwrkTelnetlst.Count > 0)
                    ExecutionMessageBox("The following devices password removed, so telnet/ssh restore will be aborted\n   " + string.Join("\n   ", IsDeviceAvailableInNtwrkTelnetlst), "Telnet/ssh Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                

                List<string> IsDeviceNotAvailablelst = new List<string>();
                List<string> IsDeviceAvailableInNtwrk = new List<string>();

                if (isPasswordRestoreblank == true)
                {
                    int i= 0;                                
                    foreach (var item in passwordRestoreblank)
                    {
                        if (item.Key != string.Empty & item.Key != "Not Applicable")
                        { 
                            string strResponse = "";

                            if (item.Key.StartsWith("QREM"))
                            {
                                string[] coredetails = item.Value.Split(';');
                                Tuple<bool, bool> chkPasswordState = DisableAccessControlForReflect(coredetails[1], out strResponse);

                                if (!chkPasswordState.Item1 || chkPasswordState.Item2)
                                {
                                    var iscoreprst = QREM_CoreIsInOnline(coredetails[1]);
                                    
                                    if (strResponse == "403" && iscoreprst.Item1 && !IsDeviceAvailableInNtwrk.Contains(coredetails[0]))
                                        IsDeviceAvailableInNtwrk.Add(coredetails[0]);
                                    else if (!IsDeviceNotAvailablelst.Contains(coredetails[0]))
                                        IsDeviceNotAvailablelst.Add(coredetails[0]);
                                }
                            }
                            else
                            {
                                Tuple<bool, bool> chkPasswordState = new Tuple<bool, bool>(false, false);
                                string getdevicename = XmlReadToGetDeviceName(item.Key);
                                if ((getdevicename == string.Empty) || (netpairnamesblank[i].ToUpper() == getdevicename.ToUpper()))
                                {
                                    bool isNewver = firmwareversion_Alldevices_restore[item.Key].Item1;


                                    if (isNewver && (item.Value.ToUpper().Contains("CORE")))
                                    {
                                        chkPasswordState = DisableAccessControl(item.Key, out strResponse);
                                    }
                                    else
                                    {
								    	////// based on firmwareversion password reset api decided for peripherals
                                       bool useNewAPI = firmwareVersioncheckGeneral(firmwareversion_Alldevices_restore[item.Key].Item2, "fromPeripheralPasswordChange");
                                       if (useNewAPI)
                                           chkPasswordState = HttpPutPeripheral("http://" + item.Key + "/auth/v1/chpwd?user=" + username_default + "&pwd_new=" , item.Key, applicationPassword, out strResponse);
                                       else
                                          chkPasswordState = HttpGet("http://" + item.Key + "/cgi-bin/password_set?password1=&password2=", applicationPassword, "EC15013", item.Key, firmwareversion_Alldevices_restore[item.Key].Item2, out strResponse);

                                    }
                                    if (!chkPasswordState.Item1 || chkPasswordState.Item2)
                                    {
                                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(item.Key, selectedDutDeviceItemList);
                                        bool iscoreprst = IsCorePresent(item.Key);

                                        if (strResponse == "403" && iscoreprst && !IsDeviceAvailableInNtwrk.Contains(deviceName))
                                            IsDeviceAvailableInNtwrk.Add(deviceName);
                                        else if (!IsDeviceNotAvailablelst.Contains(deviceName))
                                            IsDeviceNotAvailablelst.Add(deviceName);
                                    }
                                }
                            }
                        }

                        i++;                      
                    }                   
                }


                /// Password restore 
                if (isPasswordRestore == true)
                {
                    int i = 0;
                    foreach (var item in passwordRestore)
                    {
                        string strResponse = "";

                        if (item.Key.StartsWith("QREM"))
                        {
                            string[] coredetails = item.Value.Split(';');
                            var ispasswordchanged = CheckAccessForPasswordChangeForQREM(coredetails[1], true);

                            if (!ispasswordchanged.Item1 || ispasswordchanged.Item2)
                            {
                                var iscoreprst = QREM_CoreIsInOnline(coredetails[1]);

                                if (strResponse == "403" && iscoreprst.Item1 && !IsDeviceAvailableInNtwrk.Contains(coredetails[0]))
                                    IsDeviceAvailableInNtwrk.Add(coredetails[0]);
                                else if (!IsDeviceNotAvailablelst.Contains(coredetails[0]))
                                    IsDeviceNotAvailablelst.Add(coredetails[0]);
                            }
                        }
                        else
                        {
                            if (item.Key != string.Empty & item.Key != "Not Applicable")
                            {
                                Tuple<bool, bool> chkPasswordState = new Tuple<bool, bool>(false, false);
                                string getdevicename = XmlReadToGetDeviceName(item.Key);
                                if ((getdevicename == string.Empty) || (netpairnames[i].ToUpper() == getdevicename.ToUpper()))
                                {
                                    bool isNewver = firmwareversion_Alldevices_restore[item.Key].Item1;
                                    if (isNewver && (item.Value.ToUpper().Contains("CORE")))
                                    {
                                        chkPasswordState = RestorePassword(item.Key, out strResponse);
                                    }
                                    else
                                    {
									 	////// based on firmwareversion password reset api decided for peripherals
                                         bool useNewAPI = firmwareVersioncheckGeneral(firmwareversion_Alldevices_restore[item.Key].Item2, "fromPeripheralPasswordChange");

                                        if (useNewAPI)
                                           chkPasswordState = HttpPutPeripheral("http://" + item.Key + "/auth/v1/chpwd?user=" + username_default + "&pwd_new=" + Properties.Settings.Default.DevicePassword, item.Key, applicationPassword, out strResponse);
                                       else
                                           chkPasswordState = HttpGet("http://" + item.Key + "/cgi-bin/password_set?password1=" + Properties.Settings.Default.DevicePassword + "&password2=" + Properties.Settings.Default.DevicePassword + "", applicationPassword, "EC15013", item.Key, firmwareversion_Alldevices_restore[item.Key].Item2, out strResponse);
                                    }
                                    if (!chkPasswordState.Item1 || chkPasswordState.Item2)
                                    {
                                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(item.Key, selectedDutDeviceItemList);
                                        bool iscoreprst = IsCorePresent(item.Key);

                                        if (strResponse == "403" && iscoreprst && !IsDeviceAvailableInNtwrk.Contains(deviceName))
                                            IsDeviceAvailableInNtwrk.Add(deviceName);
                                        else if (!IsDeviceNotAvailablelst.Contains(deviceName))
                                            IsDeviceNotAvailablelst.Add(deviceName);
                                    }
                                }
                            }
                        }

                        i++;
                    }                  
                }
				
                if (IsDeviceNotAvailablelst.Count > 0 && IsDeviceAvailableInNtwrk.Count > 0)
                    ExecutionMessageBox("The following devices are not available in network so password restore will be aborted\n   " + string.Join("\n   ", IsDeviceNotAvailablelst) + "\nThe following devices password removed, so password restore will be aborted " + string.Join("\n  ", IsDeviceAvailableInNtwrk), "Password Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                else if (IsDeviceNotAvailablelst.Count > 0)
                    ExecutionMessageBox("The following devices are not available in network so password restore will be aborted\n   " + string.Join("\n   ", IsDeviceNotAvailablelst), "Password Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                else if (IsDeviceAvailableInNtwrk.Count > 0)
                    ExecutionMessageBox("The following devices password removed, so password restore will be aborted\n   " + string.Join("\n   ", IsDeviceAvailableInNtwrk), "Password Restore Warning", MessageBoxButton.OK, MessageBoxImage.Error);
                
                isPasswordRestoreblank = false;
                isPasswordRestore = false;
                passwordRestoreblank.Clear();
                passwordRestore.Clear();
                netpairnamesblank.Clear();
                netpairnames.Clear();
                restoreTelnetSettings_blank.Clear();
                restoreTelnetSettings.Clear();
                IsDeviceNotAvailablelst.Clear();
                IsDeviceNotAvailableTelnetlst.Clear();

                if (TestSuiteCount == 0)
                {

                    foreach (TreeViewExplorer SuiteExecution in treeViewExplorerExecutionRootItem.Children)
                    {

                        if (SuiteExecution.IsChecked == true || SuiteExecution.IsChecked == null && SuiteExecution.IsChecked != false)
                        {
                            TestSuiteCount++;
                        }
                    }

                }
                string localpathdirectory = string.Empty;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    localpathdirectory = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID;
                }
                else
                {
                    localpathdirectory = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID).ToString();
                }
                if ((localpathdirectory != null) && (localpathdirectory != string.Empty) && Directory.Exists(localpathdirectory))
                {
                    System.IO.DirectoryInfo directoryinfo = new DirectoryInfo(localpathdirectory);

                    foreach (FileInfo file in directoryinfo.GetFiles())
                    {
                        file.Attributes &= ~FileAttributes.ReadOnly;
                        file.Delete();
                    }

                    foreach (DirectoryInfo dir in directoryinfo.GetDirectories())
                    {
                        dir.Attributes &= ~FileAttributes.ReadOnly;
                        dir.Delete(true);
                    }
                    Directory.Delete(localpathdirectory);
                }
                
                Executionsummary();
                
                if (count > 0 && selectedDutDeviceItemList.Count > 0 && preferenceQSDInstalledpath != string.Empty && treeViewExplorerExecutionRootItem.Children.Count > 0 && (Execution_SummaryDict != null && Execution_SummaryDict.Count > 0))
                {
                    ExecutionLoopCount(string.Empty);
                    //ExecutionMessage = (string.Empty);
                    //ExecutionLoopCount(ExecutionMessage);
                    string Display = "Execution Completed\n" + "Testsuite Count : " + TestSuiteCount.ToString() + "\n\n" + "Passed" + " [" + TSpassed.ToString() + "] : \n" + mstrTestSuitePased + "\n" + "Failed" + " [" + TSfailed.ToString() + "] :\n" + mstrTestSuiteFailed + "\n" + "Incomplete" + " [" + TSincomplete.ToString() + "] :\n" + mstrTestSuiteIncomplete;
                    ExecutionMessageBox(Display, "Test Suite Execution Summary", MessageBoxButton.OK, MessageBoxImage.None);

                }
                else if ((Execution_SummaryDict != null && Execution_SummaryDict.Count > 0))
                {
                    ExecutionLoopCount(string.Empty);
                    //ExecutionMessage = (string.Empty);
                    //ExecutionLoopCount(ExecutionMessage);
                    string Display = "Execution Failed\n" + "Testsuite Count : " + TestSuiteCount.ToString() + "\n\n" + "Passed" + " [" + TSpassed.ToString() + "] : \n" + mstrTestSuitePased + "\n" + "Failed" + " [" + TSfailed.ToString() + "] :\n" + mstrTestSuiteFailed + "\n" + "Incomplete" + " [" + TSincomplete.ToString() + "] :\n" + mstrTestSuiteIncomplete;
                    ExecutionMessageBox(Display, "Test Suite Execution Summary", MessageBoxButton.OK, MessageBoxImage.None);

                }
                
                isOkSelected = false;
                isCancelSelected = false;
                isFirmwareOkSelected = false;
                isFirmwareCancelSelected = false;
                DeviceDiscovery.WriteToLogFile("Devices password restored successfully:" + Properties.Settings.Default.DevicePassword);
            }
        }

        void privateTest(System.Data.DataTable TStb, System.Data.DataTable TPtb, System.Data.DataTable TCtb, System.Data.DataTable EXtb)
        {
            try
            {
                report_connection.bulkUpdate(TStb, "Update_TestSuiteTable", "@tblTempSuiteTable");
                report_connection.bulkUpdate(TPtb, "Update_TestPlanTable", "@tblTempTestPlanTable");
                report_connection.bulkUpdate(TCtb, "Update_TestCaseTable", "@tblTempTestCaseTable");
                report_connection.bulkUpdate(EXtb, "Update_TestExecutionTable", "@tblTempExecutionTable");

                //report_connection.Report_OpenConnection();
                //for (int i = 0; i < tbl.Rows.Count; i++)
                //{
                //    string query = tbl.Rows[i][0].ToString();
                //    report_connection.Report_SendCommand_Toreceive_summary(query, tbl.Rows[i][1].ToString(), tbl.Rows[i][2].ToString(), tbl.Rows[i][3].ToString(), tbl.Rows[i][4].ToString(), tbl.Rows[i][5].ToString(), tbl.Rows[i][6].ToString(), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                //}
                //report_connection.Report_CloseConnection();
            }
            catch (Exception ex)
            {
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECEmail", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        void DutStatusTimer(object state)
        {
            //  ExecutionLoopCount(DateTime.Now.ToString());
        }

        private void Executionsummary()
        {
            try
            {
                TSpassed = 0;
                TSfailed = 0;
                TSincomplete = 0;
                mstrTestSuitePased = string.Empty;
                mstrTestSuiteFailed = string.Empty;
                mstrTestSuiteIncomplete = string.Empty;
                if (Execution_SummaryDict != null && Execution_SummaryDict.Count > 0)
                {
                    foreach (string d in Execution_SummaryDict)
                    {
                        string[] split = d.Split('*');

                        if (split[1] == "Pass")
                        {
                            TSpassed++;

                            if (split[3] != "No Loop")                            
                                mstrTestSuitePased +=  split[0] + " (" + split[3] + ")\n";                            
                            else                            
                                mstrTestSuitePased +=  split[0] + "\n";                            
                        }
                        else if (split[1] == "Fail")
                        {
                            TSfailed++;

                            if (split[3] != "No Loop")                            
                                mstrTestSuiteFailed +=  split[0] + " (" + split[3] + " - " + split[4] + ":" + split[2] + ")\n";                            
                            else                            
                                mstrTestSuiteFailed +=  split[0] + "\n";                            
                        }
                        else
                        {
                            TSincomplete++;
                            if (split[3] != "No Loop" && split[3] != "Cancelled")                            
                                mstrTestSuiteIncomplete +=  split[0] + " (" + split[3] + ")\n";                            
                            else  if (split[3] == "Cancelled")                            
                                mstrTestSuiteIncomplete +=  split[0] + "\n";                                                
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECEmail", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void windowstatuscheck()
        {
            try
            {
                foreach (Process clsProcess in Process.GetProcesses())
                {
                    if (clsProcess.ProcessName.ToString() == "QSC_Test_Automation")
                    {
                        IntPtr hWnd = clsProcess.MainWindowHandle;
                        if (IsIconic(hWnd))
                        {
                            ShowWindowAsync(hWnd, SW_RESTORE);
                            SetForegroundWindow(clsProcess.MainWindowHandle);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        


       public void SendEmail(string MailSubject, bool Inprogress, string testsuitename, int inprogress_Tp_Key_BGM, int inprogress_Tc_Key_bgm, bool skipDUTandDesigner)
        {
            List<string> splitemailid = new List<string>();
            try
            {
                string Display = string.Empty;
                string chartImagePath = string.Empty;
                string piechart = string.Empty;
                bool isPiechartCreated = false;
                if (Properties.Settings.Default.ReportEmailID.Trim() != null  && Properties.Settings.Default.ReportEmailID.Trim() != string.Empty)
                {
                    MailMessage msg = new MailMessage();
                    SmtpClient client = null;
                    if (Properties.Settings.Default.MailIdSwitch == false)
                    {
                        client = new SmtpClient("smtp-relay.qsc.com");
                        client.Port = 25;
                        client.EnableSsl = false;
                        client.Timeout = 100000;
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.UseDefaultCredentials = false;
                        client.Credentials = new NetworkCredential();                     
                        msg.IsBodyHtml = true;
                        msg.From = new MailAddress("QAT.Auto@qsc.com");
                    }
                    else
                    {
                        client = new SmtpClient("smtp.gmail.com");
                        client.Port = 587;
                        client.EnableSsl = true;
                        client.Timeout = 100000;
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.UseDefaultCredentials = false;
                        client.Credentials = new NetworkCredential("qattestingglory@gmail.com", "jasminqattesting");                     
                        msg.IsBodyHtml = true;
                        msg.From = new MailAddress("qattestingglory@gmail.com");
                    }

                    
                    //msg.To.Add(Properties.Settings.Default.ReportEmailID);

                    //// adding multi recipients
                    string mailid = Properties.Settings.Default.ReportEmailID.Trim();

                    if (mailid.Contains(";"))
                        splitemailid.AddRange(mailid.Split(';'));
                    else
                        splitemailid.Add(mailid);

                    foreach (string email in splitemailid)
                    {
                        if (email.Trim() != string.Empty)
                        {
                            var addr = new System.Net.Mail.MailAddress(email.Trim());
                            if (addr.Address == email.Trim())
                            {
                                msg.To.Add(email.Trim().ToString());
                            }
                        }
                    }

                    //SmtpClient client = new SmtpClient("jasmin-infotech.com");
                    //client.Port = 25;
                    //client.EnableSsl = true;
                    //client.Timeout = 100000;
                    //client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    //client.UseDefaultCredentials = false;
                    //client.Credentials = new NetworkCredential("Sathish.Sabapathi@jasmin-infotech.com", "tamilnadu");
                    //MailMessage msg = new MailMessage();
                    //msg.To.Add(Properties.Settings.Default.ReportEmailID);
                    //msg.From = new MailAddress("Sathish.Sabapathi@jasmin-infotech.com");

                    if (Properties.Settings.Default.ReportEmailSubject != null && Properties.Settings.Default.ReportEmailSubject != string.Empty)
                        msg.Subject = Properties.Settings.Default.ReportEmailSubject + " - " + MailSubject;
                    else
                        msg.Subject = MailSubject;

                    if ((skipDUTandDesigner && treeViewExplorerExecutionRootItem.Children.Count > 0) || (selectedDutDeviceItemList.Count > 0 && preferenceQSDInstalledpath != string.Empty && treeViewExplorerExecutionRootItem.Children.Count > 0))
                    {
                        ExecutionLoopCount(string.Empty);

                        //ExecutionMessage = (string.Empty);
                        //ExecutionLoopCount(ExecutionMessage);
                        var suitesList = GetSuiteListForMailExecutionResult(mstrTestSuitePased, mstrTestSuiteFailed, mstrTestSuiteIncomplete);
                     
                        if (treeViewExplorerExecutionRootItem.EXEC > 0 || treeViewExplorerExecutionRootItem.INCOM > 0)
                        {
                            isPiechartCreated = Create3DPieChart(out chartImagePath);
                            if (isPiechartCreated)                                                        
                                piechart = "<div class=\"piediv\"><img src=cid:PieChart id='img' alt='' width='460px' height='214px'/></div>";                            
                        }

                        Display = "<html><head><style>  body {background-color: #f5f5f5;font-family: Times New Roman;} table { border-collapse: collapse; width: 100%;margin: 0 auto;table-layout: fixed;} td {padding: 8px;text-align: left;word-wrap:break-word} table,td,th {border: 1px solid black;background-color: white;}#customers th {padding-top: 12px;padding-bottom: 12px;text-align: center;background-color: #97c0e1;color: white;}.details{margin: 0 auto;width: 100%;}.details h3{text-decoration: underline;}a{font-size:16px;margin: 12px auto;width: 100%;display:block;} .piediv {width: 100%;}  </style></head><body>"
                                    + piechart + "<div class=\"details\"><h3>Execution Result</h3></n><p>Testsuite Count :" + TestSuiteCount.ToString() + "</p><p>Passed [" + TSpassed.ToString() + "] : " + suitesList.Item1 + "</p></n><p>Failed[" + TSfailed.ToString() + "] : " + suitesList.Item2 + "</p></n><p>Incomplete [" + TSincomplete.ToString() + "] : " + suitesList.Item3 + "</p>";
                      
                        if (Inprogress == true && testsuitename != string.Empty)
                        {
                            Display = Display + "</n><p>Inprogress [1] : " + testsuitename + "</p>";
                        }
                        string tablecontent = Emailreport_TableCreation(dupExecID, Inprogress, MailSubject,  inprogress_Tp_Key_BGM,  inprogress_Tc_Key_bgm);
                        Display = Display + "</div>" + tablecontent;                       
                    }

                    if (Properties.Settings.Default.AddreportLink)
                    {
                        if (QatConstants.SelectedServer.Contains("Sandbox"))
                        {
                            string[] reportLink = QatConstants.Reportpath.Split('?');
                            if (reportLink.Count() > 1)
                            {
                                Display = Display + " <u> <a href =\"" + reportLink[0] + "TestSuite Report.aspx?ExecutionID=" + dupExecID + "&" + reportLink[1] + "\">View detailed Report</a></u>";
                            }
                            else
                            {
                                Display = Display + " <u> <a href =\"" + QatConstants.Reportpath.ToString() + "/TestSuite Report.aspx?ExecutionID=" + dupExecID + "\">View detailed Report</a></u>";
                            }
                        }
                        else
                        {
                            Display = Display + " <u> <a href =\"" + QatConstants.Reportpath.ToString() + "/TestSuite Report.aspx?ExecutionID=" + dupExecID + "\">View detailed Report</a></u>";
                        }
                    }

                    Display = Display + "</body></html>";
                    using (AlternateView AV = AlternateView.CreateAlternateViewFromString(Display, null, MediaTypeNames.Text.Html))
                    {
                        if (isPiechartCreated)
                        {
                            LinkedResource img = new LinkedResource(chartImagePath, MediaTypeNames.Image.Jpeg);
                            img.ContentId = "PieChart";
                          AV.LinkedResources.Add(img);
                        }
                        msg.AlternateViews.Add(AV);

                        msg.BodyEncoding = Encoding.Default;
                        client.Send(msg);
                    }

                    
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECEmail", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public bool Create3DPieChart(out string chartpath)
        {
            chartpath = string.Empty;            
            try
            {
                /*Get file path to save image */
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    chartpath = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID;
                else
                    chartpath = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID).FullName;

                if (!Directory.Exists(chartpath))
                    Directory.CreateDirectory(chartpath);

                chartpath = chartpath + "\\" + "chart_" + DateTime.Now.ToString().Replace(":", ".") + ".jpeg";

                double totalCaseCount = treeViewExplorerExecutionRootItem.INCOM + treeViewExplorerExecutionRootItem.EXEC;

                /*calculate percentage for chart*/
                double passed = (Convert.ToDouble(treeViewExplorerExecutionRootItem.PASS) / totalCaseCount) * 100;
                double failed = (Convert.ToDouble(treeViewExplorerExecutionRootItem.FAIL) / totalCaseCount) * 100;
                double incompleted = (Convert.ToDouble(treeViewExplorerExecutionRootItem.INCOM) / totalCaseCount) * 100;

                /*create chart*/
                Chart chart = new Chart();
                ChartArea chart_Area = chart.ChartAreas.Add("A1");
                Series series1 = chart.Series.Add("S1");
                series1.ChartType = SeriesChartType.Pie;

                /* Assign points for the Series */
                series1.Points.AddXY(1, passed);
                series1.Points.AddXY(2, failed);
                series1.Points.AddXY(3, incompleted);
                series1.Points[0].Color = System.Drawing.Color.Green;
                series1.Points[1].Color = System.Drawing.Color.Red;
                series1.Points[2].Color = System.Drawing.Color.Orange;             
                series1.Points[0].LegendText = "Passed: " + treeViewExplorerExecutionRootItem.PASS ;
                series1.Points[1].LegendText = "Failed: " + treeViewExplorerExecutionRootItem.FAIL;
                series1.Points[2].LegendText = "Incomplete: " + treeViewExplorerExecutionRootItem.INCOM;

                if(Convert.ToInt32(passed) > 0)
                    series1.Points[0].Label = Convert.ToInt32(passed) + "%";
                if(Convert.ToInt32(failed) > 0)
                    series1.Points[1].Label = Convert.ToInt32(failed) + "%";
                if (Convert.ToInt32(incompleted) > 0)
                    series1.Points[2].Label = Convert.ToInt32(incompleted) + "%";
             
                /* Set chart color and other settings */
                chart.BackColor = System.Drawing.Color.AliceBlue;
                chart_Area.BackColor = chart.BackColor;
                chart_Area.Area3DStyle.Enable3D = true;
                chart.BorderlineColor = System.Drawing.Color.Gray;
                chart.BorderlineWidth = 4;
                chart.BorderlineDashStyle = ChartDashStyle.Solid;
                chart.Size = new System.Drawing.Size(460, 214);
                chart.Series["S1"]["PieLabelStyle"] = "Outside";
                chart.Series["S1"]["PieLineColor"] = "Black";
           

                /*Assign AntiAliasing to Graphics style for smooth edges*/
                chart.AntiAliasing = AntiAliasingStyles.Graphics;
                Legend legend = new Legend { Title = "Testcase Summary", TitleFont = new Font("Calibri", 10, System.Drawing.FontStyle.Bold), Alignment = System.Drawing.StringAlignment.Center, Docking = Docking.Right, Name = "Legend1", BorderColor = System.Drawing.Color.Black, BackColor = System.Drawing.Color.White, MaximumAutoSize = 45F, Font = new Font("Calibri", 10, System.Drawing.FontStyle.Regular) };
                chart.Legends.Add(legend);
                chart.SaveImage(chartpath, ChartImageFormat.Jpeg);
                
                if (File.Exists(chartpath))
                    return true;
            }
            catch (Exception ex)
            {           
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
            return false;
        }

        public Tuple<string, string, string> GetSuiteListForMailExecutionResult(string mstrTestSuitePased, string mstrTestSuiteFailed, string mstrTestSuiteIncomplete)
        {
            string testSuitePassed = string.Empty;
            string testSuiteFailed = string.Empty;
            string testSuiteIncomplete = string.Empty;
            try
            {
                var passed = mstrTestSuitePased.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
                testSuitePassed = string.Join(", ", passed);

                var failed = mstrTestSuiteFailed.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
                testSuiteFailed = string.Join(", ", failed);

                var incomplete = mstrTestSuiteIncomplete.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
                testSuiteIncomplete = string.Join(", ", incomplete);

                //if (Execution_SummaryDict != null && Execution_SummaryDict.Count > 0)
                //{
                //    foreach (string suiteItem in Execution_SummaryDict)
                //    {
                //        string[] split = suiteItem.Split('*');

                //        if(split[3].Contains("Duration"))                        
                //            split[3] = split[3].Replace("Duration", "").Trim();

                //        if (split[1] == "Pass")
                //        {
                //            if (split[3] != "No Loop")                            
                //                testSuitePassed += " " + split[0] + " (" + split[3] + "),";                            
                //            else
                //                testSuitePassed += " " + split[0] + ",";                            
                //        }
                //        else if (split[1] == "Fail")
                //        {
                //            if (split[3] != "No Loop")                            
                //                testSuiteFailed += " " + split[0] + " (" + split[3] + " - " + split[4] + " : " + split[2] + "),";                            
                //            else
                //                testSuiteFailed += " " + split[0] + ",";                            
                //        }
                //        else
                //        {
                //            if (split[3] != "No Loop" && split[3] != "Cancelled")                            
                //                testSuiteIncomplete += " " + split[0] + " (" + split[3] + "),";                            
                //            else if (split[3] == "Cancelled")
                //                testSuiteIncomplete += " " + split[0] + ",";                                                
                //        }
                //    }
                //}

                return new Tuple<string, string, string>(testSuitePassed, testSuiteFailed, testSuiteIncomplete);
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<string, string, string>(testSuitePassed, testSuiteFailed, testSuiteIncomplete);
            }        
        }

        public string Emailreport_TableCreation(int exeid, bool inprogress, string MailSubject ,int inprogress_Tp_Key_BGM, int inprogress_Tc_Key_bgm)
        {
            string htmlbody = string.Empty;
            string htmlcontent = string.Empty;
            try
            {
                bool evenrow = false;
                int TestSuiteCount = 0;
                int totalfailureTestsuite = 0;
                List<int> IncomplteTestsuites = new List<int>();
                int suiteMaximumCount = 0, planMaximumCount = 0, caseMaximumCount = 0;
                string inprogressCaseName = string.Empty;
                string inprogressPlanName = string.Empty;
                string inprogressSuiteName = string.Empty;
                string inprogress_remarks = string.Empty;
                string inprogressPlanBulid = "Not Available";
                int inprogress_SuiteId = 0;
                int inprogress_PlanId = 0;
                bool inprogresswrited = false;
                string remarkscell = string.Empty;

                report_connection.Report_CreateConnection_ForTables();
                report_connection.Report_OpenConnection();

                /////Get total testsuite except pass
                string query = "Select Testsuitename,SuiteExecutionUniqueID,status  from TempSuiteTable where Execid = '" + exeid + "' AND status!='Pass'";
                DataTable testSuitetable = Emailreport_tableread(query);
                var suitereader = testSuitetable.AsEnumerable();

                /////Get total incomplete testsuite count
                var incomplete_Suites = testSuitetable.AsEnumerable().Where(x => x.Field<string>("status") == "Incomplete");
                foreach (DataRow incompletesuitereader in incomplete_Suites)
                {
                    IncomplteTestsuites.Add(Convert.ToInt32(incompletesuitereader[1]));
                }
                
                //////reduce Incomplete TS count from failure TS count
                totalfailureTestsuite = testSuitetable.Rows.Count - IncomplteTestsuites.Count;

                /////Get total testplan except pass
                query = "Select Testsuitename,Testplanname,SuiteAlongwithplanandcaseExecid,PlanExecutionUniqueID,status,Remarks,Build from TempTestPlanTable where ExecID='" + exeid + "' AND status!='Pass'";
                DataTable testPlantable = Emailreport_tableread(query);
                /////Get total failed testcase
                query = "Select Testsuitename,Testplanname,Testcasename,SuiteAlongwithplanandcaseExecid,CaseAlogPlanExecutionUniqueID,CaseExecutionUniqueID from TempTestCaseTable where ExecID='" + exeid + "'AND status='Fail'";
                DataTable testCasetable = Emailreport_tableread(query);
                /////Get total failed testcase remarks
                query = "Select Testsuitename,Testplanname,Testcasename,Remarks,SuiteAlongwithplanandcaseExecid,ActionTabTableCaseAlogPlanExecutionUniqueID,CaseActionTabTableExecutionUniqueID,Actual_Value,Expected_Value from TempTestCaseActionTabTable where ExecID='" + exeid + "'AND status='Fail'";
                DataTable remarkstable = Emailreport_tableread(query);

                if (inprogress == true && (MailSubject == "Execution pause notification" || (MailSubject == "Background execution pause notification") || MailSubject == " QSD crash notification" ))
                {
                    //////If inprogress suite available reduce that count from failure testsuite count
                    totalfailureTestsuite = totalfailureTestsuite - 1;

                    if (MailSubject == "Execution pause notification")
                        inprogress_remarks = "<p style=\"color: red;\"> Execution paused </p>";

                    if (MailSubject == " QSD crash notification")
                        inprogress_remarks = "<p style=\"color: red;\"> Application crashed </p>";

                    var inprogress_Suite = testSuitetable.AsEnumerable().Where(x => x.Field<string>("status") == "In Progress");
                    if (inprogress_Suite.AsEnumerable().Count() > 0)
                    {
                        DataRow suiterow_inprogress = inprogress_Suite.AsEnumerable().First();
                        if (suiterow_inprogress[0] != null && suiterow_inprogress[1] != null)
                        {
                            inprogressSuiteName = suiterow_inprogress[0].ToString();
                            inprogress_SuiteId = Convert.ToInt32(suiterow_inprogress[1]);
                        }
                    }

                    var inprogressPlan = testPlantable.AsEnumerable().Where(x => x.Field<string>("status") == "In Progress");
                    if (inprogressPlan.AsEnumerable().Count() > 0)
                    {
                        DataRow planrow_inprogress = inprogressPlan.AsEnumerable().First();
                        if (planrow_inprogress[1] != null && planrow_inprogress[3] != null && planrow_inprogress[6] != null)
                        {
                            inprogressPlanName = planrow_inprogress[1].ToString();
                            inprogress_PlanId = Convert.ToInt32(planrow_inprogress[3]);
                            inprogressPlanBulid = planrow_inprogress[6].ToString();
                        }
                    }

                    //////Get inprogress case details if available
                 

                    query = "Select Testsuitename,Testplanname,Testcasename from TempTestCaseTable where ExecID='" + exeid + "'AND status='In Progress'";
                    DataTable inprogresscasetable = Emailreport_tableread(query);
                     if (inprogresscasetable.Rows.Count == 1)
                            inprogressCaseName = inprogresscasetable.Rows[0][2].ToString();

                    if (inprogressCaseName == null || inprogressCaseName == string.Empty)
                        inprogressCaseName = "Not Applicable";


                    if (MailSubject == "Background execution pause notification")
                    {
                        string columnName = string.Empty;
                        string remarksToAdd = string.Empty;
                        if (inprogress_Tp_Key_BGM > 0)
                        {
                            query = "Select Testplanname,Remarks,BMstartEnd from TempPlanBackgroundTable where ExecID='" + exeid + "' AND TempPlanBG_ID='" + inprogress_Tp_Key_BGM + "' AND status='Fail'";
                            columnName = "BMstartEnd";
                            remarksToAdd = "Execution paused at Testplan Background monitoring ";
                        }
                        else if (inprogress_Tc_Key_bgm > 0)
                        {
                            query = "Select Testplanname,Remarks,Tabname,Testcasename from TempTestCaseActionTabTable where ExecID='" + exeid + "' AND SuiteAlongwithplanandcaseExecid='" + inprogress_SuiteId + "' AND ActionTabTableCaseAlogPlanExecutionUniqueID='" + inprogress_PlanId + "' AND CaseActionTabTableExecutionUniqueID ='" + inprogress_Tc_Key_bgm + "' AND status='Fail' AND (Tabname='BM_START' OR Tabname ='BM_END')";
                            columnName = "Tabname";
                            remarksToAdd = "Execution paused at Testcase Background monitoring ";
                        }
                        
                        DataTable bgmtableplan = Emailreport_tableread(query);
                        var bgm_end = bgmtableplan.AsEnumerable().Where(x => x.Field<string>(columnName).ToUpper() == "BM_END");
                        if (bgm_end.AsEnumerable().Count() > 0)
                        {
                            DataRow bgm_inprogress = bgm_end.AsEnumerable().First();                           
                            inprogressPlanName = bgm_inprogress[0].ToString();
                            inprogress_remarks = "<p style=\"color: red;\">" + remarksToAdd + "End. \nReason: " + bgm_inprogress[1].ToString() + "</p>";  
                            if(inprogress_Tc_Key_bgm>0)
                                inprogressCaseName = bgm_inprogress[3].ToString();
                        }
                        else
                        {
                            var bgm_start = bgmtableplan.AsEnumerable().Where(x => x.Field<string>(columnName).ToUpper() == "BM_START");
                            if (bgm_start.AsEnumerable().Count() > 0)
                            {
                                DataRow bgm_inprogress = bgm_start.AsEnumerable().First();                               
                                inprogressPlanName = bgm_inprogress[0].ToString();
                                inprogress_remarks = "<p style=\"color: red;\">" + remarksToAdd + "Start. \nReason: " + bgm_inprogress[1].ToString()+ "</p>";
                                if (inprogress_Tc_Key_bgm > 0)
                                    inprogressCaseName = bgm_inprogress[3].ToString();
                            }
                        }
                    }
                }

                if (testCasetable.Rows.Count > 50 || testPlantable.Rows.Count > 50 || testSuitetable.Rows.Count > 50)
                    suiteMaximumCount = 5;
                else
                    suiteMaximumCount = testSuitetable.Rows.Count;

                foreach (DataRow suitereaderRow in suitereader)
                {
                    if (suitereaderRow[0] != System.DBNull.Value && suitereaderRow[1] != System.DBNull.Value && suitereaderRow[2] != System.DBNull.Value)
                    {
                        int totalfailureTestplans = 0;
                        List<int> IncomplteTestplans = new List<int>();
                        string Testsuitename_table = suitereaderRow[0].ToString();
                        int testsuiteuniqueid = Convert.ToInt32(suitereaderRow[1]);

                        //////////Get all plans count for current testsuite                    
                        var testplans = testPlantable.AsEnumerable().Where(x => x.Field<int>("SuiteAlongwithplanandcaseExecid") == testsuiteuniqueid);
                        int failedplancount = testplans.Count();

                        /////////subtract incomplete plan counts from failure plan counts   
                        if (testplans.Count() != 0)
                        {
                            var incompleteplans = testplans.Where(x => x.Field<string>("status") == "Incomplete");
                            totalfailureTestplans = testplans.Count() - incompleteplans.Count();
                            foreach (DataRow incompletePlanreader in incompleteplans)
                            {
                                IncomplteTestplans.Add(Convert.ToInt32(incompletePlanreader[3]));
                            }
                            if (suitereaderRow[2].ToString() == "In Progress")
                                totalfailureTestplans = totalfailureTestplans - 1;
                        }

                        if (suiteMaximumCount == 5)
                            planMaximumCount = 5;
                        else
                            planMaximumCount = failedplancount;

                        ////////reading testplan for current testsuite 
                        int plancount = 0;
                        int planrowspan = 0;
                        string testplancontent = string.Empty;

                        foreach (DataRow planreader in testplans)
                        {
                            if (planreader[0] != System.DBNull.Value && planreader[1] != System.DBNull.Value && planreader[2] != System.DBNull.Value && planreader[3] != System.DBNull.Value && planreader[4] != System.DBNull.Value && planreader[6] != System.DBNull.Value)
                            {
                                string testcasecontent = string.Empty;
                                int testplanuniqueid = Convert.ToInt32(planreader[3]);
                                string Testplanname_table = planreader[1].ToString();
                                string build = planreader[6].ToString();

                                //////////Get failed cases count for current testplan                       
                                var failedcases = testCasetable.AsEnumerable().Where(x => x.Field<int>("SuiteAlongwithplanandcaseExecid") == testsuiteuniqueid && x.Field<int>("CaseAlogPlanExecutionUniqueID") == testplanuniqueid);
                                int failedcasecount = failedcases.Count();

                                if (suiteMaximumCount == 5)
                                    caseMaximumCount = 5;
                                else
                                    caseMaximumCount = failedcasecount;

                                /////Get all remarks for current plan
                                var remarksfailedcases = remarkstable.AsEnumerable().Where(x => x.Field<int>("SuiteAlongwithplanandcaseExecid") == testsuiteuniqueid && x.Field<int>("ActionTabTableCaseAlogPlanExecutionUniqueID") == testplanuniqueid);
                                List<string> uniqueRemarks = new List<string>();
                                ////////reading testcase
                                int casecount = 0;
                                int caserowspan = 0;

                                if (failedcasecount > 0)
                                {
                                    foreach (DataRow caseread in failedcases)
                                    {
                                        if (caseread[0] != System.DBNull.Value && caseread[1] != System.DBNull.Value && caseread[2] != System.DBNull.Value && caseread[3] != System.DBNull.Value && caseread[4] != System.DBNull.Value && caseread[5] != System.DBNull.Value /*&& !IncomplteTestsuites.Contains(Convert.ToInt32(caseread[3]))*/)
                                        {
                                            string remarkscontent = string.Empty;
                                            string TestcasenameinTable = caseread[2].ToString();
                                            int testcaseuniqueid = Convert.ToInt32(caseread[5]);

                                            if (casecount == caseMaximumCount - 1 && failedcasecount > caseMaximumCount)
                                                TestcasenameinTable = TestcasenameinTable + "</br><i><b>+" + (failedcasecount - caseMaximumCount).ToString() + " more failure</i></b>";

                                            /////Getremarks for current testcase
                                            var remarkreader = remarksfailedcases.Where(x => x.Field<int>("CaseActionTabTableExecutionUniqueID") == testcaseuniqueid);

                                            bool isRemarksAvailable = false;

                                            int remarkcount = remarkreader.Count();

                                            foreach (DataRow remarkread in remarkreader)
                                            {
                                                bool writenext = false;
                                                string Remarks = string.Empty;
                                                remarkcount--;
                                                if (remarkread[3] != System.DBNull.Value && remarkread[3].ToString()!= string.Empty)
                                                {
                                                    ////if expected value not applicable or empty or null, skip adding expected and measured values(here expected value name changed as remarkread["Actual_Value"])
                                                    if (remarkread["Actual_Value"] != System.DBNull.Value  && remarkread["Actual_Value"].ToString() != "Not Applicable" && remarkread["Actual_Value"].ToString() != string.Empty)
                                                    {
                                                        if(remarkread["Expected_Value"] != System.DBNull.Value && remarkread["Expected_Value"] != string.Empty)
                                                            Remarks = remarkread[3].ToString() + "</br>Expected Value: " + remarkread["Actual_Value"].ToString() + "</br>Measured Value: " + remarkread["Expected_Value"].ToString();
                                                        else
                                                            Remarks = remarkread[3].ToString() + "</br>Expected Value: " + remarkread["Actual_Value"].ToString() + "</br>Measured Value: " + "No Measured value";
                                                    }
                                                    else
                                                    {
                                                        Remarks = remarkread[3].ToString();
                                                    }

                                                    if(remarkreader.Count() - 1 > 0)
                                                        Remarks= Remarks + "</br><i><b>+" + (remarkreader.Count() - 1).ToString() + " more action failed</i></b>";

                                                    if (remarkcount != 0 && uniqueRemarks.Contains(Remarks))
                                                        writenext = true;

                                                    if (!uniqueRemarks.Contains(Remarks))
                                                        uniqueRemarks.Add(Remarks);
                                                }

                                                if (writenext == false && remarkread[0] != System.DBNull.Value && remarkread[1] != System.DBNull.Value && remarkread[2] != System.DBNull.Value && remarkread[3] != System.DBNull.Value && remarkread[3].ToString() != string.Empty && remarkread[4] != System.DBNull.Value && remarkread[5] != System.DBNull.Value && remarkread[6] != System.DBNull.Value)
                                                {
                                                    if (MailSubject == "Background execution pause notification" && testsuiteuniqueid == inprogress_SuiteId && testplanuniqueid == inprogress_PlanId && (!inprogress_remarks.Contains("Execution paused at Testcase Background monitoring Start.")))
                                                    {
                                                        if (inprogress_Tc_Key_bgm > 0 && testcaseuniqueid == inprogress_Tc_Key_bgm)
                                                            Remarks = inprogress_remarks;
                                                        else if (inprogress_Tp_Key_BGM > 0 && casecount == caseMaximumCount - 1)
                                                            Remarks = Remarks + "\n" + inprogress_remarks;

                                                        inprogresswrited = true;
                                                    }

                                                    if (evenrow == true)
                                                        remarkscontent = "<td  style=\" background-color: #f0f3f4\">" + TestcasenameinTable + "</td><td  style=\" background-color: #f0f3f4\">" + Remarks + "</td>";
                                                    else if (evenrow == false)
                                                        remarkscontent = "<td>" + TestcasenameinTable + "</td><td>" + Remarks + "</td>";

                                                    isRemarksAvailable = true;
                                                    break;
                                                }
                                            }

                                            if (isRemarksAvailable == false)
                                            {
                                                string Remarks = "No Remarks available";
                                                if (remarkreader.Count() > 0)
                                                {
                                                    DataRow remarkread = remarkreader.First();
                                                    if (remarkread["Actual_Value"] != System.DBNull.Value && remarkread["Actual_Value"].ToString() != "Not Applicable" && remarkread["Actual_Value"].ToString() != string.Empty)
                                                    {
                                                        if (remarkread["Expected_Value"] != System.DBNull.Value && remarkread["Expected_Value"] != string.Empty)
                                                            Remarks += "</br>Expected Value: " + remarkread["Actual_Value"].ToString() + "</br>Measured Value: " + remarkread["Expected_Value"].ToString();
                                                        else
                                                            Remarks += "</br>Expected Value: " + remarkread["Actual_Value"].ToString() + "</br>Measured Value: " + "No measured value";
                                                    }
                                                }       
                                                
                                                if (evenrow == true)
                                                    remarkscontent = "<td  style=\" background-color: #f0f3f4\">" + TestcasenameinTable + "</td><td  style=\" background-color: #f0f3f4\">" + Remarks + "</td>";
                                                else if (evenrow == false)
                                                    remarkscontent = "<td>" + TestcasenameinTable + "</td><td>" + Remarks + "</td>";
                                            }

                                            if (casecount == 0)
                                                testcasecontent = testcasecontent + remarkscontent + "</tr>";
                                            else
                                                testcasecontent = testcasecontent + "<tr>" + remarkscontent + "</tr>";

                                            /////If incomplete Testplan has failures and added in the table totalfailuretestplan count increased 
                                            if (IncomplteTestplans.Contains(testplanuniqueid))
                                            {
                                                IncomplteTestplans.Remove(testplanuniqueid);
                                                totalfailureTestplans = totalfailureTestplans + 1;
                                            }

                                            casecount = casecount + 1;
                                            caserowspan = caserowspan + 1;
                                            if (casecount == caseMaximumCount)
                                                break;
                                        }
                                    } //////end of case foreach loop                                     
                                }
                                else if (planreader[4].ToString() == "Fail")
                                {
                                    if (planreader[5] != System.DBNull.Value && planreader[5].ToString() != string.Empty)
                                        remarkscell = planreader[5].ToString();
                                    else
                                        remarkscell = "Please check DUT configuration";

                                    if (evenrow == true)
                                        testcasecontent = testcasecontent + "<td  style=\" background-color: #f0f3f4;\">No failed test cases are available</td><td  style=\" background-color: #f0f3f4;\">" + remarkscell + "</td></tr>";
                                    else if (evenrow == false)
                                        testcasecontent = testcasecontent + "<td>No failed test cases are available</td><td>" + remarkscell + "</td></tr>";
                                   
                                    casecount = 1;
                                    caserowspan = 1;
                                }

                                if (inprogress && inprogresswrited == false && planreader[4].ToString() == "In Progress" && (MailSubject == "Execution pause notification" || MailSubject == " QSD crash notification" || MailSubject == "Background execution pause notification"))
                                {
                                    if (casecount > 0)
                                        testcasecontent = testcasecontent + "<tr>";

                                    if (evenrow == true)
                                        testcasecontent = testcasecontent + "<td  style=\" background-color: #f0f3f4;\">" + inprogressCaseName + "</td><td  style=\" background-color: #f0f3f4;\">" + inprogress_remarks + "</td></tr>";
                                    else if (evenrow == false)
                                        testcasecontent = testcasecontent + "<td>" + inprogressCaseName + "</td><td>" + inprogress_remarks + "</td></tr>";

                                    inprogresswrited = true;
                                    casecount = casecount + 1;
                                    caserowspan = caserowspan + 1;
                                }

                                //////If last Testplan add how many more failure
                                if (plancount == planMaximumCount - 1 && totalfailureTestplans > planMaximumCount)
                                    Testplanname_table = Testplanname_table + "</br><i><b>+" + (totalfailureTestplans - planMaximumCount).ToString() + " more failure</i></b>";

                                if (casecount != 0)
                                {
                                    ////plancells added in seperate row except first plan
                                    if (plancount > 0)
                                        testplancontent = testplancontent + "<tr>";

                                    if (evenrow == true)
                                        testplancontent = testplancontent + "<td  style=\" background-color: #f0f3f4\" rowspan=\"" + caserowspan + "\">" + Testplanname_table + "</td><td  style=\" background-color: #f0f3f4\" rowspan=\"" + caserowspan + "\">" + build + "</td>" + testcasecontent;
                                    else if (evenrow == false)
                                        testplancontent = testplancontent + "<td  rowspan=\"" + caserowspan + "\">" + Testplanname_table + "</td><td  rowspan=\"" + caserowspan + "\">"+ build+ "</td>" + testcasecontent;

                                    /////If incomplete Testsuite has failures and added in the table totalfailuretestsuite count increased 
                                    if (IncomplteTestsuites.Contains(testsuiteuniqueid))
                                    {
                                        IncomplteTestsuites.Remove(testsuiteuniqueid);
                                        totalfailureTestsuite = totalfailureTestsuite + 1;
                                    }

                                    plancount = plancount + 1;
                                    planrowspan = planrowspan + caserowspan;
                                }
                            }

                            if (plancount == planMaximumCount)
                                break;
                        } //////end of plan foreach loop    

                        //////If last Testsuite add rest of the failure testsuites count
                        if (TestSuiteCount == suiteMaximumCount - 1 && totalfailureTestsuite > suiteMaximumCount)
                            Testsuitename_table = Testsuitename_table + "</br><i><b>+" + (totalfailureTestsuite - suiteMaximumCount).ToString() + " more failure</i></b>";

                        if (inprogress && inprogresswrited == false && suitereaderRow[2].ToString() == "In Progress" && inprogressPlanName != string.Empty && (MailSubject == "Execution pause notification" || MailSubject == " QSD crash notification" || MailSubject == "Background execution pause notification"))
                        {
                            ////plancells added in seperate row except first plan
                            if (plancount > 0)
                                testplancontent = testplancontent + "<tr>";

                            if (evenrow == true)
                                testplancontent = testplancontent + "<td  style=\" background-color: #f0f3f4\" rowspan=\"1\">" + inprogressPlanName + "</td><td  style=\" background-color: #f0f3f4\" rowspan=\"1\">"+ inprogressPlanBulid + "</td><td  style=\" background-color: #f0f3f4;\">" + inprogressCaseName + "</td><td  style=\" background-color: #f0f3f4;\">" + inprogress_remarks + "</td></tr>";
                            else if (evenrow == false)
                                testplancontent = testplancontent + "<td  rowspan=\"1\">" + inprogressPlanName + "</td><td  rowspan=\"1\">" + inprogressPlanBulid+ "</td><td>" + inprogressCaseName + "</td><td>" + inprogress_remarks + "</td></tr>";

                            plancount = plancount + 1;
                            planrowspan = planrowspan + 1;
                            inprogresswrited = true;
                        }

                        if (plancount != 0)
                        {
                            if (evenrow == true)
                            {
                                htmlbody = htmlbody + "<tr><td  style=\" background-color: #f0f3f4\" rowspan=\"" + planrowspan + "\">" + Testsuitename_table + "</td>" + testplancontent;
                                evenrow = false;
                            }
                            else if (evenrow == false)
                            {
                                htmlbody = htmlbody + "<tr><td  rowspan=\"" + planrowspan + "\">" + Testsuitename_table + "</td>" + testplancontent;
                                evenrow = true;
                            }

                            TestSuiteCount = TestSuiteCount + 1;
                        }

                        if (TestSuiteCount == suiteMaximumCount)
                            break;
                    }
                }

                if (inprogress && inprogresswrited == false && inprogressSuiteName != string.Empty && (MailSubject == "Execution pause notification" || MailSubject == " QSD crash notification" || MailSubject == "Background execution pause notification"))
                {
                    if (evenrow == false)
                        htmlbody = htmlbody + "<tr><td  rowspan=\"1\">" + inprogressSuiteName + "</td>" + "<td  rowspan=\"1\">" + inprogressPlanName + "</td><td  rowspan=\"1\">" + inprogressPlanBulid + "</td><td>" + inprogressCaseName + "</td><td>" + inprogress_remarks + "</td ></tr>";
                    else if (evenrow == true)
                        htmlbody = htmlbody + "<tr><td  style=\" background-color: #f0f3f4\" rowspan=\"1\">" + inprogressSuiteName + "</td><td  style=\" background-color: #f0f3f4\" rowspan=\"1\">" + inprogressPlanName + "</td><td  style=\" background-color: #f0f3f4\" rowspan=\"1\">"+ inprogressPlanBulid + "</td><td  style=\" background-color: #f0f3f4;\">" + inprogressCaseName + "</td><td  style=\" background-color: #f0f3f4;\">" + inprogress_remarks + "</td></tr>";
                }

                if (htmlbody != string.Empty)
                    htmlcontent = "<div class=\"details\"></n><h3>Failure Summary</h3></div></n><div><table id=\"customers\"><tr><th>Testsuite</th><th>Testplan</th><th>Build</th><th>TestCase</th><th>Remarks</th> </tr>" +
                                  htmlbody + "</table></div>";
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            finally
            {
                report_connection.Report_CloseConnection();
            }
            return htmlcontent;

        }


        public DataTable Emailreport_tableread(string query)
        {
            DataTable dataTable = new DataTable();
            try
            {
                SqlCommand cmd = new SqlCommand(query, report_connection.Report_CreateConnection_ForTables());              
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dataTable);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
            return dataTable;
        }

        //Designer Version Match


        private bool designermatch(string exepath, string selectedCoreIPAddress, bool isDeployEnable, string deployCount, string testplanName, string TSpath, string TPname_ID)
        {
            try
            {
                List<string> deviceFirmwareStatus = new List<string>();
                string coreversion = string.Empty;
                string designerversion = string.Empty;
                string coreversion_backup = string.Empty;

                coreversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                if (backup_selectedCoreIPAddress != string.Empty && backup_selectedCoreIPAddress != "Not Applicable")
                {
                    coreversion_backup = XmlReadToGetDesignversion(backup_selectedCoreIPAddress);
                }
                FileInfo file = new FileInfo(exepath);
                if (exepath != string.Empty)
                {
                    if (file.Exists)
                    {
                        System.IO.FileInfo fileinfo = new FileInfo(exepath);

                        string buildInfoFilePath = System.IO.Path.Combine(fileinfo.DirectoryName, "build.info");

                        if (System.IO.File.Exists(buildInfoFilePath))
                        {
                          
                            using (StreamReader exeBuildVersions = new StreamReader(buildInfoFilePath))
                            {
                                designerversion = exeBuildVersions.ReadToEnd().Replace("\n", string.Empty);
                            }
                        }
                        else
                        {
                            var versInfo = FileVersionInfo.GetVersionInfo(exepath);
                            designerversion = versInfo.FileVersion.Trim();
                        }

                        var result = coreversion.Equals(designerversion);
                        bool result_backup = true;
                        if ((backup_selectedCoreIPAddress != string.Empty) || (!coreversion_backup.Equals(string.Empty)))
                            result_backup = coreversion_backup.Equals(designerversion);
                       
                        //var version1 = new Version(coreversion);
                        //var version2 = new Version(designerversion);

                            //var result = version1.Equals(version2);
                        if ((!result) || (!result_backup))
                        {
                            if (isOkSelected == true)
                            {
                                var firmwareupdate = firmwareUpgradebylaunch(exepath, selectedCoreIPAddress, null, "designermatch", isDeployEnable, deployCount, testplanName, TSpath, TPname_ID, false, string.Empty);
                                deviceFirmwareStatus = firmwareupdate.Item1;
                                if (deviceFirmwareStatus.Count > 0 && (!deviceFirmwareStatus.Contains("Fail")))
                                {
                                    if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                                    {
                                        qsyDesignProcess.Kill();
                                    }

                                    return true;
                                }
                                else
                                {
                                    if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                                    {
                                        qsyDesignProcess.Kill();
                                    }

                                    return false;
                                }
                            }
                            else
                            {
                                if (isCancelSelected == true)
                                    return true;
                                else
                                    return false;
                            }
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03xxx " + ex.Message);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }
        ////Pass/Fail Indicator
        private void UpdateExecuteStatusInformation(TreeViewExplorer PlanExecution, string StatusInfo)
        {
            try
            {
                PlanExecution.UpdatestatusInfo = StatusInfo;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    throw ex;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

      
        private bool ChkDUTConfigSelection()
        {
            try
            {
                Dictionary<string, string> deviceName = new Dictionary<string, string>();

                foreach (TreeViewExplorer SuiteExecution in treeViewExplorerExecutionRootItem.Children)
                {
                    bool? current;
                    if ((((current = SuiteExecution.IsChecked) == true) || ((current = SuiteExecution.IsChecked) == null)) && ((current = SuiteExecution.IsChecked) != false))
                    {
                        foreach (TreeViewExplorer PlanExecution in SuiteExecution.Children)
                        {
                            bool? current1;
                            if ((((current1 = PlanExecution.IsChecked) == true) || ((current1 = PlanExecution.IsChecked) == null)) && ((current1 = SuiteExecution.IsChecked) != false))
                            {
                                if (!DUTcheckedTP.Contains(PlanExecution.ItemName))
                                {
                                    DUTcheckedTP.Add(PlanExecution.ItemName);
                                }

                                string query = "select devicenameindesign, DeviceModel from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName))) ";
                                //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                                //this.connect.OpenConnection();
                                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", PlanExecution.ItemName);
                                //this.connect.CloseConnection();

                                for (int i = 0; i < tble.Rows.Count; i++)
                                {
                                    foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                                    {
                                        if (item.ItemNetPairingSelected == null | item.ItemNetPairingSelected == "Not Applicable")
                                        {
                                            if (tble.Rows[i][0].ToString().Equals(item.ItemDeviceName, StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                if (!deviceName.ContainsKey(SuiteExecution.ItemName))
                                                {
                                                    deviceName.Add(SuiteExecution.ItemName, item.ItemDeviceName);
                                                }
                                                else
                                                {
                                                    if (!deviceName[SuiteExecution.ItemName].Contains(item.ItemDeviceName))
                                                    {
                                                        deviceName[SuiteExecution.ItemName] += "," + item.ItemDeviceName;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (deviceName.Count > 0)
                {
                    string deviceNamewithTP = string.Empty;
                    List<string> tpName = new List<string>();

                    foreach (KeyValuePair<string, string> d in deviceName)
                    {
                        deviceNamewithTP += "\n" + d.Key + " : " + d.Value + ".";
                        if (!tpName.Contains(d.Key))
                            tpName.Add(d.Key);
                    }

                    string tpNameArray = string.Join(",\n", tpName);
                    var messageResult = ExecutionMessageBox("To execute TestSuites [" + tpNameArray + "]  below devices needs to be configured.\n" + deviceNamewithTP + "\n\nDo you want to continue?", "DUT Configuration Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);
                    if (messageResult.Item1 == MessageBoxResult.OK)
                    {
                        return false;
                    }
                    else
                    {
                        DUTcheckedTP.Clear();
                        return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                if (ex.Message != "Thread was being aborted.")
                    MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15032", MessageBoxButton.OK, MessageBoxImage.Error);

                return true;
            }
        }
     
        public Tuple<bool, bool> AccessOpen(string ipaddress, string password, out string strResponse)
        {
            bool state = false;
            strResponse = string.Empty;
            Tuple<bool, bool> value = new Tuple<bool, bool>(false, false);
            try
            {
                value = HttpGet_json("http://" + ipaddress + "/api/v0/cores/self/access_mode", string.Empty, ipaddress, password, string.Empty, out strResponse);
                if (strResponse == "401" || strResponse == "404")
                {
                    state = false;
                }
                else if ((value.Item1) && (strResponse != string.Empty))
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(strResponse);
                    if (obj.Count > 0)
                    {
                        foreach (var res in obj)
                        {
                            if ((res.Key.Contains("accessMode")) && (res.Value == "open"))
                            {
                                state = true;
                            }
                        }
                    }
                }
                return new Tuple<bool, bool>(state, value.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(state, value.Item2);
            }
        }

        private Tuple<bool, bool> CreateUserforBlankInReflectDevices(string siteid, string coreid, out string strResponse)
        {
            strResponse = "";

            try
            {
                var isAccessOpen = AccessOpenForQREM(siteid, coreid, out strResponse);

                if (isAccessOpen.Item1)
                {
                    var is_user_created = CreateQAtUserForReflectCore(coreid);
                    return is_user_created;
                }
                else
                {
                    return isAccessOpen;
                }
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(false, false);
            }
        }

        private Tuple<bool, bool> CreateQAtUserForReflectCore(string coreid)
        {
            bool state = false;
            string response = string.Empty;
            string createUser = "{\"accessMode\":\"protected\",\"rootUser\":{\"username\":\"" + Properties.Settings.Default.DeviceUsername.ToString() + "\",\"password\":\"" + applicationPassword + "\",\"passwordConfirm\":\"" + applicationPassword + "\" },\"removeUsers\":false}";
            
            try
            {
                var value = HttpPutactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/cores/" + coreid + "/access_mode", createUser, DeviceDiscovery.QREM_Token, out response);

                if ((value.Item1) && (response != string.Empty))
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(response);
                    if (obj.Count > 0)
                    {
                        foreach (var res in obj)
                        {
                            if ((res.Key.Contains("updatedAccessMode")) && (res.Value == "protected"))
                            {
                                state = true;
                                break;
                            }
                        }
                    }
                }

                return new Tuple<bool, bool>(state, value.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(state, false);
            }
        }

        public Tuple<bool, bool> AccessOpenForQREM(string siteid, string coreid, out string strResponse)
        {
            bool state = false;
            strResponse = string.Empty;
            Tuple<bool, bool> value = new Tuple<bool, bool>(false, false);

            try
            {
                value = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/sites/" + siteid + "/cores/" + coreid, DeviceDiscovery.QREM_Token, string.Empty, out strResponse);
                
                if (strResponse == "401" || strResponse == "404" || strResponse == "503")
                {
                    state = false;
                }
                else if ((value.Item1) && (strResponse != string.Empty))
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(strResponse);
                    if (obj.Count > 0)
                    {
                        foreach (var res in obj)
                        {
                            if (res.Key == "accessMode")
                            {
                                if(res.Value == "open")
                                    state = true;

                                break;
                            }
                        }
                    }
                }

                return new Tuple<bool, bool>(state, value.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(state, value.Item2);
            }
        }

        private Tuple<bool, bool, bool> CheckAccessForPasswordChangeForQREM(string coreid, bool isFinally)
        {
            try
            {
                if (Properties.Settings.Default.DevicePassword.ToString() != string.Empty && Properties.Settings.Default.DevicePassword.ToString() != null)
                {
                    string userid = string.Empty;
                    var isRoleNotAdmin = Getuserslist(true, string.Empty, coreid, out userid);

                    if (isRoleNotAdmin.Item1)
                    {
                        if (!isFinally)
                        {
                            ExecutionMessageBox("The entered username is not an administrator. Please change the role to admin and try again.", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                        }

                        return new Tuple<bool, bool, bool>(false, isRoleNotAdmin.Item2, true);
                    }
                    else if (isRoleNotAdmin.Item2)
                    {
                        return new Tuple<bool, bool, bool>(false, isRoleNotAdmin.Item2, false);
                    }
                    else
                    {
                        string strResponse = string.Empty;
                        var ispasswordchanged = ChangeCorePasswordForQREM(coreid, userid, applicationPassword, out strResponse);
                        return new Tuple<bool, bool, bool>(ispasswordchanged.Item1, ispasswordchanged.Item2, false);
                    }
                }
                else
                {
                    return new Tuple<bool, bool, bool>(false, false, false);
                }
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool, bool>(false, false, false);
            }
        }
                
        

        private Tuple<bool, bool> DisableAccessControlForReflect(string coreid, out string resp)
        {
            string response = string.Empty;
            resp = string.Empty;
            string strParameters = "{\"accessMode\": \"open\",\"removeUsers\": true}";

            try
            {
                string newToken = string.Empty;
                var result = HttpPutactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/cores/" + coreid + "/access_mode", strParameters, DeviceDiscovery.QREM_Token, out response);
                return result;
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(false, false);
            }
        }

        private bool HttpStatusCodeCheck(HttpWebResponse response, string methodName, out string strResponse)
        {
            strResponse = string.Empty;
            try
            {
                if (response == null)                
                    return false;     
                
                if(((methodName== "GET") && (response.StatusCode == HttpStatusCode.OK))
                    ||((methodName== "POST") && (response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Created))
                    ||((methodName == "PUT") && (response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Created || response.StatusCode == HttpStatusCode.NoContent)))
                {
                    using (System.IO.StreamReader sr = new System.IO.StreamReader(response.GetResponseStream()))
                    {
                        strResponse = sr.ReadToEnd().Trim();
                        return true;
                    }
                }         
              
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private Tuple<bool,bool> CreateUserforBlank(string ipaddress, out string response)
        {
            response = "";
            try
            {
                var isAccessOpen = AccessOpen(ipaddress, applicationPassword, out response);

                if(isAccessOpen.Item1)
                {
                    var is_user_created = CreateQAtUser(ipaddress);              
                    return is_user_created;                         
                }
                else
                {
                    return isAccessOpen;
                }               
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(false, false);
            }
        }

        private Tuple<bool, bool, bool> CheckAccessForPasswordChange(string ipaddress)
        {                  
            try
            {   
                if(Properties.Settings.Default.DevicePassword.ToString()!= string.Empty && Properties.Settings.Default.DevicePassword.ToString()!=null)
                {
                    string token = string.Empty;
                    var isLogonSuccess = Corelogon(ipaddress, Properties.Settings.Default.DevicePassword.ToString(), out token);
                    CoreLogonToken = token;
                    
                    //Get all users
                    if (isLogonSuccess.Item1)
                    {
                        string userID = string.Empty;
                        var isRoleNotAdmin = Getuserslist(false, ipaddress, string.Empty, out userID);
                        if (isRoleNotAdmin.Item1)
                        {
                            ExecutionMessageBox("The entered username is not an administrator. Please change the role to admin and try again.", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                            return new Tuple<bool, bool, bool>(false, isRoleNotAdmin.Item2, true);
                        }
                        else if (isRoleNotAdmin.Item2)
                        {
                            return new Tuple<bool, bool, bool>(false, isRoleNotAdmin.Item2, false);
                        }
                        else
                        {
                            var ispasswordchanged = ChangeCorePassword(ipaddress, applicationPassword);
                            return new Tuple<bool, bool, bool>(ispasswordchanged.Item1, ispasswordchanged.Item2, false);
                        }
                    }
                    else
                    {
                        return new Tuple<bool, bool, bool>(isLogonSuccess.Item1, isLogonSuccess.Item2, false);
                    }
                    //isRoleNotAdmin.Item2 is true for not available devices and isRoleNotAdmin.Item1 is true for other than admin role.
                    //return new Tuple<bool, bool,bool>(ispasswordchanged.Item1, isRoleNotAdmin.Item2, isRoleNotAdmin.Item1);
                }
                else
                {
                    return new Tuple<bool, bool, bool>(false, false, false);
                }
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool, bool>(false, false, false);
            }            
        }
        
        private Tuple<bool,bool> CreateQAtUser(string ipaddress)
        {
            bool state = false;
            string response = string.Empty;
            string createUser = "{\"accessMode\":\"protected\",\"rootUser\":{\"username\":\"" + Properties.Settings.Default.DeviceUsername.ToString() + "\",\"password\":\"" + applicationPassword + "\",\"passwordConfirm\":\"" + applicationPassword + "\" },\"removeUsers\":false}";
            try
            {
                string newToken = string.Empty;
               var value = HttpPut_json("http://" + ipaddress + "/api/v0/cores/self/access_mode", createUser,string.Empty, ipaddress, applicationPassword, out response, out newToken);
                

               if ((value.Item1) && (response != string.Empty))
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(response);                  
                    if (obj.Count > 0)
                    {
                        foreach (var res in obj)
                        {
                            if ((res.Key.Contains("accessMode")) && (res.Value == "protected"))
                            {
                                state = true;
                            }

                        }
                    }
                }
                            
                return new Tuple<bool, bool>(state,value.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(state, false);
            } 
        }

        public Tuple<bool,bool, string> Corelogon(string ipaddress, string userpassword, out string token)
        {
            string strResponse = string.Empty;        
            string strParameters = "{\"username\":\"" + Properties.Settings.Default.DeviceUsername.ToString() + "\",\"password\":\"" + userpassword + "\"}";
            try
            {                            
               var success = HttpPost_json("http://" + ipaddress + "/api/v0/logon", strParameters, out strResponse);

                //get Token value
                if (success.Item1)
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(strResponse);
                    if (obj.Count > 0)
                    {
                        foreach (var response in obj)
                        {
                            strResponse = response.Value;
                        }
                    }
                }

                token = strResponse;
                return success;
            }
            catch (Exception ex)
            {
                token = string.Empty;
                return new Tuple<bool, bool,string>(false, false,string.Empty);
            }
        }

        private Tuple<bool,bool> DisableAccessControl(string ipaddress, out string resp)
        {          
            string response = string.Empty;
            resp = string.Empty;
            string strParameters = "{\"accessMode\": \"open\",\"removeUsers\": true}";

            try
            {
                string token = string.Empty;
                var isLogonSuccess = Corelogon(ipaddress, applicationPassword, out token);
				/////If primary core, assign new token in CoreLogonToken else if backup core, assign new token CoreLogonToken_Backup
                if (ipaddress == selectedCoreIPAddress)
                    CoreLogonToken = token;
                else if (ipaddress == backup_selectedCoreIPAddress)
                    CoreLogonToken_Backup = token;

                resp = isLogonSuccess.Item3;

                if (isLogonSuccess.Item1)
                {
                    string newToken = string.Empty;
                    var  result = HttpPut_json("http://" + ipaddress + "/api/v0/cores/self/access_mode", strParameters, token, ipaddress, applicationPassword, out response, out newToken);
                    
                    return result;
                }
                else
                {
                    return new Tuple<bool, bool>(isLogonSuccess.Item1, isLogonSuccess.Item2);
                }               
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(false,false);
            }
        }

        private Tuple<bool, bool> RestorePassword(string ipaddress, out string strResponse)
        {
            Tuple<bool, bool> result = new Tuple<bool, bool>(false, false);
            strResponse = string.Empty;

            try
            {
                string token = string.Empty;
                var isLogonSuccess = Corelogon(ipaddress, applicationPassword, out token);
                CoreLogonToken = token;
                strResponse = isLogonSuccess.Item3;

                if (isLogonSuccess.Item1)
                {
                    result = ChangeCorePassword(ipaddress, Properties.Settings.Default.DevicePassword);
                }
                else
                {
                    return new Tuple<bool, bool>(isLogonSuccess.Item1, isLogonSuccess.Item2);
                }

                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }

        private Tuple<bool, bool> RestoreSSH(string ipaddress, bool restoreValue, out string strResponse)
        {
            strResponse = string.Empty;

            try
            {
                string token = string.Empty;
                var isLogonSuccess = Corelogon(ipaddress, applicationPassword, out token);
                CoreLogonToken = token;
                strResponse = isLogonSuccess.Item3;

                if (isLogonSuccess.Item1)
                {
                  var result = enable_ssh("http://" + ipaddress + "/api/v0/cores/self/config/network/services", ipaddress, restoreValue, CoreLogonToken, applicationPassword);
                    CoreLogonToken = result.Item4;
                  return new Tuple<bool, bool>(result.Item1, result.Item2);
                }

                return new Tuple<bool, bool>(isLogonSuccess.Item1, isLogonSuccess.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool>(false,false);
            }
        }

        private Tuple< bool,bool> Getuserslist(bool isQREM, string ipaddress, string coreID, out string userid)
        {
            userid = string.Empty;
            bool result = true;
            string response = string.Empty;
            Tuple<bool, bool> value = new Tuple<bool, bool>(false, false);

            try
            {
                if(isQREM)
                    value = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/cores/" + coreID + "/users", DeviceDiscovery.QREM_Token, string.Empty, out response);
                else
                    value = HttpGet_json("http://" + ipaddress + "/api/v0/cores/self/users?meta=permission", CoreLogonToken, ipaddress, applicationPassword, string.Empty, out response);

                if(response != string.Empty && value.Item1)
                {
                    dynamic array = new JavaScriptSerializer().DeserializeObject(response);
                    foreach (var item in array)
                    {
                        if (item.Key == "data")
                        {
                            object[] dataValues = item.Value as object[];

                            if (dataValues != null)
                            {
                                foreach (var objdatas in dataValues)
                                {
                                    Dictionary<string, object> dictDatavalues = objdatas as Dictionary<string, object>;

                                    if (dictDatavalues != null)
                                    {
                                        foreach (var datas in dictDatavalues)
                                        {
                                            if (datas.Key == "username")
                                            {
                                                string itemUsername = datas.Value.ToString();
                                                if (String.Equals(itemUsername, Properties.Settings.Default.DeviceUsername.ToString(), StringComparison.CurrentCultureIgnoreCase) && dictDatavalues.ContainsKey("role"))
                                                {
                                                    string role = dictDatavalues["role"].ToString();
                                                    if (role.ToLower() == "admin" || role.ToLower() == "administrator")
                                                    {
                                                        if (dictDatavalues.ContainsKey("id"))
                                                        {
                                                            userid = dictDatavalues["id"].ToString();
                                                            result = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return new Tuple<bool, bool>(result,value.Item2);
            }
            catch (Exception ex)
            {
                return new Tuple< bool, bool> (result,value.Item2);
            }
        }
		
        private Tuple<bool, bool> ChangeCorePassword(string ipaddress, string password)
        {
            Tuple<bool, bool> result = new Tuple<bool, bool>(false,false);
            string response = string.Empty;

            try
            {
                string strparameters = "{\"password\":\"" + password + "\",\"passwordConfirm\":\"" + password + "\"}";
                string newToken = string.Empty;
                result = HttpPut_json("http://" + ipaddress + "/api/v0/cores/self/users/self/password", strparameters, CoreLogonToken, ipaddress, applicationPassword,  out response, out newToken);
               
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }          
        }

        private Tuple<bool, bool> ChangeCorePasswordForQREM(string coreid, string userid, string password, out string response)
        {
            Tuple<bool, bool> result = new Tuple<bool, bool>(false, false);
            response = string.Empty;

            try
            {
                string strparameters = "{\"password\":\"" + password + "\",\"passwordConfirm\":\"" + password + "\"}";
                result = HttpPutactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/cores/" + coreid + "/users/" + userid + "/password", strparameters, DeviceDiscovery.QREM_Token, out response);
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }

        private bool SetPasswordForReflectDevices(Dictionary<string, string> remotecoredetails, out List<string> errorPassCore)
        {
            bool isSetPasswordTrue = true;
            errorPassCore = new List<string>();

            try
            {
                List<string> notavailabledevicesinNetwork = new List<string>();

                foreach (var remoteDetails in remotecoredetails)
                {
                    string[] remotecoredetail = remoteDetails.Value.Split(';');
                    string strResponse = string.Empty;
                    var is_user_created = CreateUserforBlankInReflectDevices(remotecoredetail[3], remotecoredetail[1], out strResponse);

                    if (strResponse == "404")
                    {
                        ExecutionMessageBox("The remote server returned an error: (404) URL Not Found." + "\n" + "Device Name: \n" + remotecoredetail[0], "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                        isSetPasswordTrue = false;
                        break;
                    }

                    //// not available devices Added in list
                    if (is_user_created.Item2)
                    {
                        if (remotecoredetail[0] != string.Empty && !notavailabledevicesinNetwork.Contains(remotecoredetail[0]))
                            notavailabledevicesinNetwork.Add(remotecoredetail[0]);
                        break;
                    }

                    ////Blank password--list added for Password restore and telnet restore 
                    if (is_user_created.Item1)
                    {
                        isPasswordRestoreblank = true;

                        if (!passwordRestoreblank.Keys.Contains("QREM" + remoteDetails.Value))
                        {
                            passwordRestoreblank.Add("QREM" + remoteDetails.Value, remoteDetails.Value);
                            netpairnamesblank.Add("QREM" + remoteDetails.Value);
                        }
                    }
                }

                if (notavailabledevicesinNetwork.Count > 0)
                {
                    ExecutionMessageBox("Exception\n  " + string.Join("\n  ", notavailabledevicesinNetwork) + "\nDevice is not available in network.Execution will be aborted", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                    isSetPasswordTrue = false;
                }

                //// User given password check
                if (isSetPasswordTrue)
                {
                    //List<string> errorPassCore = new List<string>();
                    //List<string> errorPass = new List<string>();

                    foreach (var remoteDetails in remotecoredetails)
                    {
                        if (!passwordRestoreblank.Keys.Contains("QREM" + remoteDetails.Value))
                        {
                            string[] remotecoredetail = remoteDetails.Value.Split(';');

                            var changePassword = CheckAccessForPasswordChangeForQREM(remotecoredetail[1], false);

                            ////User role other than admin
                            if (changePassword.Item3)
                            {
                                isSetPasswordTrue = false;
                                break;
                            }

                            //// not available devices Added in list
                            if (changePassword.Item2)
                            {
                                if (remotecoredetail[0] != string.Empty && !notavailabledevicesinNetwork.Contains(remotecoredetail[0]))
                                    notavailabledevicesinNetwork.Add(remotecoredetail[0]);
                                break;
                            }

                            ////password list added for Password restore
                            if (changePassword.Item1)
                            {
                                isPasswordRestore = true;
                                if (!passwordRestore.Keys.Contains("QREM" + remoteDetails.Value))
                                {
                                    passwordRestore.Add("QREM" + remoteDetails.Value, remoteDetails.Value);
                                    netpairnames.Add(remoteDetails.Value);
                                }
                            }
                            else
                            {
                                ////Password or user name for core wrong in preferences
                                //if (errorDevicesModel[i].ToUpper().Contains("CORE"))
                                errorPassCore.Add(remoteDetails.Key);
                                //else
                                //    errorPass.Add(errorDevices[i]);
                            }
                        }
                    }

                    if (notavailabledevicesinNetwork.Count > 0)
                    {
                        ExecutionMessageBox("Exception\n  " + string.Join("\n  ", notavailabledevicesinNetwork) + "\nDevice is not available in network while checking devices password", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                        isSetPasswordTrue = false;
                    }

                  
                }
            }
            catch (Exception ex)
            {
                isSetPasswordTrue = false;
            }

            return isSetPasswordTrue;
        }

        public Tuple<bool, bool> HttpPutPeripheral(string strURI,string ipaddress,string currentPassword, out string strResponse)
        {
            Tuple<bool, bool> Check = new Tuple<bool, bool>(false, false);           
            strResponse = "";
            string token = string.Empty;
            try
            {
                ////Login for peripheral if password available    
                if (currentPassword != string.Empty)            
                    Peripheral_Login(ipaddress, currentPassword, out token);                

                ////Actual put starts here with or without token
                Check = HttpPutActual_peripheral(strURI, token, false, out strResponse);
                return Check;
            }
            catch (Exception ex)
            {
                return Check;
            }
        }


        public Tuple<bool, bool> Peripheral_Login(string ipaddress, string currentPassword, out string token)
        {
            Tuple<bool, bool> result = new Tuple<bool, bool>(false, false);
            token = string.Empty;
            try
            {
               result = HttpPutActual_peripheral("https://" + ipaddress + "/auth/v1/login?user=" + username_default + "&pwd=" + currentPassword, string.Empty, true, out token);               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif                           
            }
            return result;
        }



        public Tuple<bool, bool> HttpPutActual_peripheral(string strURI, string token, bool getCookie, out string strResponse)
        {
            bool msg = false;
            strResponse = string.Empty;
            bool success = false;
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            try
            {
                req.ContentType = "application/json";
                req.Accept = "application/json";
                req.Method = "PUT";
                req.Timeout = 30000;
                req.ReadWriteTimeout = 30000;
				
                /////Skip ssl service certification exceptions and adding authorization in cookies header
                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                if (token != string.Empty)                
                    req.Headers["Cookie"] = token;                

                using (HttpWebResponse resp = (HttpWebResponse)req.GetResponse())
                {
			     	////////If this method called from login method Get cookies ==> to get actual token
                    if (getCookie && resp.StatusCode == HttpStatusCode.OK)
                    {
                        foreach (var cookie in resp.Headers.GetValues("Set-Cookie"))
                        {
                            if (cookie != string.Empty && cookie.Trim().EndsWith("; Path=/"))
                            {
                                strResponse = cookie.Trim().Remove(cookie.Length - 8);
                                success = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        success = HttpStatusCodeCheck(resp, "PUT", out strResponse);
                    }
                }
                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strResponse = "";
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    strResponse = "401";
                }
                else if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                {
                    msg = true;
                }
                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
        }

        private bool SetPassword(out bool isSetPassword)
        {
            bool isSetPasswordTrue = true;
         
            try
            {
                try
                {
                    isSetPassword = true;
                    return isSetPasswordTrue;
                }           
                finally
                {
                    List<string> ipAddrMismatch = new List<string>();
                    List<string> selectedIPaddr = new List<string>();
                    List<string> errorDevices = new List<string>();                  
                    List<string> errorDevicesModel = new List<string>();
                    Dictionary<string, string> remotecoredetails = new Dictionary<string, string>();

                    SqlCommand cmd = new SqlCommand();
                    System.Data.DataTable tble = new System.Data.DataTable();
                    var parameters = new string[DUTcheckedTP.Count];
                    for (int l = 0; l < DUTcheckedTP.Count; l++)
                    {
                        parameters[l] = string.Format("@TPName{0}", l);
                        cmd.Parameters.AddWithValue(parameters[l], DUTcheckedTP[l]);
                    }

                    cmd.CommandText = string.Format("select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in ({0}))) ", string.Join(", ", parameters));
                    cmd.Connection = connect.CreateConnection();
                    SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                    dataAdapter.Fill(tble);

                 
                    for (int i = 0; i < tble.Rows.Count; i++)
                    {
                        foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                        {
                            if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                            {
                                if (tble.Rows[i][3].ToString().Equals(item.ItemDeviceName, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if ((item.ItemPrimaryIPSelected != null)&&(item.ItemPrimaryIPSelected!=string.Empty))
                                    {
                                        if (!selectedIPaddr.Contains(item.ItemPrimaryIPSelected))
                                        {
                                            errorDevices.Add(item.ItemNetPairingSelected);
                                            errorDevicesModel.Add(item.ItemDeviceModel);
                                            selectedIPaddr.Add(item.ItemPrimaryIPSelected);
                                        }
                                    }
                                    else if ((item.ItemSecondaryIPSelected != null)&& (item.ItemSecondaryIPSelected != string.Empty))
                                    {
                                        if (!selectedIPaddr.Contains(item.ItemSecondaryIPSelected))
                                        {
                                            errorDevices.Add(item.ItemNetPairingSelected);
                                            errorDevicesModel.Add(item.ItemDeviceModel);
                                            selectedIPaddr.Add(item.ItemSecondaryIPSelected);
                                        }
                                    }
                                    if (!remotecoredetails.ContainsKey(item.ItemNetPairingSelected) && item.ItemNetPairingList.Keys.Contains(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice"))
                                    {
                                        remotecoredetails.Add(item.ItemNetPairingSelected, item.ItemNetPairingList[item.ItemNetPairingSelected]);
                                    }
                                }
                            }
                        }
                    }

                    ////Remote core calling
                    firmwareversion_Alldevices.Clear();
                    isSetPassword = true;
                    List<string> errorPassCore = new List<string>();

                    if (remotecoredetails.Count > 0)
                        isSetPassword = SetPasswordForReflectDevices(remotecoredetails, out errorPassCore);

                    if (isSetPassword)
                    {
                        ////check for blank password
                        List<string> notavailabledevicesinNetwork = new List<string>();
                        List<string> telnetremoteIssue = new List<string>();

                        for (int j = 0; j < selectedIPaddr.Count; j++)
                        {
                            string token = string.Empty;
                            string strResponse = "";
                            string response = string.Empty;
                            Tuple<bool, bool> chkPasswordState = new Tuple<bool, bool>(false, false);
                            Tuple<bool, bool> is_user_created = new Tuple<bool, bool>(false, false);

                            if (selectedIPaddr[j] != string.Empty & selectedIPaddr[j] != "Not Applicable")
                            {
                                string getdevicename = XmlReadToGetDeviceName(selectedIPaddr[j]);
                                if ((getdevicename == string.Empty) || (errorDevices[j].ToUpper() == getdevicename.ToUpper()))
                                {
                                    var isNewver = firmwareVersioncheck(selectedIPaddr[j]);
                                    if (!firmwareversion_Alldevices.Keys.Contains(selectedIPaddr[j]))
                                        firmwareversion_Alldevices.Add(selectedIPaddr[j], new Tuple<bool, string>(isNewver.Item1, isNewver.Item2));

                                    if (errorDevicesModel[j].ToUpper().Contains("CORE") && isNewver.Item1)
                                    {
                                        ///check access mode is open                            
                                        is_user_created = CreateUserforBlank(selectedIPaddr[j], out response);

                                        if (response == "404")
                                        {
                                            ExecutionMessageBox("The remote server returned an error: (404) URL Not Found." + "\n" + "Device Name: \n" + errorDevices[j], "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                            isSetPasswordTrue = false;
                                            isSetPassword = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        //// QAT password change for other devices. Here, first verify firmware version to decide password set api new or old
                                        bool useNewAPI = firmwareVersioncheckGeneral(isNewver.Item2, "fromPeripheralPasswordChange"); 
                                                                      
                                        if (useNewAPI)                                    
                                            chkPasswordState = HttpPutPeripheral("http://" + selectedIPaddr[j] + "/auth/v1/chpwd?user="+username_default+"&pwd_new="+applicationPassword, selectedIPaddr[j], string.Empty, out strResponse);                                    
                                        else
                                            chkPasswordState = HttpGet("http://" + selectedIPaddr[j] + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", string.Empty, "EC15014", selectedIPaddr[j], isNewver.Item2, out strResponse);
                                    }

                                    //// not available devices Added in list
                                    if (chkPasswordState.Item2 || is_user_created.Item2)
                                    {
                                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedIPaddr[j], selectedDutDeviceItemList);
                                        if (deviceName != string.Empty && !notavailabledevicesinNetwork.Contains(deviceName))
                                            notavailabledevicesinNetwork.Add(deviceName);
                                        break;
                                    }

                                    ////Blank password--list added for Password restore and telnet restore 
                                    if (chkPasswordState.Item1 || is_user_created.Item1)
                                    {
                                        isPasswordRestoreblank = true;

                                        if (!passwordRestoreblank.Keys.Contains(selectedIPaddr[j]))
                                        {
                                            passwordRestoreblank.Add(selectedIPaddr[j], errorDevicesModel[j]);
                                            netpairnamesblank.Add(errorDevices[j]);
                                        }

                                        var telnetremoteServer = SetTelnetStatus(selectedIPaddr[j], errorDevicesModel[j], isNewver.Item1, isNewver.Item2);

                                        if (telnetremoteServer.Item3 != string.Empty && !telnetremoteIssue.Contains(telnetremoteServer.Item3))
                                            telnetremoteIssue.Add(telnetremoteServer.Item3);
                                        if (!telnetremoteServer.Item1 || !telnetremoteServer.Item2)
                                        {
                                            if (!restoreTelnetSettings_blank.ContainsKey(new string[] { selectedIPaddr[j], errorDevicesModel[j] }))
                                            {
                                                restoreTelnetSettings_blank.Add(new string[] { selectedIPaddr[j], errorDevicesModel[j] }, new bool[] { telnetremoteServer.Item1, telnetremoteServer.Item2 });
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!ipAddrMismatch.Contains(errorDevices[j]))
                                        ipAddrMismatch.Add(errorDevices[j]);

                                    isSetPasswordTrue = false;
                                    isSetPassword = false;
                                }
                            }
                        }


                        if (notavailabledevicesinNetwork.Count > 0)
                            ExecutionMessageBox("Exception\n  " + string.Join("\n  ", notavailabledevicesinNetwork) + "\nDevice is not available in network.Execution will be aborted", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);

                        if (telnetremoteIssue.Count > 0)
                            ExecutionMessageBox("Exception\n  " + string.Join("\n  ", telnetremoteIssue) + "\nDevice is not available in network while checking telnet enable status", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);

                        if (notavailabledevicesinNetwork.Count > 0 || telnetremoteIssue.Count > 0)
                        {
                            isSetPasswordTrue = false;
                            isSetPassword = false;
                        }

                        //// User given password check

                        if (isSetPasswordTrue == true)
                        {
                            List<string> errorPass = new List<string>();
                            for (int i = 0; i < selectedIPaddr.Count; i++)
                            {
                                if (!passwordRestoreblank.Keys.Contains(selectedIPaddr[i]))
                                {
                                    string strResponse = "";
                                    Tuple<bool, bool> chkPasswordState = new Tuple<bool, bool>(false, false);
                                    Tuple<bool, bool, bool> changePassword = new Tuple<bool, bool, bool>(false, false, false);

                                    if (selectedIPaddr[i] != string.Empty & selectedIPaddr[i] != "Not Applicable")
                                    {
                                        string getdevicename = XmlReadToGetDeviceName(selectedIPaddr[i]);
                                        if ((getdevicename == string.Empty) || (errorDevices[i].ToUpper() == getdevicename.ToUpper()))
                                        {
                                            bool isNewver = firmwareversion_Alldevices[selectedIPaddr[i]].Item1;
                                            if (errorDevicesModel[i].ToUpper().Contains("CORE") && isNewver)
                                            {
                                                ///do password change for core
                                                changePassword = CheckAccessForPasswordChange(selectedIPaddr[i]);

                                                ////User role other than admin
                                                if (changePassword.Item3 == true)
                                                {
                                                    isSetPasswordTrue = false;
                                                    isSetPassword = false;
                                                    break;
                                                }
                                            }
                                            else
                                            {
									        	////// Here, first verify firmware version to decide password set api new or old
                                                bool useNewAPI = firmwareVersioncheckGeneral(firmwareversion_Alldevices[selectedIPaddr[i]].Item2, "fromPeripheralPasswordChange");
                                                //// QAT password change for other devices
                                               if(useNewAPI)
                                                    chkPasswordState = HttpPutPeripheral("https://" + selectedIPaddr[i] + "/auth/v1/chpwd?user=" + username_default + "&pwd_new="+ applicationPassword, selectedIPaddr[i], Properties.Settings.Default.DevicePassword, out strResponse);
                                               else
                                                chkPasswordState = HttpGet("http://" + selectedIPaddr[i] + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", Properties.Settings.Default.DevicePassword, "EC15014", selectedIPaddr[i], firmwareversion_Alldevices[selectedIPaddr[i]].Item2, out strResponse);
                                            }

                                            //// not available devices Added in list
                                            if (chkPasswordState.Item2 || changePassword.Item2)
                                            {
                                                string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedIPaddr[i], selectedDutDeviceItemList);
                                                if (deviceName != string.Empty && !notavailabledevicesinNetwork.Contains(deviceName))
                                                    notavailabledevicesinNetwork.Add(deviceName);
                                                break;
                                            }
                                            ////password list added for Password restore
                                            if (chkPasswordState.Item1 || changePassword.Item1)
                                            {
                                                isPasswordRestore = true;
                                                if (!passwordRestore.Keys.Contains(selectedIPaddr[i]))
                                                {
                                                    passwordRestore.Add(selectedIPaddr[i], errorDevicesModel[i]);
                                                    netpairnames.Add(errorDevices[i]);
                                                }
                                            }
                                            else
                                            {
                                                ////Password or user name for core wrong in preferences
                                                if (errorDevicesModel[i].ToUpper().Contains("CORE"))
                                                    errorPassCore.Add(errorDevices[i]);
                                                else
                                                    errorPass.Add(errorDevices[i]);
                                            }
                                        }
                                        else
                                        {
                                            if (!ipAddrMismatch.Contains(errorDevices[i]))
                                                ipAddrMismatch.Add(errorDevices[i]);

                                            isSetPasswordTrue = false;
                                            isSetPassword = false;
                                        }
                                    }
                                }
                            }

                            if (notavailabledevicesinNetwork.Count > 0)
                            {
                                ExecutionMessageBox("Exception\n  " + string.Join("\n  ", notavailabledevicesinNetwork) + "\nDevice is not available in network while checking devices password", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                isSetPasswordTrue = false;
                                isSetPassword = false;
                            }

                            if (isSetPasswordTrue == true)
                            {
                                if (errorPassCore.Count != 0)
                                {
                                    ExecutionMessageBox("The device Username/password does not match with Username/password in preferences. Another QAT might be using the device or the password might be wrong!" + "\n" + "Device Name: \n" + string.Join(",\n", errorPassCore), "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                    isSetPasswordTrue = false;
                                    isSetPassword = false;
                                }

                                if (errorPass.Count != 0)
                                {
                                    ExecutionMessageBox("The device password does not match with password in preferences. Another QAT might be using the device or the password might be wrong!" + "\n" + "Device Name: \n" + string.Join(",\n", errorPass), "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                    isSetPasswordTrue = false;
                                    isSetPassword = false;
                                }

                                ////Set telnet for all devices except Blank password devices
                                if (isSetPasswordTrue == true && selectedIPaddr.Count > 0)
                                {
                                    for (int i = 0; i < selectedIPaddr.Count; i++)
                                    {
                                        if (!passwordRestoreblank.Keys.Contains(selectedIPaddr[i]))
                                        {
                                            var isNewver = firmwareversion_Alldevices[selectedIPaddr[i]];
                                            var telnetremoteServer = SetTelnetStatus(selectedIPaddr[i], errorDevicesModel[i], isNewver.Item1, isNewver.Item2);

                                            if (!telnetremoteIssue.Contains(telnetremoteServer.Item3) && telnetremoteServer.Item3 != string.Empty && telnetremoteServer.Item3 != null)
                                                telnetremoteIssue.Add(telnetremoteServer.Item3);

                                            if (!telnetremoteServer.Item1 || !telnetremoteServer.Item2)
                                            {
                                                if (!restoreTelnetSettings.ContainsKey(new string[] { selectedIPaddr[i], errorDevicesModel[i] }))
                                                {
                                                    restoreTelnetSettings.Add(new string[] { selectedIPaddr[i], errorDevicesModel[i] }, new bool[] { telnetremoteServer.Item1, telnetremoteServer.Item2 });
                                                }
                                            }
                                        }
                                    }

                                    if (telnetremoteIssue.Count > 0)
                                    {
                                        ExecutionMessageBox("Exception\n  " + string.Join("\n  ", telnetremoteIssue) + "\nDevice is not available in network while checking telnet enable status", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                        isSetPasswordTrue = false;
                                        isSetPassword = false;
                                    }

                                    if (isSetPasswordTrue == true)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Telnet port enabled for all devices");
                                        isSetPasswordTrue = true;
                                        isSetPassword = true;
                                    }
                                }
                            }

                        }

                        if (ipAddrMismatch.Count > 0)
                        {
                            ExecutionMessageBox("IPAddress for the devices is changed" + "\n" + "Device Name: \n" + string.Join(",\n", ipAddrMismatch), "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }                
            }
            catch (Exception ex)
            {
                isSetPasswordTrue = false;
                isSetPassword = false;
                return isSetPasswordTrue;
            }
        }

        public Tuple<bool, bool, bool, string> enable_ssh(string url, string ipAddress, bool value, string token, string password)
        {
            bool success = false;
            bool norestore = true;
            string newToken = string.Empty;

            try
            {               
                string result = string.Empty;
                var readsuccess = HttpGet_json(url, token, ipAddress, password, string.Empty, out result);
                if (readsuccess.Item1)
                {
                    int index = 0, ssh_index = 0;
                    bool? restore_state = null;                    
                    dynamic array = new JavaScriptSerializer().DeserializeObject(result);
                  
                    foreach (Dictionary<string, object> item in array)
                    {
                        if (item.Keys.Contains("key"))
                        {
                            string key = item["key"].ToString();

                            if (String.Equals("SSH", key, StringComparison.CurrentCultureIgnoreCase))
                            {
                                restore_state = array[index]["enabled"]["lanA"];
                                if (restore_state == value)
                                {
                                    success = true;
                                    break;
                                }
                                ssh_index = index;
                            }
                        }
                        else if (item.Keys.Contains("id"))
                        {
                            string key = item["id"].ToString();

                            if (String.Equals("SSH", key, StringComparison.CurrentCultureIgnoreCase))
                            {                               
                                restore_state = array[index]["enabled"]["lanA"];
                                if (restore_state == value)
                                {
                                    success = true;
                                    break;
                                }
                                ssh_index = index;
                            }

                            Dictionary<string, object> dict = new Dictionary<string, object>();
                            foreach (var child in item)
                            {
                                if (dict.Count() == 2)
                                    break;

                                if (child.Key.ToLower() == "id" || child.Key.ToLower() == "enabled")
                                    dict.Add(child.Key, child.Value);
                            }
                            array[index] = dict;                          
                        }
                                               
                        index++;
                    }
                                    
                    if(success ==false)
                    {                   
                        array[ssh_index]["enabled"]["lanA"] = value;
                        string output = Regex.Unescape(new JavaScriptSerializer().Serialize(array));
                        string res = string.Empty;

                        var putsuccess = HttpPut_json(url, output, token, ipAddress, password, out res, out newToken);
                        if (putsuccess.Item1)
                        {
                            success = true;
                            norestore = false;
                        }
                        return new Tuple<bool, bool, bool, string>(success, putsuccess.Item2, norestore, newToken);
                    }
                }

                return new Tuple<bool, bool, bool, string>(success, readsuccess.Item2, norestore, newToken);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, bool, bool, string>(success, false, norestore, newToken);
            }
        }

        private Tuple<bool, bool, string> SetTelnetStatus(string individualIp, string devicemodel, bool isnewapiVersion, string firmwareversion)
        {
            string notavailabledevice = string.Empty;
            try
            {
                string strResponse = string.Empty;
                if (individualIp != string.Empty & individualIp != "Not Applicable")
                {
                    if (devicemodel.ToUpper().Contains("CORE") && isnewapiVersion)
                    {
                        string token = string.Empty;
                        var isLogonSuccess = Corelogon(individualIp, applicationPassword, out token);
                        CoreLogonToken = token;
                        
                        if (isLogonSuccess.Item1)
                        {
                            var is_ssh_enabled = enable_ssh("http://" + individualIp + "/api/v0/cores/self/config/network/services", individualIp, true, CoreLogonToken, applicationPassword);
                            CoreLogonToken = is_ssh_enabled.Item4;

                            if (is_ssh_enabled.Item2)
                            {
                                string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(individualIp, selectedDutDeviceItemList);
                                notavailabledevice = deviceName;
                            }
                            if (is_ssh_enabled.Item1 == true)
                            {
                                return new Tuple<bool, bool, string>(true, is_ssh_enabled.Item3, notavailabledevice);
                            }
                        }
                        else
                        {
                            if(isLogonSuccess.Item2)
                            {
                                string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(individualIp, selectedDutDeviceItemList);
                                notavailabledevice = deviceName;
                            }
                            return new Tuple<bool, bool, string>(true, true, notavailabledevice);
                        }
                    }
                    else
                    {
                        string txt_Display = GetFileWithCredentials(username_default, applicationPassword, "http://" + individualIp + "/cgi-bin/access_config?", individualIp);

                        if (txt_Display != null && (txt_Display.Contains("telnet=false") || txt_Display.Contains("ssh=false")))
                        {
                            var chkdeviceStatus = HttpGet("http://" + individualIp + "/cgi-bin/access_config?telnet=true&ssh=true", applicationPassword, "EC15017", individualIp, firmwareversion, out strResponse);

                            if (chkdeviceStatus.Item2)
                            {
                                string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(individualIp, selectedDutDeviceItemList);
                                notavailabledevice = deviceName;
                            }

                            if (chkdeviceStatus.Item1)
                            {
                                if (txt_Display.Contains("telnet=false") && txt_Display.Contains("ssh=false"))
                                    return new Tuple<bool, bool, string>(false, false, notavailabledevice);
                                else if (txt_Display.Contains("telnet=false"))
                                    return new Tuple<bool, bool, string>(false, true, notavailabledevice);
                                else
                                    return new Tuple<bool, bool, string>(true, false, notavailabledevice);
                            }
                            else
                            {
                                return new Tuple<bool, bool, string>(true, true, notavailabledevice);
                            }
                        }                  
                      
                    }
                    return new Tuple<bool, bool, string>(true, true, notavailabledevice);
                }
                else
                {
                    return new Tuple<bool, bool, string>(true, true, notavailabledevice);
                }                
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, bool, string>(true, true, notavailabledevice);
            }
        }

        public bool grt(string getplanname, out string isPrimaryBackupCombinationStatus)
        {
            string coreNameForDUT = null;
            string backup_coreNameForDUT = null;
            bool isQREM = false;
            bool hasBackup = false;
            isPrimaryBackupCombinationStatus = string.Empty;

            try
            {
                string query = string.Empty;                
                string deviceModel = string.Empty;

                query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName)))";
                //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", getplanname);
                //this.connect.CloseConnection();

                DataTableReader read = tble.CreateDataReader();
                List<string> tempcores = new List<string>();
                while (read.Read())
                {
                    if (read[1].ToString().Contains("Core"))
                    {
                        if (read[4] != System.DBNull.Value)
                        {
                            if (read[4].ToString() == "primary")
                            {
                                coreNameForDUT = read[3].ToString();
                            }
                            else if (read[4].ToString() == "backup")
                            {
                                backup_coreNameForDUT = read[3].ToString();
                                isBackupCoreAvailable = true;
                            }
                        }

                        tempcores.Add(read[3].ToString());
                        deviceModel = read[2].ToString();
                    }
                }

                if (coreNameForDUT == null)
                {
                    if ((tempcores != null) && (tempcores.Count > 0))
                    {
                        if ((tempcores[0] != null) && (tempcores[0] != string.Empty))
                            coreNameForDUT = tempcores[0];
                        if((backup_coreNameForDUT==null)&& (tempcores.Count > 1))
                        {
                            if ((tempcores.Count > 1) && (tempcores[1] != null) && (tempcores[1] != string.Empty))
                            {
                                backup_coreNameForDUT = tempcores[1];
                                isBackupCoreAvailable = true;
                            }
                        }
                    }
                }


                //backup_selectedCoreIPAddress        string backup_versionForDeploy = string.Empty;
                //string backup_netPairNameForDeploy = string.Empty;
                foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                {
                    if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable" && String.Equals(item.ItemDeviceModel, deviceModel, StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (String.Equals(item.ItemDeviceName, coreNameForDUT, StringComparison.CurrentCultureIgnoreCase))
                        {
                            if (item.ItemNetPairingList != null && item.ItemNetPairingList.Keys.ToList().Contains(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice"))
                            {
                                isQREM = true;

                                if(item.ItemNetPairingList[item.ItemNetPairingSelected] != null)
                                {
                                    item.QREMcoredetails = item.ItemNetPairingList[item.ItemNetPairingSelected].Split(';');
                                }

                                selectedCoreSystemSiteID = item.QREMcoredetails;
                                versionForDeploy = item.ItemCurrentBuild;
                                netPairNameForDeploy = item.QREMcoredetails[0];
                            }
                            else if (item.ItemPrimaryIPSelected != null && item.ItemPrimaryIPSelected != string.Empty)
                            {
                                selectedCoreIPAddress = item.ItemPrimaryIPSelected;
                                versionForDeploy = item.ItemCurrentBuild;
                                netPairNameForDeploy = item.ItemNetPairingSelected;
                            }
                            else if (item.ItemSecondaryIPSelected != null && item.ItemSecondaryIPSelected != string.Empty)
                            {
                                selectedCoreIPAddress = item.ItemSecondaryIPSelected;
                                versionForDeploy = item.ItemCurrentBuild;
                                netPairNameForDeploy = item.ItemNetPairingSelected;
                            }
                        }
                        else if (String.Equals(item.ItemDeviceName, backup_coreNameForDUT, StringComparison.CurrentCultureIgnoreCase))
                        {
                            hasBackup = true;
                            if (item.ItemNetPairingList != null && item.ItemNetPairingList.Keys.ToList().Contains(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice"))
                            {
                                isQREM = true;

                                if (item.ItemNetPairingList[item.ItemNetPairingSelected] != null)
                                {
                                    item.QREMcoredetails = item.ItemNetPairingList[item.ItemNetPairingSelected].Split(';');
                                }

                                BackupselectedCoreSystemSiteID = item.QREMcoredetails;
                                backup_versionForDeploy = item.ItemCurrentBuild;
                                backup_netPairNameForDeploy = item.QREMcoredetails[0];
                            }
                            else if (item.ItemPrimaryIPSelected != null && item.ItemPrimaryIPSelected != string.Empty)
                            {
                                backup_selectedCoreIPAddress = item.ItemPrimaryIPSelected;
                                backup_versionForDeploy = item.ItemCurrentBuild;
                                backup_netPairNameForDeploy = item.ItemNetPairingSelected;
                            }
                            else if (item.ItemSecondaryIPSelected != null && item.ItemSecondaryIPSelected != string.Empty)
                            {
                                backup_selectedCoreIPAddress = item.ItemSecondaryIPSelected;
                                backup_versionForDeploy = item.ItemCurrentBuild;
                                backup_netPairNameForDeploy = item.ItemNetPairingSelected;
                            }
                        }
                    }
                }

                if (isQREM)
                {
                    if (!(selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0))
                    {
                        isPrimaryBackupCombinationStatus = "Selected primary core is local and backup core is reflect";
                    }

                    if (hasBackup && !(BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0))
                    {
                        isPrimaryBackupCombinationStatus = "Selected backup core is local and primary core is reflect";
                    }

                    if (selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0 && BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0 && selectedCoreSystemSiteID == BackupselectedCoreSystemSiteID)
                    {
                        isPrimaryBackupCombinationStatus = "Same primary and backup core is selected";
                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15014", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return isQREM;
        }
		
		public bool ExecuteIndividualTestPlan(TreeViewExplorer PlanExecution, Int32 exid, Int32 TSid, string testsuitename, bool RedeployedDesign, string Date_time_Suite, string LoopIterations, string TP_timestamp, Int32 SuiteExecutionUniqueID, string LoopType,DateTime InputTime,string TE_BuildVersion,string TSA_BuildVersion)
        {
            PlanExecution.PASS = 0;
            PlanExecution.EXEC = 0;
            PlanExecution.FAIL = 0;
            PlanExecution.INCOM = 0;
            bool? current1; bool? current2;
            string TC_status = string.Empty;
            string query = string.Empty;
            TC_ExecutionStatus = string.Empty;
            string Qsys_firmware = string.Empty;
            //Bitmap crash_image = null;
            //bool copy_crash_design = false;
            string TestExecutionItemNameTostring = string.Empty;
            string TC_log_Pathtowrite = string.Empty;
            string TP_log_Pathtowrite = string.Empty;
            versionForDeploy = string.Empty;
            netPairNameForDeploy = string.Empty;
            backup_versionForDeploy = string.Empty;
            backup_netPairNameForDeploy = string.Empty;
            selectedCoreIPAddress = string.Empty;
            backup_selectedCoreIPAddress = string.Empty;
            current_CoreBackup = null;
            isBackupCoreAvailable = false;
            string Loadfailpath = string.Empty;
            string LoadfailTPname = string.Empty;
            string testplannamefilter = string.Empty;
            string filteredtestsuitename = string.Empty;
            string CoreNetworkIssue = string.Empty;
            string TS_bgmstatus = string.Empty;
            desgnname = string.Empty;
            checkedTCReport.Clear();
            passedTCReport.Clear();
            string[] datetimeTPTCTA = new string[3];
            core_New_FirmwareVersion = new Tuple<bool, string>(true, string.Empty);

            Tuple<bool, string> result_crash_check = new Tuple<bool, string>(false, string.Empty);
            try
            {
                if ((((current1 = PlanExecution.IsChecked) == true) || ((current1 = PlanExecution.IsChecked) == null)) && (current1 = PlanExecution.IsChecked) != false)
                {
                    PlanExecutionUniqueID = PlanExecutionUniqueID + 1;
                    PlanExecution.EXID = PlanExecutionUniqueID;
                    PlanExecution.IsImageVisibility = Visibility.Visible;
                    UpdateExecuteStatusInformation(PlanExecution, progress);
                    string Inventoryinfo = GetInventoryInfoFromDesign(PlanExecution.ItemName);
                    ////logs

                    //string Date_time_writelogs = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                    DateTime Date_time_writelogs = DateTime.Now;
                    string isStatusfail = string.Empty;
                    bool isQREM = grt(PlanExecution.ItemName, out isStatusfail);
                                        
                    ///////Getting Coretoken and firmware version for both primary and backup 
                    if (!isQREM)
                    {
                        string token = string.Empty;
                        if (selectedCoreIPAddress != string.Empty)
                        {
                            core_New_FirmwareVersion = firmwareVersioncheck(selectedCoreIPAddress);
                            Corelogon(selectedCoreIPAddress, applicationPassword, out token);
                            CoreLogonToken = token;
                        }

                        if (backup_selectedCoreIPAddress != string.Empty)
                        {
                            Backup_core_New_FirmwareVersion = firmwareVersioncheck(backup_selectedCoreIPAddress);
                            Corelogon(backup_selectedCoreIPAddress, applicationPassword, out token);
                            CoreLogonToken_Backup = token;
                        }
                    }
                    else
                    {
                        var systemDetails = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                        core_New_FirmwareVersion = new Tuple<bool, string>(true, systemDetails["FirmwareVersion"]);
                        if (isBackupCoreAvailable)
                        {
                            var systemDetailsBackup = GetQREMSystemDetails(BackupselectedCoreSystemSiteID[2]);
                            core_New_FirmwareVersion = new Tuple<bool, string>(true, systemDetailsBackup["FirmwareVersion"]);
                        }
                    }


                    var TP_log_start_lines = log_object.get_TP_Logs_lastline("TP_Start", PlanExecution.ItemKey, PlanExecution.ItemName, selectedDutDeviceItemList, applicationPassword, TP_timestamp, this, isQREM);
                    string TP_bgmstatus = string.Empty;
                    string TP_background_startTime = DateTime.Now.ToString();
                    string exec_tpname_starttime = exid.ToString() + PlanExecution.ItemName + TP_background_startTime;

                    datetimeTPTCTA[0] = TP_background_startTime;

                    TP_BGM_Status.Clear();
                    TS_BGM_Status.Clear();
                    DeviceDiscovery.WriteToLogFile("Background Monitoring Started for Test Suite: " + testsuitename);
                    Qsys_firmware = get_qsys_fileversion(Properties.Settings.Default.Designversion);
                    filteredtestsuitename = filtername(testsuitename);
                    testplannamefilter = filtername(PlanExecution.ItemName);
                    TP_log_Pathtowrite = QatConstants.QATServerPath + "\\Logs" + "\\" + exid.ToString() + "\\" + filteredtestsuitename + "_" + Date_time_Suite + "\\" + testplannamefilter + "_" + TP_timestamp + "_" + Qsys_firmware;
                    Loadfailpath = QatConstants.QATServerPath + "\\Logs" + "\\" + exid.ToString() + "\\" + filteredtestsuitename + "_" + Date_time_Suite;
                    LoadfailTPname = "Load_fail_" + testplannamefilter + "_" + TP_timestamp;

                    var tP_BM_status = Execute_BackgroundMonitoring_Testplan(TSid, testsuitename, PlanExecution, "BM_start", TP_log_Pathtowrite, exid, 0, exec_tpname_starttime, TP_background_startTime, isQREM);

                    //TempTestPlanTable
                    query = "Insert into TempTestPlanTable values('" + exid + "','In Progress',@TSName,@TPName,  '" + PlanExecution.EXEC.ToString() + "','" + PlanExecution.PASS.ToString() + "','" + PlanExecution.FAIL.ToString() + "','" + PlanExecution.INCOM.ToString() + "','Background Verification Incomplete',' " + TP_background_startTime + "','" + string.Empty + "','Not Available','" + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "--" + Environment.OSVersion.ToString() + "',@DesignName,'" + Inventoryinfo + "','" + DateTime.Today.ToString() + "','" + string.Empty + "','" + string.Empty + "','" + LoopIterations + "','" + PlanExecution.EXID + "','" + SuiteExecutionUniqueID + "',@exec_tpname_starttime)";//Added in 15-mar-17
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@DesignName", PlanExecution.DesignName, "@exec_tpname_starttime", exec_tpname_starttime, string.Empty, string.Empty, string.Empty, string.Empty);

                    bool BM_status = tP_BM_status.Item1;
                    string BM_Remarks_status = tP_BM_status.Item2;
                    bool BG_Values_Failure = tP_BM_status.Item3;

                    if (BM_status == true)
                    {
                        if (TS_BGM_Status.Count > 0)
                        {
                            TS_bgmstatus = string.Join(",", TS_BGM_Status.ToArray());
                        }

                        if (BM_Remarks_status == "QREM")
                        {
                            TS_bgmstatus = "Background Verification not supported for QREM";
                        }
                        else if (BM_Remarks_status != string.Empty)
                        {
                            TS_bgmstatus = "No Background Verification";
                        }

                        TS_BGM_Status.Clear();

                        query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                        if (BG_Values_Failure == true)
                        {
                            PlanExecution.Parent.TCBackGroundResult.Add("Fail");
                            query = "Update TempTestPlanTable set Remarks='Background Verification Failed at TS'  where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            //query = "Update TempTestPlanTable set status='Fail',Remarks='Background Verification Failed at TS'  where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                    }
                    else
                    {
                        foreach(TreeViewExplorer tc in PlanExecution.Children)
                        {
                            if(tc.IsChecked==true)
                            {
                                PlanExecution.INCOM += 1;
                                PlanExecution.Parent.INCOM += 1;
                                treeViewExplorerExecutionRootItem.INCOM += 1;
                                tc.TCINCOM = true;
                                tc.ExecutionIncompleteStatus = "Completed";
                            }
                        }

                        query = "Update TempSuiteTable set BackGroundVerification='" + BM_Remarks_status+ "',TotalIncompleteTestCase = '" + PlanExecution.Parent.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.Parent.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.Parent.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.Parent.FAIL.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID +"'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        query = "Update TempTestPlanTable set BackGroundVerification='" + BM_Remarks_status+ "',TotalIncompleteTestCase = '" + PlanExecution.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        if (BM_Remarks_status == "Background Verification Fail")
                        {
                            PlanstatusUpdate(PlanExecution, testsuitename, LoopItearations, "Core not available in network", true);
                            return false;
                        }
                    }

                    if (!string.IsNullOrEmpty(isStatusfail))
                    {
                        string TP_buildversion = "Not Available";
                        //tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        PlanstatusUpdate(PlanExecution, testsuitename, LoopItearations, isStatusfail, true);
                        query = "Update TempTestPlanTable set BackGroundVerification='" + string.Empty + "',EndTime='" + DateTime.Now.ToString() + "',Build='" + TP_buildversion + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        //var tP_BM_status_end2 = Execute_BackgroundMonitoring_Testplan(TSid, testsuitename, PlanExecution, "BM_end", TP_log_Pathtowrite, exid, 0, exec_tpname_starttime);
                        return false;
                    }
                    
                    TP_execution_starttime = DateTime.Now.ToString();
                    checkedTP.Add(PlanExecution.ItemName);
                    checkedTestplans.Add(PlanExecution);
                    hasdesign = false;
                    hasdesign = Copydesignfiletolocalfolder(PlanExecution.ItemName, isQREM);

                    if (hasdesign == false)
                    {
                        autoevent.Set();
                        if (runnerWindowInstance.autoevent_Reset_Delay)
                        {
                            Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                        }
						
                        autoevent.WaitOne();
                        var loadDesignToCoreStatus = Loaddesigntocore(PlanExecution.ItemName, RedeployedDesign, PlanExecution.ItemName, Loadfailpath, LoadfailTPname, isQREM);
                        hasSetPassword = loadDesignToCoreStatus.Item1;

                        string TP_buildversion = string.Empty;

                        if (isQREM)
                        {
                            TP_buildversion = core_New_FirmwareVersion.Item2;
                        }
                        else
                        {
                            TP_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                        }

                        if (string.IsNullOrEmpty(TP_buildversion))
                        {
                            TP_buildversion = "Not Available";
                        }

                        query = "Update TempTestPlanTable set Build='" + TP_buildversion + "' where ExecID='" + exid + "' and Testplanname=@TPName and Testsuitename=@TSName";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        if (hasSetPassword == true)
                        {
                            //DUTConfiguration(PlanExecution.ItemName);
                            DeviceDiscovery.WriteToLogFile("Execution Started for Test Plan: " + PlanExecution.ItemName);

                            bool libConnectionSuccess = false;

                            if (PlanExecution.CECActionChk)
                            {
                                if (open_libcec.Connect(10000))
                                {
                                    libConnectionSuccess = true;
                                    open_libcec.SetLogEnable(true, exid);
                                }
                            }

                            //writeinqsysfile("Testplan Name :" + PlanExecution.ItemName);
                            CaseExecutionUniqueID = 0;
                            Int64 casetimestamp = 0;

                            DateTime dateTimeForUSB = DateTime.Now;

                            foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                            {
                                TestExecution.ExecutionStatus = "Pass";
                                TestExecution.ExecutionBackgroundend = "Pass";
                                bool TimeExeceeds = false;
                                TC_status = string.Empty;
                                // TestExecution.IsImageVisibility = Visibility.Visible;
                                UpdateExecuteStatusInformation(TestExecution, string.Empty);
                                autoevent.Set();
                                if (runnerWindowInstance.autoevent_Reset_Delay)
                                {
                                    Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                                }
								
                                autoevent.WaitOne();

                                string planfiltertestcase = string.Empty;
                                if ((current2 = TestExecution.IsChecked) == true)
                                {
                                    TimeExeceeds = false;
                                    if (InputTime <= DateTime.Now && LoopType == "Duration")
                                    {
                                        TimeExeceeds = true;
                                        loopvalue(string.Empty);
                                        ExecutionLoopCount("Waiting for execution completion");

                                        //ExecutionMessage = ("Waiting for execution completion");
                                        //ExecutionLoopCount(ExecutionMessage);
                                        
                                        TestExecution.IsImageVisibility = Visibility.Visible;

                                        foreach (TreeViewExplorer TestExecution1 in PlanExecution.Children)
                                        {
                                            if (TestExecution1.IsChecked == true)
                                            {
                                                if (TestExecution1.ExecutionIncompleteStatus == "Incomplete")
                                                {
                                                    TestExecution1.IsImageVisibility = Visibility.Visible;
                                                    UpdateExecuteStatusInformation(TestExecution1, Incomplete);

                                                    try
                                                    {
                                                        TestExecution1.Parent.INCOM += 1;
                                                        TestExecution1.Parent.Parent.INCOM += 1;
                                                        treeViewExplorerExecutionRootItem.INCOM += 1;
                                                        TestExecution1.TCINCOM = true;
                                                        TestExecution1.ExecutionIncompleteStatus = "Completed";
                                                    }
                                                    catch(Exception ex2)
                                                    {

                                                    }
                                                }
                                            }
                                        }
                                        if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                                        {
                                            qsyDesignProcess.Kill();
                                        }

                                        UpdateExecuteStatusInformation(TestExecution.Parent, Incomplete);
                                        UpdateExecuteStatusInformation(TestExecution.Parent.Parent, Incomplete);
                                        return true;
                                    }

                                    if (TimeExeceeds == false)
                                    {
                                        CoreNetworkIssue = string.Empty;
                                        CaseExecutionUniqueID = CaseExecutionUniqueID + 1;
                                        TestExecution.EXID = CaseExecutionUniqueID;
                                        casetimestamp += 1;
                                        TestExecution.IsImageVisibility = Visibility.Visible;
                                        UpdateExecuteStatusInformation(TestExecution, progress);
                                        TestExecution.ExecutionStatus = "Pass";
                                        DeviceDiscovery.WriteToLogFile("Background Monitoring Started for Test Plan: " + PlanExecution.ItemName);
                                        TP_BGM_Status.Clear();
                                        DateTime Date_time_writelogs_TC = DateTime.Now;
                                        planfiltertestcase = filtername(TestExecution.ItemName);
                                        TC_log_Pathtowrite = QatConstants.QATServerPath + "\\Logs" + "\\" + exid.ToString() + "\\" + filteredtestsuitename + "_" + Date_time_Suite + "\\" + testplannamefilter + "_" + TP_timestamp + "_" + Qsys_firmware + "\\" + planfiltertestcase + "_" + casetimestamp.ToString();
                                        string ExidTctime_forTCBM = DateTime.Now.ToString();
                                        string Start_time_TCBM_start = ExidTctime_forTCBM;
                                        TestExecution.RerunTime.Clear();
                                        TestExecution.TCBackGroundResult.Clear();

                                        var TC_BM_start_status = Execute_BackgroundMonitoring_TestCase(PlanExecution.ItemKey, PlanExecution.ItemName, TestExecution, TP_log_start_lines.Item2, TP_log_start_lines.Item1, Date_time_writelogs_TC, Date_time_Suite, TestExecution.ItemName, testsuitename, exid, Qsys_firmware, "BM_start", "start", TC_log_Pathtowrite, casetimestamp.ToString(), TestExecution.EXID, ExidTctime_forTCBM, Start_time_TCBM_start, isQREM);
                                        bool TC_BM_start_Execution_status = TC_BM_start_status.Item1;
                                        string TC_BM_start_Remarks_status = TC_BM_start_status.Item2;
                                        bool TC_BM_start_Execution_Failurestatus = TC_BM_start_status.Item3;

                                        if (TC_BM_start_Execution_status == true)
                                        {
                                            if (TC_BM_start_Execution_Failurestatus == true)
                                            { CoreNetworkIssue = "Background Verification Failed at TP"; TestExecution.ExecutionBackgroundend = "Fail"; }

                                            if (TP_BGM_Status.Count > 0)
                                            {
                                                TP_bgmstatus = string.Join(",", TP_BGM_Status.ToArray());

                                                //if(TP_bgmstatus.Contains("Fail"))
                                                //{
                                                //    TestExecution.TCBackGroundResult.Add("Fail");
                                                //}
                                                
                                            }
                                            if (TC_BM_start_Remarks_status == "QREM")
                                            { TP_bgmstatus = "Background Verification not supporetd for QREM"; ExidTctime_forTCBM = string.Empty; }
                                            else if (TC_BM_start_Remarks_status != string.Empty)
                                            {
                                                TP_bgmstatus = "No Background Verification"; ExidTctime_forTCBM = string.Empty;
                                            }
                                            TP_BGM_Status.Clear();
                                            query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        }
                                        else
                                        {
                                            query = "Update TempTestPlanTable set BackGroundVerification='" + TC_BM_start_Remarks_status + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            if (TC_BM_start_Remarks_status == "Background Verification Fail")
                                            {
                                                TestExecution.ExecutionBackgroundend = "Fail";
                                                PlanExecution.ExecutionStatus = "Fail";
                                                CoreNetworkIssue = "Core not available in network";
                                            }
                                        }

                                        TC_execution_starttime = DateTime.Now.ToString();
                                        checkedTC.Add(TestExecution.ItemName);
                                        checkedTCReport.Add(TestExecution.ItemName);
                                        checkedTestcases.Add(TestExecution);

                                        Thread.Sleep(2000);
                                        DeviceDiscovery.WriteToLogFile("Execution Started for Test case: " + TestExecution.ItemName);
                                        TestExecutionItemNameTostring = TestExecution.ItemName;

                                        bool iscorepresent = false;

                                        if (isQREM)
                                        {
                                            var iscorepresents = QREM_CoreIsInOnline(selectedCoreSystemSiteID[1]);
                                            ////OK, Not availab;e, offline
                                            iscorepresent = iscorepresents.Item1;
                                        }
                                        else
                                        {
                                            iscorepresent = IsCorePresent(selectedCoreIPAddress);
                                        }

                                        if (iscorepresent)
                                        {
                                            Execute_Testcase(TestExecution.ItemName, PlanExecution.ItemName, PlanExecution.ItemKey, testsuitename, exid, TestExecution, TP_log_start_lines.Item1, TP_log_start_lines.Item2, Date_time_writelogs_TC, Date_time_Suite, Qsys_firmware, LoopIterations, TC_log_Pathtowrite, casetimestamp.ToString(), Loadfailpath, LoadfailTPname, TestExecution.EXID, PlanExecution.EXID, SuiteExecutionUniqueID, dateTimeForUSB, ExidTctime_forTCBM, libConnectionSuccess, datetimeTPTCTA, isQREM);

                                            if (TestExecution.ExecutionStatus != string.Empty)// if (get_status.Count > 0)
                                            {
                                                if (TestExecution.ExecutionStatus == "Fail")//(get_status.Contains("Fail"))
                                                {
                                                    //TestExecution.Parent.FAIL += 1;
                                                    //TestExecution.Parent.Parent.FAIL += 1;
                                                    //treeViewExplorerExecutionRootItem.FAIL += 1;
                                                    FailedTC_inTP.Add(TestExecution.ItemName);
                                                    TC_status = "Fail";
                                                    TC_ExecutionStatus = Fail;
                                                    PlanExecution.ExecutionStatus = "Fail";
                                                    MailFailedCount = MailFailedCount + 1;
                                                    TestExecution.TCINCOM = false;
                                                    //TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                                    //TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                                    //treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;
                                                }
                                                else if (TestExecution.ExecutionStatus == "Pass")//(get_status.Contains("Pass"))
                                                {
                                                    //TestExecution.Parent.PASS += 1;
                                                    //TestExecution.Parent.Parent.PASS += 1;
                                                    //treeViewExplorerExecutionRootItem.PASS += 1;
                                                    //writeinqsysfile("Testcase Name :" + TestExecution.ItemName + " --->Pass");
                                                    passedTC.Add(TestExecution.ItemName);
                                                    passedTCReport.Add(TestExecution.ItemName);
                                                    passedTC_inTP.Add(TestExecution.ItemName);
                                                    TC_status = "Pass";
                                                    TC_ExecutionStatus = Pass;
                                                    TestExecution.TCINCOM = false;

                                                    //TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                                    //TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                                    //treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;
                                                }
                                            }


                                            string TC_Inventoryinfo = GetInventoryInfoFromDesign(PlanExecution.ItemName);
                                            string TC_buildversion = GetCoreVersionFromCore(devicesInDesign);
                                            if (string.IsNullOrEmpty(TC_buildversion))
                                            {
                                                if (isQREM)
                                                {
                                                    var details = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                                                    TC_buildversion = details["FirmwareVersion"];
                                                }
                                                else
                                                {
                                                    TC_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);

                                                }

                                                if (string.IsNullOrEmpty(TC_buildversion))
                                                {
                                                    TC_buildversion = "Not Available";
                                                }
                                            }
                                            TC_execution_endtime = DateTime.Now.ToString();
                                            query = "Insert into Testcase_Report values('" + exid + "',@TSName, @TPname, @ExecutionName, '" + TC_status + "','" + TC_execution_starttime + "',' " + TC_execution_endtime + "', '" + TC_buildversion + "', @TCInvertoryInfo, '" + TP_bgmstatus + "', '" + string.Empty + "')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPname", PlanExecution.ItemName, "@ExecutionName", TestExecution.ItemName, "@TCInvertoryInfo", TC_Inventoryinfo, string.Empty, string.Empty, string.Empty, string.Empty);

                                            if (TC_status == "Fail")
                                            {
                                                query = "Update TempTestCaseTable set status='" + TC_status + "',Remarks='One of Tab fails so case is failed',EndTime='" + TC_execution_endtime + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "'and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }

                                            if (TC_status == "Pass")
                                            {
                                                query = "Update TempTestCaseTable set status='" + TC_status + "',EndTime='" + TC_execution_endtime + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }

                                          
                                            //TempTestCaseTable
                                            TC_status = string.Empty;
                                            query = "Update TempTestCaseTable set EndTime='" + TC_execution_endtime + "',DesignName='" + desgnname + "',Inventory='" + TC_Inventoryinfo + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";//removed build in 15-mar-17
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            query = "Update TempExecutionTable set Build='" + TE_BuildVersion + "' where Execid='" + dupExecID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        }
                                        else
                                        {
                                            string tcstattime = DateTime.Now.ToString();
                                            string tcwithexid_TC = exid + TestExecution.ItemName + tcstattime;
                                            TestExecution.ExecutionStatus = "Fail";
                                            PlanExecution.ExecutionStatus = "Fail";
                                            string TC_buildversion = GetCoreVersionFromCore(devicesInDesign);
                                            if (string.IsNullOrEmpty(TC_buildversion))
                                            {
                                                if (isQREM)
                                                {
                                                    var details = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                                                    TC_buildversion = details["FirmwareVersion"];
                                                }
                                                else
                                                {
                                                    TC_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);

                                                }

                                                if (string.IsNullOrEmpty(TC_buildversion))
                                                {
                                                    TC_buildversion = "Not Available";
                                                }
                                            }

                                            //UpdateExecuteStatusInformation(TestExecution, Fail);
                                            string stTime = DateTime.Now.ToString();
                                            datetimeTPTCTA[1] = stTime;

                                            query = "Insert into TempTestCaseTable values('" + exid + "','Fail',@TSName,@TPName,@TCName,'" + stTime + "','" + stTime + "','Not Available',' " + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "--" + Environment.OSVersion.ToString() + "',@DesignName,'" + string.Empty + "',@TCWithEXID,'" + DateTime.Today.ToString() + "','Core not available in network','" + string.Empty + "','" + LoopIterations + "','" + TestExecution.EXID + "','" + PlanExecution.EXID + "','" + SuiteExecutionUniqueID + "')";//removed build in 15-mar-17
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, "@DesignName", desgnname, "@TCWithEXID", tcwithexid_TC, string.Empty, string.Empty);
                                        }

                                        TestExecution.RerunTime.Clear();
                                        string Start_time_TCBM_End = DateTime.Now.ToString();
                                        var TC_BM_end_status = Execute_BackgroundMonitoring_TestCase(PlanExecution.ItemKey, PlanExecution.ItemName, TestExecution, TP_log_start_lines.Item2, TP_log_start_lines.Item1, Date_time_writelogs_TC, Date_time_Suite, TestExecutionItemNameTostring, testsuitename, exid, Qsys_firmware, "BM_end", "stop", TC_log_Pathtowrite, casetimestamp.ToString(), TestExecution.EXID, ExidTctime_forTCBM, Start_time_TCBM_End, isQREM);
                                        bool TC_BM_endt_Execution_status = TC_BM_end_status.Item1;
                                        string TC_BM_end_Remarks_status = TC_BM_end_status.Item2;
                                        bool TC_BM_End_Execution_Failurestatus = TC_BM_end_status.Item3;
                                        if (TC_BM_endt_Execution_status == true)
                                        {
                                            if (TC_BM_End_Execution_Failurestatus == true)
                                            { CoreNetworkIssue = "Background Verification Failed at TP"; }

                                            if (TP_BGM_Status.Count > 0)
                                            {
                                                TP_bgmstatus = string.Join(",", TP_BGM_Status.ToArray());
                                                //if (TP_bgmstatus.Contains("Fail"))
                                                //{
                                                //    TestExecution.TCBackGroundResult.Add("Fail");
                                                //}
                                              
                                            }

                                            if (TC_BM_end_Remarks_status == "QREM")
                                                TP_bgmstatus = "Background Verification not supporetd for QREM";
                                            else if (TC_BM_end_Remarks_status != string.Empty)
                                            {
                                                TP_bgmstatus = "No Background Verification";
                                            }
                                            TP_BGM_Status.Clear();
                                            query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        }
                                        else
                                        {
                                            query = "Update TempTestPlanTable set BackGroundVerification='" + TC_BM_end_Remarks_status + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            if (TC_BM_end_Remarks_status == "Background Verification Fail")
                                            {
                                                TestExecution.ExecutionStatus = "Fail";
                                                PlanExecution.ExecutionStatus = "Fail";
                                                CoreNetworkIssue = "Core not available in network";
                                            }
                                        }


                                        if (TestExecution.ExecutionStatus == "Fail" || (TestExecution.ExecutionStatus=="Pass" && TestExecution.TCBackGroundResult.Contains("Fail")))
                                        {
                                            TestExecution.Parent.FAIL += 1;
                                            TestExecution.Parent.Parent.FAIL += 1;
                                            treeViewExplorerExecutionRootItem.FAIL += 1;
                                            TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                            TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                            treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;
                                        }
                                        else if (TestExecution.ExecutionStatus == "Pass" && !TestExecution.TCBackGroundResult.Contains("Fail"))//(get_status.Contains("Pass"))
                                        {
                                            TestExecution.Parent.PASS += 1;
                                            TestExecution.Parent.Parent.PASS += 1;
                                            treeViewExplorerExecutionRootItem.PASS += 1;
                                         

                                            TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                            TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                            treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;
                                            
                                        }

                                        TestExecution.TCINCOM = true;
                                        TestExecution.ExecutionIncompleteStatus = "Completed";

                                        DeviceDiscovery.WriteToLogFile("Background Monitoring Ended for Test Plan: " + PlanExecution.ItemName);
                                    }//TimeExeceeds;
                                    
                                    if ((Properties.Settings.Default.AfterTestCaseFails == true) && (Properties.Settings.Default.TestCaseFailsCount != 0) && (Properties.Settings.Default.TestCaseFailsCount == MailFailedCount))
                                    {
                                        
                                        query = "Update TempExecutionTable set status='In Progress',Testsuitename=@TSName,Build='" + TE_BuildVersion + "',Inprogresstime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        Executionsummary();
                                        //GridFill("Total " + MailFailedCount + " TestCase Failed", true, testsuitename);

                                        SendEmail(MailFailedCount + " TestCase failure notification", true, testsuitename,0,0, !PlanExecution.HasDesign);
                                        MailFailedCount ++;
                                    }
                                }//Case Completion                            


                                if (TimeExeceeds == false)
                                {
                                    if (TestExecution.TCBackGroundResult.Contains("Fail"))
                                    {
                                        if (TestExecution.IsChecked == true)
                                        {
                                            if (TestExecution.ExecutionStatus == "Fail")
                                            {
                                                UpdateExecuteStatusInformation(TestExecution, Fail);
                                                // UpdateExecuteStatusInformation(TestExecution.Parent, Fail);
                                                TC_ExecutionStatus = Fail;
                                                query = "Update TempTestCaseTable set status='Fail',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + CoreNetworkIssue + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                ////query = "Update TempTestPlanTable set status='Fail',BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecutionUniqueID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                ////tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty);

                                                ////query = "Update TempSuiteTable set status='Fail' where Testsuitename=@TSName and ExecID='" + dupExecID + "' and TestSuiteLoopIteratios='" + LoopIterations + "' and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                                ////tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecutionUniqueID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                if (passedTC.Count > 0)
                                                {
                                                    passedTC.Remove(TestExecution.ItemName);
                                                    passedTCReport.Remove(TestExecution.ItemName);
                                                }
                                                TestExecution.ExecutionIncompleteStatus = "Completed";
                                            }

                                            else
                                            {
                                                if (TestExecution.IsChecked == true)
                                                {
                                                    if (passedTC.Count > 0)
                                                    {
                                                        passedTC.Remove(TestExecution.ItemName);
                                                        passedTCReport.Remove(TestExecution.ItemName);
                                                    }
                                                    if (PlanExecution.ExecutionStatus != "Fail")
                                                        PlanExecution.ExecutionStatus = "BackGroundFail";

                                                    UpdateExecuteStatusInformation(TestExecution, BackgroundFailure);//Background Failue
                                                                                                                     //UpdateExecuteStatusInformation(TestExecution.Parent, BackgroundFailure);//Background Failue}
                                                    query = "Update TempTestCaseTable set status='Fail',EndTime='" + DateTime.Now.ToString() + "',Remarks='" + CoreNetworkIssue + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                    //query = "Update TempTestPlanTable set status='Fail',BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                    //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                    //query = "Update TempSuiteTable set status='Fail' where Testsuitename=@TSName and ExecID='" + dupExecID + "' and TestSuiteLoopIteratios='" + LoopIterations + "' and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                                    //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                    query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                    
                                                    TestExecution.ExecutionIncompleteStatus = "Completed";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (TestExecution.ExecutionStatus == "Fail")
                                        {
                                            if (TestExecution.IsChecked == true)
                                            {
                                                UpdateExecuteStatusInformation(TestExecution, Fail);
                                                // UpdateExecuteStatusInformation(TestExecution.Parent, Fail);
                                                TC_ExecutionStatus = Fail;
                                                query = "Update TempTestCaseTable set status='Fail',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                //query = "Update TempTestPlanTable set status='Fail',BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                //query = "Update TempSuiteTable set status='Fail' where Testsuitename=@TSName and ExecID='" + dupExecID + "' and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                                //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                
                                                TestExecution.ExecutionIncompleteStatus = "Completed";
                                            }
                                        }
                                        else
                                        {
                                            if (TestExecution.IsChecked == true)
                                            {
                                                UpdateExecuteStatusInformation(TestExecution, Pass);
                                                // UpdateExecuteStatusInformation(TestExecution.Parent, Pass);
                                                query = "Update TempTestCaseTable set status='Pass',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                                //query = "Update TempTestPlanTable set status='Pass',BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                //TestExecution.ExecutionIncompleteStatus = "Completed";

                                                query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                                TestExecution.ExecutionIncompleteStatus = "Completed";
                                            }
                                        }
                                    }
                                }

                            }//Foreach

                            if (PlanExecution.Children.Count == 0)
                            {
                                IsTestCaseAvailable = true;
                                UpdateExecuteStatusInformation(PlanExecution, Pass);
                                UpdateExecuteStatusInformation(PlanExecution.Parent, Pass);
                                PlanExecution.ExecutionIncompleteStatus = "Completed";
                            }


                            foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                            {
                                if ((current2 = TestExecution.IsChecked) == true)
                                {
                                    total_tc_count++;
                                    TC_ExecutionStatus = Pass;
                                }
                            }

                            TC_count = checkedTC.Count().ToString();
                            Passed_TC_count = passedTC.Count().ToString();
                            Failed_TC_count = (checkedTC.Count() - passedTC.Count()).ToString();

                            //TempTestPlanTable
                            if(PlanExecution.Children.Count == 0)
                                query = "Update TempTestPlanTable set BackGroundVerification='No Background Verification', TotalTestCaseExecuted='" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + PlanExecution.INCOM.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                             else
                                query = "Update TempTestPlanTable set TotalTestCaseExecuted='" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + PlanExecution.INCOM.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";

                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            
                            if (total_tc_count == passedTC.Count())
                            {
                                passedTP.Add(PlanExecution.ItemName);
                                TC_ExecutionStatus = Pass;
                            }
                            
                            if (timecreated_GUIcheck != string.Empty)
                            {

                                result_crash_check = Eventlog_crash_check(timecreated_GUIcheck);


                                if (result_crash_check.Item1)
                                {
                                    write_logs(TP_log_Pathtowrite, PlanExecution.ItemName + "_Qsys_crash_log.txt", result_crash_check.Item2, string.Empty);
                                    if (PlanExecution.IsChecked == null || PlanExecution.IsChecked == true)
                                    {
                                        SuiteStatus = "Fail";
                                        PlanExecution.ExecutionStatus = "Fail";
                                        UpdateExecuteStatusInformation(PlanExecution, Fail);
                                        UpdateExecuteStatusInformation(PlanExecution.Parent, Fail);
                                        query = "Update TempTestPlanTable set Remarks='Qsys designer crash occured',status='Fail' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and StartTime='" + TP_background_startTime + "' and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        query = "Update TempSuiteTable set status='Fail',Remarks='Qsys designer crash occured' where Testsuitename=@TSName and ExecID='" + dupExecID + "' and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        if (Properties.Settings.Default.ApplicationCrashes == true)
                                            SendEmail("QSD crash notification", true, testsuitename, 0, 0, !PlanExecution.HasDesign);
                                        //GridFill("QSys Designer Application Crashes", true, testsuitename);
                                        if (!isQREM && !qsyDesignProcess.HasExited)
                                        {
                                            screenshot(qsyDesignProcess, TP_log_Pathtowrite, testplannamefilter, "Qsys_crash.jpeg");


                                        }

                                    }
                                }
                            }
                            if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                            {
                                qsyDesignProcess.Kill();
                            }
                            if (File.Exists(localpathfile))
                            {
                                File.Delete(localpathfile);
                            }
                            else
                            {
                                TC_ExecutionStatus = Fail;
                            }

                            PlanExecution.ExecutionIncompleteStatus = "Completed";

                            open_libcec.Close();
                            open_libcec.SetLogEnable(false, 0);
                        }
                        else
                        {
                            if (File.Exists(localpathfile))
                            {
                                File.Delete(localpathfile);
                            }

                            if (isQREM)
                            {
                                var details = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                                TP_buildversion = details["FirmwareVersion"];
                            }
                            else
                            {
                                TP_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                            }

                            if (string.IsNullOrEmpty(TP_buildversion))
                            {
                                TP_buildversion = "Not Available";
                            }

                            PlanstatusUpdate(PlanExecution, testsuitename, LoopItearations, loadDesignToCoreStatus.Item2.Trim(), true);
                            query = "Update TempTestPlanTable set BackGroundVerification='" + string.Empty + "',EndTime='" + DateTime.Now.ToString() + "',Build='" + TP_buildversion + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                            {
                                if (TestExecution.IsChecked == true)
                                {
                                    //TestExecution.IsImageVisibility = Visibility.Visible;
                                    //UpdateExecuteStatusInformation(TestExecution, Incomplete);
                                    PlanExecution.INCOM += 1;
                                    PlanExecution.Parent.INCOM += 1;
                                    treeViewExplorerExecutionRootItem.INCOM += 1;
                                    TestExecution.TCINCOM = true;
                                    TestExecution.ExecutionIncompleteStatus = "Completed";
                                }
                            }

                            //var tP_BM_status_end1 = Execute_BackgroundMonitoring_Testplan(TSid, testsuitename, PlanExecution, "BM_end", TP_log_Pathtowrite, exid, 0, exec_tpname_starttime);
                            query = "Update TempSuiteTable set TotalIncompleteTestCase = '" + PlanExecution.Parent.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.Parent.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.Parent.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.Parent.FAIL.ToString() + "'where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "' and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", PlanExecution.Parent.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            query = "Update TempTestPlanTable set TotalIncompleteTestCase = '" + PlanExecution.INCOM.ToString() + "',TotalTestCaseExecuted = '" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "'where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";  
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", PlanExecution.Parent.ItemName, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            query = "Update TempExecutionTable set TotalIncompleteTestCase='" + treeViewExplorerExecutionRootItem.INCOM.ToString() + "',TotalTestCaseExecuted='" + treeViewExplorerExecutionRootItem.EXEC.ToString() + "',[TotalPassedTestCase]='" + treeViewExplorerExecutionRootItem.PASS.ToString() + "',[TotalFailedTestCase]='" + treeViewExplorerExecutionRootItem.FAIL.ToString() +"' where ExecID='" + dupExecID + "' ";
                            tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            return false;
                        }
                    }
                    else
                    {
                        string TP_buildversion = string.Empty;

                        if (isQREM)
                        {
                            var details = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                            TP_buildversion = details["FirmwareVersion"];
                        }
                        else
                        {
                            TP_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                        }

                        if (string.IsNullOrEmpty(TP_buildversion))
                        {
                            TP_buildversion = "Not Available";
                        }

                        //query = "Update TempTestPlanTable set Build='" + TP_buildversion + "' where ExecID='" + exid + "' ";
                        //tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        PlanstatusUpdate(PlanExecution, testsuitename, LoopItearations, "Design not copied to local folder", true);
                        query = "Update TempTestPlanTable set BackGroundVerification='" + string.Empty + "',EndTime='" + DateTime.Now.ToString() + "',Build='" + TP_buildversion + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        //var tP_BM_status_end2 = Execute_BackgroundMonitoring_Testplan(TSid, testsuitename, PlanExecution, "BM_end", TP_log_Pathtowrite, exid, 0, exec_tpname_starttime);
                        return false;
                    }

                    string TC_count_inTP = total_tc_count.ToString();
                    string Passed_TC_count_inTP = passedTC_inTP.Count().ToString();
                    string Failed_TC_count_inTP = (total_tc_count - passedTC_inTP.Count()).ToString();
                    Inventoryinfo = GetInventoryInfoFromDesign(PlanExecution.ItemName);
                    string buildversion = GetCoreVersionFromCore(devicesInDesign);
                    if (string.IsNullOrEmpty(buildversion))
                    {
                        if (isQREM)
                        {
                            var details = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                            buildversion = details["FirmwareVersion"];
                        }
                        else
                        {
                            buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                        }

                        if (string.IsNullOrEmpty(buildversion))
                        {
                            buildversion = "Not Available";
                        }
                    }
                    mstrBuildVersion = buildversion;

                    TP_bgmstatus = string.Empty;
                    if (TP_BGM_Status.Count > 0)
                    {
                        TP_bgmstatus = string.Join(",", TP_BGM_Status.ToArray());
                    }

                    TP_BGM_Status.Clear();

                    string endBackgroundStartTime = DateTime.Now.ToString();
                    var tP_BM_status_end = Execute_BackgroundMonitoring_Testplan(TSid, testsuitename, PlanExecution, "BM_end", TP_log_Pathtowrite, exid, 0, exec_tpname_starttime, endBackgroundStartTime, isQREM);
                    bool BM_status_End = tP_BM_status_end.Item1;
                    string BM_Remarks_status_End = tP_BM_status_end.Item2;
                    bool BG_Values_End_Failure = tP_BM_status_end.Item3;

                    if (BM_status_End == true)
                    {
                        if (TS_BGM_Status.Count > 0)
                        {
                            TS_bgmstatus = string.Join(",", TS_BGM_Status.ToArray());
                        }

                        if (BM_Remarks_status_End == "QREM")
                        {
                            TS_bgmstatus = "Background Verification not supported for QREM";
                        }
                        else if (BM_Remarks_status_End != string.Empty)
                        {
                            TS_bgmstatus = "No Background Verification";
                        }
                        TS_BGM_Status.Clear();

                        query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                        if (BG_Values_End_Failure == true)
                        {
                            PlanExecution.Parent.TCBackGroundResult.Add("Fail");
                            query = "Update TempTestPlanTable set status='Fail',Remarks='Background Verification Failed at TS'  where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                    }
                    else
                    {
                        query = "Update TempSuiteTable set BackGroundVerification='" + BM_Remarks_status_End + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        query = "Update TempTestPlanTable set BackGroundVerification='" + BM_Remarks_status_End + ",EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        if (BM_Remarks_status_End == "Background Verification Fail")
                        {
                            PlanstatusUpdate(PlanExecution, testsuitename, LoopItearations, "Core not available in network", false);
                            return false;
                        }
                    }
                    
                    TP_execution_endtime = DateTime.Now.ToString();
                    query = "Insert into Testplan_Report values('" + exid + "',@TSName,@TPName, '" + TP_execution_starttime + "',' " + TP_execution_endtime + "', '" + buildversion + "', @InventoryInfo, '" + TC_count_inTP + "', '" + Passed_TC_count_inTP + "', '" + Failed_TC_count_inTP + "', '" + TS_bgmstatus + "')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@InventoryInfo", Inventoryinfo, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                    //TempTestPlanTable
                    query = "Update TempTestPlanTable set EndTime='" + TP_execution_endtime + "',DesignName=@designName ,Inventory=@InventoryInfo where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";//removed build in 15-mar-17
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@designName", desgnname, "@InventoryInfo", Inventoryinfo, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty);

                    //query = "Update TempExecutionTable set Build='" + TP_buildversion + "' where Execid='" + dupExecID + "'";
                    //tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                    passedTC_inTP.Clear();
                    devicesInDesign.Clear();
                    // total_tc_count = 0;
                    if (TP_log_start_lines != null)
                    {
                        List<logitems> TP_log_start_lines1 = new List<logitems>();
                        List<logitems> TP_log_start_lines2 = new List<logitems>();

                        if (isQREM)
                        {
                            TP_log_start_lines1 = log_object.Tplog_getcurrentline_Reflectcore(TP_log_start_lines.Item2, applicationPassword, "TP_End", Date_time_writelogs, TP_timestamp, this);
                        }
                        else
                        {
                            TP_log_start_lines1 = log_object.Tplog_getcurrentline_core(TP_log_start_lines.Item2, applicationPassword, "TP_End", Date_time_writelogs, TP_timestamp, this);
                            TP_log_start_lines2 = log_object.Tplog_getcurrentline_other(TP_log_start_lines.Item1, applicationPassword, "TP_End", Date_time_writelogs, TP_timestamp, this);
                        }

                        TP_Write_logs(TP_log_start_lines1, TP_log_start_lines2, testsuitename, PlanExecution.ItemName, string.Empty, string.Empty, exid, "test_plan", Date_time_Suite, Qsys_firmware, string.Empty, true, isQREM);
                    }

                    if (PlanExecution.ExecutionBackgroundend == "Fail")
                    {
                        if (PlanExecution.ExecutionStatus == "Fail")
                        {
                            if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                            {
                                UpdateExecuteStatusInformation(PlanExecution, Fail);
                                query = "Update TempTestPlanTable set status='Fail' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                //TempSuiteTable
                                query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                PlanExecution.ExecutionIncompleteStatus = "Completed";
                            }
                        }
                        else
                        {
                            if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                            {
                                UpdateExecuteStatusInformation(PlanExecution, BackgroundFailure);//BackgroundFailure
                                                                                                 // UpdateExecuteStatusInformation(PlanExecution.Parent, BackgroundFailure);//BackgroundFailure
                                BackGround_TP_Count = BackGround_TP_Count + 1;
                                passedTP.Remove(PlanExecution.ItemName);
                                // SuiteStatus = "Fail";
                                query = "Update TempTestPlanTable set status='Fail',Remarks='Background Verification Failed at TS'  where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                //TempSuiteTable
                                query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                PlanExecution.ExecutionIncompleteStatus = "Completed";
                            }
                        }
                    }
                    else
                    {
                        if (PlanExecution.ExecutionStatus == "Fail")
                        {
                            if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                            {
                                UpdateExecuteStatusInformation(PlanExecution, Fail);
                                query = "Update TempTestPlanTable set status='Fail' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                //TempSuiteTable
                                query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                PlanExecution.ExecutionIncompleteStatus = "Completed";
                            }
                        }
                        else
                        {
                            if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                            {
                                if (PlanExecution.ExecutionStatus == "BackGroundFail")
                                {
                                    UpdateExecuteStatusInformation(PlanExecution, BackgroundFailure);
                                    // UpdateExecuteStatusInformation(PlanExecution.Parent, BackgroundFailure);
                                    BackGround_TP_Count = BackGround_TP_Count + 1;
                                    passedTP.Remove(PlanExecution.ItemName);
                                    PlanExecution.ExecutionStatus = string.Empty;

                                    query = "Update TempTestPlanTable set status='Fail' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    //TempSuiteTable
                                    query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    PlanExecution.ExecutionIncompleteStatus = "Completed";
                                }
                                else
                                {
                                    query = "Update TempTestPlanTable set status='Pass' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    UpdateExecuteStatusInformation(PlanExecution, Pass);
                                    query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    PlanExecution.ExecutionIncompleteStatus = "Completed";

                                }
                            }
                        }
                    }
                }
                               
                return false;
            }
            catch (Exception ex)
            {
                open_libcec.Close();
                open_libcec.SetLogEnable(false, 0);

                //if (ex.Message != "Thread was being aborted.")
                //    //ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif              
                return false;
            }
            finally
            {
                sshPrivatekeyFilePath = string.Empty;

                try
                {
                    string path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid;
                    string filePath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid + @"\CECLog.txt";

                    if (Directory.Exists(path))
                        if (File.Exists(filePath))
                            File.Delete(filePath);                    
                }
                catch (Exception ex)
                { DeviceDiscovery.WriteToLogFile("Error occured while deleting CEClog in temp path"); }

                string logPath = string.Empty;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    logPath = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + exid.ToString() + @"\Designer";
                else
                    logPath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid.ToString() + @"\Designer";

                try
                {
                    if (Directory.Exists(logPath))
                    {
                        DirectoryInfo info = new DirectoryInfo(logPath);

                        foreach (var file in info.GetFiles())
                        {
                            file.Delete();
                        }
                    }
                }
                catch (Exception ex) { DeviceDiscovery.WriteToLogFile("Error occured while deleting Designer files in temp path"); }

                ///LFC
                string lfcPath = string.Empty;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    lfcPath = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + exid.ToString() + @"\LFC";
                else
                    lfcPath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid.ToString() + @"\LFC";

                try
                {
                    if (Directory.Exists(lfcPath))
                    {
                        DirectoryInfo info = new DirectoryInfo(lfcPath);

                        foreach (var file in info.GetFiles())
                        {
                            file.Delete();
                        }
                    }
                }
                catch (Exception ex) { DeviceDiscovery.WriteToLogFile("Error occured while deleting Load From Core files in temp path"); }
            }
        }

        public bool ExecuteIndividualScriptTestPlan(TreeViewExplorer PlanExecution, Int32 exid, Int32 TSid, string testsuitename, bool RedeployedDesign, string Date_time_Suite, string LoopIterations, string TP_timestamp, Int32 SuiteExecutionUniqueID, string LoopType, DateTime InputTime, string TE_BuildVersion, string TSA_BuildVersion)
        {
            PlanExecution.PASS = 0;
            PlanExecution.EXEC = 0;
            PlanExecution.FAIL = 0;
            PlanExecution.INCOM = 0;
            bool? current1; bool? current2;
            string TC_status = string.Empty;
            string query = string.Empty;
            TC_ExecutionStatus = string.Empty;
            string Qsys_firmware = string.Empty;
            //Bitmap crash_image = null;
            //bool copy_crash_design = false;
            string TestExecutionItemNameTostring = string.Empty;
            string TC_log_Pathtowrite = string.Empty;
            //string TP_log_Pathtowrite = string.Empty;
            versionForDeploy = string.Empty;
            netPairNameForDeploy = string.Empty;
            backup_versionForDeploy = string.Empty;
            backup_netPairNameForDeploy = string.Empty;
            selectedCoreIPAddress = string.Empty;
            backup_selectedCoreIPAddress = string.Empty;
            isBackupCoreAvailable = false;
            string Loadfailpath = string.Empty;
            string LoadfailTPname = string.Empty;
            string testplannamefilter = string.Empty;
            string filteredtestsuitename = string.Empty;
            string CoreNetworkIssue = string.Empty;
            string TS_bgmstatus = string.Empty;
            desgnname = "No QSYS design Available";
            checkedTCReport.Clear();
            passedTCReport.Clear();
            string[] datetimeTPTCTA = new string[3];
            core_New_FirmwareVersion = new Tuple<bool, string>(true, string.Empty);

            Tuple<bool, string> result_crash_check = new Tuple<bool, string>(false, string.Empty);
            try
            {
                if ((((current1 = PlanExecution.IsChecked) == true) || ((current1 = PlanExecution.IsChecked) == null)) && (current1 = PlanExecution.IsChecked) != false)
                {
                    PlanExecutionUniqueID = PlanExecutionUniqueID + 1;
                    PlanExecution.EXID = PlanExecutionUniqueID;
                    PlanExecution.IsImageVisibility = Visibility.Visible;
                    UpdateExecuteStatusInformation(PlanExecution, progress);
                    string Inventoryinfo = string.Empty;
                    string TP_bgmstatus ="No Background Verification";

                    string TP_background_startTime = DateTime.Now.ToString();
                    string exec_tpname_starttime = exid.ToString() + PlanExecution.ItemName + TP_background_startTime;
                   
                    DeviceDiscovery.WriteToLogFile("Background Monitoring Started for Test Suite: " + testsuitename);
                    filteredtestsuitename = filtername(testsuitename);
                    testplannamefilter = filtername(PlanExecution.ItemName);
                  
                    query = "Insert into TempTestPlanTable values('" + exid + "','In Progress',@TSName,@TPName,  '" + PlanExecution.EXEC.ToString() + "','" + PlanExecution.PASS.ToString() + "','" + PlanExecution.FAIL.ToString() + "','" + PlanExecution.INCOM.ToString() + "','" +TP_bgmstatus+ "',' " + TP_background_startTime + "','" + string.Empty + "','Not Available','" + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "--" + Environment.OSVersion.ToString() + "',@DesignName,'" + Inventoryinfo + "','" + DateTime.Today.ToString() + "','" + string.Empty + "','" + string.Empty + "','" + LoopIterations + "','" + PlanExecution.EXID + "','" + SuiteExecutionUniqueID + "',@exec_tpname_starttime)";//Added in 15-mar-17
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@DesignName", desgnname, "@exec_tpname_starttime", exec_tpname_starttime, string.Empty, string.Empty, string.Empty, string.Empty);
                  

                    TP_execution_starttime = DateTime.Now.ToString();
                    checkedTP.Add(PlanExecution.ItemName);
                    checkedTestplans.Add(PlanExecution);
                    hasdesign = false;


                    if (hasdesign == false)
                    {
                        autoevent.Set();
                        if (runnerWindowInstance.autoevent_Reset_Delay)
                        {
                            Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                        }

                        autoevent.WaitOne();

                        hasSetPassword = true;
                        string TP_buildversion = "Not Available";
                        query = "Update TempTestPlanTable set Build='" + TP_buildversion + "' where ExecID='" + exid + "' and Testplanname=@TPName and Testsuitename=@TSName";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        if (hasSetPassword == true)
                        {

                            DeviceDiscovery.WriteToLogFile("Execution Started for Test Plan: " + PlanExecution.ItemName);

                            CaseExecutionUniqueID = 0;
                            Int64 casetimestamp = 0;

                            DateTime dateTimeForUSB = DateTime.Now;

                            foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                            {
                                TestExecution.ExecutionStatus = "Pass";
                                TestExecution.ExecutionBackgroundend = "Pass";
                                bool TimeExeceeds = false;
                                TC_status = string.Empty;
                                // TestExecution.IsImageVisibility = Visibility.Visible;
                                UpdateExecuteStatusInformation(TestExecution, string.Empty);
                                autoevent.Set();
                                if (runnerWindowInstance.autoevent_Reset_Delay)
                                {
                                    Thread.Sleep(Properties.Settings.Default.Autoevent_wait_time);
                                }

                                autoevent.WaitOne();

                                string planfiltertestcase = string.Empty;
                                if ((current2 = TestExecution.IsChecked) == true)
                                {
                                    TimeExeceeds = false;
                                    if (InputTime <= DateTime.Now && LoopType == "Duration")
                                    {
                                        TimeExeceeds = true;
                                        loopvalue(string.Empty);
                                        ExecutionLoopCount("Waiting for execution completion");
                                        //ExecutionMessage = "Waiting for execution completion"; 
                                        //ExecutionLoopCount(ExecutionMessage);
                                        TestExecution.IsImageVisibility = Visibility.Visible;

                                        foreach (TreeViewExplorer TestExecution1 in PlanExecution.Children)
                                        {
                                            if (TestExecution1.IsChecked == true)
                                            {
                                                if (TestExecution1.ExecutionIncompleteStatus == "Incomplete")
                                                {
                                                    TestExecution1.IsImageVisibility = Visibility.Visible;
                                                    UpdateExecuteStatusInformation(TestExecution1, Incomplete);

                                                    try
                                                    {
                                                        TestExecution1.Parent.INCOM += 1;
                                                        TestExecution1.Parent.Parent.INCOM += 1;
                                                        treeViewExplorerExecutionRootItem.INCOM += 1;
                                                        TestExecution1.TCINCOM = true;
                                                        TestExecution1.ExecutionIncompleteStatus = "Completed";
                                                    }
                                                    catch (Exception ex2)
                                                    {

                                                    }
                                                }
                                            }
                                        }

                                        UpdateExecuteStatusInformation(TestExecution.Parent, Incomplete);
                                        UpdateExecuteStatusInformation(TestExecution.Parent.Parent, Incomplete);
                                        return true;
                                    }

                                    if (TimeExeceeds == false)
                                    {
                                        CoreNetworkIssue = string.Empty;
                                        CaseExecutionUniqueID = CaseExecutionUniqueID + 1;
                                        TestExecution.EXID = CaseExecutionUniqueID;
                                        casetimestamp += 1;
                                        TestExecution.IsImageVisibility = Visibility.Visible;
                                        UpdateExecuteStatusInformation(TestExecution, progress);
                                        TestExecution.ExecutionStatus = "Pass";
                                        //DeviceDiscovery.WriteToLogFile("Background Monitoring Started for Test Plan: " + PlanExecution.ItemName);

                                        DateTime Date_time_writelogs_TC = DateTime.Now;
                                        planfiltertestcase = filtername(TestExecution.ItemName);
                                        TC_log_Pathtowrite = QatConstants.QATServerPath + "\\Logs" + "\\" + exid.ToString() + "\\" + filteredtestsuitename + "_" + Date_time_Suite + "\\" + testplannamefilter + "_" + TP_timestamp + "\\" + planfiltertestcase + "_" + casetimestamp.ToString();
                                        string ExidTctime_forTCBM = DateTime.Now.ToString();
                                        //string Start_time_TCBM_start = ExidTctime_forTCBM;
                                        TestExecution.RerunTime.Clear();
                                        TestExecution.TCBackGroundResult.Clear();




                                        TC_execution_starttime = DateTime.Now.ToString();
                                        checkedTC.Add(TestExecution.ItemName);
                                        checkedTCReport.Add(TestExecution.ItemName);
                                        checkedTestcases.Add(TestExecution);

                                        Thread.Sleep(2000);
                                        DeviceDiscovery.WriteToLogFile("Execution Started for Test case: " + TestExecution.ItemName);
                                        TestExecutionItemNameTostring = TestExecution.ItemName;
                                        if (!PlanExecution.HasDesign)
                                        {
                                            Execute_Testcase(TestExecution.ItemName, PlanExecution.ItemName, PlanExecution.ItemKey, testsuitename, exid, TestExecution, null, null, Date_time_writelogs_TC, Date_time_Suite, Qsys_firmware, LoopIterations, TC_log_Pathtowrite, casetimestamp.ToString(), Loadfailpath, LoadfailTPname, TestExecution.EXID, PlanExecution.EXID, SuiteExecutionUniqueID, dateTimeForUSB, ExidTctime_forTCBM, false, datetimeTPTCTA, false);

                                            if (TestExecution.ExecutionStatus != string.Empty)// if (get_status.Count > 0)
                                            {
                                                if (TestExecution.ExecutionStatus == "Fail")//(get_status.Contains("Fail"))
                                                {

                                                    FailedTC_inTP.Add(TestExecution.ItemName);
                                                    TC_status = "Fail";
                                                    TC_ExecutionStatus = Fail;
                                                    PlanExecution.ExecutionStatus = "Fail";
                                                    MailFailedCount = MailFailedCount + 1;
                                                    TestExecution.TCINCOM = false;

                                                }
                                                else if (TestExecution.ExecutionStatus == "Pass")//(get_status.Contains("Pass"))
                                                {

                                                    passedTC.Add(TestExecution.ItemName);
                                                    passedTCReport.Add(TestExecution.ItemName);
                                                    passedTC_inTP.Add(TestExecution.ItemName);
                                                    TC_status = "Pass";
                                                    TC_ExecutionStatus = Pass;
                                                    TestExecution.TCINCOM = false;


                                                }
                                            }


                                       
                                            string TC_buildversion = "Not Available";
                                            string TC_Inventoryinfo = string.Empty;
                                            //    }
                                            //}
                                            TC_execution_endtime = DateTime.Now.ToString();
                                            query = "Insert into Testcase_Report values('" + exid + "',@TSName, @TPname, @ExecutionName, '" + TC_status + "','" + TC_execution_starttime + "',' " + TC_execution_endtime + "', '" + TC_buildversion + "', @TCInvertoryInfo, '" + TP_bgmstatus + "', '" + string.Empty + "')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPname", PlanExecution.ItemName, "@ExecutionName", TestExecution.ItemName, "@TCInvertoryInfo", TC_Inventoryinfo, string.Empty, string.Empty, string.Empty, string.Empty);

                                            if (TC_status == "Fail")
                                            {
                                                query = "Update TempTestCaseTable set status='" + TC_status + "',Remarks='One of Tab fails so case is failed',EndTime='" + TC_execution_endtime + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "'and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }

                                            if (TC_status == "Pass")
                                            {
                                                query = "Update TempTestCaseTable set status='" + TC_status + "',EndTime='" + TC_execution_endtime + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            }


                                            //TempTestCaseTable
                                            TC_status = string.Empty;
                                            query = "Update TempTestCaseTable set EndTime='" + TC_execution_endtime + "',DesignName='" + desgnname + "',Inventory='" + TC_Inventoryinfo + "' where ExecID='" + exid + "' and Testcasename=@TCName and Testsuitename=@TSName and Testplanname=@TPName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";//removed build in 15-mar-17
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            //query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            query = "Update TempExecutionTable set Build='" + TE_BuildVersion + "' where Execid='" + dupExecID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        }


                                        TestExecution.RerunTime.Clear();
                                        //string Start_time_TCBM_End = DateTime.Now.ToString();
                                        TP_bgmstatus = "No Background Verification";
                                        //TP_BGM_Status.Clear();
                                        query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        if (TestExecution.ExecutionStatus == "Fail" || (TestExecution.ExecutionStatus == "Pass" && TestExecution.TCBackGroundResult.Contains("Fail")))
                                        {
                                            TestExecution.Parent.FAIL += 1;
                                            TestExecution.Parent.Parent.FAIL += 1;
                                            treeViewExplorerExecutionRootItem.FAIL += 1;
                                            TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                            TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                            treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;
                                        }
                                        else if (TestExecution.ExecutionStatus == "Pass" && !TestExecution.TCBackGroundResult.Contains("Fail"))//(get_status.Contains("Pass"))
                                        {
                                            TestExecution.Parent.PASS += 1;
                                            TestExecution.Parent.Parent.PASS += 1;
                                            treeViewExplorerExecutionRootItem.PASS += 1;


                                            TestExecution.Parent.EXEC = TestExecution.Parent.FAIL + TestExecution.Parent.PASS;
                                            TestExecution.Parent.Parent.EXEC = TestExecution.Parent.Parent.FAIL + TestExecution.Parent.Parent.PASS;
                                            treeViewExplorerExecutionRootItem.EXEC = treeViewExplorerExecutionRootItem.FAIL + treeViewExplorerExecutionRootItem.PASS;

                                        }

                                        TestExecution.TCINCOM = true;
                                        TestExecution.ExecutionIncompleteStatus = "Completed";

                                        DeviceDiscovery.WriteToLogFile("Background Monitoring Ended for Test Plan: " + PlanExecution.ItemName);
                                    }//TimeExeceeds;

                                    if ((Properties.Settings.Default.AfterTestCaseFails == true) && (Properties.Settings.Default.TestCaseFailsCount != 0) && (Properties.Settings.Default.TestCaseFailsCount == MailFailedCount))
                                    {

                                        query = "Update TempExecutionTable set status='In Progress',Testsuitename=@TSName,Build='" + TE_BuildVersion + "',Inprogresstime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        Executionsummary();
                                        //GridFill("Total " + MailFailedCount + " TestCase Failed", true, testsuitename);

                                        SendEmail(MailFailedCount + " TestCase failure notification", true, testsuitename, 0, 0, !PlanExecution.HasDesign);
                                        MailFailedCount++;
                                    }
                                }//Case Completion                            


                                if (TimeExeceeds == false)
                                {

                                    if (TestExecution.ExecutionStatus == "Fail")
                                    {
                                        if (TestExecution.IsChecked == true)
                                        {
                                            UpdateExecuteStatusInformation(TestExecution, Fail);
                                            // UpdateExecuteStatusInformation(TestExecution.Parent, Fail);
                                            TC_ExecutionStatus = Fail;
                                            query = "Update TempTestCaseTable set status='Fail',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            
                                            //query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                            TestExecution.ExecutionIncompleteStatus = "Completed";
                                        }
                                    }
                                    else
                                    {
                                        if (TestExecution.IsChecked == true)
                                        {
                                            UpdateExecuteStatusInformation(TestExecution, Pass);
                                          
                                            query = "Update TempTestCaseTable set status='Pass',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and CaseExecutionUniqueID='" + TestExecution.EXID + "' and CaseAlogPlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@TCName", TestExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                          
                                            //query = "Update TempTestPlanTable set BackGroundVerification='" + TP_bgmstatus + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                            TestExecution.ExecutionIncompleteStatus = "Completed";
                                        }
                                    }
                                }


                            }//Foreach

                            if (PlanExecution.Children.Count == 0)
                            {
                                IsTestCaseAvailable = true;
                                UpdateExecuteStatusInformation(PlanExecution, Pass);
                                UpdateExecuteStatusInformation(PlanExecution.Parent, Pass);
                                PlanExecution.ExecutionIncompleteStatus = "Completed";
                            }


                            foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                            {
                                if ((current2 = TestExecution.IsChecked) == true)
                                {
                                    total_tc_count++;
                                    TC_ExecutionStatus = Pass;
                                }
                            }

                            TC_count = checkedTC.Count().ToString();
                            Passed_TC_count = passedTC.Count().ToString();
                            Failed_TC_count = (checkedTC.Count() - passedTC.Count()).ToString();

                            //TempTestPlanTable
                            if (PlanExecution.Children.Count == 0)
                                query = "Update TempTestPlanTable set BackGroundVerification='No Background Verification', TotalTestCaseExecuted='" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + PlanExecution.INCOM.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            else
                                query = "Update TempTestPlanTable set TotalTestCaseExecuted='" + PlanExecution.EXEC.ToString() + "',TotalPassedTestCase='" + PlanExecution.PASS.ToString() + "',TotalFailedTestCase='" + PlanExecution.FAIL.ToString() + "',TotalIncompleteTestCase='" + PlanExecution.INCOM.ToString() + "' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";

                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                            if (total_tc_count == passedTC.Count())
                            {
                                passedTP.Add(PlanExecution.ItemName);
                                TC_ExecutionStatus = Pass;
                            }




                            PlanExecution.ExecutionIncompleteStatus = "Completed";


                        }

                    }


                    string TC_count_inTP = total_tc_count.ToString();
                    string Passed_TC_count_inTP = passedTC_inTP.Count().ToString();
                    string Failed_TC_count_inTP = (total_tc_count - passedTC_inTP.Count()).ToString();
                   
                    string buildversion = "Not Available";
                    


                    TP_execution_endtime = DateTime.Now.ToString();
                    query = "Insert into Testplan_Report values('" + exid + "',@TSName,@TPName, '" + TP_execution_starttime + "',' " + TP_execution_endtime + "', '" + buildversion + "', @InventoryInfo, '" + TC_count_inTP + "', '" + Passed_TC_count_inTP + "', '" + Failed_TC_count_inTP + "', '" + TS_bgmstatus + "')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, "@InventoryInfo", Inventoryinfo, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
           
                    query = "Update TempTestPlanTable set EndTime='" + TP_execution_endtime + "',Inventory=@InventoryInfo where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";//removed build in 15-mar-17
                    tble = report_connection.Report_SendCommand_Toreceive(query,string.Empty, string.Empty, "@InventoryInfo", Inventoryinfo, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty);

                    passedTC_inTP.Clear();
                    devicesInDesign.Clear();
              


                    if (PlanExecution.ExecutionStatus == "Fail")
                    {
                        if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                        {
                            UpdateExecuteStatusInformation(PlanExecution, Fail);
                            query = "Update TempTestPlanTable set status='Fail' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            //TempSuiteTable
                            query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            PlanExecution.ExecutionIncompleteStatus = "Completed";
                        }
                    }
                    else
                    {
                        if (PlanExecution.IsChecked == true || PlanExecution.IsChecked == null)
                        {
                            
                            query = "Update TempTestPlanTable set status='Pass' where ExecID='" + exid + "' and Testsuitename=@TSName and Testplanname=@TPName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            UpdateExecuteStatusInformation(PlanExecution, Pass);
                            query = "Update TempSuiteTable set BackGroundVerification='" + TS_bgmstatus + "' where ExecID='" + exid + "' and Testsuitename=@TSName and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + SuiteExecutionUniqueID + "'";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            PlanExecution.ExecutionIncompleteStatus = "Completed";

                           
                        }
                    }

                }

                return false;
            }
            catch (Exception ex)
            {

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif              
                return false;
            }
            finally
            {
                sshPrivatekeyFilePath = string.Empty;
                try
                {
                    string path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid;


                }
                catch (Exception ex)
                { }
            }
        }
        public void PlanstatusUpdate(TreeViewExplorer PlanExecution, string testsuitename, string LoopIterations, string Remarks, bool Needtoexecute)
        {
            try
            {
                string query = string.Empty;
                UpdateExecuteStatusInformation(PlanExecution, Fail);
                UpdateExecuteStatusInformation(PlanExecution.Parent, Fail);
                //PlanExecution.Parent.ExecutionStatus = "Fail";
                SuiteStatus = "Fail";

                query = "Update TempTestPlanTable set Remarks='" + Remarks + "',status='Fail',EndTime='" + DateTime.Now.ToString() + "' where ExecID='" + dupExecID + "' and Testplanname=@TPName and Testsuitename=@TSName and TestPlanLoopIteratios='" + LoopIterations + "' and PlanExecutionUniqueID='" + PlanExecution.EXID + "'and SuiteAlongwithplanandcaseExecid='" + PlanExecution.Parent.EXID + "'";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", PlanExecution.ItemName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                query = "Update TempSuiteTable set status='Fail',EndTime='" + DateTime.Now.ToString() + "' where Testsuitename=@TSName and ExecID='" + dupExecID + "'and TestSuiteLoopIteratios='" + LoopIterations + "'and SuiteExecutionUniqueID='" + PlanExecution.Parent.EXID + "'";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                TC_ExecutionStatus = Fail;
                if (Needtoexecute != false)
                {
                    foreach (TreeViewExplorer TestExecution in PlanExecution.Children)
                    {
                        if (TestExecution.IsChecked == true)
                        {
                            TestExecution.IsImageVisibility = Visibility.Visible;
                            UpdateExecuteStatusInformation(TestExecution, Incomplete);
                            //TestExecution.ExecutionIncompleteStatus = "Completed";
                        }
                    }
                }
                if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                {
                    qsyDesignProcess.Kill();
                }

                PlanExecution.ExecutionIncompleteStatus = "Completed";
                PlanExecution.Parent.ExecutionIncompleteStatus = "Completed";
            }
            catch (Exception ex)
            {

                //if (ex.Message != "Thread was being aborted.")
                //    //ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        public void screenshot(Process qsysprocess, string path, string planname, string detail)
        {

            Graphics CapturedImage = null;
            Bitmap Imagetosave = null;
            //Int64 pr
            //process_id = qsysprocess.Id;
            string finalpath = string.Empty;
            try
            {
                ShowWindow(qsysprocess.MainWindowHandle, 3);

                //string Execution_ID_logs1 = Properties.Settings.Default.Path.ToString() + "\\Logs" + "\\" + exid.ToString();

                //if (!Directory.Exists(Execution_ID_logs1))
                //{
                //    Directory.CreateDirectory(Execution_ID_logs1);
                //}
                SetForegroundWindow(qsysprocess.MainWindowHandle);
                System.Drawing.Rectangle Image_area = System.Windows.Forms.Screen.GetBounds(System.Drawing.Point.Empty);
                using (Imagetosave = new Bitmap(Image_area.Width, Image_area.Height))
                {
                    using (CapturedImage = Graphics.FromImage(Imagetosave))
                    {
                        CapturedImage.CopyFromScreen(new System.Drawing.Point(Image_area.Left, Image_area.Top), System.Drawing.Point.Empty, Image_area.Size);
                        //CapturedImage.Save() 
                        string fullpath = path + "\\" + planname;
                        if (!Directory.Exists(fullpath))
                            Directory.CreateDirectory(fullpath);
                        Imagetosave.Save(fullpath + detail, ImageFormat.Jpeg);


                    }
                }

            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message.ToString());
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }

        }
        private Tuple<bool, string> Eventlog_crash_check(string timecreated_GUIcheck)

        {
            //string timecreated = DateTime.UtcNow.ToString();

            bool return_bool = false;
            try
            {

                string getvalue = string.Empty;
                string LogSource = "Application";
                string sQuery = "*[EventData[(Data = 'Q-Sys Designer.exe')]]and *[System[(Level=1  or Level=2)]]and *[System[TimeCreated[@SystemTime > '" + timecreated_GUIcheck + "']]]";
                var elQuery = new EventLogQuery(LogSource, PathType.LogName, sQuery);
                var elReader = new System.Diagnostics.Eventing.Reader.EventLogReader(elQuery);
                List<EventRecord> eventList = new List<EventRecord>();
                for (EventRecord eventInstance = elReader.ReadEvent(); null != eventInstance; eventInstance = elReader.ReadEvent())
                {

                    //Access event properties here:
                    //eventInstance.LogName;
                    //eventInstance.ProviderName;
                    getvalue += eventInstance.FormatDescription();
                    getvalue += Environment.NewLine;
                    //eventInstance.FormatDescription.
                    return_bool = true;
                }
                //write_QsysAppcrash(core_logwrite, testsuitename, Planname, exid, Date_time_Suite, Qsys_firmware);

                return new Tuple<bool, string>(return_bool, getvalue);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(false, string.Empty);
            }
        }

        public Dictionary<string, string> redeploy_on_request(TreeViewExplorer treeViewExplorerExecutionRootItem)
        {
            Dictionary<string, string> Return_to_original = new Dictionary<string, string>();
            try
            {
                if (treeViewExplorerExecutionRootItem.Children.Count > 0)
                {
                    var deviceName = GetCheckedCoreAndPheripharels();
                    List<string> coreName = deviceName.Item1;
                    List<string> pheripharelsName = deviceName.Item2;

                    ////////Set Deploy
                    Return_to_original = SetDeployForCore(coreName);
                    string logCommand = string.Empty;
                    string eventLog = string.Empty;
                    /////////Clear Logs                  
                    //string logCommand = "rm /media/log/messages*; echo \"$(date) QAT cleared the ilog for $(hostname)\">> /media/log/messages";
                    ////string eventLog = "rm /var/storage/qsc_datafs/designs/settings/*event_log*;echo \"$(date) QAT cleared the event log for $(hostname)\">> /media/log/messages";
                    //string eventLog = "cd /var/dbfs && sqlite3 sqlite3.db 'delete from events';echo \"$(date) QAT cleared the event log for $(hostname)\">> /media/log/messages";

                    var coreIPaddr = GetIPforClearLogs(coreName);
                    var peripheralIPaddr = GetIPforClearLogs(pheripharelsName);

                    foreach (KeyValuePair<string, string> ipAddr in coreIPaddr.Item1)
                    {
                        bool isNewversion = firmwareversion_Alldevices[ipAddr.Value].Item1;

                        if(isNewversion)
                        {
                            logCommand = "rm /media/log/messages*; echo \"$(date) QAT cleared the ilog for $(hostname)\">> /media/log/messages";
                            eventLog = "cd /var/dbfs && sqlite3 sqlite3.db 'delete from events';echo \"$(date) QAT cleared the event log for $(hostname)\">> /media/log/messages";
                            SSHExectionPassCommand(logCommand, ipAddr.Value);
                            SSHExectionPassCommand(eventLog, ipAddr.Value);
                        }
                        else
                        {
                            logCommand = "rm /media/log/messages*; echo \"$(date) QAT cleared the ilog for $(hostname)\">> /media/log/messages";
                            eventLog = "rm /var/storage/qsc_datafs/designs/settings/*event_log*;echo \"$(date) QAT cleared the event log for $(hostname)\">> /media/log/messages";
                            TelnetExectionPassCommand(logCommand, ipAddr.Value);
                            TelnetExectionPassCommand(eventLog, ipAddr.Value);
                        }
                    }

                    foreach (KeyValuePair<string, string> ipAddr in peripheralIPaddr.Item1)
                    {
                        bool isNewversion = firmwareversion_Alldevices[ipAddr.Value].Item1;
                        string command = "echo \"QAT cleared the ilogs\" > /var/log/messages";

                        if (isNewversion)                        
                            SSHExectionPassCommand(command, ipAddr.Value);
                        
                        else                        
                            TelnetExectionPassCommand(command, ipAddr.Value);  
                    }

                    ////Clear logs for QREM
                    foreach (string devicedetails in coreIPaddr.Item2)
                    {
                        string strResponse = string.Empty;
                        string[] qremDetails = devicedetails.Split(';');
                        HttpPostactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/systems/" + qremDetails[2] + "/events", string.Empty, DeviceDiscovery.QREM_Token, "DELETE", out strResponse);
                    }
                }

                return Return_to_original;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        private Tuple<List<string>, List<string>> GetCheckedCoreAndPheripharels()
        {
            List<string> allCoreNames = new List<string>();
            List<string> allPheripharelsNames = new List<string>();

            try
            {
                List<Int32> planid = new List<Int32>();
                foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                {
                    if ((Suite.IsChecked == true || Suite.IsChecked == null) && (Suite.IsChecked != false))
                    {
                        foreach (TreeViewExplorer Plan in Suite.Children)
                        {
                            if ((Plan.IsChecked == true || Plan.IsChecked == null) && (Plan.IsChecked != false))
                            {

                                planid.Add(Plan.ItemKey);
                            }
                        }
                    }
                }

                foreach (Int32 current_planid in planid)
                {
                    string query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID='" + current_planid + "')";
                    //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                    //this.connect.OpenConnection();
                    System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                    //this.connect.CloseConnection();

                    DataTableReader read = tble.CreateDataReader();
                    while (read.Read())
                    {
                        if ((read[1].ToString().Contains("Core")) | (read[1].ToString().Contains("core")))
                        {
                            if (!allCoreNames.Contains(read[3].ToString()))
                                allCoreNames.Add(read[3].ToString());
                        }
                        else
                        {
                            if (!allPheripharelsNames.Contains(read[3].ToString()))
                                allPheripharelsNames.Add(read[3].ToString());
                        }
                    }
                }

                return new Tuple<List<string>, List<string>>(allCoreNames, allPheripharelsNames);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<List<string>, List<string>>(allCoreNames, allPheripharelsNames);
            }
        }

        private Dictionary<string, string> SetDeployForCore(List<string> coreName)
        {
            Dictionary<string, string> Return_to_original = new Dictionary<string, string>();
            try
            {
                Dictionary<string, string> CoreIPlist = new Dictionary<string, string>();
                Dictionary<string, string> QREMCoredetailslist = new Dictionary<string, string>();

                foreach (string getonecore in coreName)
                {
                    foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                    {
                        if (item.CoreRestoreDesign)
                        {
                            if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                            {
                                if (String.Equals(item.ItemDeviceName, getonecore, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if (!CoreIPlist.ContainsKey(item.ItemDeviceModel + "," + item.ItemDeviceName))
                                    {
                                        if (!string.IsNullOrEmpty(item.ItemPrimaryIPSelected))
                                        {
                                            CoreIPlist.Add(item.ItemDeviceModel + "," + item.ItemDeviceName, item.ItemPrimaryIPSelected);                                           
                                        }
                                        else if (!string.IsNullOrEmpty(item.ItemSecondaryIPSelected))
                                        {
                                            CoreIPlist.Add(item.ItemDeviceModel + "," + item.ItemDeviceName, item.ItemSecondaryIPSelected);                                           
                                        }
                                    }

                                    if (!QREMCoredetailslist.ContainsKey(item.ItemDeviceModel + "," + item.ItemDeviceName))
                                    {
                                        if (item.ItemNetPairingList.ContainsKey(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice"))
                                        {
                                            QREMCoredetailslist.Add(item.ItemDeviceModel + "," + item.ItemDeviceName, "QREM:" + item.ItemNetPairingList[item.ItemNetPairingSelected]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Return_to_original = SetDeployForReflectCore(QREMCoredetailslist);

                foreach (KeyValuePair<string, string> entry in CoreIPlist)
                {
                    string state_pretty = string.Empty;
                    string Design_nameincore = string.Empty;
                    string codename = string.Empty;
                    string restorepath = string.Empty;

                    if (entry.Value != string.Empty)
                    {
                        XmlDocument xml = new XmlDocument();

                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + entry.Value + "//cgi-bin/status_xml", "redeploy_on_request");
                        if(xml==null)
                        {
                            xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + entry.Value + "/cgi-bin/status_xml", "redeploy_on_request");

                        }

                        if (xml == null)
                            return Return_to_original;

                        XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");


                        if (node_state_pretty != null)
                        {
                            state_pretty = node_state_pretty.InnerText;

                            if ((state_pretty != null) && (state_pretty != string.Empty) && (state_pretty == "Running"))
                            {
                                XmlNode node_pretty_name = xml.SelectSingleNode("status/design/pretty_name");
                                XmlNode node_code_name = xml.SelectSingleNode("status/design/code_name");
                                if ((node_pretty_name != null) & (node_code_name != null))
                                {
                                    Design_nameincore = node_pretty_name.InnerText + ".qsys";
                                    codename = node_code_name.InnerText;

                                    if (Design_nameincore != string.Empty)
                                    {

                                        if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                                        {
                                            var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID+@"\D_restore";
                                            restorepath = directorycreate;
                                        }
                                        else
                                        {
                                            var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID+ @"\D_restore");
                                            restorepath = directorycreate.FullName;
                                        }
                                        //if (Directory.Exists(restorepath))
                                        //{
                                        //    File.Delete(restorepath + "*.*");

                                        //}
                                        if (!Directory.Exists(restorepath))
                                        {
                                            Directory.CreateDirectory(restorepath);
                                        }


                                        //string pathforconfiglog = System.IO.Path.Combine(pathtowrite, "Configlog" + "_" + core_logwrite[0].devicenameinDesign + ".qsyslog");
                                        string pathforconfiglog = System.IO.Path.Combine(restorepath, Design_nameincore);
                                        string fileNameonly = System.IO.Path.GetFileNameWithoutExtension(Design_nameincore);
                                        fileNameonly=trimfilename(restorepath, Design_nameincore, fileNameonly, string.Empty);
                                        pathforconfiglog= System.IO.Path.Combine(restorepath, fileNameonly+".qsys");

                                        bool isnewversion = firmwareversion_Alldevices[entry.Value].Item1;
                                        string username = string.Empty;
                                        if (isnewversion)
                                            username = Properties.Settings.Default.DeviceUsername.ToString();
                                        else
                                            username = username_default;

                                        DownloadFromWebClient(entry.Value, pathforconfiglog, "http://" + entry.Value + "/designs/current_design/design.idf", false, username);

                                        ////WebClient webClient = new WebClient();
                                        ////webClient.Credentials = new NetworkCredential("admin", applicationPassword);
                                        ////webClient.DownloadFile("http://" + entry.Value + "/designs/current_design/design.idf", pathforconfiglog);
                                        ////webClient.Dispose();
                                        if (!Return_to_original.Keys.Contains(entry.Value))
                                            Return_to_original.Add(entry.Value, pathforconfiglog);
                                    }
                                }
                            }
                        }
                    }
                }

                return Return_to_original;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        
        private Dictionary<string, string> SetDeployForReflectCore(Dictionary<string, string> Coredetailslist)
        {
            Dictionary<string, string> Return_to_original = new Dictionary<string, string>();

            try
            {
                string state_pretty = string.Empty;
                string Design_nameincore = string.Empty;
                string codename = string.Empty;
                string restorepath = string.Empty;                

                foreach (KeyValuePair<string, string> entry in Coredetailslist)
                {
                    if (entry.Value != string.Empty)
                    {
                        string[] coredetails = entry.Value.Split(';');

                        Dictionary<string, string> designdeatils = GetQREMSystemDetails(coredetails[2]);
                        Design_nameincore = designdeatils["DesignName"];
                        codename = designdeatils["DesignCode"];
                        state_pretty = designdeatils["CoreStatus"];

                        if ((state_pretty != null) && (state_pretty != string.Empty) && (state_pretty == "Running"))
                        {
                            if (Design_nameincore != string.Empty)
                            {
                                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                                {
                                    var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID + @"\D_restore";
                                    restorepath = directorycreate;
                                }
                                else
                                {
                                    var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID + @"\D_restore");
                                    restorepath = directorycreate.FullName;
                                }

                                if (!Directory.Exists(restorepath))
                                {
                                    Directory.CreateDirectory(restorepath);
                                }

								string pathforconfiglog = System.IO.Path.Combine(restorepath, Design_nameincore);
                                string fileNameonly = System.IO.Path.GetFileNameWithoutExtension(Design_nameincore);
                                fileNameonly = trimfilename(restorepath, Design_nameincore, fileNameonly, string.Empty);
                                pathforconfiglog = System.IO.Path.Combine(restorepath, fileNameonly + ".qsys");

                                DownloadFromWebClientactual_reflectCore(coredetails[0], pathforconfiglog, "https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/designs/" + codename + "/design", DeviceDiscovery.QREM_Token);
                                if (!Return_to_original.Keys.Contains(entry.Value))
                                    Return_to_original.Add(entry.Value, pathforconfiglog);
                            }
                        }
                    }
                }

                return Return_to_original;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        private Dictionary<string, string> GetQREMSystemDetails(string systemID)
        {
            Dictionary<string, string> designDetailss = new Dictionary<string, string>();

            try
            {
                designDetailss.Add("DesignName", string.Empty);
                designDetailss.Add("DesignCode", string.Empty);
                designDetailss.Add("CoreStatus", string.Empty);
                designDetailss.Add("RedundancyStatus", string.Empty);
                designDetailss.Add("FirmwareVersion", string.Empty);

                string strResponse = string.Empty;
                var outval = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/systems/" + systemID, DeviceDiscovery.QREM_Token, string.Empty, out strResponse);

                if (outval.Item1 && !string.IsNullOrEmpty(strResponse))
                {
                    dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(strResponse);

                    if (array != null && array.Count > 0)
                    {
                        Dictionary<string, object> coreDetails = array as Dictionary<string, object>;

                        foreach (var coreItems in coreDetails)
                        {
                            if (coreItems.Key == "revision" && coreItems.Value != null)
                            {
                                Dictionary<string, object> getrevisionDetails = coreItems.Value as Dictionary<string, object>;

                                if (getrevisionDetails != null)
                                {
                                    foreach (var revisionDetails in getrevisionDetails)
                                    {
                                        if (revisionDetails.Key == "design" && revisionDetails.Value != null)
                                        {
                                            Dictionary<string, object> getdesignDetails = revisionDetails.Value as Dictionary<string, object>;

                                            if (getdesignDetails != null && getdesignDetails.Count > 0)
                                            {
                                                foreach (var designDetails in getdesignDetails)
                                                {
                                                    if (designDetails.Key == "name" && designDetails.Value != null)
                                                    {
                                                        designDetailss["DesignName"] = designDetails.Value.ToString() + ".qsys";
                                                    }
                                                    else if (designDetails.Key == "code" && designDetails.Value != null)
                                                    {
                                                        designDetailss["DesignCode"] = designDetails.Value.ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (coreItems.Key == "core" && coreItems.Value != null)
                            {
                                Dictionary<string, object> getcoreDetails = coreItems.Value as Dictionary<string, object>;

                                if (getcoreDetails != null)
                                {
                                    foreach (var coreDetail in getcoreDetails)
                                    {
                                        if (coreDetail.Key == "status" && coreDetail.Value != null)
                                        {
                                            Dictionary<string, object> designRunningDetails = coreDetail.Value as Dictionary<string, object>;

                                            if (designRunningDetails != null && designRunningDetails.Count > 0)
                                            {
                                                foreach (var designrunningDetails in designRunningDetails)
                                                {
                                                    if (designrunningDetails.Key == "name" && designrunningDetails.Value != null)
                                                    {
                                                        designDetailss["CoreStatus"] = designrunningDetails.Value.ToString();
                                                    }
                                                }
                                            }
                                        }
                                        else if (coreDetail.Key == "redundancy" && coreDetail.Value != null)
                                        {
                                            Dictionary<string, object> designRunningDetails = coreDetail.Value as Dictionary<string, object>;

                                            if (designRunningDetails != null && designRunningDetails.Count > 0)
                                            {
                                                foreach (var designrunningDetails in designRunningDetails)
                                                {
                                                    if (designrunningDetails.Key == "state" && designrunningDetails.Value != null)
                                                    {
                                                        designDetailss["RedundancyStatus"] = designrunningDetails.Value.ToString();
                                                    }
                                                }
                                            }
                                        }
                                        else if (coreDetail.Key == "firmware" && coreDetail.Value != null)
                                        {
                                            designDetailss["FirmwareVersion"] = coreDetail.Value.ToString();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return designDetailss;
        }

        private Dictionary<string, string[]> GetQREMInventoryDetails(string systemID)
        {
            Dictionary<string, string[]> devicesStatus = new Dictionary<string, string[]>();

            try
            {
                string strResponse = string.Empty;
                var outval = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/v0/systems/" + systemID + "/items", DeviceDiscovery.QREM_Token, string.Empty, out strResponse);

                if (outval.Item1 && !string.IsNullOrEmpty(strResponse))
                {
                    dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(strResponse);

                    if (array != null)
                    {
                        object[] deviceDetails = array as object[];

                        if (deviceDetails != null && deviceDetails.Count() > 0)
                        {
                            foreach (object devicedetail in deviceDetails)
                            {
                                Dictionary<string, object> devices = devicedetail as Dictionary<string, object>;

                                if (devices != null && devices.Count > 0)
                                {
                                    string type = devices["type"].ToString();
                                    string model = devices["model"].ToString();
                                    string message = string.Empty;
                                    string statuscode = string.Empty;

                                    if (devices.ContainsKey("name"))
                                        devicesStatus.Add(devices["name"].ToString(), new string[] { type, model, message, statuscode });

                                    foreach (var device_detail in devices)
                                    {                                       
                                        if (device_detail.Key == "status")
                                        {
                                            Dictionary<string, object> statusdetails = device_detail.Value as Dictionary<string, object>;

                                            if (statusdetails != null)
                                            {
                                                foreach (var status in statusdetails)
                                                {
                                                    if (status.Key == "message")
                                                    {
                                                        message = status.Value.ToString();
                                                        statuscode = statusdetails["code"].ToString();

                                                        if (devices.ContainsKey("name"))
                                                            devicesStatus[devices["name"].ToString()] = new string[] { type, model, message, statuscode };

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return devicesStatus;
        }

        private bool DownloadFromWebClientactual_reflectCore(string execution, string pathforconfiglog, string uriPath, string token)
        {
            try
            {
                using (WebClient webClient = new WebClient())
                {
                    webClient.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + token);
                    webClient.Headers.Add(HttpRequestHeader.Accept, "application/json,application/octet-stream");

                    if (execution != string.Empty)
                        webClient.DownloadFile(uriPath, pathforconfiglog);

                    webClient.Dispose();
                }

                return true;
            }
            catch (Exception ex)
            {
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);

                    if (ex.Message != "Thread was being aborted." && ex.Message != "Unable to connect to the remote server")
                    {
                        DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                        //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }


                    if (ex.Message == "Unable to connect to the remote server")
                    {
                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(execution, selectedDutDeviceItemList);
                        //MessageBox.Show("Exception\n " + deviceName + " Device is not available while Log Verification", "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }

                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    return false;
                }

                return true;
            }
        }

        private Tuple<Dictionary<string, string>, List<string>> GetIPforClearLogs(List<string> deviceName)
        {
            Dictionary<string, string> ipaddr = new Dictionary<string, string>();
            List<string> QREMdevices = new List<string>();

            try
            {
                foreach (string getonecore in deviceName)
                {
                    foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                    {
                        if (item.ClearLogs)
                        {
                            if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                            {
                                if (String.Equals(item.ItemDeviceName, getonecore, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if (!ipaddr.ContainsKey(item.ItemDeviceName))
                                    {
                                        if ((item.ItemPrimaryIPSelected != null)&& (item.ItemPrimaryIPSelected != string.Empty))
                                            ipaddr.Add(item.ItemDeviceName, item.ItemPrimaryIPSelected);
                                        else if ((item.ItemSecondaryIPSelected != null)&& (item.ItemSecondaryIPSelected != string.Empty))
                                            ipaddr.Add(item.ItemDeviceName, item.ItemSecondaryIPSelected);
                                    }

                                    if (item.ItemNetPairingList.ContainsKey(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice") && !QREMdevices.Contains(item.ItemNetPairingList[item.ItemNetPairingSelected]))
                                    {
                                        QREMdevices.Add(item.ItemNetPairingList[item.ItemNetPairingSelected]);
                                    }
                                }
                            }
                        }
                    }
                }

                return new Tuple<Dictionary<string, string>, List<string>>(ipaddr, QREMdevices);
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        public Tuple<bool,string> getCoreNameAndVersion(TreeViewExplorer treeViewExplorerExecutionRootItem,string preferenceQSDVersion)
        {            
            try
            {
                string Design_nameincore = string.Empty;
                string codename = string.Empty;
                string state_pretty = string.Empty;
                //string coreNameForDUT = null;
                string query = string.Empty;
                string selectedCoreIPAddress = string.Empty;
                string restorepath = string.Empty;
                bool allCoreStatus = false;
                string QATMessage = string.Empty;
                List<Int32> All_planid = new List<Int32>();
                List<string> All_cores = new List<string>();
                Dictionary<string, string> All_cores_iplist = new Dictionary<string, string>();
                List<string> AllCoresVersionlist = new List<string>();

                if (treeViewExplorerExecutionRootItem.Children.Count > 0)
                {
                    foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                    {
                        if ((Suite.IsChecked == true || Suite.IsChecked == null) && (Suite.IsChecked != false))
                        {                            
                            foreach (TreeViewExplorer Plan in Suite.Children)
                            {
                                if ((Plan.IsChecked == true || Plan.IsChecked == null) && (Plan.IsChecked != false))
                                {

                                    All_planid.Add(Plan.ItemKey);
                                }
                            }
                        }
                    }

                    if (All_planid.Count > 0)
                    {
                        foreach (Int32 current_planid in All_planid)
                        {
                            query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID='" + current_planid + "')";
                            //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                            //this.connect.OpenConnection();
                            System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                            //this.connect.CloseConnection();

                            DataTableReader read = tble.CreateDataReader();
                            while (read.Read())
                            {
                                if ((read[1].ToString().Contains("Core")) | (read[1].ToString().Contains("core")))
                                {
                                    if (!All_cores.Contains(read[3].ToString()))
                                        All_cores.Add(read[3].ToString());
                                }
                            }
                        }

                        if (All_cores.Count > 0)
                        {
                            foreach (string getonecore in All_cores)
                            {
                                foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                                {
                                    if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                                    {
                                        if (String.Equals(item.ItemDeviceName, getonecore, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            if (!All_cores_iplist.ContainsKey(item.ItemDeviceName))
                                            {
                                                if (!string.IsNullOrEmpty(item.ItemPrimaryIPSelected))
                                                {
                                                    All_cores_iplist.Add(item.ItemDeviceName, item.ItemPrimaryIPSelected);
                                                    string coreCurrentBuild = string.Empty;
                                                    coreCurrentBuild = XmlReadToGetDesignversion(item.ItemPrimaryIPSelected);
                                                    if (coreCurrentBuild != string.Empty)
                                                    {
                                                        if (preferenceQSDVersion.TrimEnd() != coreCurrentBuild.TrimEnd())
                                                        {
                                                            if (!AllCoresVersionlist.Contains(item.ItemNetPairingSelected + "(" + coreCurrentBuild.TrimEnd() + ")"))
                                                            {
                                                                AllCoresVersionlist.Add(item.ItemNetPairingSelected + "(" + coreCurrentBuild.TrimEnd() + ")");
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (!string.IsNullOrEmpty(item.ItemSecondaryIPSelected))
                                                {
                                                    All_cores_iplist.Add(item.ItemDeviceName, item.ItemSecondaryIPSelected);
                                                    string coreCurrentBuild = string.Empty;
                                                    coreCurrentBuild = XmlReadToGetDesignversion(item.ItemSecondaryIPSelected);
                                                    if (coreCurrentBuild != string.Empty)
                                                    {
                                                        if (preferenceQSDVersion.TrimEnd() != coreCurrentBuild.TrimEnd())
                                                        {
                                                            if (!AllCoresVersionlist.Contains(item.ItemNetPairingSelected + "(" + coreCurrentBuild.TrimEnd() + ")"))
                                                            {
                                                                AllCoresVersionlist.Add(item.ItemNetPairingSelected + "(" + coreCurrentBuild.TrimEnd() + ")");
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (item.QREMcoredetails != null && item.QREMcoredetails.Count() > 0)
                                                {
                                                    All_cores_iplist.Add(item.ItemDeviceName, item.ItemSecondaryIPSelected);
                                                    Dictionary<string, string> coreCurrentBuild = GetQREMSystemDetails(item.QREMcoredetails[2]);

                                                    if (preferenceQSDVersion.TrimEnd() != coreCurrentBuild["FirmwareVersion"].TrimEnd())
                                                    {
                                                        if (!AllCoresVersionlist.Contains(item.ItemNetPairingSelected + "(" + coreCurrentBuild["FirmwareVersion"].TrimEnd() + ")"))
                                                        {
                                                            AllCoresVersionlist.Add(item.ItemNetPairingSelected + "(" + coreCurrentBuild["FirmwareVersion"].TrimEnd() + ")");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (AllCoresVersionlist.Count > 0)
                {
                    allCoreStatus = true;
                    QATMessage = String.Join("\n", AllCoresVersionlist);
                }

                return new Tuple<bool, string>(allCoreStatus, QATMessage);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(false, string.Empty);
            }
        }

        public Tuple<bool, string> getFirstCoreNameAndVersion(TreeViewExplorer treeViewExplorerExecutionRootItem)
        {
            try
            {
                string Design_nameincore = string.Empty;
                string codename = string.Empty;
                string state_pretty = string.Empty;
                //string coreNameForDUT = null;
                string query = string.Empty;
                string selectedCoreIPAddress = string.Empty;
                string restorepath = string.Empty;
                bool allCoreStatus = false;
                string QATMessage = string.Empty;
                List<Int32> All_planid = new List<Int32>();
                List<string> All_cores = new List<string>();
                Dictionary<string, string> All_cores_iplist = new Dictionary<string, string>();
                List<string> AllCoresVersionlist = new List<string>();


                if (treeViewExplorerExecutionRootItem.Children.Count > 0)
                {
                    foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                    {

                        if ((Suite.IsChecked == true || Suite.IsChecked == null) && (Suite.IsChecked != false))
                        {


                            foreach (TreeViewExplorer Plan in Suite.Children)
                            {
                                bool breakEnabled = false;
                                if ((Plan.IsChecked == true || Plan.IsChecked == null) && (Plan.IsChecked != false))
                                {

                                    All_planid.Add(Plan.ItemKey);
                                    breakEnabled = true;
                                    break;
                                }
                                if (breakEnabled)
                                {
                                breakEnabled = false;
                                break;
                                }
                                    
                                //if (All_planid.Count == 1)

                            }
                        }
                    }


                    if (All_planid.Count > 0)
                    {
                        foreach (Int32 current_planid in All_planid)
                        {
                            query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID='" + current_planid + "')";
                            //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                            //this.connect.OpenConnection();
                            System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                            //this.connect.CloseConnection();

                            DataTableReader read = tble.CreateDataReader();
                            while (read.Read())
                            {	
							bool primaryCoreFound = false;
                                if ((read[1].ToString().Contains("Core")) | (read[1].ToString().Contains("core")))
                                {
                                    //if (!All_cores.Contains(read[3].ToString()))
                                        All_cores.Add(read[3].ToString());
 									primaryCoreFound = true;
                                }
                                if(primaryCoreFound)
                                {
                                    primaryCoreFound = false;
                                    break;
                                }

                            }

                        }

                        if (All_cores.Count > 0)
                        {
                            foreach (string getonecore in All_cores)

                            {
                                foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                                {
                                    bool deviceFound = false;
                                    if (item.ItemNetPairingSelected != null )
                                    {
                                        if (String.Equals(item.ItemDeviceName, getonecore, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            if (!string.IsNullOrEmpty(item.ItemPrimaryIPSelected))
                                            {
                                                string coreCurrentBuild = string.Empty;
                                                coreCurrentBuild = XmlReadToGetDesignversion(item.ItemPrimaryIPSelected);
                                                if (coreCurrentBuild != string.Empty)
                                                {
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                                else if ((coreCurrentBuild == string.Empty) && (item.ItemNetPairingSelected == "Not Applicable"))
                                                {
                                                    coreCurrentBuild = "Not Available";
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(item.ItemSecondaryIPSelected))
                                            {
                                                string coreCurrentBuild = string.Empty;
                                                coreCurrentBuild = XmlReadToGetDesignversion(item.ItemSecondaryIPSelected);
                                                if (coreCurrentBuild != string.Empty)
                                                {
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                                else if ((coreCurrentBuild == string.Empty) && (item.ItemNetPairingSelected == "Not Applicable"))
                                                {
                                                    coreCurrentBuild = "Not Available";
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                            }
                                            else if (item.ItemNetPairingList.Keys.Contains(item.ItemNetPairingSelected) && (item.ItemNetPairingList[item.ItemNetPairingSelected] != "Localdevice"))
                                            {
                                                string[] coredetail = item.ItemNetPairingList[item.ItemNetPairingSelected].Split(';');
                                                var details = GetQREMSystemDetails(coredetail[2]);
                                                string coreCurrentBuild = details["FirmwareVersion"];

                                                if (!string.IsNullOrEmpty(coreCurrentBuild))
                                                {
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                                else if ((coreCurrentBuild == string.Empty) && (item.ItemNetPairingSelected == "Not Applicable"))
                                                {
                                                    coreCurrentBuild = "Not Available";
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                            }
                                        }
                                    }
                                    if (deviceFound)
                                    {
                                        deviceFound = false;
                                        break;
                                    }

                                }
                            }
                        }
                    }

                }
                if (AllCoresVersionlist.Count > 0)
                {
                    allCoreStatus = true;
                    QATMessage = String.Join(",", AllCoresVersionlist);
                }

                return new Tuple<bool, string>(allCoreStatus, QATMessage);
            }

            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(false, "Not Available");
            }
        }

        public Tuple<bool, string> getcurrentTSCoresNameAndVersion(TreeViewExplorer SuiteExecution)
        {
            try
            {
                string Design_nameincore = string.Empty;
                string codename = string.Empty;
                string state_pretty = string.Empty;
                //string coreNameForDUT = null;
                string query = string.Empty;
                string selectedCoreIPAddress = string.Empty;
                string restorepath = string.Empty;
                bool allCoreStatus = false;
                string QATMessage = string.Empty;
                List<Int32> All_planid = new List<Int32>();
                List<string> All_cores = new List<string>();
                Dictionary<string, string> All_cores_iplist = new Dictionary<string, string>();
                List<string> AllCoresVersionlist = new List<string>();


                if (SuiteExecution.Children.Count > 0)
                {
                    foreach (TreeViewExplorer plan in SuiteExecution.Children)
                    {

                        if ((plan.IsChecked == true || plan.IsChecked == null) && (plan.IsChecked != false))
                        {
                                  All_planid.Add(plan.ItemKey);
                        }
                    }


                    if (All_planid.Count > 0)
                    {
                        foreach (Int32 current_planid in All_planid)
                        {
                            query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID='" + current_planid + "')";
                            //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                            //this.connect.OpenConnection();
                            System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                            //this.connect.CloseConnection();

                            DataTableReader read = tble.CreateDataReader();
                            while (read.Read())
                            {
                                bool primaryCoreFound = false;
                                if ((read[1].ToString().Contains("Core")) | (read[1].ToString().Contains("core")))
                                {
                                    //if (!All_cores.Contains(read[3].ToString()))
                                    All_cores.Add(read[3].ToString());
                                    primaryCoreFound = true;
                                }
                                if(primaryCoreFound)
                                {
                                    primaryCoreFound = false;
                                    break;
                                }
                            }

                        }

                        if (All_cores.Count > 0)
                        {
                            foreach (string getonecore in All_cores)

                            {
                                foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                                {
                                    bool deviceFound = false;
                                    if (item.ItemNetPairingSelected != null )
                                    {
                                        if (String.Equals(item.ItemDeviceName, getonecore, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            if (item.QREMcoredetails != null && item.QREMcoredetails.Count() > 2)
                                            {
                                                if (item.ItemNetPairingSelected == "Not Applicable")
                                                {
                                                    AllCoresVersionlist.Add("Not Available");
                                                    deviceFound = true;
                                                }
                                                else
                                                {
                                                    var firmwareDetails = GetQREMSystemDetails(item.QREMcoredetails[2]);

                                                    if(firmwareDetails.ContainsKey("FirmwareVersion") && !string.IsNullOrEmpty(firmwareDetails["FirmwareVersion"]))
                                                    {
                                                        AllCoresVersionlist.Add(firmwareDetails["FirmwareVersion"]);
                                                        deviceFound = true;
                                                    }
                                                }
                                            }

                                            //if (!All_cores_iplist.ContainsKey(item.ItemDeviceName))
                                            //{
                                            else if (!string.IsNullOrEmpty(item.ItemPrimaryIPSelected))
                                            {
                                                //All_cores_iplist.Add(item.ItemDeviceName, item.ItemPrimaryIPSelected);
                                                string coreCurrentBuild = string.Empty;
                                                coreCurrentBuild = XmlReadToGetDesignversion(item.ItemPrimaryIPSelected);
                                                if (coreCurrentBuild != string.Empty)
                                                {
                                                    //if (!AllCoresVersionlist.Contains(coreCurrentBuild.TrimEnd()))
                                                    //{
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                    //} 
                                                }
                                                else if ((coreCurrentBuild == string.Empty) && (item.ItemNetPairingSelected == "Not Applicable"))
                                                {
                                                    coreCurrentBuild = "Not Available";
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(item.ItemSecondaryIPSelected))
                                            {
                                                //All_cores_iplist.Add(item.ItemDeviceName, item.ItemSecondaryIPSelected);
                                                string coreCurrentBuild = string.Empty;
                                                coreCurrentBuild = XmlReadToGetDesignversion(item.ItemSecondaryIPSelected);
                                                if (coreCurrentBuild != string.Empty)
                                                {
                                                    //if (!AllCoresVersionlist.Contains(coreCurrentBuild.TrimEnd()))
                                                    //{
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                    //}
                                                }
                                                else if ((coreCurrentBuild == string.Empty) && (item.ItemNetPairingSelected == "Not Applicable"))
                                                {
                                                    coreCurrentBuild = "Not Available";
                                                    AllCoresVersionlist.Add(coreCurrentBuild.TrimEnd());
                                                    deviceFound = true;
                                                }
                                            }



                                            //}
                                        }
                                    }
                                    if (deviceFound)
                                    {
                                        deviceFound = false;
                                        break;
                                    }

                                }
                            }
                        }
                    }

                }
                if (AllCoresVersionlist.Count > 0)
                {
                    allCoreStatus = true;
                    QATMessage = String.Join(",", AllCoresVersionlist);
                }

                return new Tuple<bool, string>(allCoreStatus, QATMessage);
            }

            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(false, "Not Available");
            }
        }

        public Tuple<bool,string,List<string>> getFirmwareContainsTestCase(TreeViewExplorer treeViewExplorerExecutionRootItem)
        {
            List<string> notAvailableDeviceName = new List<string>();

            try
            {
                string query = string.Empty;
                bool firmwareStatus = false;
                string QATMessage = string.Empty;
                List<Int32> allCaseID = new List<Int32>();
                List<Int32> firmwareCaseID = new List<Int32>();
                List<string> firmwareCaseName = new List<string>();

                //Dictionary<Int32, TreeViewExplorer> allTCwithPlan = new Dictionary<int, TreeViewExplorer>();
                Dictionary<TreeViewExplorer, string> allTCwithPlan = new Dictionary<TreeViewExplorer, string>();

                if (treeViewExplorerExecutionRootItem.Children.Count > 0)
                {
                    foreach (TreeViewExplorer Suite in treeViewExplorerExecutionRootItem.Children)
                    {
                        if ((Suite.IsChecked == true || Suite.IsChecked == null) && (Suite.IsChecked != false))
                        {
                            foreach (TreeViewExplorer Plan in Suite.Children)
                            {
                                if ((Plan.IsChecked == true || Plan.IsChecked == null) && (Plan.IsChecked != false))
                                {
                                    foreach (TreeViewExplorer Case in Plan.Children)
                                    {
                                        if ((Case.IsChecked == true || Case.IsChecked == null) && (Case.IsChecked != false))
                                        {
                                            allCaseID.Add(Case.ItemKey);

                                            Plan.CECActionChk = false;

                                            if (!allTCwithPlan.Keys.Contains(Plan))
                                                allTCwithPlan.Add(Plan, Case.ItemKey.ToString());
                                            else
                                            {
                                                string val = allTCwithPlan[Plan];
                                                allTCwithPlan[Plan] = val + "','" + Case.ItemKey.ToString();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    foreach (TreeViewExplorer treeview in allTCwithPlan.Keys)
                    {
                        string query1 = "select ActionType,VerificationType from TestAction where TCID in ('" + allTCwithPlan[treeview] + "') and (ActionType = 'CEC Action' or (ActionType = 'Control Action' and VerificationType = 'CEC Verification'))";
                        System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query1, string.Empty, string.Empty);
                        DataTableReader read = tble.CreateDataReader();
                        while (read.Read())
                        {
                            treeview.CECActionChk = true;
                            break;
                        }
                    }

                    List<int> scripTestCaseIDLst = new List<int>();
                    List<string> scripTestActionIDLst = new List<string>();

                    if (allCaseID.Count > 0)
                    {
                        foreach (Int32 currentCaseID in allCaseID)
                        {
                            query = "select ActionType, VerificationType, TestActionID from TestAction where TCID='" + currentCaseID + "'";
                            System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                            DataTableReader read = tble.CreateDataReader();
                            while (read.Read())
                            {
                                if ((read[0].ToString().Contains("Firmware Action")))
                                {
                                    if (!firmwareCaseID.Contains(currentCaseID))
                                        firmwareCaseID.Add(currentCaseID);
                                }

                                if ((read[1].ToString().Contains("Script Verification")))
                                {
                                    if (!scripTestCaseIDLst.Contains(currentCaseID))
                                        scripTestCaseIDLst.Add(currentCaseID);

                                    if (!scripTestActionIDLst.Contains(read[2].ToString()))
                                        scripTestActionIDLst.Add(read[2].ToString());
                                }
                            }
                        }

                        if (firmwareCaseID.Count > 0)
                        {
                            foreach (Int32 FWCaseID in firmwareCaseID)
                            {
                                query = "select Testcasename from Testcase where TestcaseID='" + FWCaseID + "'";
                                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                                DataTableReader read = tble.CreateDataReader();
                                while (read.Read())
                                {                                 
                                        if (!firmwareCaseName.Contains(read[0].ToString()))
                                        firmwareCaseName.Add(read[0].ToString());
                                }
                            }
                        }

                        if(scripTestCaseIDLst.Count > 0)
                        {
                            List<string> scriptDeviceName = new List<string>();
                            List<string> availableDevices = new List<string>();

                            var availabledevices = DeviceDiscovery.AvailableDeviceList;
                            query = "select distinct DeviceName, Action from ScriptVerification where TCID in (" + string.Join(",", scripTestCaseIDLst) + ") and ActionID in (" + string.Join(",", scripTestActionIDLst) + ")";
                            System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, string.Empty, string.Empty);
                            DataTableReader read = tble.CreateDataReader();
                            while (read.Read())
                            {
                                if (read[1].ToString() != "Deploy Monitoring" && !read[1].ToString().StartsWith("CPU Monitoring") && !read[1].ToString().StartsWith("LoadFromCore Monitoring"))
                                {
                                    scriptDeviceName.Add(read[0].ToString());

                                    foreach (string item in availabledevices)
                                    {
                                        string[] splitvalues = item.Split(',');

                                        if (read[0].ToString().ToLower() == splitvalues[1].ToLower())
                                        {
                                            availableDevices.Add(read[0].ToString());
                                        }
                                    }
                                }
                            }

                            notAvailableDeviceName = scriptDeviceName.Except(availableDevices).ToList();
                        }
                    }
                }

                if (firmwareCaseName.Count > 0)
                {
                    firmwareStatus = true;
                    QATMessage = String.Join("\n", firmwareCaseName);
                }

                return new Tuple<bool, string, List<string>>(firmwareStatus, QATMessage, notAvailableDeviceName);
            }

            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string, List<string>>(false, string.Empty, notAvailableDeviceName);
            }
        }
        
        private string WebTestSuiteName = string.Empty;
        private int TestSuiteCount = 0;
        public Int32 get_ExecutionID(string TS_BuildVersion)
        {
            Int32 exid = 0;
            Int32 testsuite_count = 0;
            TestSuiteCount = 0;
            try
            {
                string TestSuiteName = string.Empty;
                execution_starttime = DateTime.Now.ToString();

                foreach (TreeViewExplorer SuiteExecution in treeViewExplorerExecutionRootItem.Children)
                {
                    bool? current;
                    if ((((current = SuiteExecution.IsChecked) == true) || ((current = SuiteExecution.IsChecked) == null)) && ((current = SuiteExecution.IsChecked) != false))
                    {
                        testsuite_count++;

                        if (TestSuiteName == string.Empty)
                        {
                            TestSuiteName = SuiteExecution.ItemName;
                        }
                        else
                        {
                            TestSuiteName += ", " + SuiteExecution.ItemName;
                        }
                    }
                }

                WebTestSuiteName = TestSuiteName;
                string testsuite_cnt = testsuite_count.ToString();
                TestSuiteCount = testsuite_count;
                string testername = Properties.Settings.Default.TesterName.ToString();

                string os_version = Environment.OSVersion.ToString();  //Report_SendCommand_Toreceive
                string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

                System.Data.DataTable tble = null;
                DataTableReader read = null;

                string query = "Insert into Executiontable values('" + execution_starttime + "',' " + string.Empty + "', '" + testsuite_cnt + "','" + string.Empty + "','" + os_version + "', @TSName,'" + string.Empty + "','" + string.Empty + "','No');SELECT CONVERT(int,SCOPE_IDENTITY())";
                //tble = report_connection.Report_SendCommand_Toreceive(query);
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", TestSuiteName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);


                if (tble.Rows.Count > 0)
                {
                    read = tble.CreateDataReader();

                    while (read.Read())
                    {
                        exid = Convert.ToInt32(read.GetInt32(0));
                    }
                }

                query = "Insert into TempExecutionTable values('" + exid + "','Started',@TSName, '" + TS_BuildVersion + "','" + treeViewExplorerExecutionRootItem.EXEC.ToString() + "', '" + treeViewExplorerExecutionRootItem.PASS.ToString() + "', '" + treeViewExplorerExecutionRootItem.FAIL.ToString() + "', '" + treeViewExplorerExecutionRootItem.INCOM.ToString() + "', 'Not Available', '" + DateTime.Today.ToString() + "', '" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query,"@TSName", WebTestSuiteName, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                //exid = 1008;
                return exid;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    //ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return exid;
            }
        }

        public string GetCoreInfoFromDesign(List<string> testplanName)
        {
            string coreinfo = string.Empty;
            try
            {
                SqlCommand cmd = new SqlCommand();
                if (testplanName.Count > 0)
                {
                    var parameters = new string[testplanName.Count];
                    for (int l = 0; l < testplanName.Count; l++)
                    {
                        parameters[l] = string.Format("@TPName{0}", l);
                        cmd.Parameters.AddWithValue(parameters[l], testplanName[l]);
                    }

                    cmd.CommandText = string.Format("select devicenameindesign, DeviceModel from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in ({0}) and DeviceType='Core'))", string.Join(", ", parameters));
                    cmd.Connection = connect.CreateConnection();
                    SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                    System.Data.DataTable tble = new System.Data.DataTable();
                    dataAdapter.Fill(tble);

                    //string str_tstplanName = string.Join("','", testplanName.ToArray());
                    //string query = "select devicenameindesign, DeviceModel from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName))) and DeviceType='Core'";
                    //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                    //this.connect.OpenConnection();
                    //DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", str_tstplanName);
                    //this.connect.CloseConnection();

                    Dictionary<string, string> dict = new Dictionary<string, string>();
                    for (int i = 0; i < tble.Rows.Count; i++)
                    {
                        foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                        {
                            if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                            {
                                if (tble.Rows[i][0].ToString().Equals(item.ItemDeviceName, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if (!dict.ContainsValue(item.ItemNetPairingSelected))
                                    {
                                        if (dict.ContainsKey(tble.Rows[i][1].ToString()) == false)
                                        {
                                            dict.Add(tble.Rows[i][1].ToString(), item.ItemNetPairingSelected);
                                        }
                                        else
                                        {
                                            dict[tble.Rows[i][1].ToString()] += "," + item.ItemNetPairingSelected;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    foreach (KeyValuePair<string, string> d in dict)
                    {
                        if (!deviceNameInDesign.Contains(d.Value))
                        {
                            deviceNameInDesign.Add(d.Key + ": " + d.Value);
                        }
                    }
                }

                coreinfo = string.Join("\n", deviceNameInDesign.ToArray());
                return coreinfo;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                ////ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return coreinfo;
            }
        }

        public string GetCoreVersionFromCore(List<string> CoreName)
        {
            List<string> version = new List<string>();
            string coreversion = string.Empty;
            try
            {
                if (CoreName.Count > 0)
                {
                    foreach (string ver in CoreName)
                    {
                        string str = ver.Substring(1, ver.Length - 2);
                        string[] devicenameModel = Regex.Split(str, ": ");
                        string[] devName = devicenameModel[1].Split(',');

                        foreach (string devicename in devName)
                        {
                            foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                            {
                                if (item.ItemDeviceType == "Core")
                                {
                                    CultureInfo culture1 = CultureInfo.InvariantCulture;
                                    if (item.ItemCurrentBuild != null)
                                    {
                                        if (culture1.CompareInfo.IndexOf(item.ItemNetPairingSelected, devicename, CompareOptions.IgnoreCase) >= 0)
                                        {
                                            if (!version.Contains(item.ItemCurrentBuild.ToString()))
                                            {
                                                version.Add(item.ItemCurrentBuild.ToString());
                                            }

                                            //if (!version.Contains(item.ItemNetPairingSelected + "_" + item.ItemCurrentBuild.ToString()))
                                            //{
                                            //    version.Add(item.ItemNetPairingSelected + "_" + item.ItemCurrentBuild.ToString());
                                            //}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                coreversion = string.Join(", ", version.ToArray());
                return coreversion;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                ////ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return coreversion;
            }
        }

        public string GetInventoryInfoFromDesign(string testplanName)
        {
            string coreinfo = string.Empty;
            try
            {
                if (testplanName != string.Empty)
                {
                    devicesInDesign.Clear();
                    string query = "select devicenameindesign, DeviceModel from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName))) ";
                    //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                    //this.connect.OpenConnection();
                    System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", testplanName);
                    //this.connect.CloseConnection();
                    Dictionary<string, string> dict = new Dictionary<string, string>();
                    for (int i = 0; i < tble.Rows.Count; i++)
                    {
                        foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                        {
                            if (item.ItemNetPairingSelected != null & item.ItemNetPairingSelected != "Not Applicable")
                            {
                                if (tble.Rows[i][0].ToString().Equals(item.ItemDeviceName, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    bool itemExistchk = ChkdeviceNmaeExists(dict, item.ItemNetPairingSelected);

                                    if (!itemExistchk)
                                    {
                                        if (dict.ContainsKey(tble.Rows[i][1].ToString()) == false)
                                        {
                                            dict.Add(tble.Rows[i][1].ToString(), item.ItemNetPairingSelected);
                                        }
                                        else
                                        {
                                            dict[tble.Rows[i][1].ToString()] += "," + item.ItemNetPairingSelected;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    foreach (KeyValuePair<string, string> d in dict)
                    {
                        devicesInDesign.Add(d.Key + ": " + d.Value + ",");
                    }
                }

                coreinfo = string.Join("\n", devicesInDesign.ToArray());
                if (coreinfo.EndsWith(","))
                {
                    coreinfo = coreinfo.TrimEnd().Substring(0, coreinfo.Length - 1);
                }

                return coreinfo;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    DeviceDiscovery.WriteToLogFile("Exception:QAT Error Code - EC03002 " + ex.Message);
                //ExecutionMessageBox("Exception\n " + ex.Message, "QAT Error Code - EC03002", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return coreinfo;
            }
        }

        private bool ChkdeviceNmaeExists(Dictionary<string, string> deviceName, string itemchk)
        {
            try
            {
                foreach (KeyValuePair<string, string> splitdiv in deviceName)
                {
                    if (splitdiv.Value.Contains(itemchk))
                    {
                        return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }

        }
        private bool fileinformation_exeprocess(string path)
        {
            bool ExceptionIsTrue = false;
            try
            {
                FileInfo sample = new FileInfo(path);
            }
            catch
            {
                ExceptionIsTrue = true;

                //MessageBox.Show("Name is too long.Unable to update in design server path, Please rename", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
            }

            return ExceptionIsTrue;
        }


        public string trimfilename(string filepath_design, string designname_local,string onlyfilename,string newname )
        {
            string ExceptionIsTrue = string.Empty;
            try
            {
                //Int32 newnamelength = newname.Length;
                string samplqe = System.IO.Path.Combine(filepath_design, designname_local);
                    Int32 der = samplqe.Length;
                if(der>259)
                {
                    int get_charno = der - 258;
                    string myString = onlyfilename.Remove(onlyfilename.Length - (get_charno+1));
                     return ExceptionIsTrue = myString+"~";
                }
                else
                {
                    return ExceptionIsTrue = onlyfilename;
                }
                //FileInfo sample = new FileInfo(System.IO.Path.Combine(filepath_design,designname_local));
                
            }
            catch(Exception ex)
            {
                return ExceptionIsTrue;
            }
          
        }

        public bool Copydesignfiletolocalfolder(string presentTestPlanName, bool isQREM)
        {
            ////summary: getting the design name of the test plan selected

            try
            {
                DataTableReader read = null;

                string query = "select Designname from designtable where designid in(select DesignID from TPDesignLinkTable where TPID in(select testplanid from Testplan where testplanname=(@TPName)))";
                //tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", presentTestPlanName);
                //this.connect.CloseConnection();

                if (tble.Rows.Count > 0)
                {
                    read = tble.CreateDataReader();

                    while (read.Read())
                    {
                        desgnname = read.GetString(0);
                        Original_desgnname= read.GetString(0); 
                    }
                  
                    ////summary: gets the design from server folder to local execution folder

                    string PreferencesServerPath = QatConstants.QATServerPath + "\\Designs" + "\\";
                    //string PreferencesServerPath = Properties.Settings.Default.Path.ToString();
                    if (PreferencesServerPath == string.Empty)
                    {
                        ExecutionMessageBox("Please enter server path in preferences menu to perform Execution", "Message", MessageBoxButton.OK, MessageBoxImage.Information);
                        hasdesign = true;
                        return hasdesign;
                    }
                    else
                    {
                        string serverpathfile = System.IO.Path.Combine(PreferencesServerPath, desgnname);
                        if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                        {
                            var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID;
                            localdirectorypath = directorycreate;
                        }
                        else
                        {
                            var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID);
                            localdirectorypath = directorycreate.FullName;
                        }
                        string fileNameonly = System.IO.Path.GetFileNameWithoutExtension(desgnname);
                       
                        if (File.Exists(serverpathfile))
                        {
                            if (!Directory.Exists(localdirectorypath))
                            {
                                Directory.CreateDirectory(localdirectorypath);
                            }
							
                            if ((selectedCoreIPAddress != "Not Applicable" && selectedCoreIPAddress != string.Empty) || isQREM)
                            {
                                Tuple<bool, string, string> paired = check_coreis_paired(isQREM);
                                if (!paired.Item1)
                                {
                                   
                                    if (paired.Item3 != string.Empty)
                                    {

                                        localpathfile = System.IO.Path.Combine((localdirectorypath), fileNameonly + "_Running on Core-" + paired.Item3 + ".qsys");
                                        if (!fileinformation_exeprocess(localpathfile) && !File.Exists(localpathfile))
                                        {
                                            File.Copy(serverpathfile, localpathfile);
                                            File.SetAttributes(localpathfile, FileAttributes.Normal);
                                            desgnname = fileNameonly + "_Running on Core-" + paired.Item3 + ".qsys";
                                        }
                                        else
                                        {
                                            fileNameonly = trimfilename(localdirectorypath, fileNameonly + "_Running on Core-" + paired.Item3 + ".qsys",fileNameonly, "_Running on Core-" + paired.Item3 + ".qsys");
                                            
                                            localpathfile = System.IO.Path.Combine((localdirectorypath), fileNameonly + "_Running on Core-" + paired.Item3 + ".qsys");
                                            if (!File.Exists(localpathfile))
                                            {
                                                File.Copy(serverpathfile, localpathfile);
                                                File.SetAttributes(localpathfile, FileAttributes.Normal);
                                                desgnname = fileNameonly + "_Running on Core-" + paired.Item3 + ".qsys";
                                            }
#if DEBUG
          
                                             ExecutionMessageBox("Design name is not added with running on core as not able to copy", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                                           
#endif
                                        }
                                    }
                                    else
                                    {
                                        fileNameonly = trimfilename(localdirectorypath, desgnname, fileNameonly, string.Empty);
                                        localpathfile = System.IO.Path.Combine((localdirectorypath), fileNameonly + ".qsys");
                                        if (!File.Exists(localpathfile))
                                        {
                                            File.Copy(serverpathfile, localpathfile);
                                            File.SetAttributes(localpathfile, FileAttributes.Normal);
                                            desgnname= fileNameonly + ".qsys"; 
                                        }

                                    }

                                }
                                else
                                {
                                    fileNameonly = trimfilename(localdirectorypath, desgnname, fileNameonly, string.Empty);
                                    localpathfile = System.IO.Path.Combine((localdirectorypath), fileNameonly + ".qsys");
                                    if (!File.Exists(localpathfile))
                                    {
                                        File.Copy(serverpathfile, localpathfile);
                                        File.SetAttributes(localpathfile, FileAttributes.Normal);
                                        desgnname = fileNameonly + ".qsys";
                                    }

                                }

                            }
                            else
                            {
                                fileNameonly = trimfilename(localdirectorypath, desgnname, fileNameonly, string.Empty);
                                localpathfile = System.IO.Path.Combine((localdirectorypath), fileNameonly + ".qsys");
                                if (!File.Exists(localpathfile))
                                {
                                    File.Copy(serverpathfile, localpathfile);
                                    File.SetAttributes(localpathfile, FileAttributes.Normal);
                                    desgnname = fileNameonly + ".qsys";
                                }

                            }

                            hasdesign = false;
                            DeviceDiscovery.WriteToLogFile("Design file copied to local excution folder successfully: " + desgnname);
                            return hasdesign;

                        }
                        else
                        {
                         //   ExecutionMessageBox("Design not available in server path, please reload the design using designer", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            hasdesign = true;
                            return hasdesign;
                        }
                    }
                }
                else
                {
                    ExecutionMessageBox("Not able to retreive design name from database", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    hasdesign = true;
                    return hasdesign;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15013", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                hasdesign = true;
                DeviceDiscovery.WriteToLogFile("Design file not copied to local excution folder : " + desgnname);
                return hasdesign;
            }
        }

        
        public Tuple< bool,string> Loaddesigntocore(string FindDesignTestPlan, bool RedeploymentDesign,string testplanName,string TSpath,string TPname_ID, bool isQREM)
        {
            bool loadstatus = false;
            bool returnValue = false;
            string query = string.Empty;
            Redeployed_Design = string.Empty;           

            try
            {
                if (!isQREM)
                {
                    if (selectedCoreIPAddress == string.Empty)

                        return new Tuple<bool, string>(false, "Design deploy failed as core ip address is not configured in DUT configuration");

                    if (selectedCoreIPAddress == "Not Applicable")

                        return new Tuple<bool, string>(false, "Design deploy failed as core ip address is configured as Not applicable in DUT configuration");

                    if (isBackupCoreAvailable == true && backup_selectedCoreIPAddress == string.Empty)
                        return new Tuple<bool, string>(false, "Design deploy failed as backup core ip address is not configured in DUT configuration");

                    if (isBackupCoreAvailable == true && backup_selectedCoreIPAddress == "Not Applicable")
                        return new Tuple<bool, string>(false, "Design deploy failed as backup core ip address is configured as Not applicable in DUT configuration");
                }
                else
                {
                    if (selectedCoreSystemSiteID == null || selectedCoreSystemSiteID.Count() < 1)
                        return new Tuple<bool, string>(false, "Design deploy failed as reflect core is not configured in DUT configuration");
                    
                    if (isBackupCoreAvailable == true && (BackupselectedCoreSystemSiteID == null || BackupselectedCoreSystemSiteID.Count() < 1))
                        return new Tuple<bool, string>(false, "Design deploy failed as reflect backup core is not configured in DUT configuration");
                }

                bool isDeployEnable = false;
                string deployCount = string.Empty;

                query = "select IsDeployEnable,DeployCount from Testplan where Testplanname = @TPName";
                System.Data.DataTable tble1 = QscDatabase.SelectDTWithParameter(query, "@TPName", FindDesignTestPlan);
                DataTableReader read1 = tble1.CreateDataReader();
                while (read1.Read())
                {
                    if (read1[0] != System.DBNull.Value)
                        isDeployEnable = Convert.ToBoolean(read1[0]);
                    if (read1[1] != System.DBNull.Value)
                        deployCount = read1[1].ToString();
                }

                if (!isQREM)
                {
                    if (isOkSelected)
                        loadstatus = designermatch(preferenceQSDInstalledpath, selectedCoreIPAddress, isDeployEnable, deployCount, testplanName, TSpath, TPname_ID);
                    else if (isCancelSelected)
                        loadstatus = true;
                }
                else
                    loadstatus = true;


                mstrDesignName = string.Empty;
                mstrDesignStatus = string.Empty;

                //if (mstrDesignName == string.Empty && mstrDesignStatus == string.Empty)
                //{
                    DeviceDiscovery.WriteToLogFile("Redeployment Design Started:" + RedeploymentDesign.ToString());
                if (isQREM)
                {
                    var designdeatils = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                    mstrDesignName = designdeatils["DesignName"];
                    DeviceDiscovery.WriteToLogFile("device name:" + selectedCoreSystemSiteID[0] + ", Design Name:" + mstrDesignName + " ");
                    mstrDesignStatus = designdeatils["CoreStatus"];
                    DeviceDiscovery.WriteToLogFile("device name:" + selectedCoreSystemSiteID[0] + ", Design Status:" + mstrDesignStatus + " ");
                }
                else
                {
                    XmlReadToGetDesignNameandDesignStatus();

                    if (mstrDesignName != string.Empty)
                    {
                        mstrDesignName = mstrDesignName + ".qsys";
                    }
                }

                if (mstrDesignName == desgnname && mstrDesignStatus == "Running" && RedeploymentDesign == false)
                {
                    Redeployed_Design = "No";
                    DeviceDiscovery.WriteToLogFile("Redeployment Design Ended:" + RedeploymentDesign.ToString());
                    returnValue = true;
                }
                else
                {
                    string designPath = localdirectorypath + "/" + desgnname;
                    //loadstatus = Load_and_Launch(designPath, desgnname);
                    //loadstatus = checkFirmwareActionPresence(FindDesignTestPlan);
                    if (loadstatus)
                    {

                        //// Qsys GUI check start 
                        //string timecreated = DateTime.UtcNow.ToString();
                        DateTime now = DateTime.UtcNow;
                        timecreated_GUIcheck = now.ToString("yyyy-MM-ddTHH:mm:ss.fffffff00K", CultureInfo.InvariantCulture);
                        var DesignLoadStatus = Load_and_Launch_ToExecute(designPath, string.Empty, string.Empty, desgnname, isDeployEnable, deployCount, TSpath, TPname_ID, testplanName, isQREM);
                        if (DesignLoadStatus.Item1 == true)
                        {
                            Redeployed_Design = "Yes";
                            return new Tuple<bool, string>(true, DesignLoadStatus.Item2.Trim());
                        }
                        else
                            Redeployed_Design = "No";

                        return new Tuple<bool, string>(false, DesignLoadStatus.Item2.Trim());
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile("Error occurs during the upgradation/downgradation of core to match Q-sys designer version");
                        return new Tuple<bool, string>(false, "Design not deployed into core");//Design not deployed into core
                    }
                }
                //}

                if (returnValue == true)
                {
                    return new Tuple<bool, string>(true, "");
                }
                else
                {
                    return new Tuple<bool, string>(true, "");
                }

            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15014", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                Redeployed_Design = "No";
                return new Tuple<bool, string>(false, "Design not deployed into core");
            }
        }

        public bool checkFirmwareActionPresence(string planname)
        {
            try
            {
                List<string> tcList = new List<string>();
                List<Int32> tcid1 = new List<Int32>();
                List<string> Actiontype = new List<string>();
                string query = "select Testcasename from Testcase where TestcaseID in(select TCID from TPTCLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName)))";
                //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", planname);
                //this.connect.CloseConnection();

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    tcList.Add(read.GetString(0));
                }

                if (tcList.Count > 0)
                {
                    string[] tclistarray = tcList.ToArray();
                    for (int i = 0; i < tclistarray.Length; i++)
                    {
                        query = "select testcaseid from Testcase where testcasename=(@TCName)";
                        //tble = QscDatabase.SendCommand_Toreceive(query);
                        //this.connect.OpenConnection();
                        tble = QscDatabase.SelectDTWithParameter(query, "@TCName", tclistarray[i]);
                        //this.connect.CloseConnection();

                        read = tble.CreateDataReader();

                        while (read.Read())
                        {
                            tcid1.Add(read.GetInt32(0));
                        }
                    }

                    if (tcid1.Count > 0)
                    {
                        for (int j = 0; j < tcid1.Count; j++)
                        {
                            query = "select Actiontype from testaction where tcid=('" + tcid1[j] + "')";
                            tble = QscDatabase.SendCommand_Toreceive(query);
                            read = tble.CreateDataReader();

                            while (read.Read())
                            {
                                Actiontype.Add(read.GetString(0));
                            }
                        }
                        if ((Actiontype.Count > 0))
                        {
                            //foreach (string str1 in Actiontype)
                            //{
                            if (Actiontype.Contains("Firmware Action"))
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                            //}
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                    //}
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15xx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        //public Tuple<bool,string> Load_and_Launch(string strDesignPath, string executionType, string filePath, string designname)
        //{
        //    bool deploysuccess = false;
        //    string deviceName = string.Empty;
        //    string strResponse = "";
        //    try
        //    {
        //        if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
        //        {
        //            var chkdeviceStatus = HttpGet("http://" + selectedCoreIPAddress + "/cgi-bin/password_set?password1=&password2=", applicationPassword, "EC15015", selectedCoreIPAddress, out strResponse);

        //            if (chkdeviceStatus.Item2)
        //            {
        //                deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);
        //                ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network while setting blank password for core", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
        //                return new Tuple<bool, string> (false, deviceName);
        //            }

        //            if (!chkdeviceStatus.Item1)
        //                return new Tuple<bool, string>(false, deviceName);

        //            ProcessStartInfo qDesignArgs = new ProcessStartInfo();
        //            Thread.Sleep(1000);
        //            string gert = string.Empty;
        //            if (executionType == "Firmware")
        //            {
        //                gert = filePath;
        //            }
        //            else if (executionType == string.Empty)
        //            {
        //                gert = preferenceQSDInstalledpath;
        //            }

        //            qDesignArgs.Arguments = "\"" + localdirectorypath + "/" + designname + "\"" + " /dev /deploy";
        //            qDesignArgs.FileName = gert;
        //            qsyDesignProcess = Process.Start(qDesignArgs);
        //            Thread.Sleep(1000);

        //            int elapsed = 0;

        //            while ((deploysuccess == false) & (elapsed < 3))
        //            {
        //                if (elapsed == 0)
        //                    Thread.Sleep(15000);
        //                if (elapsed == 1)
        //                    Thread.Sleep(10000);
        //                if (elapsed == 2)
        //                    Thread.Sleep(15000);
        //                if (elapsed == 3)
        //                    Thread.Sleep(10000);
        //                deploysuccess = XmlReadToGetDesignlaunch(designname);
                  
        //                elapsed += 1;
        //            }

        //            if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
        //            {
        //                var chkStatus = HttpGet("http://" + selectedCoreIPAddress + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC15016", selectedCoreIPAddress, out strResponse);

        //                if (chkStatus.Item2)
        //                {
        //                    deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);
        //                    ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network while setting blank password for core", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
        //                    return new Tuple<bool, string>(false, deviceName);
        //                }

        //                if (!chkStatus.Item2)
        //                    return new Tuple<bool, string>(false, deviceName);
        //            }

        //            if (deploysuccess == true)
        //            {
        //                DeviceDiscovery.WriteToLogFile("Design file loaded successfully:" + designname);
        //                return new Tuple<bool, string>(deploysuccess, deviceName);
        //            }
        //            else if (deploysuccess == false)
        //            {
        //                DeviceDiscovery.WriteToLogFile("Design file not loaded successfully:" + designname);
        //                return new Tuple<bool, string>(deploysuccess, deviceName);
        //            }
        //        }

        //        return new Tuple<bool, string>(deploysuccess, deviceName);
        //    }
        //    catch (Exception ex)
        //    {
        //        if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
        //        {
        //            var chkStatus = HttpGet("http://" + selectedCoreIPAddress + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC15016", selectedCoreIPAddress, out strResponse);

        //            if (chkStatus.Item2)
        //            {
        //                deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);
        //                ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network while setting blank password for core", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
        //                return new Tuple<bool, string>(deploysuccess, deviceName);
        //            }

        //            if (!chkStatus.Item2)
        //                return new Tuple<bool, string>(deploysuccess, deviceName);
        //        }

        //        if (ex.Message != "Thread was being aborted.")
        //            ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15015", MessageBoxButton.OK, MessageBoxImage.Error);

        //        return new Tuple<bool, string>(deploysuccess, deviceName);
        //    }
        //}

        public Tuple<bool, string> Load_and_Launch_ToExecute(string strDesignPath, string executionType, string filePath, string designname, bool isDeployEnable, string deployCount,string TSpath,string TPname_ID,string testplanName, bool isQREM)
        {
            bool deploysuccess = false;
            string strResponse = string.Empty;
            string TPloadFail = string.Empty;
            string message = "Design file not loaded successfully";
            string FailureReason = string.Empty;

            try
            {
                ////Remote core - use grt function
                string primarydeviceName = string.Empty;
                string backupdeviceName = string.Empty;

                if (isQREM)
                {
                    primarydeviceName = selectedCoreSystemSiteID[0];

                    if (isBackupCoreAvailable == true)
                        if (BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0)
                            backupdeviceName = BackupselectedCoreSystemSiteID[0];
                        else
                            return new Tuple<bool, string>(false, message + " in backup core");
                }
                else
                {
                    primarydeviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);

                    if (isBackupCoreAvailable == true)
                    {
                        if (backup_selectedCoreIPAddress == string.Empty || backup_selectedCoreIPAddress == "Not Applicable")
                        {
                            backupdeviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(backup_selectedCoreIPAddress, selectedDutDeviceItemList);
                            message = message + "in " + backupdeviceName + " core";
                            return new Tuple<bool, string>(false, message);
                        }
                        else if (backup_selectedCoreIPAddress != string.Empty && backup_selectedCoreIPAddress != "Not Applicable")
                        {
                            backupdeviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(backup_selectedCoreIPAddress, selectedDutDeviceItemList);
                        }
                    }
                }

                if ((selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable" & ((isBackupCoreAvailable == true && backup_selectedCoreIPAddress != string.Empty && backup_selectedCoreIPAddress != "Not Applicable") || (isBackupCoreAvailable == false))) ||
                    (selectedCoreSystemSiteID != null & selectedCoreSystemSiteID.Count() > 0 & ((isBackupCoreAvailable == true && BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0) || (isBackupCoreAvailable == false))))
                {
                    string getdevicename = string.Empty;
                    bool coresavailable = false;

                    if (isQREM)
                    {
                        var outval = QREM_CoreIsInOnline(selectedCoreSystemSiteID[1]);

                        if (outval.Item1)
                        {
                            coresavailable = true;
                            if (isBackupCoreAvailable)
                            {
                                coresavailable = false;

                                var outval1 = QREM_CoreIsInOnline(BackupselectedCoreSystemSiteID[1]);

                                if (outval1.Item1)
                                    coresavailable = true;
                                else
                                {
                                    if (!string.IsNullOrEmpty(outval.Item2))
                                    {
                                        //ExecutionMessageBox("Exception\n  " + BackupselectedCoreSystemSiteID[0] + outval.Item2 + " during design load", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                        message = message + " in " + BackupselectedCoreSystemSiteID[0] + " core during design load." + outval.Item2;
                                        return new Tuple<bool, string>(false, message);
                                    }
                                    else
                                    {
                                        //ExecutionMessageBox("Exception\n  " + BackupselectedCoreSystemSiteID[0] + " Device is not available in network during design load", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                        message = message + " in " + BackupselectedCoreSystemSiteID[0] + " core. Device is not available in network during design load";
                                        return new Tuple<bool, string>(false, message);
                                    }
                                }
                            }
                        }
                        else
                        {
                            //ExecutionMessageBox("Exception\n  " + selectedCoreSystemSiteID[0] + " Device is not available in network during design load", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                            message = message + " in " + selectedCoreSystemSiteID[0] + " core. Device is not available in network during design load";
                            return new Tuple<bool, string>(false, message);
                        }
                    }
                    else
                    {
                        if (IsCorePresent(selectedCoreIPAddress))
                        {
                            coresavailable = true;
                            if (isBackupCoreAvailable)
                                if (IsCorePresent(backup_selectedCoreIPAddress))
                                    coresavailable = true;
                                else
                                {
                                    getdevicename = XmlReadToGetDeviceName(selectedCoreIPAddress);
                                    coresavailable = false;
                                }
                        }
                        else
                        {
                            getdevicename = XmlReadToGetDeviceName(selectedCoreIPAddress);
                            coresavailable = false;
                        }
                    }

                    if (coresavailable)
                    {
                        string username = string.Empty;
                        if (core_New_FirmwareVersion.Item1)
                            username = Properties.Settings.Default.DeviceUsername.ToString();
                        else
                            username = "admin";

                        string Backup_username = string.Empty;
                        if (Backup_core_New_FirmwareVersion.Item1)
                            Backup_username = Properties.Settings.Default.DeviceUsername.ToString();
                        else
                            Backup_username = "admin";


                        string exepath = string.Empty;
                        if (executionType == "Firmware")
                        {
                            exepath = filePath;
                        }
                        else if (executionType == string.Empty)
                        {
                            exepath = preferenceQSDInstalledpath;
                        }

                        deploysuccess = DeployXmlToCore(selectedCoreIPAddress, username, Backup_username,applicationPassword, designname, exepath, isQREM, out FailureReason);

                        if (deploysuccess == false)
                        {
                            if (isDeployEnable == true)
                            {
                                int cnt = Convert.ToInt32(deployCount);

                                for (int i = 0; i < cnt; i++)
                                {
                                    deploysuccess = DeployXmlToCore(selectedCoreIPAddress, username, Backup_username, applicationPassword, designname, exepath, isQREM, out FailureReason);
                                }
                            }

                            if (!isQREM)
                            {
                                if ((TSpath != string.Empty) && (TPname_ID != string.Empty))
                                {
                                    if ((selectedCoreIPAddress != "Not Applicable") && (selectedCoreIPAddress != string.Empty))
                                    {
                                        string getcoredevicename = XmlReadToGetDeviceName(selectedCoreIPAddress);
                                        if (getcoredevicename != null && getcoredevicename != string.Empty && primarydeviceName.ToUpper() == getcoredevicename.ToUpper())
                                        {
                                            Tuple<bool, bool> chkStatus = HttpGetForPcap("http://" + selectedCoreIPAddress + "/log.txt", applicationPassword, Properties.Settings.Default.DeviceUsername, out TPloadFail);

                                            //var chkStatus = HttpGet("http://" + selectedCoreIPAddress + "/log.txt", string.Empty, "Readlog", selectedCoreIPAddress, string.Empty, out TPloadFail);

                                            if (!Directory.Exists(TSpath))
                                            {
                                                Directory.CreateDirectory(TSpath);
                                            }

                                            if (chkStatus.Item2)
                                            {
                                                //ExecutionMessageBox("Exception\n  " + primarydeviceName + " Device is not available in network to collect testplan load fail log", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                                                write_logs(TSpath, TPname_ID + ".txt", "Device not available in network during the Test plan load", string.Empty);
                                            }
                                            else
                                            {
                                                if (TPloadFail != string.Empty)
                                                    write_logs(TSpath, TPname_ID + ".txt", TPloadFail, string.Empty);
                                                if (TPloadFail == string.Empty)
                                                    write_logs(TSpath, TPname_ID + ".txt", "No new logs received during the Test plan load", string.Empty);
                                            }
                                        }
                                        else
                                        {
                                            write_logs(TSpath, TPname_ID + ".txt", "No new logs received during the Test plan load", string.Empty);
                                        }
                                    }
                                }
                            }
                        }

                        if (deploysuccess == true)
                        {
                            DeviceDiscovery.WriteToLogFile("Design file loaded successfully:" + designname);
                            if (executionType != "Firmware")
                            {
                                if (isQREM)
                                {
                                    UpgradePeripheralsForReflect();                                    
                                    var timeoutResponse = checkInventoryTimeoutQREM();
                                    deploysuccess = timeoutResponse.Item1;
                                    string responseMessage = timeoutResponse.Item2.Trim();
                                    return new Tuple<bool, string>(deploysuccess, responseMessage);
                                }
                                else
                                {
                                    bool peripheralStatus = false;
                                    peripheralStatus = upgradePeripherals(testplanName, selectedCoreIPAddress, backup_selectedCoreIPAddress);
                                    if (peripheralStatus)
                                    {
                                        string responseMessage = string.Empty;
                                        var timeoutResponse = checkInventoryTimeout(true);
                                        deploysuccess = timeoutResponse.Item1;
                                        responseMessage = timeoutResponse.Item2.Trim();
                                        return new Tuple<bool, string>(deploysuccess, responseMessage);
                                    }
                                    else
                                    {
                                        string responseMessage = string.Empty;
                                        var timeoutResponse = checkInventoryTimeout(false);
                                        deploysuccess = timeoutResponse.Item1;
                                        responseMessage = timeoutResponse.Item2.Trim();
                                        return new Tuple<bool, string>(deploysuccess, responseMessage);
                                    }
                                }
                            }
                            else
                            {
                                string responseMessage = string.Empty;
                                //var timeoutResponse = checkInventoryTimeout(false);
                                //deploysuccess = timeoutResponse.Item1;
                                //responseMessage = timeoutResponse.Item2.Trim();                            
                                return new Tuple<bool, string>(deploysuccess, responseMessage);
                            }
                        }
                        else if (deploysuccess == false)
                        {
                            DeviceDiscovery.WriteToLogFile(message + ":" + designname + FailureReason);
                            return new Tuple<bool, string>(deploysuccess, message + " in core"+ "<br />" + FailureReason);
                        }
                    }
                    else
                    {
                        ExecutionMessageBox("Exception\n  " + getdevicename + " Device is not available in network during design load", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                        message = message + "in " + getdevicename + " core";
                        return new Tuple<bool, string>(false, message);
                        //DeviceDiscovery.WriteToLogFile(message + ":" + designname);
                    }
                }

                return new Tuple<bool, string>(deploysuccess, message+ "<br />" + " Core ip address is not set");
            }
            catch (Exception ex)
            {
                //if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                //{
                //    var chkStatus = HttpGet("http://" + selectedCoreIPAddress + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC15032", selectedCoreIPAddress, out strResponse);
                //    string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);

                //    if (chkStatus.Item2)
                //    {
                //        ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network ", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                //        return new Tuple<bool, string>(false, deviceName + " Device is not available in network");
                //    }

                //    if (!chkStatus.Item2)
                //        return new Tuple<bool, string>(false, "Design file not loaded successfully in " + deviceName + " core");
                //}

                //if (isBackupCoreAvailable == true && backup_selectedCoreIPAddress != string.Empty && backup_selectedCoreIPAddress != "Not Applicable")
                //{
                //    var chkStatus4 = HttpGet("http://" + backup_selectedCoreIPAddress + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC15032", backup_selectedCoreIPAddress, out strResponse);
                //    string deviceName4 = DeviceDiscovery.GetAlldeviceNameForSelectedIP(backup_selectedCoreIPAddress, selectedDutDeviceItemList);

                //    if (chkStatus4.Item2)
                //    {
                //        ExecutionMessageBox("Exception\n  " + deviceName4 + " Device is not available in network ", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                //        return new Tuple<bool, string>(false, deviceName4 + " Device is not available in network");
                //    }

                //    if (!chkStatus4.Item2)
                //        return new Tuple<bool, string>(false, "Design file not loaded successfully in " + deviceName4 + " core");
                //}
				
                if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                {
                    qsyDesignProcess.Kill();
                }
				
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15015", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(deploysuccess, "Design file not loaded successfully"+ "<br />" + ex.Message.ToString());
            }
        }

        private bool upgradePeripherals(string testplanName,string selectedCoreIPAddress,string backup_selectedCoreIPAddress)
        {
            try
            {               
                int xmlResponseCount = 0;
                bool whilebreak = false;
                DUTConfiguration(testplanName);
                List<string> devicesip = GetAllIpForFirmwareVerification(Original_desgnname);
                List<string> devicesversion = new List<string>();
                List<string> devicesstatus = new List<string>();
                List<string> notUpdatedDevices = new List<string>();

                string firmwareversion = string.Empty;

                if (devicesip.Count > 0)
                {
                    string coreVersion = XmlReadToGetDesignversion(selectedCoreIPAddress);

                    foreach (string strIP in devicesip)
                    {
                        string firmwarestatus = string.Empty;
                        whilebreak = false;
                        while ((firmwarestatus != "idle") && (!whilebreak))
                        {
                            firmwarestatus = get_FirmwareLoadState(strIP);
                            if (firmwarestatus == "idle")
                            {
                                firmwareversion = XmlReadToGetDesignversion(strIP);
                                if (firmwareversion != coreVersion)
                                {
                                    xmlResponseCount++;
                                    if (xmlResponseCount > 50)
                                    {

                                        DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                        string devName = XmlReadToGetDeviceName(strIP);
                                        if (devName != string.Empty)
                                        {
                                            if (!notUpdatedDevices.Contains(devName))
                                                notUpdatedDevices.Add(devName);
                                        }
                                        else
                                        {
                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                notUpdatedDevices.Add("not applicable");
                                        }

                                        xmlResponseCount = 0;
                                        whilebreak = true;
                                        break;
                                    }
                                    //DeviceDiscovery.WriteToLogFile("No response received for an IP:" + strIP + " ");
                                    firmwarestatus = string.Empty;
                                }
                                else if (firmwareversion == coreVersion)
                                {
                                    DeviceDiscovery.WriteToLogFile("Firmware Upgradation completed for IP:" + strIP + " with firmware version:" + firmwareversion + "");
                                    devicesversion.Add(firmwareversion);
                                }
                                else if (firmwareversion == string.Empty)
                                {
                                    xmlResponseCount++;
                                    if (xmlResponseCount > 50)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                        string devName = XmlReadToGetDeviceName(strIP);

                                        if (devName != string.Empty)
                                        {
                                            if (!notUpdatedDevices.Contains(devName))
                                                notUpdatedDevices.Add(devName);
                                        }
                                        else
                                        {
                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                notUpdatedDevices.Add("not applicable");
                                        }

                                        xmlResponseCount = 0;
                                        whilebreak = true;
                                        break;
                                    }
                                }
                            }
                            else if ((firmwarestatus == string.Empty) || (firmwarestatus == "complete"))
                            {
                                xmlResponseCount++;
                                if (xmlResponseCount > 50)
                                {
                                    DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                    string devName = XmlReadToGetDeviceName(strIP);

                                    if (devName != string.Empty)
                                    {
                                        if (!notUpdatedDevices.Contains(devName))
                                            notUpdatedDevices.Add(devName);
                                    }
                                    else
                                    {
                                        if (!notUpdatedDevices.Contains("not applicable"))
                                            notUpdatedDevices.Add("not applicable");
                                    }

                                    xmlResponseCount = 0;
                                    whilebreak = true;
                                    break;
                                }
                            }
                        }
                    }

                    foreach (string strver in devicesversion)
                    {
                        if (strver == coreVersion)
                        {
                            devicesstatus.Add("Pass");
                        }
                        else
                        {
                            devicesstatus.Add("Fail");
                        }
                    }

                    if (devicesstatus.Count > 0 && !devicesstatus.Contains("Fail"))
                    {
                        //set_status.Add("Pass");
                        //get_status.Add("Pass");
                        //TestExecution.ExecutionStatus = "Pass";
                        return true;
                    }
                    else
                    {
                        // set_status.Add("Fail");
                        //get_status.Add("Fail");
                        //   TestExecution.ExecutionStatus = "Fail";
                        return false;
                    }
                }
                else
                {
                    // set_status.Add("Pass");
                    //get_status.Add("Pass");
                    //TestExecution.ExecutionStatus = "Pass";
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private Tuple<bool, string> InventoryStatusCheck(bool skipStatusCheck)
        {
            List<string> temp = new List<string>();
            List<string> runstatus = new List<string>();
            string Failremarks = string.Empty;
            bool inventoryStatus = false;
            Rpc Inventory_monitor = new Rpc();
            string currentDesign = string.Empty;


            try
            {
                if ((selectedCoreIPAddress != string.Empty) & (selectedCoreIPAddress != "Not Applicable"))
                {
                    currentDesign = XmlReadToGetDesignName();

                    string designname = Regex.Replace(desgnname, @"\s+", " ");
                    currentDesign = Regex.Replace(currentDesign, @"\s+", " ") + ".qsys";

                    if (currentDesign == designname)
                    {
                        var resp = Inventory_monitor.Send(selectedCoreIPAddress, "Inventory.Get", "", false, string.Empty);
                        string responseFromRPC = resp.Item2.Trim();

                        if (responseFromRPC != string.Empty)
                        {

                            var resultValue = new JavaScriptSerializer{MaxJsonLength=Int32.MaxValue}.Deserialize<jsonReadInventoryList>(responseFromRPC);

                            if (resultValue.result != null && resultValue.result.Count > 0)
                            {
                                foreach (var inventoryValues in resultValue.result)
                                {
                                    string devicename = inventoryValues.Name;
                                    string devicetype = inventoryValues.Type.ToString();
                                    //string devicemodel = inventoryValues.Model;
                                    string devicemodel = inventoryValues.Model.Replace(" ", "");
                                    //if((skipStatusCheck)&&(selectedDutDeviceItemDictionary.Keys.Contains(devicetype + devicename + devicemodel))


                                    if (inventoryValues.Status != null && inventoryValues.Status.Message != null)
                                    {
                                        if (inventoryValues.Status.Message == "OK" || inventoryValues.Status.Code == "0"
                                            || inventoryValues.Status.Message.ToUpper().StartsWith("COMPROMISED") || inventoryValues.Status.Code == "1"
                                            || inventoryValues.Status.Message.ToUpper().StartsWith("MISSING") || inventoryValues.Status.Code == "3"
                                            || inventoryValues.Status.Message.ToUpper().StartsWith("FAULT") || inventoryValues.Status.Code == "2"
                                            || inventoryValues.Status.Message.ToUpper().StartsWith("NOT PRESENT"))
                                        {
                                            runstatus.Add("Pass");
                                        }
                                        else if (devicetype.ToUpper() == "AMPLIFIER" && inventoryValues.Status.Code == "5"
                                             && ((inventoryValues.Status.Message.Trim() == "Initializing - Amplifier Channel Configuration Changed - Deactivate 'Mute All' to Continue")
                                             || (inventoryValues.Status.Message.Trim().Contains("Deactivate 'Mute All' to Continue"))))
                                        {
                                            runstatus.Add("Pass");
                                        }                                     
                                        else if (skipStatusCheck) 
                                        {
                                            if (devicetype.Replace(" ", "").Trim().Equals("StreamingI/O", StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                runstatus.Add("Pass");
                                            }
                                            else
                                            {
                                                DUT_DeviceItem dutItem = selectedDutDeviceItemList.Find(x => x.Bypass.Equals(true) && (x.ItemDeviceName + x.ItemDeviceModel.Replace(" ", "") + x.ItemDeviceType).Equals(devicename + devicemodel + devicetype, StringComparison.CurrentCultureIgnoreCase));
                                                if (dutItem != null)
                                                {
                                                    runstatus.Add("Pass");
                                                }
                                                else
                                                {
                                                    runstatus.Add("Fail");
                                                    temp.Add(devicename + " status is : " + inventoryValues.Status.Message);
                                                }
                                            }
                   
                                        }
                                      
                                        else 
                                        {
                                            runstatus.Add("Fail");
                                            temp.Add(devicename + " status is : " + inventoryValues.Status.Message);
                                        }
                                    }
                                    else
                                    {
                                        runstatus.Add("Fail");
                                        temp.Add(devicename + " status is : Empty");
                                    }
                                }

                                Failremarks = string.Join(",", temp);
                                if (temp.Count > 0)
                                    inventoryStatus = false;
                                else if (temp.Count == 0)
                                    inventoryStatus = true;
                            }
                            else
                            {
                                runstatus.Add("Fail");
                                Failremarks = "Not able to get inventory ";
                                inventoryStatus = false;
                            }
                            
                            
                        }
                        else
                        {
                            runstatus.Add("Fail");
                            Failremarks = "Response not received for Inventory get command ";
                            inventoryStatus = false;
                        }
                    }
                    else
                    {
                        runstatus.Add("Fail");
                        Failremarks = "Wrong design in core ";
                        inventoryStatus = false;
                    }

                }
                else
                {

                    runstatus.Add("Fail");
                    Failremarks = "Core Ip address not available";
                    inventoryStatus = false;
                }

                return new Tuple<bool, string>(inventoryStatus, Failremarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECInventory", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return new Tuple<bool, string>(inventoryStatus, Failremarks);
            }
        }

        private Tuple<bool, string> InventoryStatusCheckQREM(bool skipStatusCheck)
        {
            List<string> temp = new List<string>();
            List<string> runstatus = new List<string>();
            string Failremarks = string.Empty;
            bool inventoryStatus = false;
            Rpc Inventory_monitor = new Rpc();
            string currentDesign = string.Empty;


            try
            {
                if (selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0)
                {
                    var designdetails = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);

                    string designname = Regex.Replace(desgnname, @"\s+", " ");
                    currentDesign = Regex.Replace(designdetails["DesignName"], @"\s+", " ");

                    if (currentDesign == designname)
                    {
                        Dictionary<string, string[]> inventorydetails = GetQREMInventoryDetails(selectedCoreSystemSiteID[2]);

                        if (inventorydetails != null && inventorydetails.Count > 0)
                        {
                            foreach (var inventoryValues in inventorydetails)
                            {
                                string devicename = inventoryValues.Key;
                                string devicetype = inventoryValues.Value[0];
                                string devicemodel = inventoryValues.Value[1].Replace(" ", "");
                                string message = inventoryValues.Value[2];
                                string statuscode = inventoryValues.Value[3];

                                if (!string.IsNullOrEmpty(message))
                                {
                                    if (message == "OK" || statuscode == "0"
                                        || message.ToUpper().StartsWith("COMPROMISED") || statuscode == "1"
                                        || message.ToUpper().StartsWith("MISSING") || statuscode == "3"
                                        || message.ToUpper().StartsWith("FAULT") || statuscode == "2"
                                        || message.ToUpper().StartsWith("NOT PRESENT"))
                                    {
                                        runstatus.Add("Pass");
                                    }
                                    else if (devicetype.ToUpper() == "AMPLIFIER" && statuscode == "5"
                                         && ((message.Trim() == "Initializing - Amplifier Channel Configuration Changed - Deactivate 'Mute All' to Continue")
                                         || (message.Trim().Contains("Deactivate 'Mute All' to Continue"))))
                                    {
                                        runstatus.Add("Pass");
                                    }
                                    else if (skipStatusCheck)
                                    {
                                        if (devicetype.Replace(" ", "").Trim().Equals("StreamingI/O", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            runstatus.Add("Pass");
                                        }
                                        else
                                        {
                                            DUT_DeviceItem dutItem = selectedDutDeviceItemList.Find(x => x.Bypass.Equals(true) && (x.ItemDeviceName + x.ItemDeviceModel.Replace(" ", "") + x.ItemDeviceType).Equals(devicename + devicemodel + devicetype, StringComparison.CurrentCultureIgnoreCase));
                                            if (dutItem != null)
                                            {
                                                runstatus.Add("Pass");
                                            }
                                            else
                                            {
                                                runstatus.Add("Fail");
                                                temp.Add(devicename + " status is : " + message);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        runstatus.Add("Fail");
                                        temp.Add(devicename + " status is : " + message);
                                    }
                                }
                                else
                                {
                                    runstatus.Add("Fail");
                                    temp.Add(devicename + " status is : Empty");
                                }
                            }

                            Failremarks = string.Join(",", temp);
                            if (temp.Count > 0)
                                inventoryStatus = false;
                            else if (temp.Count == 0)
                                inventoryStatus = true;
                        }
                        else
                        {
                            runstatus.Add("Fail");
                            Failremarks = "Not able to get inventory ";
                            inventoryStatus = false;
                        }
                    }
                    else
                    {
                        runstatus.Add("Fail");
                        Failremarks = "Wrong design in core ";
                        inventoryStatus = false;
                    }
                }
                else
                {
                    runstatus.Add("Fail");
                    Failremarks = "Reflect Core ID not available";
                    inventoryStatus = false;
                }                

                return new Tuple<bool, string>(inventoryStatus, Failremarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECInventory", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return new Tuple<bool, string>(inventoryStatus, Failremarks);
            }
        }

        private bool UpgradePeripheralsForReflect()
        {
            bool whilebreak = false;

            try
            {
                int xmlResponseCount = 0;

                while (!whilebreak && xmlResponseCount <= 50)
                {
                    xmlResponseCount++;
                    Thread.Sleep(5000);
                    whilebreak = FirmwareCheckQREM();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }

            return whilebreak;
        }

        private bool FirmwareCheckQREM()
        {
            List<string> temp = new List<string>();
            List<string> runstatus = new List<string>();
            string Failremarks = string.Empty;
            bool inventoryStatus = true;
            string currentDesign = string.Empty;

            try
            {
                if (selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0)
                {
                    Dictionary<string, string[]> inventorydetails = GetQREMInventoryDetails(selectedCoreSystemSiteID[2]);

                    if (inventorydetails != null && inventorydetails.Count > 0)
                    {
                        foreach (var inventoryValues in inventorydetails)
                        {
                            string devicename = inventoryValues.Key;
                            string devicetype = inventoryValues.Value[0];
                            string devicemodel = inventoryValues.Value[1].Replace(" ", "");
                            string message = inventoryValues.Value[2];
                            string statuscode = inventoryValues.Value[3];

                            if (!string.IsNullOrEmpty(message))
                            {
                                if (message == "Initializing")
                                {
                                    inventoryStatus = false;
                                }
                            }
                        }
                    }
                }

                return inventoryStatus;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return inventoryStatus;
            }
        }

        private bool checkAllPhysicalDevices(string selectedCoreIPAddress, string backup_selectedCoreIPAddress)
        {
            try
            {
                
                bool whilebreak = false;
                List<string> notUpdatedDevices = new List<string>();

                bool deviceStatus = false;

                List<string> devicesip = GetAllIpForFirmwareVerification(Original_desgnname);
                List<string> devicesversion = new List<string>();
                string coreVersion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                List<string> devicesstatus = new List<string>();
                string firmwareversion = string.Empty;

                if (devicesip.Count > 0)
                {
                    foreach (string strIP in devicesip)
                    {
                        string firmwarestatus = string.Empty;
                        whilebreak = false;
                        while ((firmwarestatus != "idle") && (!whilebreak))
                        {
                            firmwarestatus = get_FirmwareLoadState(strIP);
                            if (firmwarestatus == "idle")
                            {
                                firmwareversion = XmlReadToGetDesignversion(strIP);
                                if (firmwareversion != coreVersion)
                                {
                                        string devName = XmlReadToGetDeviceName(strIP);
                                        if (devName != string.Empty)
                                        {
                                            if (!notUpdatedDevices.Contains(devName))
                                                notUpdatedDevices.Add(devName);
                                        }
                                        else
                                        {
                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                notUpdatedDevices.Add("not applicable");
                                        }                              
                                        whilebreak = true;
                                        break;                                   
                                }
                                else if (firmwareversion == coreVersion)
                                {
                                    devicesversion.Add(firmwareversion);
                                }
                                else if (firmwareversion == string.Empty)
                                {
                                        string devName = XmlReadToGetDeviceName(strIP);

                                        if (devName != string.Empty)
                                        {
                                            if (!notUpdatedDevices.Contains(devName))
                                                notUpdatedDevices.Add(devName);
                                        }
                                        else
                                        {
                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                notUpdatedDevices.Add("not applicable");
                                        }
                                        whilebreak = true;
                                        break;
                                }
                            }
                            else if ((firmwarestatus == string.Empty) || (firmwarestatus == "complete"))
                            {
                                    DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                    string devName = XmlReadToGetDeviceName(strIP);

                                    if (devName != string.Empty)
                                    {
                                        if (!notUpdatedDevices.Contains(devName))
                                            notUpdatedDevices.Add(devName);
                                    }
                                    else
                                    {
                                        if (!notUpdatedDevices.Contains("not applicable"))
                                            notUpdatedDevices.Add("not applicable");
                                    }
                                    whilebreak = true;
                                    break;
                            }


                        }
                    }

                    foreach (string strver in devicesversion)
                    {
                        if (strver == coreVersion)
                        {
                            devicesstatus.Add("Pass");
                        }
                        else
                        {
                            devicesstatus.Add("Fail");
                        }
                    }

                    if (devicesstatus.Count > 0 && !devicesstatus.Contains("Fail")&&(notUpdatedDevices.Count==0))
                    {
                        deviceStatus = true;
                    }
                    else
                    {
                        deviceStatus = false;

                    }
                }
                else
                {
                    deviceStatus = true;
                }
                return deviceStatus;
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return false;
            }
            
        }

        private Tuple<bool, string> checkInventoryTimeout( bool skipcheckAllPhysicalDevices)
        {
           bool skipStatusCheck = false;
            DateTime currentDateTime = DateTime.Now;
            DateTime custom_waittime= currentDateTime.AddMinutes(Properties.Settings.Default.Bypass_time);
            //}
            bool deploysuccess = false;
            string responseMessage = string.Empty;
            try
            {
                
                DateTime DeadLineDateTime = currentDateTime.AddMinutes(15);
                while (DeadLineDateTime > DateTime.Now)
                {
                    if ((Properties.Settings.Default.Bypass_checkvalue) && (custom_waittime < DateTime.Now))
                    {
                        skipStatusCheck = true;
                    }

                    var inventoryCheck = InventoryStatusCheck(skipStatusCheck);
                
                    if (inventoryCheck.Item1)
                    {
                        bool physicaldeviceStatus = false;
                        if (!skipcheckAllPhysicalDevices)
                            physicaldeviceStatus = checkAllPhysicalDevices(selectedCoreIPAddress, backup_selectedCoreIPAddress);
                        else
                            physicaldeviceStatus = true;
                        if (physicaldeviceStatus)
                        {
                            deploysuccess = true;
                            responseMessage = "";
                            break;
                        }
                        else
                        {
                            deploysuccess = false;
                            responseMessage = "All connected peripherals not updated successfully";
                            break;
                        }

                    }
                    else
                    {
                        deploysuccess = false;
                        responseMessage = "After 15 minutes timeout, " + inventoryCheck.Item2.Trim();
                    }
                    Thread.Sleep(30000);
                }
                return new Tuple<bool, string>(deploysuccess, responseMessage);
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return new Tuple<bool, string>(deploysuccess, responseMessage);
            }
        }

        private Tuple<bool, string> checkInventoryTimeoutQREM()
        {
            bool skipStatusCheck = false;
            DateTime currentDateTime = DateTime.Now;
            DateTime custom_waittime = currentDateTime.AddMinutes(Properties.Settings.Default.Bypass_time);
            
            bool deploysuccess = false;
            string responseMessage = string.Empty;
            try
            {

                DateTime DeadLineDateTime = currentDateTime.AddMinutes(15);
                while (DeadLineDateTime > DateTime.Now)
                {
                    if ((Properties.Settings.Default.Bypass_checkvalue) && (custom_waittime < DateTime.Now))
                    {
                        skipStatusCheck = true;
                    }

                    var inventoryCheck = InventoryStatusCheckQREM(skipStatusCheck);

                    if (inventoryCheck.Item1)
                    {
                        deploysuccess = true;
                        responseMessage = "";
                        break;
                    }
                    else
                    {
                        deploysuccess = false;
                        responseMessage = "After 15 minutes timeout, " + inventoryCheck.Item2.Trim();
                    }

                    Thread.Sleep(30000);
                }

                return new Tuple<bool, string>(deploysuccess, responseMessage);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return new Tuple<bool, string>(deploysuccess, responseMessage);
            }
        }

        public bool start_design_json(string ipAddress, string designId, string password, string coreToken, bool? isBackupCore)
        {
            try
            {
                string strResponse = string.Empty;
                string newToken = string.Empty;
                int RetryCount = 0;
                string strParameters = "{\"name\":\"start\"}";                

                while (RetryCount < 5)
                {
                    var success = HttpPostactual_json("http://" + ipAddress + "/api-qsd/v0/designs/" + designId + "/commands", strParameters, coreToken, "POST", out strResponse);

                    ////if unathourized received in response, Retry with new CoreLogonToken for the first time  
                    if (RetryCount == 0 && success.Item3 == "401")
                    {
                        var isLogonSuccess = Corelogon(ipAddress, password, out newToken);
						/////If isBackupCore boolean is false core is primary, assign new token in CoreLogonToken. If isBackupCore boolean is true it is backup core, assign new token CoreLogonToken_Backup. If isBackupCore boolean is null it means it is from restore design so we need not to assign token
                        if(isBackupCore == false)
                            CoreLogonToken = newToken;
                        else if (isBackupCore == true)
                            CoreLogonToken_Backup = newToken;

                        success = HttpPostactual_json("http://" + ipAddress + "/api-qsd/v0/designs/" + designId + "/commands", strParameters, newToken, "POST", out strResponse);
                    }

                    if (success.Item1)
                    {
                        return true;
                    }

                    RetryCount++;
                }
                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }


        public bool stop_design_json(string ipAddress, string designId, string password, string coreToken, bool? isBackupCore)
        {
            try
            {
                if (string.IsNullOrEmpty(designId))
                {
                    return true;
                }

                string strResponse = string.Empty;
                string newToken = string.Empty;
                int RetryCount = 0;
                string strParameters = "{\"name\":\"stop\"}";

                while (RetryCount < 5)
                {
                    var success = HttpPostactual_json("http://" + ipAddress + "/api-qsd/v0/designs/" + designId + "/commands", strParameters, coreToken, "POST", out strResponse);

                    ////if unathourized received in response, Retry with new CoreLogonToken for the first time  
                    if (RetryCount == 0 && success.Item3 == "401")
                    {
                        var isLogonSuccess = Corelogon(ipAddress, password, out newToken);
							/////If isBackupCore boolean is false core is primary, assign new token in CoreLogonToken. If isBackupCore boolean is true it is backup core, assign new token CoreLogonToken_Backup. If isBackupCore boolean is null it means it is from restore design so we need not to assign token
                        if (isBackupCore == false)
                            CoreLogonToken = newToken;
                        else if (isBackupCore== true)
                            CoreLogonToken_Backup = newToken; 

                        success = HttpPostactual_json("http://" + ipAddress + "/api-qsd/v0/designs/" + designId + "/commands", strParameters, newToken, "POST", out strResponse);
                    }

                    if (success.Item1)
                    {
                        return true;
                    }

                    RetryCount++;
                }
                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }


        public Tuple<bool, string> GetCompileID_json(string ipAddress, string password, string coreToken)
        {
            bool success = false;
            string strResponse = string.Empty;
            string compileId = string.Empty;
            try
            { 
                var result =  HttpGet_json("http://" + ipAddress + "/api-qsd/v0/designs/undefined", coreToken, ipAddress, password, "application/json", out strResponse);
                //get Token value
                if (result.Item1)
                {
                    var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(strResponse);
                    if (obj.Count > 0)
                    {
                        foreach (var response in obj)
                        {
                            if (response.Key.ToLower() == "status")
                            {
                                foreach (var item in response.Value)
                                {

                                    if (item.Key.ToLower() == "code")
                                    {
                                        compileId = item.Value;
                                        success = true;
                                        break;
                                    }
                                }                              
                            }
                        }
                    }
                }

                return new Tuple<bool, string>(success, compileId);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(success, string.Empty);
            }
        }


        public bool DesignIDF_Create(string inputfile, string outputfile)
        {
            bool success = false;

            try
            {              

                File.Copy(inputfile, outputfile);
                if (File.Exists(outputfile))
                    success = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }

            return success;
        }


        private bool CreateTar(string outputTarFilename, string sourceDirectory, string qsysPath, string compileID, out string FailureReason)
        {
            FailureReason = string.Empty;
            try
            {

                // Create design.idf file
                bool isIDF_fileCreated = DesignIDF_Create(qsysPath, sourceDirectory + "\\design.idf");

                if (isIDF_fileCreated)
                {
                    using (FileStream fs = new FileStream(outputTarFilename, FileMode.Create, FileAccess.Write, FileShare.None))
                    {
                        using (Stream gzipStream = new GZipOutputStream(fs))
                        {
                            using (TarArchive tarArchive = TarArchive.CreateOutputTarArchive(gzipStream))
                            {
                                tarArchive.PathPrefix = compileID;
                                tarArchive.RootPath = sourceDirectory;
                                bool isFileCreated = AddDirectoryFilesToTar(tarArchive, sourceDirectory, true);

                                if (isFileCreated)
                                {
                                    return true;
                                }
                                else
                                {
                                    FailureReason = "Error while creating design file to put";
                                }
                            }
                        }
                    }
                }
                else
                {
                    FailureReason = "Error while creating design.idf file";
                }
            }
            catch (Exception ex)
            {
                FailureReason = "Error while creating design file to put";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif              
            }

            return false;
        }

        private bool AddDirectoryFilesToTar(TarArchive tarArchive, string sourceDirectory, bool recurse)
        {
            try
            {
                // Recursively add sub-folders
                if (recurse)
                {
                    string[] directories = Directory.GetDirectories(sourceDirectory);
                    foreach (string directory in directories)
                        AddDirectoryFilesToTar(tarArchive, directory, recurse);
                }

                // Add files
                string[] filenames = Directory.GetFiles(sourceDirectory);
                foreach (string filename in filenames)
                {
                    TarEntry tarEntry = TarEntry.CreateEntryFromFile(filename);
                    tarArchive.WriteEntry(tarEntry, false);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }

            return true;
        }

        public Tuple<bool, string> Put_designTAR_file(string putUrl, string ipAddress, string password, string tarFileName, string designName, string pathToCreateTarFile, string coreToken, bool? isBackupCore)
        {
            try
            {
                Tuple<bool, string> isPutSuccess = new Tuple<bool, string>(false, string.Empty);
                int RetryCount = 0;
                string newToken = string.Empty;
                string strResponse = string.Empty;
                string formDataBoundary = String.Format("----------{0:N}", Guid.NewGuid());                             

                var formData = GetMultipartFormData(formDataBoundary, tarFileName, designName, pathToCreateTarFile);
                string contentType = "multipart/form-data; boundary=" + formDataBoundary;
                              
                while (RetryCount < 5)
                {
                    isPutSuccess = Http_MultiPut(putUrl, "QAT-Put", coreToken, contentType, formData, out strResponse);

                    ////if unathourized received in response, Retry with new CoreLogonToken for the first time  
                    if ((RetryCount == 0) && (strResponse == "401"))
                    {
                        var isLogonSuccess = Corelogon(ipAddress, password, out newToken);
							/////If isBackupCore boolean is false core is primary, assign new token in CoreLogonToken. If isBackupCore boolean is true it is backup core, assign new token CoreLogonToken_Backup. If isBackupCore boolean is null it means it is from restore design so we need not to assign token
                        if (isBackupCore == false)
                            CoreLogonToken = newToken;
                        else if (isBackupCore== true)
                            CoreLogonToken_Backup = newToken;                        

                        isPutSuccess = Http_MultiPut(putUrl, "QAT-Put", newToken, contentType, formData, out strResponse);
                    }

                    if (isPutSuccess.Item1)
                    {
                        break;
                    }

                    RetryCount++;
                }

                return new Tuple<bool, string>(isPutSuccess.Item1, isPutSuccess.Item2);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(false,string.Empty);
            }          
        }

        private Tuple<bool,string> Http_MultiPut(string strURI, string userAgent,string coreToken, string contentType, byte[] formData, out string strResponse)
        {
            bool success = false;          
            strResponse = string.Empty;
            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(strURI);
            try
            {
                // Set up the request properties.
                request.Method = "PUT";
                request.Accept = "application/json";
                request.ContentType = contentType;
                request.UserAgent = userAgent;
                request.ContentLength = formData.Length;
                if (coreToken != string.Empty)
                    request.Headers["Authorization"] = "Bearer " + coreToken;


                // Send the form data to the request.
                using (Stream requestStream = request.GetRequestStream())
                {
                    requestStream.Write(formData, 0, formData.Length);
                    requestStream.Close();
                }

                using (HttpWebResponse resp = (HttpWebResponse)request.GetResponse())
                {
                    success = HttpStatusCodeCheck(resp, "PUT", out strResponse);
                }              

                request.Abort();
                return  new Tuple<bool, string>(success,string.Empty);

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                request.Abort();

                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    strResponse = "401";
                }
                return new Tuple<bool, string> (success, ex.Message.ToString());

            }
            
        }

        private byte[] GetMultipartFormData(string boundary, string tarFileName, string designName, string pathToCreateTarFile)
        {
            try
            {
                Encoding encoding = Encoding.UTF8;
                using (MemoryStream poststream = new System.IO.MemoryStream())
                {
                    // Add just the first part of this param, since we will write the file data directly to the Stream
                    string header = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\"\r\nContent-Type: {3}\r\n\r\n", boundary, "designtar", tarFileName, "application/gzip");
                    poststream.Write(encoding.GetBytes(header), 0, encoding.GetByteCount(header));

                    using (FileStream inStream = new FileStream(pathToCreateTarFile +"\\"+ tarFileName, FileMode.Open, FileAccess.Read))
                    {
                        const int inBufferSize = 32768;//32kb
                        while (inStream.Position < inStream.Length)
                        {
                            byte[] chunkData = new byte[inBufferSize];
                            int chunkDataRead = inStream.Read(chunkData, 0, inBufferSize);
                            poststream.Write(chunkData, 0, chunkDataRead);
                        }
                    }

                    poststream.Write(encoding.GetBytes("\r\n"), 0, encoding.GetByteCount("\r\n"));

                    string temp = string.Format("--{0}\r\nContent-Type:text/plain", boundary);
                    poststream.Write(encoding.GetBytes(temp), 0, encoding.GetByteCount(temp));
                   
                    string postData = string.Format("\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}", boundary, "prettyname", designName);                 
                    poststream.Write(encoding.GetBytes(postData), 0, encoding.GetByteCount(postData));

                    string footer = "\r\n--" + boundary + "--\r\n";
                    poststream.Write(encoding.GetBytes(footer), 0, encoding.GetByteCount(footer));

                    // Dump the Stream into a byte[]-->formData 
                    poststream.Position = 0;
                    byte[] formData = new byte[poststream.Length];
                    poststream.Read(formData, 0, formData.Length);
                    poststream.Close();

                    return formData;
                }              
          
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return null;
            }
        }

        private byte[] GetMultipartFormDataQREM(string boundary, string tarFileName, string designName, string pathToCreateTarFile, string coreID)
        {
            try
            {
                Encoding encoding = Encoding.UTF8;
                using (MemoryStream poststream = new System.IO.MemoryStream())
                {

                    // Add just the first part of this param, since we will write the file data directly to the Stream
                    string coreIDData = string.Format("--{0}\r\nContent-Type:text/plain\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}", boundary, "coreId", coreID);
                    poststream.Write(encoding.GetBytes(coreIDData), 0, encoding.GetByteCount(coreIDData));
              
                    string postData = string.Format("\r\n--{0}\r\nContent-Type:text/plain\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}", boundary, "prettyname", designName);
                    poststream.Write(encoding.GetBytes(postData), 0, encoding.GetByteCount(postData));



                    string header = string.Format("\r\n--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\"\r\nContent-Type: {3}\r\n\r\n", boundary, "designtar", tarFileName, "application/gzip");
                    poststream.Write(encoding.GetBytes(header), 0, encoding.GetByteCount(header));

                    using (FileStream inStream = new FileStream(pathToCreateTarFile + "\\" + tarFileName, FileMode.Open, FileAccess.Read))
                    {
                        const int inBufferSize = 32768;//32kb
                        while (inStream.Position < inStream.Length)
                        {
                            byte[] chunkData = new byte[inBufferSize];
                            int chunkDataRead = inStream.Read(chunkData, 0, inBufferSize);
                            poststream.Write(chunkData, 0, chunkDataRead);
                        }
                    }

                    //poststream.Write(encoding.GetBytes("\r\n"), 0, encoding.GetByteCount("\r\n"));


                    string footer = "\r\n--" + boundary + "--";
                    poststream.Write(encoding.GetBytes(footer), 0, encoding.GetByteCount(footer));

                    // Dump the Stream into a byte[]-->formData 
                    poststream.Position = 0;
                    byte[] formData = new byte[poststream.Length];
                    poststream.Read(formData, 0, formData.Length);
                    poststream.Close();

                    return formData;
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return null;
            }
        }

        private bool Deploy_design_new(string ipAddress,string password, string compileID, string pathToCreateTarFile, bool? isBackupCore ,string designName, out string failureReason)
        {
            bool success = false;
            failureReason = string.Empty;
            try
            {
		     	////intially primary core token used to load design if isBackupCore is true, backup core token is used
                string coreToken = CoreLogonToken;

                if (isBackupCore == true)
                    coreToken = CoreLogonToken_Backup;

                /////get compile id for stop old design                
                var old_designCompileId = GetCompileID_json(ipAddress, password, coreToken);
                               
                // stopping old Design
                if (old_designCompileId.Item1)
                {
                    bool isDesignStopped = stop_design_json(ipAddress, old_designCompileId.Item2, password, coreToken, isBackupCore);
                    if (isDesignStopped == true)
                    {
                        // put Tar.gz file to core
                        var putSuccess = Put_designTAR_file("http://" + ipAddress + "/api-qsd/v0/designs/" + compileID, ipAddress, password, compileID + ".tar.gz", designName, pathToCreateTarFile, coreToken, isBackupCore);

                        if (putSuccess.Item1)
                        {
                            //starting new design
                            success = start_design_json(ipAddress, compileID, password, coreToken, isBackupCore);

                            if (success == false)
                            {
                                failureReason = "Error while start design";
                            }
                        }
                        else
                        {
                            failureReason = "Error while design put " + putSuccess.Item2;
                            if (isBackupCore == true)
                                failureReason = "Error while design put in backup core " + putSuccess.Item2;

                            return success;
                        }
                    }
                    else
                    {
                        failureReason = "Error while stopping design";
                    }
                }
                else
                {
                    failureReason = "Error- Unable to get design id";
                }

                if (isBackupCore==true && failureReason != string.Empty)
                    failureReason += " in backup core";

                    return success;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return success;
            }
        }

        private bool GetDesignUploadSuccessStatus(string designstate, string coreID, string designCode)
        {
            bool isSuccess = false;

            try
            {
                for (int i = 0; i < 10; i++)
                {
                    if(i < 0)
                        Thread.Sleep(1000);

                    string strResponse = string.Empty;
                    var outval = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/designs/undefined?coreId=" + coreID, DeviceDiscovery.QREM_Token, "*/*", out strResponse);

                    if (outval.Item1 && !string.IsNullOrEmpty(strResponse))
                    {
                        dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(strResponse);

                        if (array != null && array.Count > 0)
                        {
                            Dictionary<string, object> resultStatus = array as Dictionary<string, object>;

                            if (resultStatus != null)
                            {
                                foreach (var statuscheck in resultStatus)
                                {
                                    if (statuscheck.Key == "status" && statuscheck.Value != null)
                                    {
                                        Dictionary<string, object> statusStateIDdetails = statuscheck.Value as Dictionary<string, object>;

                                        if (statusStateIDdetails != null && statusStateIDdetails.Keys.Contains("stateId") && statusStateIDdetails.Keys.Contains("code"))
                                        {
                                            string stateID = statusStateIDdetails["stateId"].ToString();
                                            string designID = statusStateIDdetails["code"].ToString();

                                            if ((designstate == "Stop" && stateID == "0") || (designstate == "PUT" && stateID == "0" && designCode == designID) || (designstate == "Start" && stateID == "2" && designCode == designID))
                                            {
                                                isSuccess = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (isSuccess)
                        break;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return isSuccess;
        }

        private bool Deploy_design_QREM(string[] selected_CoreSystemSiteID, bool isBackupCoreAvailable, string[] BackupselectedCoreSystemSiteID, string compileID, string pathToCreateTarFile, bool isBackupCore, string designName, out string failureReason)
        {
            bool success = false;
            failureReason = string.Empty;

            try
            {
                List<string[]> primaryBackupCore = new List<string[]>();
                primaryBackupCore.Add(selected_CoreSystemSiteID);

                if (isBackupCoreAvailable)
                    primaryBackupCore.Add(BackupselectedCoreSystemSiteID);

                int i = 0;

                foreach (string[] coredetail in primaryBackupCore)
                {
                    i++;
                    /////get compile id for stop old design                
                    var designdeatils = GetQREMSystemDetails(coredetail[2]);

                    if (designdeatils != null && designdeatils.ContainsKey("DesignCode"))
                    {
                        string oldCompileID = designdeatils["DesignCode"];

                        ////Old Design stop
                        string strParameters = "{\"name\": \"stop\",\"coreId\": " + coredetail[1] + "}";
                        string strResponse = string.Empty;
                        var stopDesignsuccess = HttpPostactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/designs/" + oldCompileID + "/commands", strParameters, DeviceDiscovery.QREM_Token, "POST", out strResponse);
                        bool isStopSuccess = false;

                        if (stopDesignsuccess.Item1)
                            isStopSuccess = GetDesignUploadSuccessStatus("Stop", coredetail[1], string.Empty);

                        if (!isStopSuccess)
                        {
                            DeviceDiscovery.WriteToLogFile(coredetail[0] + " Design stop failure, Response:" + strResponse);

                            failureReason = "Error while stopping design";

                            if (i == 2)
                                failureReason += " in backup core";

                            return success;
                        }
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile("Error - Unable to get design id");
                        failureReason = "Error - Unable to get design id";

                        if (i == 2)
                            failureReason += " in backup core";

                        return success;
                    }
                }

                i = 0;
                foreach (string[] coredetail in primaryBackupCore)
                {
                    i++;

                    ///////New Design PUT
                    var isPutSuccess = DesignPUT_QREM(compileID, designName, pathToCreateTarFile, coredetail[1], coredetail[0]);
                    bool putsuccess = isPutSuccess.Item1;

                    if (putsuccess)                    
                        putsuccess = GetDesignUploadSuccessStatus("PUT", coredetail[1], compileID);                     
                    
                    if (!putsuccess)
                    {
                        failureReason = "Error while design put";

                        if (i == 2)
                            failureReason += " in backup core";

                        failureReason = failureReason +" " + isPutSuccess.Item2;
                        return success;
                    }
                }

                i = 0;
                foreach (string[] coredetail in primaryBackupCore)
                {
                    i++;

                    /////New Design start
                    string strParameters = "{\"name\": \"start\",\"coreId\": " + coredetail[1] + "}";
                    string strResponse = string.Empty;
                    var startDesignsuccess = HttpPostactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/designs/" + compileID + "/commands", strParameters, DeviceDiscovery.QREM_Token, "POST", out strResponse);
                    bool isStartSuccess = GetDesignUploadSuccessStatus("Start", coredetail[1], compileID);

                    if (isStartSuccess)
                    {
                        success = true;
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile(coredetail[0] + " Design start failure, Response:" + strResponse);
                        failureReason = "Error while start design";

                        if (i == 2)
                            failureReason += " in backup core";

                        return success;
                    }
                }

                return success;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return success;
            }
        }

        private Tuple<bool,string> DesignPUT_QREM(string compileID,string designName,string pathToCreateTarFile, string coreID, string coreName)
        {
            bool isPUTsuccess = false;
            string errorMsg = string.Empty;
            try
            {
                string formDataBoundary = String.Format("----------{0:N}", Guid.NewGuid());
                var formData = GetMultipartFormDataQREM(formDataBoundary, compileID + ".tar.gz", designName, pathToCreateTarFile, coreID);
                string contentType = "multipart/form-data; boundary=" + formDataBoundary;
                string strResponse = string.Empty;

                var isPutSuccess = Http_MultiPut("https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/designs/" + compileID, "QAT-Put", DeviceDiscovery.QREM_Token, contentType, formData, out strResponse);
                if(!isPutSuccess.Item1 && !string.IsNullOrEmpty(strResponse))
                    DeviceDiscovery.WriteToLogFile(coreName + " Design put Response failure:" + strResponse);

                if (isPutSuccess.Item1 && !string.IsNullOrEmpty(strResponse))
                {
                    dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(strResponse);

                    foreach (var resultSuccess in array)
                    {
                        if (resultSuccess.Key == "result")
                        {
                            if (resultSuccess.Value != null && resultSuccess.Value.ToString() != string.Empty && resultSuccess.Value.ToString().ToLower() == "success")
                                isPUTsuccess = true;

                            break;
                        }
                    }
                }
                else
                {
                    errorMsg = isPutSuccess.Item2;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, string>(isPUTsuccess, errorMsg);
        }

        private bool Deploy_design_old(string coreIPAddress, string password, string username, string prettyName, string designid, string buildPath, string qsysPath, string version, bool isBackupCore, out string failureReason)
        {
            bool success = false;
            failureReason = string.Empty;
            try
            {
                stop_design(coreIPAddress, password, username);  

                prettyName = System.Net.WebUtility.HtmlEncode(prettyName);

                if (create_design(coreIPAddress, password, designid, prettyName, version, username))
                {
                    if (SendDirectoryToCore(coreIPAddress, 80, buildPath, qsysPath, username, password, designid, ""))
                    {
                        if (Put(coreIPAddress, 80, qsysPath, username, password, designid, "/" + "design.idf"))
                        {
                            if (Commit_design(coreIPAddress, password, designid, version, username))
                            {
                                if (Run_design(coreIPAddress, password, designid, username))
                                {
                                    success = true;
                                }
                                else
                                {
                                    failureReason = "Error while Run Design";
                                }
                            }
                            else
                            {
                                failureReason = "Error while Commit design";
                            }
                        }
                        else
                        {
                            failureReason = "Error while Design put";
                        }
                    }
                    else
                    {
                        failureReason = "Error while Send Directory To Core";
                    }
                }
                else
                {
                    failureReason = "Error while create design";
                }

                if (isBackupCore && failureReason != string.Empty)
                    failureReason += " in backup core";

                return success;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return success;
            }
        }


        private bool DeployXmlToCore(string coreIPAddress, string username, string backup_username, string password, string designName, string exepath, bool isQREM, out string FailureReason)
        {
            Process compileProcess = new Process();
            string buildPath = string.Empty;
            string qsysPath = string.Empty;
            string pathToCreateTarFile = string.Empty;
            bool isTarFileCreated = false;
            string tarFileName = string.Empty;
            bool value = false;
            bool success = false;
            FailureReason = string.Empty;

            try
            {

                string tickscreate = Convert.ToString(DateTime.Now.Ticks);
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID + "\\" + tickscreate;
                    var directorycreate1 = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID + "\\" + designName;
                    pathToCreateTarFile = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID;
                    //qsysPath_global_toclear_incancel = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_execution\";
                    //buildPath_global_toclear_incancel = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_execution\";

                    buildPath = directorycreate;
                    qsysPath = directorycreate1;
                }
                else
                {
                    var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID + "\\" + tickscreate);
                    var directorycreate1 = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID + "\\" + designName);
                    pathToCreateTarFile = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID).FullName;
                    //qsysPath_global_toclear_incancel =( new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_execution\")).ToString();
                    //buildPath_global_toclear_incancel = (new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_execution\")).ToString();

                    buildPath = directorycreate.FullName;
                    qsysPath = directorycreate1.FullName;
                }

                string prettyName = System.IO.Path.GetFileNameWithoutExtension(designName);

                if (!Directory.Exists(buildPath))
                {
                    Directory.CreateDirectory(buildPath);
                }
                //if (Directory.Exists(buildPath))
                //{
                //    //Directory.Delete(buildPath);
                //    Directory.CreateDirectory(buildPath);
                //}

                ProcessStartInfo compileQsysDesign = new ProcessStartInfo();
                compileQsysDesign.FileName = exepath;

                compileQsysDesign.Arguments = "/build:" + "\"" + qsysPath + "\"" + @" /output:" + "\"" + buildPath + "\"";

                ////qDesignArgs.Arguments = @"/build:C:\Users\madhumathi\Desktop\Index'Issue.qsys /output:F:\Build_Log";
                compileProcess = Process.Start(compileQsysDesign);
                string designid = string.Empty;
                string Infofilecheck = buildPath + "\\info.xml";
                DateTime timecheck = DateTime.Now.AddMinutes(2.0);
                while ((!File.Exists(Infofilecheck)) && (!chekfileopen(Infofilecheck)) && (timecheck > DateTime.Now))
                {
                    if (File.Exists(Infofilecheck))
                    {
                        break;
                    }

                }

                if (File.Exists(buildPath + "\\compile_id"))
                {
                    getcompileid(buildPath + "\\compile_id", out designid);
                }

                if (designid != string.Empty)
                {
                    ////change the core name in the inventory.xml
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(buildPath + "//inventory.xml");
                    string xx = xmlDoc.DocumentElement.InnerXml;
                    XmlNodeList nodeList = xmlDoc.DocumentElement.SelectNodes("device");
                    foreach (XmlNode node in nodeList)
                    {
                        if (node.Attributes != null && node.Attributes["type"] != null)
                        {
                            if (node.Attributes["type"].Value == "core")
                            {
                                node.Attributes["primary"].Value = netPairNameForDeploy;
                                if ((node.Attributes["has_backup"] != null) && (node.Attributes["has_backup"].Value == "true"))
                                    node.Attributes["backup"].Value = backup_netPairNameForDeploy;
                            }
                        }
                    }

                    xmlDoc.Save(buildPath + "//inventory.xml");

                    if (!compileProcess.HasExited)
                        compileProcess.Kill();

                    if (isQREM)
                    {
                        bool isNewverRemote = FirmwareDigestCheck(core_New_FirmwareVersion.Item2, true, true);

                        if (isNewverRemote)
                        {
                            if (isBackupCoreAvailable)
                            {
                                bool isNewverbackupRemote = FirmwareDigestCheck(Backup_core_New_FirmwareVersion.Item2, true, true);

                                if(!isNewverbackupRemote)
                                {
                                    success = false;
                                    DeviceDiscovery.WriteToLogFile("Firmware version of " + BackupselectedCoreSystemSiteID[0] + " remote core is not supported to load design.");
                                    FailureReason = "Firmware version of " + BackupselectedCoreSystemSiteID[0] + " remote core is not supported to load design.";
                                }
                            }

                            if (string.IsNullOrEmpty(FailureReason))
                            {
                                tarFileName = designid + ".tar.gz";
                                isTarFileCreated = CreateTar(pathToCreateTarFile + "\\" + tarFileName, buildPath, qsysPath, designid, out FailureReason);

                                if (isTarFileCreated)
                                {
                                    success = Deploy_design_QREM(selectedCoreSystemSiteID, isBackupCoreAvailable, BackupselectedCoreSystemSiteID, designid, pathToCreateTarFile, false, prettyName, out FailureReason);
                                }
                            }
                        }
                        else
                        {
                            success = false;
                            DeviceDiscovery.WriteToLogFile("Firmware version of "+ selectedCoreSystemSiteID[0] + " remote core is not supported to load design.");
                            FailureReason = "Firmware version of " + selectedCoreSystemSiteID[0] + " remote core is not supported to load design.";
                        }
                    }
                    else
                    {
                        // primary core deploy
                        bool isNewver = FirmwareDigestCheck(core_New_FirmwareVersion.Item2, true, false);

                        if (isNewver)
                        {
                            // Create Tar.gz file to upload     
                            tarFileName = designid + ".tar.gz";
                            isTarFileCreated = CreateTar(pathToCreateTarFile + "\\" + tarFileName, buildPath, qsysPath, designid, out FailureReason);

                            if (isTarFileCreated)
                            {
                                success = Deploy_design_new(coreIPAddress, password, designid, pathToCreateTarFile, false, prettyName, out FailureReason);
                            }
                        }
                        else
                        {
                            success = Deploy_design_old(coreIPAddress, password, username, prettyName, designid, buildPath, qsysPath, versionForDeploy, false, out FailureReason);
                        }
                    }

                    // backup core deploy
                    if (!isQREM && success == true && isBackupCoreAvailable == true)
                    {
                        success = false;
                        bool isNewverBackup = FirmwareDigestCheck(Backup_core_New_FirmwareVersion.Item2, true, false);

                        if (isNewverBackup)
                        {
                            if (!isTarFileCreated)
                            {
                                // Create Tar.gz file to upload     
                                tarFileName = designid + ".tar.gz";
                                isTarFileCreated = CreateTar(pathToCreateTarFile + "\\" + tarFileName, buildPath, qsysPath, designid, out FailureReason);
                            }

                            if (isTarFileCreated)
                            {
                                success = Deploy_design_new(backup_selectedCoreIPAddress, password, designid, pathToCreateTarFile, true, prettyName, out FailureReason);
                            }                           
                        }
                        else
                        {
                            success = Deploy_design_old(backup_selectedCoreIPAddress, password, backup_username, prettyName, designid, buildPath, qsysPath, backup_versionForDeploy, true, out FailureReason);
                        }
                    }


                    if (success)
                    {
                        int j = 5;

                        if (isQREM)
                            j = 15;

                        for (int i = 0; i < j; i++)
                        {
                            Thread.Sleep(10000);

                            bool successrunning = checkrunning(designid, isQREM);

                            if (successrunning)
                            {
                                ///pending in QREM
                                if (!isQREM)
                                    LoadGUI(exepath, designid);

                                value = true;
                                break;
                            }
                            else
                            {
                                FailureReason = "Design not in running state";
                            }
                        }
                    }
                }
                else if (designid == string.Empty)
                {
                    FailureReason = "Design id is empty ";
                }

                if (tarFileName != string.Empty && File.Exists(pathToCreateTarFile + "\\" + tarFileName))
                    File.Delete(pathToCreateTarFile + "\\" + tarFileName);

                if (Directory.Exists(buildPath))
                    Directory.Delete(buildPath, true);
                return value;
            }
            catch (Exception ex)
            {
                if (!compileProcess.HasExited)
                    compileProcess.Kill();

                if (tarFileName != string.Empty && File.Exists(pathToCreateTarFile + "\\" + tarFileName))
                    File.Delete(pathToCreateTarFile + "\\" + tarFileName);

                if (Directory.Exists(buildPath))
                    Directory.Delete(buildPath, true);
                FailureReason = ex.Message.ToString();
                //MessageBox.Show("Error in design load"+ex.ToString());
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code design load", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return value;
            }
        }

        public bool checkrunningdesign()
        {
            string Design_nameincore = string.Empty;
            string state_pretty = string.Empty;
            bool design_status = false;

            try
            {
                XmlDocument xml = new XmlDocument();
                if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignlaunch");

                    if (xml == null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                    }

                    if (xml == null)
                        return design_status;

                    XmlNode node_pretty_name = xml.SelectSingleNode("status/design/pretty_name");
                    Design_nameincore = node_pretty_name.InnerText;
                    if (desgnname == Design_nameincore + ".qsys")
                    {
                        XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");
                        state_pretty = node_state_pretty.InnerText;
                        if (state_pretty == "Running")
                        {
                            if (isBackupCoreAvailable)
                            {
                                XmlNode redundancy_state = xml.SelectSingleNode("status/design/redundancy_state");
                                string redundantstate = redundancy_state.InnerText;
                                if (redundantstate == "Active")
                                {
                                    design_status = true;
                                }
                            }
                            else
                                design_status = true;
                        }
                    }
                }

                return design_status;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return design_status;
            }
        }

        public bool checkrunning(string designid, bool isQREM)
        {
            bool design_status = false;
            try
            {
                if (designid != string.Empty)
                {
                    if (!isQREM)
                    {
                        string Design_nameincore = string.Empty;

                        XmlDocument xml = new XmlDocument();
                        if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                        {
                            xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignlaunch");

                            if (xml == null)
                            {
                                xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                            }

                            if (xml == null)
                                return design_status;

                            XmlNode node_pretty_name = xml.SelectSingleNode("status/design/code_name");
                            Design_nameincore = node_pretty_name.InnerText;
                            if (designid == Design_nameincore)
                            {
                                XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");
                                string state_pretty = node_state_pretty.InnerText;
                                if (state_pretty == "Running")
                                {
                                    if (isBackupCoreAvailable)
                                    {
                                        XmlNode redundancy_state = xml.SelectSingleNode("status/design/redundancy_state");
                                        string redundantstate = redundancy_state.InnerText;
                                        if (redundantstate == "Active")
                                        {
                                            design_status = true;
                                        }
                                    }
                                    else
                                        design_status = true;
                                }
                            }
                        }

                        if (isBackupCoreAvailable == true && design_status == true)
                        {
                            design_status = false;
                            XmlDocument backUpXml = new XmlDocument();
                            if (backup_selectedCoreIPAddress != string.Empty & backup_selectedCoreIPAddress != "Not Applicable")
                            {
                                backUpXml = DeviceDiscovery.XmlLoadUsingHttp("http://" + backup_selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                                if (backUpXml == null)
                                {
                                    backUpXml = DeviceDiscovery.XmlLoadUsingHttp("http://" + backup_selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                                }

                                if (backUpXml == null)
                                    return design_status;

                                XmlNode node_pretty_name = backUpXml.SelectSingleNode("status/design/code_name");
                                Design_nameincore = node_pretty_name.InnerText;
                                if (designid == Design_nameincore)
                                {
                                    XmlNode node_state_pretty = backUpXml.SelectSingleNode("status/design/state_pretty");
                                    string state_prett = node_state_pretty.InnerText;
                                    if (state_prett == "Running")
                                    {
                                        XmlNode redundancy_state = backUpXml.SelectSingleNode("status/design/redundancy_state");
                                        string redundantstate = redundancy_state.InnerText;
                                        if (redundantstate == "Standby")
                                        {
                                            return design_status = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var designdeatils = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);

                        if (designdeatils["DesignCode"] == designid && designdeatils["CoreStatus"] == "Running")
                        {
                            if (isBackupCoreAvailable)
                            {
                                if (designdeatils["RedundancyStatus"] != null && designdeatils["RedundancyStatus"] == "Active")
                                    design_status = true;
                            }
                            else
                                design_status = true;
                        }

                        if (isBackupCoreAvailable == true && design_status == true)
                        {
                            design_status = false;

                            var backupdesigndeatils = GetQREMSystemDetails(BackupselectedCoreSystemSiteID[2]);

                            if (backupdesigndeatils["DesignCode"] == designid && backupdesigndeatils["CoreStatus"] == "Running")
                            {
                                if (backupdesigndeatils["RedundancyStatus"] != null && backupdesigndeatils["RedundancyStatus"] == "Standby")
                                    design_status = true;
                            }
                        }
                    }
                }

                return design_status;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return design_status;
            }
        }
        
        public bool checkrunningRestore(string designid, string ipaddr, bool isQREM, string[] coredetails)
        {
            string Design_nameincore = string.Empty;
            string state_pretty = string.Empty;
            bool design_status = false;
            try
            {
                if (designid != string.Empty)
                {
                    if (!isQREM)
                    {
                        XmlDocument xml = new XmlDocument();
                        if (ipaddr != string.Empty & ipaddr != "Not Applicable")
                        {
                            xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + ipaddr + "//cgi-bin/status_xml", "XmlReadToGetDesignlaunch");

                            if (xml == null)
                            {
                                xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + ipaddr + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                            }

                            if (xml == null)
                                return design_status;

                            XmlNode node_pretty_name = xml.SelectSingleNode("status/design/code_name");
                            Design_nameincore = node_pretty_name.InnerText;
                            if (designid == Design_nameincore)
                            {
                                XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");
                                state_pretty = node_state_pretty.InnerText;
                                if (state_pretty == "Running")
                                {
                                    design_status = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        var designdeatils = GetQREMSystemDetails(coredetails[2]);

                        if (designdeatils["DesignCode"] == designid && designdeatils["CoreStatus"] == "Running")
                        {
                            design_status = true;
                        }
                    }
                }

                return design_status;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return design_status;
            }
        }

        public string getcompileid(string path, out string Cid)
        {

            try
            {
                int i = 0;
                 Cid = string.Empty;
                while((Cid==string.Empty)&&(i<10))
                {
                    Cid = System.IO.File.ReadAllText(path);
                    Thread.Sleep(2000);
                    i = i++;
                    //if (i > 2)
                    //    MessageBox.Show("");
                }
               
                return Cid;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return Cid = string.Empty;
            }

        }

        public bool stop_design(string strIP, string password, string username)
        {
            try
            {
                string strURI = "<methodCall>" +
                    "<methodName>engine_stop</methodName>" +
                    "<params>" +
                    "<param>" +
                    "<value><string>" + password + "</string></value>" +
                    "</param>" +
                    "</params>" +
                    "</methodCall>";               

                if (HttpPost("http://" + strIP + "/cgi-bin/engine_xmlrpc", strURI, password, username))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }
        
        public bool create_design(string strIP, string password, string designID, string prettyname, string version, string username)
        {
            try
            {
                string strURI = "<methodCall>" +
                    "<methodName>design_create</methodName>" +
                    "<params>" +
                    "<param>" +
                    "<value><string>" + password + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + version + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + designID + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + prettyname + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><i4>" + "250" + "</i4></value>" +
                    "</param>" +
                    "</params>" +
                    "</methodCall>";             

                if (HttpPost("http://" + strIP + "/cgi-bin/engine_xmlrpc", strURI, password, username))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        private bool SendDirectoryToCore(string ip, int port, string localPath, string qsysPath, string user, string password, string design, string remotePath)
        {
            try
            {

                //bool issueList = true;
                
                DirectoryInfo di = new DirectoryInfo(localPath);

                // send each file
                foreach (FileInfo fi in di.GetFiles("*"))
                {
                    if (!Put(ip, port, fi.FullName, user, password, design, remotePath + "/" + fi.Name))
                        return false;
                }
                foreach (DirectoryInfo _di in di.GetDirectories())
                {
                    if (!SendDirectoryToCore(ip, port, _di.FullName, qsysPath, user, password, design, remotePath + "/" + _di.Name))
                        return false;
                }

                //issueList.Add(Put(ip, 80, qsysPath, username, password, design, "/" + "design.idf"));

                //if (issueList.Contains(false))
                //    return false;
                //else
                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool Commit_design(string strIP, string password, string designid, string version, string username)
        {
            try
            {
                string strURI = "<methodCall>" +
                    "<methodName>design_commit</methodName>" +
                    "<params>" +
                    "<param>" +
                    "<value><string>" + password + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + version + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + designid + "</string></value>" +
                    "</param>" +
                    "</params>" +
                    "</methodCall>";
					
                if (HttpPost("http://" + strIP + "/cgi-bin/engine_xmlrpc", strURI, password, username))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool Run_design(string strIP, string password, string designid, string username)
        {
            try
            {
                string strURI = "<methodCall>" +
                    "<methodName>engine_start</methodName>" +
                    "<params>" +
                    "<param>" +
                    "<value><string>" + password + "</string></value>" +
                    "</param>" +
                    "<param>" +
                    "<value><string>" + designid + "</string></value>" +
                    "</param>" +
                    "</params>" +
                    "</methodCall>";
					
                if (HttpPost("http://" + strIP + "/cgi-bin/engine_xmlrpc", strURI, password, username))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool HttpPost(string strURI, string strParameters,string password, string username)
        {
          bool Check = false;
            Int32 RetryCount = 0;
            
            try
            {
                while (RetryCount < 5)
                {

                    Check = HttpPostactual(strURI, strParameters, password, username);
                    if (Check)
                    {
                        break;
                    }
                    RetryCount++;
                    //Thread.Sleep(2000);
                };
                return Check;
            }


            catch (Exception ex)
            {
                return Check;
            }

           
        }
        public bool HttpPostactual(string strURI, string strParameters, string password, string username)
        {
            bool success = false;
            try
            {
                System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
                //req.Proxy = new System.Net.WebProxy(strProxy, true);

                req.Timeout = 30000;
                req.ReadWriteTimeout = 30000;
                req.ContentType = "application/x-www-form-urlencoded";
                req.Method = "POST";

                Byte[] retBytes = System.Text.Encoding.ASCII.GetBytes(strParameters);
                req.ContentLength = retBytes.Length;

                // Need to setup Authentication Header.
                SetBasicAuthHeader(ref req, username, password);

                using (System.IO.Stream outStream = req.GetRequestStream())
                {
                    outStream.Write(retBytes, 0, retBytes.Length);
                    outStream.Close();
                }

                using (System.Net.WebResponse resp = req.GetResponse())
                {
                    if (resp == null)
                    {
                        return success;
                    }
                    else if (((HttpWebResponse)resp).StatusCode.ToString().ToUpper() == "OK")
                    {
                        success = true;
                    }
                }
				
                return success;

                //System.Net.WebResponse resp = req.GetResponse();
                //if (resp == null)
                //{
                //    strResponse = "";
                //    return false;
                //}

                //System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream());
				//strResponse = sr.ReadToEnd().Trim();
                //return true;
            }
            catch (Exception ex)
            {
                //Debug.WriteLine("Error in Web_RW.HttpPost: no response from " + strURI.ToString() + "\n\r" + ex.ToString());
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
               
                return false;
            }
        }

        public bool Put(string hostName, Int32 port, string localFile, string user, string password, string design, string remoteFile)
        {
            try
            {
                int i = 0;
                bool getreturn = false;
               
               while((!getreturn) && (i<10))
                {
                    if (chekfileopen(localFile))
                    {
                        getreturn = checkput(user, password, hostName, port, localFile, design, remoteFile);
                    }
                     i++;
                }
                   
              
                //wc.UploadFile(uri.Uri, "PUT", localFile);

                return getreturn;
            }
            catch (Exception ex)
            {
                //if(ex.HResult==)
                //{


                //}
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool checkput(string user, string password, string hostName, Int32 port, string localFile,string design,string remoteFile)
        {
            bool success = false;

            try
            {
                UriBuilder uri = new UriBuilder("http", hostName, port, "cgi-bin/design_put");
                uri.Query = string.Format("password=&version={0}&design_code={1}&file={2}", "DEVELOPMENT_VERSION", design, remoteFile);
                long filesize = 0;
                using (FileStream inStream = new FileStream(localFile, FileMode.Open, FileAccess.Read))
                {
                    System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(uri.Uri);
                    req.Credentials = new NetworkCredential(user, password);
                    req.PreAuthenticate = true;
                    req.UserAgent = "Upload Test";
                    req.Method = "PUT";
                    req.AllowWriteStreamBuffering = false;
                    req.Timeout = 240000;
                    req.ContentType = "application/octet-stream";
                    inStream.Seek(0, SeekOrigin.Begin);
                    req.ContentLength = inStream.Length;
                    //req.ReadWriteTimeout = 240000;
                    filesize = inStream.Length;
                    SetBasicAuthHeader(ref req, user, password);

                    using (System.IO.Stream outStream = req.GetRequestStream())
                    {
                        const int inBufferSize = 32768;//32kb

                        while (inStream.Position < inStream.Length)
                        {
                            byte[] chunkData = new byte[inBufferSize];
                            int chunkDataRead = inStream.Read(chunkData, 0, inBufferSize);
                            outStream.Write(chunkData, 0, chunkDataRead);

                        }
                        outStream.Flush();
                    }

                    using (System.Net.WebResponse resp = req.GetResponse())
                    {
                        if (resp == null)
                        {
                            req.Abort();
                            return success;
                        }
                        else if (((HttpWebResponse)resp).StatusCode.ToString().ToUpper() == "CREATED")
                        {
                            success = true;
                        }
                        else if (((HttpWebResponse)resp).StatusCode.ToString().ToUpper() == "CONTINUE")
                        {
                            success = true;
                        }
                        else if (((HttpWebResponse)resp).StatusCode.ToString().ToUpper() == "OK")
                        {
                            success = true;
                        }
                    }

                    req.Abort();
                    return success;
                }
           
            //UriBuilder uri = new UriBuilder("http", hostName, port, "cgi-bin/design_put");
            // TODO:
            //  QUERY ARGUMENTS NEED TO BE ENCODED!
            //uri.Query = string.Format("password=&version={0}&design_code={1}&file={2}", "DEVELOPMENT_VERSION", design, remoteFile);
            //        Util.Logger.Info("Core.File.Put( {0} -> {1} )", localFile, uri);
            //WebClient wc = new FastWebClient() { Timeout = System.Threading.Timeout.Infinite };
            //try
            //{
               
            //if (!string.IsNullOrEmpty(user))
            //{
            //    wc.Credentials = new NetworkCredential(user, password);
            //}
            // wc.UploadFile(uri.Uri, "PUT", localFile);

            //    return true;
            //}
			
            }
            catch (Exception ex)
            {
                  Thread.Sleep(2000);
				DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return success;
            }
        }

        public bool LoadGUI(string filename, string compileID)
        {
            try
            {
                ProcessStartInfo compileQsysDesign = new ProcessStartInfo();
                compileQsysDesign.FileName = filename;

                if(core_New_FirmwareVersion.Item1)
                {
                    if (Properties.Settings.Default.Execution_dev_mode == false)                    
                        compileQsysDesign.Arguments = "/compileId:" + compileID + " /username:" + Properties.Settings.Default.DeviceUsername.ToString() + " /password:" + applicationPassword;
                    
                    else                    
                        compileQsysDesign.Arguments = "/compileId:" + compileID + " /dev /username:" + Properties.Settings.Default.DeviceUsername.ToString() + " /password:" + applicationPassword;                    
                }
                else
                {
                    if (Properties.Settings.Default.Execution_dev_mode == false)
                        compileQsysDesign.Arguments = "/compileId:" + compileID;

                    else
                        compileQsysDesign.Arguments = "/compileId:" + compileID + " /dev";
                }

             
                qsyDesignProcess = Process.Start(compileQsysDesign);
                Thread.Sleep(5000);
                return true;
            }
            catch(Exception ex)
            {
                //if (qsyDesignProcess.HasExited)
                //    qsyDesignProcess.Kill();
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        private void TelnetExectionPassCommand(string telnetcommand, string ipAddr)
        {
            try
            {
                Telnet_Comm TPC = new Telnet_Comm();

                //string root = Properties.Settings.Default.TelnetUserName;
                //string decline = Properties.Settings.Default.TelnetPassword;

                string[] roots = Properties.Settings.Default.TelnetUserName.Split(',');
                string[] declines = Properties.Settings.Default.TelnetPassword.Split(',');

                ////string telnetcommand = "engine_stop";

                for (int i = 0; i < roots.Count(); i++)
                {
                    string[] strResponseArray = new string[0];
                    string[] strMessageQue = new string[] { "", roots[i], declines[i], telnetcommand };
                    TPC.session(ipAddr, strMessageQue, string.Empty, false, out strResponseArray);

                    if (i == 1)
                        break;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15015", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        private void SSHExectionPassCommand(string telnetcommand, string ipAddr)
        {
            try
            {
                string[] strResponseArray = new string[0];
                ssh SSHClient = new ssh();
                bool issshsuccess = SSHClient.session(ipAddr, telnetcommand, sshPrivatekeyFilePath, out strResponseArray);               
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        
        private bool ReDeployDesign(string gert, string designname, bool isDeployEnable, string deployCount)
        {
            bool deploysuccess = false;

            try
            {
                if (isDeployEnable == true)
                {
                    int cnt = Convert.ToInt32(deployCount);

                    for (int i = 0; i < cnt; i++)
                    {
                        int elapsed = 0;
                        ProcessStartInfo qDesignArgs = new ProcessStartInfo();
                        Thread.Sleep(1000);

                        qDesignArgs.Arguments = "\"" + localdirectorypath + "/" + designname + "\"" + " /dev /deploy";
                        qDesignArgs.FileName = gert;
                        qsyDesignProcess = Process.Start(qDesignArgs);
                        Thread.Sleep(1000);

                        while (deploysuccess == false & elapsed < 3)
                        {
                            if (elapsed == 0)
                                Thread.Sleep(15000);
                            if (elapsed == 1)
                                Thread.Sleep(10000);
                            if (elapsed == 2)
                                Thread.Sleep(15000);
                            if (elapsed == 3)
                                Thread.Sleep(10000);
                            deploysuccess = XmlReadToGetDesignlaunch(designname);
                            //Thread.Sleep(5000);
                            elapsed += 1;
                        }

                        if (deploysuccess)
                            return deploysuccess;

                        if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                        {
                            qsyDesignProcess.Kill();
                        }

                    }
                }

                return deploysuccess;
            }
            catch (Exception ex)
            {
                if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                {
                    qsyDesignProcess.Kill();
                }

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028R", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return deploysuccess;
            }
        }

        public Tuple <bool,string> Load_and_Launch_restore(string strDesignPath, string designname, string ip_of_core)
        {
            bool deploysuccess = false;
            string restorefaileddevices = string.Empty;
            Process compileProcess = new Process();
            string password = applicationPassword;
            string tickscreate = Convert.ToString(DateTime.Now.Ticks);
            string buildPath = string.Empty;
            string pathToCreateTarFile = string.Empty;
            string tarFileName = string.Empty;
            string FailureReason = string.Empty;
            bool success = false;
            var isNewver = firmwareVersioncheck(ip_of_core);
            string username = string.Empty;
            if (isNewver.Item1)
                username = Properties.Settings.Default.DeviceUsername.ToString();
            else
                username = "admin";


            //string strResponse = "";
            try
            {
                if (ip_of_core != string.Empty)
                {                  
                    string prettyName = System.IO.Path.GetFileNameWithoutExtension(designname);
                    string designpath = System.IO.Path.Combine(strDesignPath,designname);

                    if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    {
                        var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID +"\\"+ tickscreate;
                        pathToCreateTarFile = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID;
                        buildPath = directorycreate;
                       
                    }
                    else
                    {
                        var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_"+ dupExecID +"\\"+ tickscreate);
                        pathToCreateTarFile = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID).FullName;
                       buildPath = directorycreate.FullName;
                       
                    }

                    if (!Directory.Exists(buildPath))
                    {
                        Directory.CreateDirectory(buildPath);
                    }
                    //if (Directory.Exists(buildPath))
                    //{
                    //    Directory.Delete(buildPath);
                    //    Directory.CreateDirectory(buildPath);
                    //}
                    //var chkdeviceStatus = HttpGet("http://" + ip_of_core + "/cgi-bin/password_set?password1=&password2=", applicationPassword, "EC-restore", ip_of_core, out strResponse);
                    //if (chkdeviceStatus.Item2)
                    //{
                    //    notavailabledevicesinNetwork = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ip_of_core, selectedDutDeviceItemList);
                    //    //ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network so design restore will be skipped", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                    //    return new Tuple<bool, string>(deploysuccess, notavailabledevicesinNetwork);
                    //}
                    
                    ProcessStartInfo compileQsysDesign = new ProcessStartInfo();
                    compileQsysDesign.FileName = preferenceQSDInstalledpath;

                    compileQsysDesign.Arguments = "/build:" + "\"" + designpath + "\"" + @" /output:" + "\"" + buildPath + "\"";

                    ////qDesignArgs.Arguments = @"/build:C:\Users\madhumathi\Desktop\Index'Issue.qsys /output:F:\Build_Log";
                    compileProcess = Process.Start(compileQsysDesign);
                    string designid = string.Empty;
                    for (int i = 0; i < 2; i++)
                    {
                        Thread.Sleep(10000);
                        if (File.Exists(buildPath + "\\compile_id"))
                        {
                            getcompileid(buildPath + "\\compile_id", out designid);
                            break;
                        }
                    }

                    if (designid != string.Empty)
                    {
                        ////change the core name in the inventory.xml
                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.Load(buildPath + "//inventory.xml");
                        string xx = xmlDoc.DocumentElement.InnerXml;
                        XmlNodeList nodeList = xmlDoc.DocumentElement.SelectNodes("device");
                        foreach (XmlNode node in nodeList)
                        {
                            if (node.Attributes != null && node.Attributes["type"] != null)
                            {
                                if (node.Attributes["type"].Value == "core")
                                {
                                    node.Attributes["primary"].Value = netPairNameForDeploy;
                                }
                            }
                        }

                        xmlDoc.Save(buildPath + "//inventory.xml");
                        
                        if (!compileProcess.HasExited)
                            compileProcess.Kill();
                        

                       
                        bool isQREM = false;
                        string[] coredetails = null;

                        ////////remote core
                        if (ip_of_core.StartsWith("QREM:"))
                        {
                            ////From 8.4 and below firmware version- remote core design load not supported 
                            bool isNewversion = FirmwareDigestCheck(isNewver.Item2, true, true);

                            if(isNewversion)
                            {
                                // Create Tar.gz file to upload     
                                tarFileName = designid + ".tar.gz";
                                bool isTarFileCreated = CreateTar(pathToCreateTarFile + "\\" + tarFileName, buildPath, designpath, designid, out FailureReason);
                                if (isTarFileCreated)
                                {
									isQREM = true;
                                	coredetails = ip_of_core.Remove(0, 5).Split(';');
                                    success = Deploy_design_QREM(coredetails, false, null, designid, pathToCreateTarFile, false, prettyName, out FailureReason);
                                }
                            }
                            else
                            {
                                success = false;
                                DeviceDiscovery.WriteToLogFile("Firmware version of " + BackupselectedCoreSystemSiteID[0] + " remote core is not supported to load design.");
                                FailureReason = "Firmware version of " + coredetails[0] + " remote core is not supported to load design.";
                            }
                        }
                        else      ////////local core
                        {
                            bool isNewversion = FirmwareDigestCheck(isNewver.Item2, true, false);

                            if (isNewversion)
                            {
                                // Create Tar.gz file to upload     
                                tarFileName = designid + ".tar.gz";
                                bool isTarFileCreated = CreateTar(pathToCreateTarFile + "\\" + tarFileName, buildPath, designpath, designid, out FailureReason);
                                if (isTarFileCreated)
                                {
                                    success = Deploy_design_new(ip_of_core, password, designid, pathToCreateTarFile, null, prettyName, out FailureReason);
                                }
                            }
                            else
                            {
                                success = Deploy_design_old(ip_of_core, password, username, prettyName, designid, buildPath, designpath, versionForDeploy, false, out FailureReason);
                            }
                        }

                        if (success)
                        {
                            Thread.Sleep(20000);
                            if (checkrunningRestore(designid, ip_of_core, isQREM, coredetails))
                            {
                                //LoadGUI(preferenceQSDInstalledpath, designid);
                                if (Directory.Exists(buildPath))
                                    Directory.Delete(buildPath, true);

                                if (tarFileName != string.Empty && File.Exists(pathToCreateTarFile + "\\" + tarFileName))
                                    File.Delete(pathToCreateTarFile + "\\" + tarFileName);

                                deploysuccess = true;
                            }
                        }                        
                    }

					if (!deploysuccess)
                        restorefaileddevices = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ip_of_core, selectedDutDeviceItemList);


                    //if (ip_of_core != string.Empty)
                    //{
                    //    var chkStatus = HttpGet("http://" + ip_of_core + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC-restore", ip_of_core, out strResponse);
                    //     if (chkStatus.Item2)
                    //    {
                    //        notavailabledevicesinNetwork = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ip_of_core, selectedDutDeviceItemList);
                    //    }
                    //}
                                       
                }
                //if (!qsyDesignProcess.HasExited)
                //    qsyDesignProcess.Kill();
                return new Tuple<bool, string> (deploysuccess, restorefaileddevices);
            }
            catch (Exception ex)
            {
				if (!deploysuccess)
                    restorefaileddevices = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ip_of_core, selectedDutDeviceItemList);

                //if (ip_of_core != string.Empty)
                //{
                //    var chkStatus = HttpGet("http://" + ip_of_core + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC-restore", ip_of_core, out strResponse);
                //    if (chkStatus.Item2)
                //    {
                //        notavailabledevicesinNetwork = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ip_of_core, selectedDutDeviceItemList);
                //        //ExecutionMessageBox("Exception\n  " + deviceName + " Device is not available in network so password restore will be skipped", "Error Code - EC15024", MessageBoxButton.OK, MessageBoxImage.Error);
                //    }
                //}

                //if (!qsyDesignProcess.HasExited)
                //    qsyDesignProcess.Kill();

                if (tarFileName != string.Empty && File.Exists(pathToCreateTarFile + "\\" + tarFileName))
                    File.Delete(pathToCreateTarFile + "\\" + tarFileName);
                if (!compileProcess.HasExited)
                    compileProcess.Kill();
                if (Directory.Exists(buildPath))
                    Directory.Delete(buildPath, true);


              
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC-restore", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //return deploysuccess;

                return new Tuple<bool, string>(deploysuccess, restorefaileddevices);
            }
        }
          
        public bool XmlReadToGetDesignlaunch(string designname)
        {
            string Design_nameincore = string.Empty;
            string state_pretty = string.Empty;
            bool design_status = false;
            try
            {
                XmlDocument xml = new XmlDocument();
                if(selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");
                    }

                    if (xml == null)
                        return design_status;

                    XmlNode node_pretty_name = xml.SelectSingleNode("status/design/pretty_name");
                    Design_nameincore = node_pretty_name.InnerText + ".qsys";
                    if (designname == Design_nameincore)
                    {
                        XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");
                        state_pretty = node_state_pretty.InnerText;
                        if (state_pretty == "Running")
                        {
                            return design_status = true;
                        }
                    }
                }
                  
                return design_status;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return design_status;
            }
        }

        public bool IsCorePresent(string coreipcheck)
        {
            bool success = false;
            int trial = 0;
            try
            {
                if ((coreipcheck != null) && (coreipcheck != string.Empty) && (coreipcheck != "Not Applicable"))
                {
                    while ((!success) & (trial < 4))
                    {
                        Ping ping = new Ping();
                        PingReply pingReply = ping.Send(coreipcheck);

                        if (pingReply.Status == IPStatus.Success)
                        {
                            success = true;

                        }
                        else
                        {
                            trial = trial + 1;
                            Thread.Sleep(2000);
                        }

                    }
                }
                return success;
            }
            catch { return success; }
        }

        private Tuple<bool, string> QREM_CoreIsInOnline(string coreID)
        {
            try
            {
                string strResponse = string.Empty;
                var outval = HttpGetactual_json("https://" + Properties.Settings.Default.QREMreflectLink + "/api/qsd/v0/cores/" + coreID, DeviceDiscovery.QREM_Token, string.Empty, out strResponse);

                if (outval != null && outval.Item1)
                {
                    dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(strResponse);

                    if (array != null)
                    {
                        Dictionary<string, object> objectlist = array as Dictionary<string, object>;

                        if (objectlist != null && objectlist.Count > 0)
                        {
                            if (objectlist.ContainsKey("offline") && Convert.ToBoolean(objectlist["offline"]) == false)
                            {
                                return new Tuple<bool, string>(true, string.Empty);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, string>(false, "Core is in offline");
        }

        private string stattime = string.Empty;
        public void Execute_Testcase(string testcasename, string testplanname, Int32 TPid, string testsuitename, Int32 exid, TreeViewExplorer TestExecution, List<logitems> otheritems, List<logitems> coreitems, DateTime Date_time_writelogs_TC, string Date_time_Suite, string Qsys_firmware,string LoopIterations,string TC_log_Pathtowrite,string timestamp, string TSpath, string TPname_ID,Int32 CaseExecutionUniqueID,Int32 CaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID, DateTime dateTimeForUSB,string ExidTctime_forTCBM, bool libConnectionSuccess, string[] datetimeTPTCTA, bool isQREM)
        {
            try
            {
                TAID.Clear();
                //TempTestCaseTable
                string query = string.Empty;
                if (ExidTctime_forTCBM == string.Empty)
                    stattime = DateTime.Now.ToString();
                else
                    stattime = ExidTctime_forTCBM;
                string tcwithexid = exid + testcasename + stattime;
                datetimeTPTCTA[1] = stattime;
                
                string TC_buildversion = string.Empty;

                if (isQREM)
                {
                    var systemDetails = GetQREMSystemDetails(selectedCoreSystemSiteID[2]);
                    TC_buildversion = systemDetails["FirmwareVersion"];
                }
                else
                {
                    TC_buildversion = XmlReadToGetDesignversion(selectedCoreIPAddress);
                }

                if (string.IsNullOrEmpty(TC_buildversion))
                {
                    TC_buildversion = "Not Available";
                }

                query = "Insert into TempTestCaseTable values('" + exid + "','In Progress',@TSName,@TPName,@TCName,'" + stattime + "','" + string.Empty + "','" + TC_buildversion + "',' " + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "--" + Environment.OSVersion.ToString() + "',@DesignName,'" + string.Empty + "',@TCWithEXID,'" + DateTime.Today.ToString() + "','"+string.Empty+"','" + string.Empty + "','"+ LoopIterations + "','" + CaseExecutionUniqueID + "','" + CaseAlogPlanExecutionUniqueID + "','"+ SuiteExecutionUniqueID + "')";//Added in 15-mar-17
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@DesignName", desgnname, "@TCWithEXID", tcwithexid, string.Empty, string.Empty);

                telnetresponses.Clear();

                List<string> Actiontype = new List<string>();
                List<string> verifytype = new List<string>();
                List<string> actionname = new List<string>();
                List<string> Errorittration = new List<string>();
                List<string> ErrorHandlingType = new List<string>();
                List<string> tc_delay_type = new List<string>();
                List<string> tc_delay = new List<string>();
                List<string> verification_delay_type = new List<string>();
                List<string> verification_delay = new List<string>();
                List<string> Logaction = new List<string>();
                List<string> screenshotGUI = new List<string>();
                List<logitems> corererunitems = new List<logitems>();
                List<logitems> otherrunitems = new List<logitems>();
                query = "select testcaseid from Testcase where testcasename=(@TCName)";
                //tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                tble = QscDatabase.SelectDTWithParameter(query, "@TCName", testcasename);
                //this.connect.CloseConnection();

                read = tble.CreateDataReader();
                Int32 tcid = 0;

                while (read.Read())
                {
                    tcid = read.GetInt32(0);
                }

                if (tcid != 0)
                {
                    query = "select Actiontype,TestActionID,Delayvalue,delaytype,verificationtype,ActionTabname, Errorittration, ErrorHandlingType,VerificationDelay,VerificationDelayType,LogAction,screenshot from testaction where tcid=('" + tcid + "')";
                    tble = QscDatabase.SendCommand_Toreceive(query);
                    read = tble.CreateDataReader();

                    while (read.Read())
                    {
                        TAID.Add(read.GetInt32(1));
                        Actiontype.Add(read.GetString(0));
                        verifytype.Add(read.GetString(4));
                        tc_delay.Add(read.GetString(2));
                        tc_delay_type.Add(read.GetString(3));
                        actionname.Add(read.GetString(5));
                        Errorittration.Add(read.GetString(6));
                        ErrorHandlingType.Add(read.GetString(7));
                        Logaction.Add(read.GetString(10));
                        if (read[8] != System.DBNull.Value)
                        {
                            verification_delay.Add(read.GetString(8));
                        }
                        else
                        {
                            verification_delay.Add(string.Empty);
                        }
                        if (read[9] != System.DBNull.Value)
                        {
                            verification_delay_type.Add(read.GetString(9));
                        }
                        else
                        {
                            verification_delay_type.Add(string.Empty);
                        }

                        if (read[11] != System.DBNull.Value)
                        {
                            screenshotGUI.Add(read.GetString(11));
                        }
                        else
                        {
                            screenshotGUI.Add(string.Empty);
                        }
                    }

                    Int32[] TAID_array = TAID.ToArray();
                    Int32 length = Actiontype.Count;
                    if ((TAID_array.Length == length) && (Actiontype.Count == length) && (verifytype.Count == length) && (tc_delay.Count == length) && (tc_delay_type.Count == length) && (verification_delay.Count == length) && (verification_delay_type.Count == length))
                    {
                        for (int q = 0; q < length; q++)
                        {
                            string TestActionname = actionname[q];
                            string TestActionStartTime = DateTime.Now.ToString();
                            string status = string.Empty;
                            string TestActionquery = string.Empty;
                            string TestActionEndTime = string.Empty;
                            string starttime = DateTime.Now.ToString();
                            bool error_occured = false;

                            datetimeTPTCTA[2] = starttime;

                            //string Date_time_writelogs_TC = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                            //DateTime Date_time_writelogs_TC = DateTime.Now;
                            List<logitems> TC_log_start_lines1 = new List<logitems>();
                            List<logitems> TC_log_start_lines2 = new List<logitems>();

                            if (!string.IsNullOrEmpty(Logaction[q]) && Logaction[q] != "Never Save logs")
                            {
                                if (isQREM)
                                {
                                    TC_log_start_lines1 = log_object.Tplog_getcurrentline_Reflectcore(coreitems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                }
                                else
                                {
                                    TC_log_start_lines1 = log_object.Tplog_getcurrentline_core(coreitems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                    TC_log_start_lines2 = log_object.Tplog_getcurrentline_other(otheritems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                }
                            }

                            var tcstatus = RunTC(tcid, q, Actiontype, verifytype, testcasename, actionname, tc_delay, tc_delay_type, verification_delay, verification_delay_type, TC_log_start_lines1, TC_log_start_lines2, testplanname, testsuitename, exid, TestExecution, Date_time_Suite, Qsys_firmware, TestActionname, TC_log_Pathtowrite,string.Empty,TSpath, TPname_ID, CaseExecutionUniqueID, CaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, dateTimeForUSB, libConnectionSuccess, datetimeTPTCTA, Logaction[q],string.Empty, isQREM);

                            List<string> runStatus_Action = tcstatus.Item1;
                            List<string> runStatus_Verificarion = tcstatus.Item2;
                            string netpairFailure = tcstatus.Item3;
                           
                            if ((runStatus_Action.Count > 0 && runStatus_Action.Contains("Fail")) || (runStatus_Verificarion.Count > 0 && runStatus_Verificarion.Contains("Fail")))
                            {
                                error_occured = true;
                            }

                            //////endlog
                            if (Logaction[q] == "Save logs always" || Logaction[q] == "Save logs always WithQsysLogPeripherals")
                            {
                                List<logitems> TC_log_end_lines1 = new List<logitems>();
                                List<logitems> TC_log_end_lines2 = new List<logitems>();

                                if (isQREM)
                                {
                                    TC_log_end_lines1 = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    corererunitems = TC_log_end_lines1;
                                }
                                else
                                {
                                    TC_log_end_lines1 = log_object.Tplog_getcurrentline_core(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    corererunitems = TC_log_end_lines1;

                                    TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(TC_log_start_lines2, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    otherrunitems = TC_log_end_lines2;
                                }

                                if (Logaction[q] == "Save logs always WithQsysLogPeripherals")
                                {
                                    TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, true, isQREM);
                                }
                                else
                                {
                                    TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, false, isQREM);
                                }
                            }
                            else if (Logaction[q] == "Save during Error" || Logaction[q] == "Save during Error WithQsysLogPeripherals")
                            {
                                if (error_occured)
                                {
                                    List<logitems> TC_log_end_lines1 = new List<logitems>();
                                    List<logitems> TC_log_end_lines2 = new List<logitems>();

                                    if (isQREM)
                                    {
                                        TC_log_end_lines1 = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                        corererunitems = TC_log_end_lines1;
                                    }
                                    else
                                    {
                                        TC_log_end_lines1 = log_object.Tplog_getcurrentline_core(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                        corererunitems = TC_log_end_lines1;
                                        TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(TC_log_start_lines2, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                        otherrunitems = TC_log_end_lines2;
                                    }

                                    if (Logaction[q] == "Save during Error WithQsysLogPeripherals")
                                    {
                                        TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, true, isQREM);
                                    }
                                    else
                                    {
                                        TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, false, isQREM);
                                    }
                                }
                            }

                            if (!isQREM && screenshotGUI[q] != string.Empty && screenshotGUI[q] == "True")
                            {
                               string filteredactionname = filtername(actionname[q]);
                                screenshot(qsyDesignProcess, TC_log_Pathtowrite + "\\" + filteredactionname, string.Empty, "Qsys_GUI.jpeg");
                            }

                            ///Error hadling
                            if ((runStatus_Action.Count > 0 && runStatus_Action.Contains("Fail")) || (runStatus_Verificarion.Count > 0 && runStatus_Verificarion.Contains("Fail")))
                            {

                                //UpdateExecuteStatusInformation(TestExecution, Fail);
                                TestExecution.ExecutionStatus = "Fail";
                                
                                status = "Fail";
                                TestActionEndTime = DateTime.Now.ToString();

                                TestActionquery = "Insert into TestAction_Report values('" + exid + "',@TSName,@TPName,@TCName,@TAName,'" + status + "', '" + TestActionStartTime + "', '" + TestActionEndTime + "', '" + string.Empty + "')";
                                tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                TestActionquery= "update TempTestCaseTable set Remarks='Tab items fails so test case gets fails' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and ExecID='" + exid + "' and CaseExecutionUniqueID='"+CaseExecutionUniqueID+ "' and CaseAlogPlanExecutionUniqueID='"+ CaseAlogPlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='"+SuiteExecutionUniqueID+"'";
                                tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                netpairFailure = "Action or Verification fails so Tab gets failure ";
                                if (tcstatus.Item3 != string.Empty)
                                    netpairFailure = "Tab items fails so test case gets fails ," + netpairFailure;

                                string taWithEXID = exid + TestActionname + TestActionStartTime;
                                string tcWithEXID = exid + testcasename + stattime;
                                TestActionquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + status + "',@TSName,@TPName,@TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'" + netpairFailure + "','"+CaseExecutionUniqueID+"','"+ CaseAlogPlanExecutionUniqueID + "','"+SuiteExecutionUniqueID+ "')";
                                tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);


                                //Updating TempTestCaseActionTabTable Values       
                                string actionNameWithEXID = exid + TestActionname + TestActionStartTime;
                                TestActionquery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='"+CaseExecutionUniqueID+ "' and ActionTabTableCaseAlogPlanExecutionUniqueID='"+ CaseAlogPlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='"+SuiteExecutionUniqueID+"'";
                                tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", actionNameWithEXID, string.Empty, string.Empty);


                                if (ErrorHandlingType[q] == "Continue Testing")
                                {
                                    
                                    if (Errorittration[q] != string.Empty)
                                    {
                                        int k = 0;
                                        for (int i = 0; i < Convert.ToInt64(Errorittration[q]); i++)
                                        {
                                            starttime = DateTime.Now.ToString();
                                            k++;
                                            TestActionname = actionname[q];
                                            ////Delay Time set
                                            status = string.Empty;
                                            string lstrTestActionName = string.Empty;
                                            lstrTestActionName = TestActionname;
                                            lstrTestActionName = lstrTestActionName + "_Rerun_" + k;
                                            ////start rerunlog

                                            List<logitems> TC_log_start_lines1_rerun = new List<logitems>();
                                            List<logitems> TC_log_start_lines2_rerun = new List<logitems>();

                                            if (!string.IsNullOrEmpty(Logaction[q]) && Logaction[q] != "Never Save logs")
                                            {
                                                if (isQREM)
                                                {
                                                    TC_log_start_lines1_rerun = log_object.Tplog_getcurrentline_Reflectcore(corererunitems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                                }
                                                else
                                                {
                                                    TC_log_start_lines1_rerun = log_object.Tplog_getcurrentline_core(corererunitems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                                    TC_log_start_lines2_rerun = log_object.Tplog_getcurrentline_other(otherrunitems, applicationPassword, "TC_Start", Date_time_writelogs_TC, timestamp, this);
                                                }
                                            }

                                            var tcRerunstatus = RunTC(tcid, q, Actiontype, verifytype, testcasename, actionname, tc_delay, tc_delay_type, verification_delay, verification_delay_type, TC_log_start_lines1_rerun, TC_log_start_lines2_rerun, testplanname, testsuitename, exid, TestExecution, Date_time_Suite, Qsys_firmware, lstrTestActionName,TC_log_Pathtowrite, "Rerun_" + Convert.ToString(i+1)+"_", TSpath, TPname_ID, CaseExecutionUniqueID, CaseAlogPlanExecutionUniqueID,SuiteExecutionUniqueID, dateTimeForUSB, libConnectionSuccess, datetimeTPTCTA,Logaction[q], "Rerun_" + (i + 1), isQREM);
                                            
                                            //////endlog
                                            if (Logaction[q] == "Save logs always" || Logaction[q] == "Save logs always WithQsysLogPeripherals")
                                            {
                                                List<logitems> TC_log_end_lines1_rerun = new List<logitems>();
                                                List<logitems> TC_log_end_lines2_rerun = new List<logitems>();

                                                if (isQREM)
                                                {
                                                    TC_log_end_lines1_rerun = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                }
                                                else
                                                {
                                                    TC_log_end_lines1_rerun = log_object.Tplog_getcurrentline_core(TC_log_start_lines1_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                    corererunitems = TC_log_end_lines1_rerun;
                                                    TC_log_end_lines2_rerun = log_object.Tplog_getcurrentline_other(TC_log_start_lines2_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                    otherrunitems = TC_log_end_lines2_rerun;
                                                }

                                                if (Logaction[q] == "Save logs always WithQsysLogPeripherals")
                                                {
                                                    TP_Write_logs(TC_log_end_lines1_rerun, TC_log_end_lines2_rerun, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, "Rerun_" + (i + 1) + "_", true, isQREM);
                                                }
                                                else
                                                {
                                                    TP_Write_logs(TC_log_end_lines1_rerun, TC_log_end_lines2_rerun, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, "Rerun_" + (i + 1) + "_", false, isQREM);
                                                }
                                            }
                                            else if (Logaction[q] == "Save during Error" || Logaction[q] == "Save during Error WithQsysLogPeripherals")
                                            {
                                                if (error_occured)
                                                {
                                                    List<logitems> TC_log_end_lines1_rerun = new List<logitems>();
                                                    List<logitems> TC_log_end_lines2_rerun = new List<logitems>();

                                                    if (isQREM)
                                                    {
                                                        TC_log_end_lines1_rerun = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                    }
                                                    else
                                                    {
                                                        TC_log_end_lines1_rerun = log_object.Tplog_getcurrentline_core(TC_log_start_lines1_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                        corererunitems = TC_log_end_lines1_rerun;
                                                        TC_log_end_lines2_rerun = log_object.Tplog_getcurrentline_other(TC_log_start_lines2_rerun, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                                        otherrunitems = TC_log_end_lines2_rerun;
                                                    }

                                                    if (Logaction[q] == "Save during Error WithQsysLogPeripherals")
                                                    {
                                                        TP_Write_logs(TC_log_end_lines1_rerun, TC_log_end_lines2_rerun, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, "Rerun_" + (i + 1) + "_", true, isQREM);
                                                    }
                                                    else
                                                    {
                                                        TP_Write_logs(TC_log_end_lines1_rerun, TC_log_end_lines2_rerun, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, "Rerun_" + (i + 1) + "_", false, isQREM);
                                                    }
                                                }
                                            }

                                            if (!isQREM && screenshotGUI[q] != string.Empty && screenshotGUI[q] == "True")
                                            {
                                                string filteredactionname = filtername(actionname[q]);
                                                screenshot(qsyDesignProcess, TC_log_Pathtowrite + "\\" + "Rerun_" + (i + 1) + "_" + filteredactionname, string.Empty, "Qsys_GUI.jpeg");
                                            }

                                            List<string> Rerunstatus_Action = tcRerunstatus.Item1;
                                            List<string> Rerunstatus_Verification = tcRerunstatus.Item2;
                                            string netParingFailure = tcRerunstatus.Item3;

                                            if (Rerunstatus_Action.Count > 0 && Rerunstatus_Action.Contains("Fail") || Rerunstatus_Verification.Count > 0 && Rerunstatus_Verification.Contains("Fail"))
                                            {
                                                status = "Fail";
                                                netParingFailure = "Action or Verification fails so Tab gets failure ";
                                                if (tcstatus.Item3 != string.Empty)
                                                    netParingFailure = "Tab items fails so test case gets fails ," + netParingFailure;
                                            }
                                            else if ((Rerunstatus_Action.Count > 0 && (Rerunstatus_Action.Contains("Pass") && !Rerunstatus_Action.Contains("Fail")) || (Rerunstatus_Action.Contains("Skip Action"))) && (Rerunstatus_Verification.Count > 0 && (Rerunstatus_Verification.Contains("Pass") && !Rerunstatus_Verification.Contains("Fail") || (Rerunstatus_Verification.Contains("Skip Verification")))))
                                            {
                                                status = "Pass";
                                                netParingFailure = string.Empty;
                                            }
                                            
                                            TestActionEndTime = DateTime.Now.ToString();
                                            TestActionquery = "Insert into TestAction_Report values('" + exid + "',@TSName, @TPName, @TCName,@TAName,'" + status + "', '" + TestActionStartTime + "', '" + TestActionEndTime + "', '" + string.Empty + "')";
                                            tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, string.Empty, string.Empty, string.Empty, string.Empty);


                                            string actionEXID = exid + lstrTestActionName + TestActionStartTime;
                                            string testcWithEXID = exid + testcasename + stattime;

                                            TestActionquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "',@actionEXID,@tcWithEXID,'" + netParingFailure + "','" + CaseExecutionUniqueID + "','" + CaseAlogPlanExecutionUniqueID + "','"+SuiteExecutionUniqueID+"')";
                                            tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", lstrTestActionName, "@actionEXID", actionEXID, "@tcWithEXID", testcWithEXID);

                                            //Updating TempTestCaseActionTabTable Values
                                            string actionWithEXID = exid + lstrTestActionName + TestActionStartTime;
                                            TestActionquery = "update TempTestCaseActionTabTable set ExecidTabname= @actionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "'and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + CaseAlogPlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", lstrTestActionName, "@actionWithEXID", actionWithEXID, string.Empty, string.Empty);

                                            Rerunstatus_Action.Clear();
                                            Rerunstatus_Verification.Clear();
                                            //TestActionname = string.Empty;
                                        }
                                    }
                                }

                                if (ErrorHandlingType[q] == "Pause at error state")
                                {
                                    if (Properties.Settings.Default.AutomationPauses == true)
                                    {
                                        Executionsummary();
                                        //GridFill("Error occured in " + testcasename + ",so execution paused", true, testsuitename);

                                        SendEmail("Execution pause notification", true, testsuitename,0,0, !TestExecution.Parent.HasDesign);
                                    }

                                    ExecutionMessageBox("Error occured in " +testcasename+",click ok to continue", "Pause at error state", MessageBoxButton.OK, MessageBoxImage.Warning);
                                }
                            }
                            else
                            {
                                if ((runStatus_Action.Count > 0 && (runStatus_Action.Contains("Pass") && !runStatus_Action.Contains("Fail"))||(runStatus_Action.Contains("Skip Action"))) && (runStatus_Verificarion.Count > 0 && (runStatus_Verificarion.Contains("Pass") && !runStatus_Verificarion.Contains("Fail")||(runStatus_Verificarion.Contains("Skip Verification")))))
                                {
                                    //UpdateExecuteStatusInformation(TestExecution, Pass);
                                    TestActionname = actionname[q];
                                    status = "Pass";
                                    TestActionEndTime = DateTime.Now.ToString();
                                    TestActionquery = "Insert into TestAction_Report values('" + exid + "',@TSName, @TPName, @TCName,@TAName,'" + status + "', '" + TestActionStartTime + "', '" + TestActionEndTime + "', '" + string.Empty + "')";
                                    tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                    string actionEXID = exid + TestActionname + TestActionStartTime;
                                    string tcWithEXID = exid + testcasename + stattime;
                                    TestActionquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "',@actionEXID,@tcWithEXID,'Tab Passed','" + CaseExecutionUniqueID + "','" + CaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                    tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, "@actionEXID", actionEXID, "@tcWithEXID", tcWithEXID);


                                    //Updating TempTestCaseActionTabTable Values       
                                    string actionWithEXID = exid + TestActionname + TestActionStartTime;
                                    TestActionquery = "update TempTestCaseActionTabTable set ExecidTabname= @actionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "'and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + CaseAlogPlanExecutionUniqueID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecutionUniqueID + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(TestActionquery, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", TestActionname, "@actionWithEXID", actionWithEXID, string.Empty, string.Empty);

                                }
                            }

                            //////endlog
                            if (Logaction[q] == "Save logs always" || Logaction[q] == "Save logs always WithQsysLogPeripherals")
                            {
                                List<logitems> TC_log_end_lines1 = new List<logitems>();
                                List<logitems> TC_log_end_lines2 = new List<logitems>();

                                if (isQREM)
                                {
                                    TC_log_end_lines1 = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                }
                                else
                                {
                                    TC_log_end_lines1 = log_object.Tplog_getcurrentline_core(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(TC_log_start_lines2, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                }

                                if (Logaction[q] == "Save logs always WithQsysLogPeripherals")
                                {
                                    TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, true, isQREM);
                                }
                                else
                                {
                                    TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, false, isQREM);
                                }
                            }
                            else if (Logaction[q] == "Save during Error" || Logaction[q] == "Save during Error WithQsysLogPeripherals")
                            {
                                if (error_occured)
                                {
                                    List<logitems> TC_log_end_lines1 = new List<logitems>();
                                    List<logitems> TC_log_end_lines2 = new List<logitems>();

                                    if (isQREM)
                                    {
                                        TC_log_end_lines1 = log_object.Tplog_getcurrentline_Reflectcore(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    }
                                    else
                                    {
                                        TC_log_end_lines1 = log_object.Tplog_getcurrentline_core(TC_log_start_lines1, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                        TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(TC_log_start_lines2, applicationPassword, "TC_End", Date_time_writelogs_TC, timestamp, this);
                                    }

                                    if (Logaction[q] == "Save during Error WithQsysLogPeripherals")
                                    {
                                        TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, true, isQREM);
                                    }
                                    else
                                    {
                                        TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, TestActionname, exid, "test_case", Date_time_Suite, Qsys_firmware, string.Empty, false, isQREM);
                                    }
                                }
                            }

                            if (!isQREM && screenshotGUI[q] != string.Empty && screenshotGUI[q] == "True")
                            {
                                string filteredactionname = filtername(actionname[q]);
                                screenshot(qsyDesignProcess, TC_log_Pathtowrite + "\\" + filteredactionname, string.Empty, "Qsys_GUI.jpeg");
                            }
                        }
                    }

                    if ((checkprocess(emulateprocess_designeraction)) && (!emulateprocess_designeraction.HasExited))
                        emulateprocess_designeraction.Kill();
                   
                    TAID.Clear();
                }
                else if (tcid == 0)
                {
                    DeviceDiscovery.WriteToLogFile("Testcase doesn't exist");
                    //MessageBox.Show("Testcase doesn't exist", "Message", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                TestExecution.ExecutionStatus = "Fail";
                string query = "Update Testcase_Report set Status='Incomplete' where ExecID='" + dupExecID + "'";
                tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                //if (ex.Message != "Thread was being aborted.")     
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15016", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if ((checkprocess(emulateprocess_designeraction)) && (!emulateprocess_designeraction.HasExited))
                {
                    emulateprocess_designeraction.Kill();
                }
            }
        }

        public Tuple<bool, string, bool> Execute_BackgroundMonitoring_TestCase(Int32 testplanid, string testplan_name, TreeViewExplorer TestExecution, List<logitems> BM_logmonitoring_core, List<logitems> BM_logmonitoring_others, DateTime Date_time_writelogs, string Date_time_Suite, string testcasename, string testsuitename, Int32 exid, string Qsys_firmware, string BM_start_end, string ExecutionTime, string TC_log_Pathtowrite, string TC_timestamp, Int32 CaseExecutionUniqueID, string ExidTctime_forTCBM,string BM_database_starttime, bool isQREM)
        {
            try
            {
                telnetresponses.Clear();
                List<List<string>> BasetableValues = BackgroundGetBaseTableDetails(testplanid, "TP");
                List<string> runStatus = new List<string>();
                List<string> BM_TestCase_status = new List<string>();
                string BM_TC_status = string.Empty;
                List<logitems> BM_Start_log_start_lines1 = new List<logitems>();
                List<logitems> BM_Start_log_start_lines2 = new List<logitems>();
                bool BGFailure = false;
                string Actiontabquery = string.Empty;
                string Actiontabtablequery = string.Empty;
                string BM_TC_starttime = DateTime.Now.ToString();
                string tcWithEXID = string.Empty;
                string taWithEXID = string.Empty;

                if (BasetableValues != null)
                {
                    List<string> BackgroundID = new List<string>();
                    List<string> BackgroundType = new List<string>();
                    List<string> BackgroundErrorhandlingType = new List<string>();
                    List<string> BackgroundErrorhandlingRerun = new List<string>();
                    string status = string.Empty;
                    string BMlogfile = string.Empty;
                    string TC_log_Pathtowrite_background = TC_log_Pathtowrite + "\\" + BM_start_end;
                    string Backgroundpath = TC_log_Pathtowrite_background;
                    BackgroundID = BasetableValues[0];
                    BackgroundType = BasetableValues[1];
                    BackgroundErrorhandlingType = BasetableValues[2];
                    BackgroundErrorhandlingRerun = BasetableValues[3];
                    Int32 length = BackgroundType.Count;

                    string TestActionname = BM_start_end;
                    tcWithEXID = exid + testcasename + ExidTctime_forTCBM;
                    taWithEXID = exid + TestActionname + BM_TC_starttime;
                    string BM_starttime = BM_database_starttime;
                    if (length > 0)
                    {
                        if(isQREM)
                        {
                            return new Tuple<bool, string, bool>(true, "QREM", BGFailure);
                        }

                        if (IsCorePresent(selectedCoreIPAddress))
                        {
                            if (BackgroundType.Contains("Log Monitoring"))
                            {
                                BM_Start_log_start_lines1 = log_object.Tplog_getcurrentline_core(BM_logmonitoring_core, applicationPassword, "TC_Start", Date_time_writelogs, TC_timestamp,this);                              
                                BM_Start_log_start_lines2 = log_object.Tplog_getcurrentline_other(BM_logmonitoring_others, applicationPassword, "TC_Start", Date_time_writelogs, TC_timestamp, this);
                            }

                            if ((BackgroundID.Count == length) && (BackgroundErrorhandlingType.Count == length) && (BackgroundErrorhandlingRerun.Count == length))
                            {
                                Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + BM_TC_status + "',@TSName,@TPName,@TCName,@TAName,'" + BM_starttime + "','" + string.Empty + "',@taWithEXID,@tcWithEXID,'" + string.Empty + "','" + CaseExecutionUniqueID + "','" + TestExecution.Parent.EXID + "','" + TestExecution.Parent.Parent.EXID + "')";
                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                for (int q = 0; q < length; q++)
                                {
                                    if (BackgroundType[q] == "Telnet Monitor")
                                    {
                                        string telnetstatus = string.Empty;
                                        var telnetAction = Execute_Telnet_Action((Convert.ToInt32(BackgroundID[q])), 0, testcasename, "BM", exid, testsuitename, testplan_name, TestActionname, TestExecution.EXID, TestExecution.Parent.EXID, TestExecution.Parent.Parent.EXID, BM_start_end, "TestPlan", 0);
                                        runStatus.AddRange(telnetAction.Item1);
                                        Thread.Sleep(2000);
                                        var telnetVerification = Execute_Telnet_Verification((Convert.ToInt32(BackgroundID[q])), 0, testcasename, "BackgroundAction", "BM", string.Empty, TestExecution, Backgroundpath + "\\" + "Telnet", string.Empty, exid, testsuitename, testplan_name, TestExecution.EXID, string.Empty, TestExecution.Parent.EXID, TestExecution.Parent.Parent.EXID, BM_start_end, "TestPlan", 0);
                                        runStatus.AddRange(telnetVerification.Item1);
                                        BMlogfile = testplan_name + DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + ".txt";
                                        if (runStatus.Count > 0)
                                        {
                                            if (runStatus.Contains("Fail"))
                                            {
                                                BGFailure = true;
                                                telnetstatus = "Fail";
                                                TP_BGM_Status.Add("Ssh/Telnet:" + telnetstatus);
                                            }
                                            else if (runStatus.Contains("Pass"))
                                            {
                                                telnetstatus = "Pass";
                                                TP_BGM_Status.Add("Ssh/Telnet:" + telnetstatus);

                                            }

                                            Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + TestExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + TestExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                            if (runStatus.Contains("Fail"))
                                            {
                                                BGFailure = true;
                                                //if (ExecutionTime == "start")
                                                //    TestExecution.ExecutionBackgroundstart = "Fail";
                                                //else
                                                //    TestExecution.ExecutionBackgroundend = "Fail";

                                                BM_errorhandling(telnetstatus, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, testplan_name, "TestPlan", TestExecution, testcasename, BM_start_end, testsuitename, exid, string.Empty, string.Empty, null, null, Backgroundpath + "\\" + "Telnet", CaseExecutionUniqueID, 0, tcWithEXID, TestActionname,0);
                                            }
                                            //else
                                            //{
                                            //    if (!runStatus.Contains("Fail") && !runStatus.Contains("Pass"))
                                            //        TestExecution.ExecutionBackgroundstart = "Incomplete";
                                            //}


                                            Thread.Sleep(2000);
                                        }
                                    }
                                    if (BackgroundType[q] == "Control Value Monitoring")
                                    {
                                        string controlstatus = string.Empty;
                                        var controlVerification = Execute_Control_Verification((Convert.ToInt32(BackgroundID[q])), 0, testcasename, "BM", TestExecution, exid, testsuitename, testplan_name, TestActionname, CaseExecutionUniqueID, TestExecution.Parent.EXID, TestExecution.Parent.Parent.EXID, BM_start_end);
                                        runStatus.AddRange(controlVerification.Item1);
                                        BMlogfile = testplan_name + DateTime.Now.ToString("yyyy-dd-M-HH-mm-ss") + ".txt";
                                        if (runStatus.Count > 0)
                                        {
                                            TP_BGM_Status.Add("Control:" + runStatus[0]);
                                        }

                                        if (runStatus.Contains("Fail"))
                                        {
                                            controlstatus = "Fail";
                                            BGFailure = true;

                                            Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + TestExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + TestExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);

                                            //if (ExecutionTime == "start")
                                            //    TestExecution.ExecutionBackgroundstart = "Fail";
                                            //else
                                            //    TestExecution.ExecutionBackgroundend = "Fail";

                                            BM_errorhandling(controlstatus, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, testplan_name, "TestPlan", TestExecution, testcasename, BM_start_end, testsuitename, exid, string.Empty, string.Empty, null, null, Backgroundpath, CaseExecutionUniqueID, 0, tcWithEXID, taWithEXID,0);
                                        }
                                        else
                                        {
                                            if (runStatus.Contains("Pass"))
                                                controlstatus = "Pass";

                                            Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + TestExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + TestExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);

                                            //if (!runStatus.Contains("Fail") && !runStatus.Contains("Pass"))
                                            //{
                                            //    TestExecution.ExecutionBackgroundstart = "Incomplete";
                                            //}
                                        }

                                        Thread.Sleep(2000);
                                    }

                                    if (BackgroundType[q] == "Inventory Monitoring")
                                    {
                                        var inventoryMonitor = Execute_Inventory_Monitoring((Convert.ToInt32(BackgroundID[q])), 0, testcasename, "BM", TestExecution);
                                        runStatus.AddRange(inventoryMonitor.Item1);
                                        BMlogfile = testplan_name + DateTime.Now.ToString("yyyy-dd-M-HH-mm-ss") + ".txt";
                                        string Inventory_monitor_status = string.Empty;
                                        if (runStatus.Count > 0)
                                        {
                                            if (runStatus.Contains("Fail"))
                                            {
                                                BGFailure = true;
                                                Inventory_monitor_status = "Fail";
                                                TP_BGM_Status.Add("Inventory Monitor:" + "Fail," + inventoryMonitor.Item2 + "");
                                                //if (ExecutionTime == "start")
                                                //    TestExecution.ExecutionBackgroundstart = "Fail";
                                                //else
                                                //    TestExecution.ExecutionBackgroundend = "Fail";
                                            }
                                            else
                                            {
                                                Inventory_monitor_status = "Pass";
                                                TP_BGM_Status.Add("Inventory Monitor:" + "Pass");
                                            }

                                            if (Inventory_monitor_status == "Fail")
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + Inventory_monitor_status + "',@TSName, @TPName, @TCName,@TAName,'" + BM_starttime + "','" + DateTime.Now.ToString() + "', @ActionWithEXID,'" + "Inventory_ Monitor" + "', '" + inventoryMonitor.Item2.ToString() + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + TestExecution.Parent.EXID + "','" + TestExecution.Parent.Parent.EXID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                            }
                                            else
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + BM_starttime + "','" + DateTime.Now.ToString() + "', @ActionWithEXID,'" + "Inventory_ Monitor" + "','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + TestExecution.Parent.EXID + "','" + TestExecution.Parent.Parent.EXID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                            }

                                            if (runStatus.Contains("Fail"))
                                            {
                                                BGFailure = true;
                                                //if (ExecutionTime == "start")
                                                //    TestExecution.ExecutionBackgroundstart = "Fail";
                                                //else
                                                //    TestExecution.ExecutionBackgroundend = "Fail";

                                                BM_errorhandling(Inventory_monitor_status, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, testplan_name, "TestPlan", TestExecution, testcasename, BM_start_end, testsuitename, exid, string.Empty, string.Empty, null, null, Backgroundpath, CaseExecutionUniqueID, 0, tcWithEXID, taWithEXID,0);
                                            }
                                            //else
                                            //{
                                            //    if (!runStatus.Contains("Fail") && !runStatus.Contains("Pass"))
                                            //        TestExecution.ExecutionBackgroundstart = "Incomplete";
                                            //}

                                            Thread.Sleep(2000);

                                        }
                                    }

                                    ///Log monitor code
                                    if (BackgroundType[q] == "Log Monitoring")
                                    {
                                        var logMonitor = Execute_Log_Verification((Convert.ToInt32(BackgroundID[q])), 0, testcasename, TestActionname, BM_start_end, BM_Start_log_start_lines1, BM_Start_log_start_lines2,
                                            testplan_name, testsuitename, exid, Date_time_Suite, Qsys_firmware, string.Empty, exid, testsuitename, testplan_name, testcasename, TestActionname, CaseExecutionUniqueID, TestExecution.Parent.EXID, TestExecution.Parent.Parent.EXID);
                                        runStatus.AddRange(logMonitor.Item1);

                                        BMlogfile = testplan_name + DateTime.Now.ToString("yyyy-dd-M-HH-mm-ss") + ".txt";
                                        string Log_monitor_status = string.Empty;
                                        if (runStatus.Count > 0)
                                        {
                                            if (runStatus.Contains("Fail"))
                                            {
                                                BGFailure = true;
                                                Log_monitor_status = "Fail";
                                                TP_BGM_Status.Add("Log Monitor:" + "Fail");
                                                //if (ExecutionTime == "start")
                                                //    TestExecution.ExecutionBackgroundstart = "Fail";
                                                //else
                                                //    TestExecution.ExecutionBackgroundend = "Fail";
                                            }
                                            else
                                            {
                                                Log_monitor_status = "Pass";
                                                TP_BGM_Status.Add("Log Monitor:" + "Pass");
                                            }
                                        }

                                        Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + TestExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + TestExecution.Parent.Parent.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);


                                        if (runStatus.Contains("Fail"))
                                        {
                                            BGFailure = true;
                                            //if (ExecutionTime == "start")
                                            //    TestExecution.ExecutionBackgroundstart = "Fail";
                                            //else
                                            //    TestExecution.ExecutionBackgroundend = "Fail";

                                            BM_errorhandling(Log_monitor_status, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, testplan_name, "TestPlan", TestExecution, testcasename, BM_start_end, testsuitename, exid, Date_time_Suite, Qsys_firmware, BM_Start_log_start_lines1, BM_Start_log_start_lines2, Backgroundpath, CaseExecutionUniqueID, 0, tcWithEXID, taWithEXID,0);
                                        }
                                        //else
                                        //{
                                        //    if (!runStatus.Contains("Fail") && !runStatus.Contains("Pass"))
                                        //        TestExecution.ExecutionBackgroundstart = "Incomplete";
                                        //}

                                        Thread.Sleep(2000);

                                    }

                                    BM_TestCase_status.AddRange(runStatus);
                                    runStatus.Clear();
                                }

                                string remarks = string.Empty;

                                if (BM_TestCase_status.Contains("Pass") && !BM_TestCase_status.Contains("Fail") && !BM_TestCase_status.Contains("Incomplete"))
                                {
                                    if (ExecutionTime == "start")
                                        TestExecution.ExecutionBackgroundstart = "Pass";
                                    else
                                        TestExecution.ExecutionBackgroundend = "Pass";

                                    BM_TC_status = "Pass";
                                    remarks = "Background Passed";
                                }
                                else if (BM_TestCase_status.Contains("Fail") && !BM_TestCase_status.Contains("Incomplete"))
                                {
                                    if (ExecutionTime == "start")
                                        TestExecution.ExecutionBackgroundstart = "Fail";
                                    else
                                        TestExecution.ExecutionBackgroundend = "Fail";

                                    TestExecution.TCBackGroundResult.Add("Fail");
                                    BM_TC_status = "Fail";
                                    remarks = "Action or Verification fails so Background gets failure";

                                }
                                else
                                {
                                    if (ExecutionTime == "start")
                                        TestExecution.ExecutionBackgroundstart = "Incomplete";
                                    else
                                        TestExecution.ExecutionBackgroundend = "Incomplete";

                                    BM_TC_status = "Incomplete";
                                    remarks = "Background Verification Incomplete";
                                }


                                Actiontabquery = "Update TempTestCaseActionTab set status = '" + BM_TC_status + "', Remarks = '" + remarks + "', EndTime = '" + DateTime.Now.ToString() + "' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + TestExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + TestExecution.Parent.Parent.EXID + "'";
                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", TestActionname, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                return new Tuple<bool, string, bool>(true, string.Empty, BGFailure);
                            }
                        }
                        else
                        {
                            return new Tuple<bool, string, bool>(false, "Background Verification Fail", BGFailure);
                        }
                    }
                    else
                    {
                        return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                    }
                    return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                }
                else
                {
                    return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                }
            }
            catch (Exception ex)
            {
                TestExecution.ExecutionBackgroundend = "Fail";
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC33333", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string, bool>(false, "Background Verification Fail", true);
            }
        }

        public Tuple<List<string>, string> Execute_Inventory_Monitoring(int tcid, int tabnumber, string testcasename, string BMtype, TreeViewExplorer PlanExecution)
        {
            List<string> temp = new List<string>();
            List<string> runstatus = new List<string>();
            string Failremarks = string.Empty;
            Rpc Inventory_monitor = new Rpc();
            try
            {
                if ((selectedCoreIPAddress != string.Empty) & (selectedCoreIPAddress != "Not Applicable"))
                {
                    XmlReadToGetDesignNameandDesignStatus();

                    string designname = Regex.Replace(desgnname, @"\s+", " ");
                    string currentDesignInCore= Regex.Replace(mstrDesignName, @"\s+", " ") + ".qsys";
                    if (currentDesignInCore == designname)
                    {
                        var resp = Inventory_monitor.Send(selectedCoreIPAddress, "Inventory.Get", "", false, string.Empty);
                        string responseFromRPC = resp.Item2.Trim();

                        if(resp.Item2.Contains("Core is on Standby"))
                        {
                            if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                            {
                                resp = Inventory_monitor.Send(backup_selectedCoreIPAddress, "Inventory.Get", "", false, string.Empty);
                                responseFromRPC = resp.Item2.Trim();
                            }
                        }
                        
                        if (responseFromRPC != string.Empty)
                        {
                            var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadInventoryList>(responseFromRPC);

                            if (resultValue.result != null && resultValue.result.Count > 0)
                            {
                                foreach (var inventoryValues in resultValue.result)
                                {
                                    string devicename = inventoryValues.Name;

                                    if (inventoryValues.Status != null && inventoryValues.Status.Message != null)
                                    {
                                        if (inventoryValues.Status.Message == "OK" || inventoryValues.Status.Code == "0")
                                        {
                                            runstatus.Add("Pass");
                                        }
                                        else
                                        {
                                            runstatus.Add("Fail");
                                            temp.Add(devicename + " status is : " + inventoryValues.Status.Message);
                                        }
                                    }
                                    else
                                    {
                                        runstatus.Add("Fail");
                                        temp.Add(devicename + " status is : Empty");
                                    }
                                }

                                Failremarks = string.Join(",", temp);
                            }
                            else
                            {
                                runstatus.Add("Fail");
                                Failremarks = "Not able to get inventory ";
                            }

                            //string[] respSplit1 = Regex.Split(responseFromRPC, "},{\"Name\"");
                            //if (respSplit1.Length > 0)
                            //{
                            //    string[] ressplit2 = Regex.Split(respSplit1[0], "{\"Name\"");
                            //    if (ressplit2.Length > 1)
                            //    {
                            //        respSplit1[0] = respSplit1[0].Replace(respSplit1[0], ressplit2[1]);

                            //        string[] final = respSplit1;
                            //        foreach (string status in final)
                            //        {
                            //            string devicename = status.Substring(1, status.IndexOf(',') - 1);
                            //            //var result = from Match match in Regex.Matches(devicename, ":\"([^\"]*)\"")select match.ToString();
                            //            //devicename = devicename.Replace(":", string.Empty);
                            //            devicename = devicename.Replace("\"", string.Empty);
                            //            string[] respSplit3 = Regex.Split(status, "\"Status\":{\"Message\":\"");
                            //            string[] respSplit4 = Regex.Split(respSplit3[1], "\"");
                            //            if (respSplit4[0] == "OK")
                            //            {
                            //                runstatus.Add("Pass");
                            //                //Failremarks += devicename + " status is : " + respSplit4[0];
                            //            }
                            //            else
                            //            {
                            //                runstatus.Add("Fail");
                            //                temp.Add(devicename + " status is : " + respSplit4[0]);

                            //            }
                            //        }

                            //        Failremarks = string.Join(",", temp);
                            //    }
                            //    else
                            //    {
                            //        runstatus.Add("Fail");
                            //        Failremarks = "Not able to get inventory ";

                            //    }
                            //}
                            //else
                            //{
                            //    runstatus.Add("Fail");
                            //    Failremarks = "Not able to get inventory ";
                            //}
                        }
                        else
                        {
                            runstatus.Add("Fail");
                            Failremarks = "Response not received for Inventory get command ";
                        }
                    }
                    else
                    {
                        runstatus.Add("Fail");
                        Failremarks = "Wrong design in core ";
                    }
                }
                else
                {
                    runstatus.Add("Fail");
                    Failremarks = "Core Ip address not available";
                }

                return new Tuple<List<string>, string>(runstatus, Failremarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECInventory", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //get_status.Add("Fail");
                PlanExecution.ExecutionStatus = "Fail";


                runstatus.Add("Fail");

                return new Tuple<List<string>, string>(runstatus, Failremarks);
            }
        }

        //BM_errorhandling(Log_monitor_status, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, testplan_name, "TestPlan", PlanExecution, testcasename, BM_start_end, testsuitename, exid, Date_time_Suite, Qsys_firmware, BM_Start_log_start_lines1, BM_Start_log_start_lines2);
        public void BM_errorhandling(string runStatus, string BM_Error_type, string BM_Error_rerun, string BM_type, string BM_ID, string BMlogfile, string testplan_name, string MonitorType, TreeViewExplorer SuiteExecution, string testcasename, string BM_start_end, string testsuitename, Int32 exid, string Date_time_Suite, string Qsys_firmware, List<logitems> BM_Start_log_start_lines1, List<logitems> BM_Start_log_start_lines2, string Backgroundpath, Int32 CaseExecutionUniqueID, Int32 Error_TempPlanBackground_Pkey, string tcWithEXID, string TestActionname, Int32 TempPlanBackground_Pkey)
        {
            string query = string.Empty;
            //Int32 Error_TempPlanBackground_Pkey = 0;
            try
            {
                string BM_status = runStatus;

                ///Error hadling
                if (BM_status != string.Empty && BM_status.Contains("Fail"))
                {
                    //TestActionquery = "Insert into TestAction_Report values('" + exid + "','" + testsuitename + "', '" + testplanname + "', '" + testcasename + "','" + TestActionname + "', '" + status + "', '" + TestActionStartTime + "', '" + TestActionEndTime + "', '" + string.Empty + "')";
                    //tble = report_connection.Report_SendCommand_Toreceive(TestActionquery);
                    if (BM_Error_type == "Continue Testing")
                    {
                        if (BM_Error_rerun != string.Empty)
                        {
                            for (int i = 1; i <= Convert.ToInt64(BM_Error_rerun); i++)
                            {
                                List<string> BM_runStatus = new List<string>();
                                string errorHadlingStartTime = DateTime.Now.ToString();
                                string taWithEXID = exid + TestActionname + DateTime.Now.ToString();

                                string BM_start_endVal = BM_start_end + "_Rerun_" + i.ToString();

                                //SuiteExecution.RerunTime.Add(i,taWithEXID);


                                if (BM_type == "Telnet Monitor")
                                {
                                    if (MonitorType == "TestSuite")
                                    {
                                        //query = "Update TempPlanBackground set BMstartEnd='" + BM_start_endVal + "'where  TempPlanBackground_ID='" + Error_TempPlanBackground_Pkey + "'"; 
                                        //tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);

                                        string Error_starttime = DateTime.Now.ToString();
                                        query = "Insert into TempPlanBackground values('" + exid + "','In Progress','" + BM_start_endVal + "',@TSName, @TPName,'" + Error_starttime + "','" + string.Empty + "','" + SuiteExecution.EXID + "','" + SuiteExecution.Parent.EXID + "',@exid_planname_date,'" + string.Empty + "');SELECT CONVERT(int,SCOPE_IDENTITY())";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplan_name, "@exid_planname_date", tcWithEXID, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        if (tble.Rows.Count > 0)
                                        {
                                            read = tble.CreateDataReader();

                                            while (read.Read())
                                            {
                                                Error_TempPlanBackground_Pkey = Convert.ToInt32(read.GetInt32(0));
                                            }
                                        }
                                    }///

                                    string BM_pass_fail = string.Empty;
                                    var telnetAction = Execute_Telnet_Action((Convert.ToInt32(BM_ID)), 0, testcasename, "BM", exid, testsuitename, testplan_name, string.Empty, SuiteExecution.EXID, SuiteExecution.Parent.EXID, SuiteExecution.Parent.Parent.EXID, BM_start_endVal, MonitorType, Error_TempPlanBackground_Pkey);
                                    BM_runStatus.AddRange(telnetAction.Item1);
                                    Thread.Sleep(2000);
                                    var telnetVerification = Execute_Telnet_Verification((Convert.ToInt32(BM_ID)), 0, testcasename, string.Empty, "BM", testplan_name, SuiteExecution, Backgroundpath, "Rerun_" + Convert.ToString(i + 1) + "_", exid, testsuitename, testplan_name, SuiteExecution.EXID, string.Empty, SuiteExecution.Parent.EXID, SuiteExecution.Parent.Parent.EXID, BM_start_endVal, MonitorType, Error_TempPlanBackground_Pkey);
                                    BM_runStatus.AddRange(telnetVerification.Item1);

                                    if (MonitorType == "TestPlan")
                                    {
                                        string status = string.Empty;
                                        if (BM_runStatus.Contains("Fail"))
                                        {
                                            BM_pass_fail = "Fail";
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_pass_fail, BMlogfile, testplan_name, "TestPlan");
                                            TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + BM_pass_fail);
                                            SuiteExecution.TCBackGroundResult.Add("Fail");
                                        }
                                        else if (BM_runStatus.Contains("Pass"))
                                        {
                                            BM_pass_fail = "Pass";
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_pass_fail, BMlogfile, testplan_name, "TestPlan");
                                            TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + BM_pass_fail);
                                        }


                                        if (!SuiteExecution.RerunTime.Keys.Contains(i))
                                        {
                                            SuiteExecution.RerunTime.Add(i, taWithEXID);

                                            if (BM_pass_fail == "Fail")
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + BM_pass_fail + "',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Action or Verification fails so Background gets failure','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','Pass',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Background Passed','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }
                                        else
                                        {
                                            taWithEXID = SuiteExecution.RerunTime[i];

                                            string Actiontabquery = "select status from TempTestCaseActionTab where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                            if (tble.Rows.Count > 0)
                                            {
                                                read = tble.CreateDataReader();

                                                while (read.Read())
                                                {
                                                    status = read.GetValue(0).ToString();
                                                    break;
                                                }
                                            }

                                            if (BM_pass_fail == "Fail")
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = '" + BM_pass_fail + "', Remarks = 'Action or Verification fails so Background gets failure' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = 'Pass', Remarks = 'Background Passed' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }

                                        string Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);

                                    }

                                    if (MonitorType == "TestSuite")
                                    {
                                        if (BM_runStatus.Contains("Fail"))
                                        {
                                            BM_pass_fail = "Fail";
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_pass_fail, BMlogfile, testplan_name, "TestSuite");
                                            TS_BGM_Status.Add("ReRun" + "[" + i + "]:" + BM_pass_fail);
                                            SuiteExecution.Parent.TCBackGroundResult.Add("Fail");
                                        }
                                        else if (BM_runStatus.Contains("Pass"))
                                        {
                                            BM_pass_fail = "Pass";
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_pass_fail, BMlogfile, testplan_name, "TestSuite");
                                            TS_BGM_Status.Add("ReRun" + "[" + i + "]:" + BM_pass_fail);
                                        }

                                        query = "update TempPlanBackground set status='" + BM_pass_fail + "' , EndTime='" + DateTime.Now.ToString() + "' where  TempPlanBackground_ID='" + Error_TempPlanBackground_Pkey + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    }

                                    Thread.Sleep(2000);
                                }

                                ////Delay Time set
                                if (BM_type == "Control Value Monitoring")
                                {
                                    var controlVerification = Execute_Control_Verification((Convert.ToInt32(BM_ID)), 0, testcasename, "BM", SuiteExecution, exid, testsuitename, testplan_name, BM_start_endVal, CaseExecutionUniqueID, SuiteExecution.Parent.EXID, SuiteExecution.Parent.Parent.EXID, BM_start_end);
                                    BM_runStatus = controlVerification.Item1;

                                    if (MonitorType == "TestPlan")
                                    {
                                        //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_runStatus[0].ToString(), BMlogfile, testplan_name, "TestPlan");
                                        TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + BM_runStatus[0]);

                                        string BM_pass_fail = string.Empty;
                                        if (BM_runStatus.Contains("Fail"))
                                        {
                                            BM_pass_fail = "Fail";
                                            SuiteExecution.TCBackGroundResult.Add("Fail");
                                        }
                                        else
                                            BM_pass_fail = "Pass";

                                        if (!SuiteExecution.RerunTime.Keys.Contains(i))
                                        {
                                            SuiteExecution.RerunTime.Add(i, taWithEXID);
                                            if (BM_pass_fail == "Fail")
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + BM_pass_fail + "',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Action or Verification fails so Background gets failure','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','Pass',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Background Passed','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }
                                        else
                                        {
                                            string status = string.Empty;
                                            taWithEXID = SuiteExecution.RerunTime[i];

                                            string Actiontabquery = "select status from TempTestCaseActionTab where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                            if (tble.Rows.Count > 0)
                                            {
                                                read = tble.CreateDataReader();

                                                while (read.Read())
                                                {
                                                    status = read.GetValue(0).ToString();
                                                    break;
                                                }
                                            }

                                            if (BM_pass_fail == "Fail")
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = '" + BM_pass_fail + "', Remarks = 'Action or Verification fails so Background gets failure' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = 'Pass', Remarks = 'Background Passed' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }

                                        string Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                    }

                                    if (MonitorType == "TestSuite")
                                    {
                                        //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_runStatus[0].ToString(), BMlogfile, testplan_name, "TestSuite");
                                        TS_BGM_Status.Add("ReRun" + "[" + i + "] :" + BM_runStatus[0]);
                                    }

                                    Thread.Sleep(2000);
                                }

                                if (BM_type == "Inventory Monitoring")
                                {
                                    var inventoryMonitor = Execute_Inventory_Monitoring((Convert.ToInt32(BM_ID)), 0, testcasename, "BM", SuiteExecution);
                                    BM_runStatus = inventoryMonitor.Item1;
                                    string BM_Inventory_status = string.Empty;
                                    if (BM_runStatus.Count > 0)
                                    {
                                        if (BM_runStatus.Contains("Fail"))
                                        {
                                            SuiteExecution.TCBackGroundResult.Add("Fail");
                                            BM_Inventory_status = "Fail";
                                            //BM_Inventory_status = "Fail";
                                            if (MonitorType == "TestPlan")
                                            {
                                                //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + "Fail", BMlogfile, testplan_name, "TestPlan");
                                                TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + "Fail," + inventoryMonitor.Item2);
                                            }
                                        }
                                        else
                                        {
                                            BM_Inventory_status = "Pass";
                                            if (MonitorType == "TestPlan")
                                            {
                                                //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + "Pass", BMlogfile, testplan_name, "TestPlan");
                                                TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + "Pass");
                                            }
                                        }

                                        if (BM_Inventory_status == "Fail")
                                        {
                                            //updating TempTestCaseActionTabTable Values
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + BM_Inventory_status + "',@TSName, @TPName, @TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "', @ActionWithEXID,'" + "Inventory_ Monitor" + "', '" + inventoryMonitor.Item2.ToString() + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                        }
                                        else
                                        {
                                            //updating TempTestCaseActionTabTable Values
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "', @ActionWithEXID,'" + "Inventor_ Monitory" + "','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                            //}
                                        }


                                        if (!SuiteExecution.RerunTime.Keys.Contains(i))
                                        {
                                            SuiteExecution.RerunTime.Add(i, taWithEXID);

                                            if (BM_Inventory_status == "Fail")
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + BM_Inventory_status + "',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Action or Verification fails so Background gets failure','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','Pass',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Background Passed','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }
                                        else
                                        {
                                            string status = string.Empty;
                                            taWithEXID = SuiteExecution.RerunTime[i];
                                            string Actiontabquery = "select status from TempTestCaseActionTab where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                            if (tble.Rows.Count > 0)
                                            {
                                                read = tble.CreateDataReader();

                                                while (read.Read())
                                                {
                                                    status = read.GetValue(0).ToString();
                                                    break;
                                                }
                                            }

                                            if (BM_Inventory_status == "Fail")
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = '" + BM_Inventory_status + "', Remarks = 'Action or Verification fails so Background gets failure' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = 'Pass', Remarks = 'Background Passed' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }

                                        string Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);


                                        //if (MonitorType == "TestSuite")
                                        //{
                                        //    BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_runStatus[0].ToString(), BMlogfile, testplan_name, "TestSuite");
                                        //    TS_BGM_Status.Add("ReRun" + "[" + i + "] :" + BM_runStatus[0]);
                                        //}

                                        Thread.Sleep(2000);
                                    }
                                }

                                if (BM_type == "Log Monitoring")
                                {
                                    var logMonitor = Execute_Log_Verification((Convert.ToInt32(BM_ID)), 0, testcasename, string.Empty, BM_start_end, BM_Start_log_start_lines1, BM_Start_log_start_lines2, testplan_name, testsuitename, exid, Date_time_Suite, Qsys_firmware, "Rerun_" + (i + 1), exid, testsuitename, testplan_name, testcasename, BM_start_endVal, CaseExecutionUniqueID, SuiteExecution.Parent.EXID, SuiteExecution.Parent.Parent.EXID);
                                    BM_runStatus = logMonitor.Item1;
                                    //runStatus = Execute_Log_Verification((Convert.ToInt32(BackgroundID[q])), 0, testcasename, string.Empty, BM_start_end, BM_Start_log_start_lines1, BM_Start_log_start_lines2, testplan_name, testsuitename, exid, Date_time_Suite, Qsys_firmware);
                                    string BM_Logmonitor_status = string.Empty;

                                    if (BM_runStatus.Count > 0)
                                    {
                                        if (BM_runStatus.Contains("Fail"))
                                        {
                                            SuiteExecution.TCBackGroundResult.Add("Fail");
                                            BM_Logmonitor_status = "Fail";
                                            if (MonitorType == "TestPlan")
                                            {
                                                //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + "Fail", BMlogfile, testplan_name, "TestPlan");
                                                TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + "Fail");
                                            }
                                        }
                                        else
                                        {
                                            if (BM_runStatus.Contains("Fail"))
                                            {
                                                BM_Logmonitor_status = "Pass";
                                            }

                                            if (MonitorType == "TestPlan")
                                            {
                                                //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + "Pass", BMlogfile, testplan_name, "TestPlan");
                                                TP_BGM_Status.Add("ReRun" + "[" + i + "]:" + "Pass");
                                            }
                                        }

                                        if (!SuiteExecution.RerunTime.Keys.Contains(i))
                                        {
                                            SuiteExecution.RerunTime.Add(i, taWithEXID);
                                            if (BM_Logmonitor_status == "Fail")
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','" + BM_Logmonitor_status + "',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Action or Verification fails so Background gets failure','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                string Actiontabquery = "Insert into TempTestCaseActionTab values('" + exid + "','Pass',@TSName,@TPName,@TCName,@TAName,'" + errorHadlingStartTime + "','" + DateTime.Now.ToString() + "',@taWithEXID,@tcWithEXID,'Background Passed','" + CaseExecutionUniqueID + "','" + SuiteExecution.Parent.EXID + "','" + SuiteExecution.Parent.Parent.EXID + "')";
                                                tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }
                                        else
                                        {
                                            string status = string.Empty;
                                            taWithEXID = SuiteExecution.RerunTime[i];

                                            string Actiontabquery = "select status from TempTestCaseActionTab where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                            tble = report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);

                                            if (tble.Rows.Count > 0)
                                            {
                                                read = tble.CreateDataReader();

                                                while (read.Read())
                                                {
                                                    status = read.GetValue(0).ToString();
                                                    break;
                                                }
                                            }

                                            if (BM_Logmonitor_status == "Fail")
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = '" + BM_Logmonitor_status + "', Remarks = 'Action or Verification fails so Background gets failure' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                            else
                                            {
                                                Actiontabquery = "Update TempTestCaseActionTab set status = 'Pass', Remarks = 'Background Passed' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and ExecidTabname =@taWithEXID and ExecidTabnameTC=@tcWithEXID and CaseActionTabExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                                report_connection.Report_SendCommand_Toreceive(Actiontabquery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@taWithEXID", taWithEXID, "@tcWithEXID", tcWithEXID);
                                            }
                                        }

                                        string Actiontabtablequery = "update TempTestCaseActionTabTable set ExecidTabname= @ActionWithEXID where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and ExecID='" + exid + "' and CaseActionTabTableExecutionUniqueID='" + CaseExecutionUniqueID + "' and ActionTabTableCaseAlogPlanExecutionUniqueID='" + SuiteExecution.Parent.EXID + "' and SuiteAlongwithplanandcaseExecid='" + SuiteExecution.Parent.Parent.EXID + "'";
                                        tble = report_connection.Report_SendCommand_Toreceive(Actiontabtablequery, "@TSName", testsuitename, "@TPName", testplan_name, "@TCName", testcasename, "@TAName", BM_start_endVal, "@ActionWithEXID", taWithEXID, string.Empty, string.Empty);
                                    }

                                    //if (MonitorType == "TestSuite")
                                    //{
                                    //    BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + "--->" + "Error_handling_ReRun" + "[" + i + "] :: MonitoringType - " + BM_type + ", Status: " + BM_runStatus[0].ToString(), BMlogfile, testplan_name, "TestSuite");
                                    //    TS_BGM_Status.Add("ReRun" + "[" + i + "] :" + BM_runStatus[0]);
                                    //}

                                    Thread.Sleep(2000);
                                }
                            }
                        }
                    }
                    if (BM_Error_type == "pause")
                    {
                        if (Properties.Settings.Default.AutomationPauses == true)
                        {
                            Executionsummary();
                            //GridFill("Error occured in " + testplan_name + ",so execution paused", true, testsuitename);

                            bool skipDUT = false;
                            if (MonitorType == "TestSuite")
                                skipDUT = !SuiteExecution.HasDesign;
                            else if (MonitorType == "TestPlan")
                                skipDUT = !SuiteExecution.Parent.HasDesign;

                            SendEmail("Background execution pause notification", true, testsuitename, TempPlanBackground_Pkey, CaseExecutionUniqueID, skipDUT);
                        }

                        ExecutionMessageBox("Error occured in " + testplan_name + ",click ok to continue", "Pause at error state-BackgroundMonitoring", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC_BM_22222", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public Tuple<bool, string, bool> Execute_BackgroundMonitoring_Testplan(Int32 testsuiteid, string testsuite_name, TreeViewExplorer PlanExecution, string TP_Executiontime, string TP_log_Pathtowrite, Int32 exid, Int32 CaseExecutionUniqueID, string exid_planname_date, string TP_background_startTime, bool isQREM)
        {
            string query = string.Empty;
            //string telnetstatus = string.Empty;
            //bool writeistrue_TempPlanBackground = false;
            //string starttime = DateTime.Now.ToString();
            string starttime = TP_background_startTime;
            //bool writeistrue_TempPlanBackgroundTable = false;
            string exid_tpname_date = exid.ToString() + PlanExecution.ItemName + starttime;
            Int32 TempPlanBackground_Pkey = 0;
            Int32 Error_TempPlanBackground_Pkey = 0;

            try
            {
                telnetresponses.Clear();
                List<List<string>> BasetableValues = BackgroundGetBaseTableDetails(testsuiteid, "TS");
                List<string> runStatus = new List<string>();
                bool BGFailure = false;

                //nullcheck to be done
                if (BasetableValues != null)
                {
                    List<string> BackgroundID = new List<string>();
                    List<string> BackgroundType = new List<string>();
                    List<string> BackgroundErrorhandlingType = new List<string>();
                    List<string> BackgroundErrorhandlingRerun = new List<string>();
                    string BMlogfile = string.Empty;
                    string TP_log_Pathtowrite_background = TP_log_Pathtowrite + "\\" + TP_Executiontime;
                    string Backgroundpath_TP = TP_log_Pathtowrite_background;
                    BackgroundID = BasetableValues[0];
                    BackgroundType = BasetableValues[1];
                    BackgroundErrorhandlingType = BasetableValues[2];
                    BackgroundErrorhandlingRerun = BasetableValues[3];
                    Int32 length = BackgroundType.Count;
                    string BM_start_end = TP_Executiontime;

                    if (length > 0)
                    {
                        if (isQREM)
                        {
                            return new Tuple<bool, string, bool>(true, "QREM", BGFailure);
                        }

                        //if (IsCorePresent(selectedCoreIPAddress))
                        //{
                        if ((BackgroundID.Count == length) && (BackgroundErrorhandlingType.Count == length) && (BackgroundErrorhandlingRerun.Count == length))
                        {
                            for (int q = 0; q < length; q++)
                            {
                                PlanExecution.incompleteStatus = "Incomplete";

                                string telnetstatus = string.Empty;

                                if (BackgroundType[q] == "Telnet Monitor")
                                {
                                    /// insert header
                                    TempPlanBackground_Pkey = 0;
                                    query = "Insert into TempPlanBackground values('" + exid + "','In Progress','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + TP_background_startTime + "','" + string.Empty + "','" + PlanExecution.EXID + "','" + PlanExecution.Parent.EXID + "',@exid_planname_date,'" + string.Empty + "');SELECT CONVERT(int,SCOPE_IDENTITY())";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuite_name, "@TPName", PlanExecution.ItemName, "@exid_planname_date", exid_planname_date, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                    if (tble.Rows.Count > 0)
                                    {
                                        read = tble.CreateDataReader();

                                        while (read.Read())
                                        {
                                            PlanExecution.incompleteTPID = TempPlanBackground_Pkey = Convert.ToInt32(read.GetInt32(0));
                                        }
                                    }

                                    //writeistrue_TempPlanBackground = true;
                                    var telnetAction = Execute_Telnet_Action((Convert.ToInt32(BackgroundID[q])), 0, string.Empty, "BM", exid, testsuite_name, PlanExecution.ItemName, string.Empty, CaseExecutionUniqueID, 0, PlanExecution.Parent.EXID, BM_start_end, "TestSuite", TempPlanBackground_Pkey);
                                    runStatus.AddRange(telnetAction.Item1);
                                    Thread.Sleep(2000);
                                    var telnetVerification = Execute_Telnet_Verification((Convert.ToInt32(BackgroundID[q])), 0, string.Empty, "BackgroundAction", "BM", testsuite_name, PlanExecution, Backgroundpath_TP + "\\" + "Telnet", string.Empty, exid, testsuite_name, PlanExecution.ItemName, CaseExecutionUniqueID, string.Empty, PlanExecution.EXID, PlanExecution.Parent.EXID, BM_start_end, "TestSuite", TempPlanBackground_Pkey);
                                    runStatus.AddRange(telnetVerification.Item1);
                                    //BMlogfile = testsuite_name + DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + ".txt";

                                    if (runStatus.Count > 0)
                                    {
                                        if (runStatus.Contains("Fail"))
                                        {
                                            PlanExecution.incompleteStatus = "Fail";
                                            telnetstatus = "Fail";
                                            BGFailure = true;
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + ":: MonitoringType - " + BackgroundType[q] + ", Status: " + telnetstatus, BMlogfile, testsuite_name, "TestSuite");
                                            TS_BGM_Status.Add("Ssh/Telnet:" + telnetstatus);
                                        }
                                        else if (runStatus.Contains("Pass"))
                                        {
                                            PlanExecution.incompleteStatus = "Pass";
                                            telnetstatus = "Pass";
                                            //BM_writeinfile(DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + ":: MonitoringType - " + BackgroundType[q] + ", Status: " + telnetstatus, BMlogfile, testsuite_name, "TestSuite");
                                            TS_BGM_Status.Add("Ssh/Telnet:" + telnetstatus);
                                        }
                                    }

                                    query = "update TempPlanBackground set status='" + telnetstatus + "', EndTime='" + DateTime.Now.ToString() + "' where TempPlanBackground_ID='" + TempPlanBackground_Pkey + "'";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                   
                                    PlanExecution.incompleteStatus = telnetstatus;

                                    if (runStatus.Contains("Fail") && BackgroundErrorhandlingType != null && ((BackgroundErrorhandlingType[q] == "Continue Testing" && BackgroundErrorhandlingRerun[q] != null && Convert.ToInt64(BackgroundErrorhandlingRerun[q]) > 0)  || (BackgroundErrorhandlingType[q] == "pause")))
                                    {
                                        //string Error_starttime = DateTime.Now.ToString();
                                        //query = "Insert into TempPlanBackground values('" + exid + "','" + string.Empty + "','" + string.Empty + "',@TSName, @TPName,'" + Error_starttime + "','" + string.Empty + "','" + PlanExecution.EXID + "','" + PlanExecution.Parent.EXID + "',@exid_planname_date,'" + string.Empty + "');SELECT CONVERT(int,SCOPE_IDENTITY())";
                                        //tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuite_name, "@TPName", PlanExecution.ItemName, "@exid_planname_date", exid_planname_date, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                                        //if (tble.Rows.Count > 0)
                                        //    {
                                        //        read = tble.CreateDataReader();

                                        //        while (read.Read())
                                        //        {
                                        //            Error_TempPlanBackground_Pkey = Convert.ToInt32(read.GetInt32(0));
                                        //        }
                                        //    }
                                        //}///

                                        BM_errorhandling(telnetstatus, BackgroundErrorhandlingType[q], BackgroundErrorhandlingRerun[q], BackgroundType[q], BackgroundID[q], BMlogfile, PlanExecution.ItemName, "TestSuite", PlanExecution, string.Empty, BM_start_end, testsuite_name, exid, string.Empty, string.Empty, null, null, Backgroundpath_TP + "\\" + "Telnet", CaseExecutionUniqueID, Error_TempPlanBackground_Pkey, exid_planname_date, string.Empty, TempPlanBackground_Pkey);
                                    }
                                    TempPlanBackground_Pkey = 0;
                                    Thread.Sleep(2000);
                                }

                                if (TP_Executiontime == "BM_start")
                                    PlanExecution.ExecutionBackgroundstart = telnetstatus;
                                else
                                {
                                    if (PlanExecution.ExecutionBackgroundstart == "Fail")
                                        PlanExecution.ExecutionBackgroundend = "Fail";
                                    else
                                        PlanExecution.ExecutionBackgroundend = telnetstatus;
                                }
                                runStatus.Clear();
                            }
                            return new Tuple<bool, string, bool>(true, string.Empty, BGFailure);
                        }
                        //}
                        //else
                        //{
                        //    query = "Insert into TempPlanBackground values('" + exid + "','" +"Fail"+ "','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + starttime + "','" + string.Empty + "','" + PlanExecution.EXID + "','" + PlanExecution.Parent.EXID + "',@exid_planname_date,'" + "Core not available"+ "')";
                        //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuite_name, "@TPName", PlanExecution.ItemName, "@exid_planname_date", exid_planname_date,string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                        //    return new Tuple<bool, string,bool>(false, "Background Verification Fail",BGFailure);
                        //}
                    }
                    else
                    {
                        return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                    }
                    return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                }
                else
                {
                    return new Tuple<bool, string, bool>(true, "No Background Verification", BGFailure);
                }

            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC11111", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string, bool>(false, "Background Verification Fail", true);
            }
        }

        public List<List<string>> BackgroundGetBaseTableDetails(Int32 TP_TS_ID, string TP_TS)
        {
            try
            {
                List<string> BM_Type = new List<string>();
                List<string> BM_Frequency = new List<string>();
                List<string> BM_Duration = new List<string>();
                List<string> BM_Duration_type = new List<string>();
                List<string> BM_ErrorHandlingType = new List<string>();
                List<string> BM_Rerunittration = new List<string>();
                List<string> BM_RerunDuration = new List<string>();
                List<string> BM_RerunDurationType = new List<string>();
                List<string> BM_ID = new List<string>();
                string query1 = string.Empty;
                if (TP_TS == "TP")
                {
                    query1 = "select BackgroundMonitorID from BackgroundMonitoring where TPID=('" + TP_TS_ID + "')";

                }
                else if (TP_TS == "TS")
                {
                    query1 = "select BackgroundMonitorID from BackgroundMonitoring where TSID=('" + TP_TS_ID + "')";
                }

                //string query2 = "select BackgroundMonitorID from BackgroundMonitoring where TPID=('" + TP_TS_ID + "')";
                tble = QscDatabase.SendCommand_Toreceive(query1);
                read = tble.CreateDataReader();
                Int32 BMid = 0;

                while (read.Read())
                {
                    BMid = read.GetInt32(0);
                }

                if (BMid != 0)
                {
                    if (TP_TS == "TP")
                    {
                        query1 = "select BackgroundMonitorID,MonitorType,MonitorFrequency,MonitorDuration,MonitorDurationType,ErrorHandlingType,Rerunittration,RerunDuration,RerunDurationType from BackgroundMonitoring where TPID=('" + TP_TS_ID + "')";

                    }
                    else if (TP_TS == "TS")
                    {
                        query1 = "select BackgroundMonitorID,MonitorType,MonitorFrequency,MonitorDuration,MonitorDurationType,ErrorHandlingType,Rerunittration,RerunDuration,RerunDurationType from BackgroundMonitoring where TSID=('" + TP_TS_ID + "')";
                    }

                    tble = QscDatabase.SendCommand_Toreceive(query1);
                    read = tble.CreateDataReader();

                    while (read.Read())
                    {
                        BM_ID.Add(Convert.ToString(read.GetInt32(0)));
                        BM_Type.Add(read.GetString(1));
                        BM_Frequency.Add(read.GetString(2));
                        BM_Duration.Add(read.GetString(3));
                        BM_Duration_type.Add(read.GetString(4));
                        BM_ErrorHandlingType.Add(read.GetString(5));
                        BM_Rerunittration.Add(read.GetString(6));
                        BM_RerunDuration.Add(read.GetString(7));
                        BM_RerunDurationType.Add(read.GetString(8));
                    }

                    List<List<string>> Backgrounddata = new List<List<string>>();

                    Backgrounddata.Add(BM_ID);
                    Backgrounddata.Add(BM_Type);
                    Backgrounddata.Add(BM_ErrorHandlingType);
                    Backgrounddata.Add(BM_Rerunittration);
                    //Backgrounddata.Add(BM_Frequency);
                    //Backgrounddata.Add(BM_Duration);
                    //Backgrounddata.Add(BM_Duration_type);
                    //Backgrounddata.Add(BM_RerunDuration);
                    //Backgrounddata.Add(BM_RerunDurationType);


                    return Backgrounddata;
                }
                else
                { return null; }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        private Tuple<List<string>, List<string>, string> RunTC(Int32 tcid, int q, List<string> a_type, List<string> v_type, string testcasename, List<string> Tabname, List<string> tc_delay, List<string> tc_delay_type, List<string> verificationDelay, List<string> verificationDelayType, List<logitems> coreitems, List<logitems> otheritems, string testplanname, string testsuitename, Int32 exid, TreeViewExplorer TestExecution, string Date_time_Suite, string Qsys_firmware, string Testactionname, string TC_log_Pathtowrite, string rerun, string TSpath, string TPname_ID, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, DateTime datetimeForUSB, bool libConnectionSuccess, string[] datetimeTPTCTA, string logsave, string Rerunvalue, bool isQREM)
        {
            List<string> runStatus_Action = new List<string>();
            List<string> runStatus_Verification = new List<string>();
            string netPaitFailure = string.Empty;
            string firmwareFailure = string.Empty;

            try
            {
                if (isQREM && a_type[q] != "QRCM Action" && a_type[q] != "Skip Action" && !string.IsNullOrEmpty(a_type[q]))
                {
                    runStatus_Action.Add("Fail");

                    string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + a_type[q] + "', 'Currently not supported for reflect core','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                }
                else
                {
                    Execute_Delay(q, tc_delay, tc_delay_type);

                    if ((a_type[q] == "Control Action"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Control Action " + testcasename + "Test Action tab: " + (q + 1));
                        var controlAction = Execute_Control_Action(tcid, q, testcasename, exid, testsuitename, testplanname, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        runStatus_Action = controlAction.Item1;
                        DeviceDiscovery.WriteToLogFile("Execution completed for Control Action " + testcasename + "Test Action tab: " + (q + 1));
                    }
                    else if ((a_type[q] == "Telnet Action"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Ssh/Telnet action " + testcasename + " Test Action tab: " + (q + 1));
                        var status = Execute_Telnet_Action(tcid, q, testcasename, string.Empty, exid, testsuitename, testplanname, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, string.Empty, string.Empty, 0);
                        runStatus_Action.AddRange(status.Item1);
                        DeviceDiscovery.WriteToLogFile("Execution completed for Ssh/Telnet action " + testcasename + " Test Action tab: " + (q + 1));
                    }
                    else if ((a_type[q] == "Designer Action"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Designer action " + testcasename + " Test Action tab: " + (q + 1));
                        runStatus_Action = Execute_Designer_Action(tcid, q, testcasename, string.Empty, exid, testsuitename, testplanname, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        DeviceDiscovery.WriteToLogFile("Execution completed for Designer action " + testcasename + " Test Action tab: " + (q + 1));
                    }
                    else if ((a_type[q] == "Firmware Action"))
                    {
                        string filteredname = filtername(Tabname[q]);

                        if (isFirmwareOkSelected)
                        {
                            Process[] pname = Process.GetProcessesByName("Q-Sys Designer");
                            if (pname.Length > 0)
                            {
                                for (int i = 0; i < pname.Length; i++)
                                {
                                    pname[i].Kill();
                                }
                                Thread.Sleep(2000);
                                DeviceDiscovery.WriteToLogFile("Execution Started for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                var firmwareActionResult = Execute_Firmware_Action(tcid, q, TestExecution, testplanname, exid, testsuitename, testcasename, Testactionname, TSpath, TPname_ID, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname);
                                runStatus_Action = firmwareActionResult.Item1;
                                firmwareFailure = firmwareActionResult.Item2.Trim();
                                DeviceDiscovery.WriteToLogFile("Execution completed for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                            }
                            else if (pname.Length == 0)
                            {
                                Thread.Sleep(2000);
                                DeviceDiscovery.WriteToLogFile("Execution Started for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                var firmwareActionResult = Execute_Firmware_Action(tcid, q, TestExecution, testplanname, exid, testsuitename, testcasename, Testactionname, TSpath, TPname_ID, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname);
                                runStatus_Action = firmwareActionResult.Item1;
                                firmwareFailure = firmwareActionResult.Item2.Trim();
                                DeviceDiscovery.WriteToLogFile("Execution completed for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                            }
                        }
                        else if (isFirmwareCancelSelected)
                        {
                            Thread.Sleep(2000);
                            if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                            {
                                qsyDesignProcess.Kill();
                            }

                            Thread.Sleep(2000);
                            Process[] pname = Process.GetProcessesByName("Q-Sys Designer");
                            if (pname.Length == 0)
                            {
                                Thread.Sleep(2000);
                                DeviceDiscovery.WriteToLogFile("Execution Started for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                var firmwareActionResult = Execute_Firmware_Action(tcid, q, TestExecution, testplanname, exid, testsuitename, testcasename, Testactionname, TSpath, TPname_ID, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname);
                                runStatus_Action = firmwareActionResult.Item1;
                                firmwareFailure = firmwareActionResult.Item2.Trim();
                                DeviceDiscovery.WriteToLogFile("Execution completed for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                            }
                            while (pname.Length != 0)
                            {
                                var messageResult = ExecutionMessageBox("Please save and close all the running Instances of Q-sys Designer and then Click Ok to continue Firmware Action \n\n Click Cancel to Abort Firmware Action", "Closing the QSD during Firmware Upgrade/Downgrade", MessageBoxButton.OKCancel, MessageBoxImage.Warning);

                                if (messageResult.Item1 == MessageBoxResult.OK)
                                {
                                    Process[] pname1 = Process.GetProcessesByName("Q-Sys Designer");
                                    if (pname1.Length == 0)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Execution Resumed:All Q-sys designer instances are closed");
                                        DeviceDiscovery.WriteToLogFile("Execution Started for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                        var firmwareActionResult = Execute_Firmware_Action(tcid, q, TestExecution, testplanname, exid, testsuitename, testcasename, Testactionname, TSpath, TPname_ID, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname);
                                        runStatus_Action = firmwareActionResult.Item1;
                                        firmwareFailure = firmwareActionResult.Item2.Trim();
                                        DeviceDiscovery.WriteToLogFile("Execution completed for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                        break;
                                    }
                                }
                                else if (messageResult.Item1 == MessageBoxResult.Cancel)
                                {
                                    DeviceDiscovery.WriteToLogFile("Execution Aborted for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                    runStatus_Action.Add("Fail");
                                    DeviceDiscovery.WriteToLogFile("Execution completed for Firmware action " + testcasename + " Test Action tab: " + (q + 1));
                                    break;
                                }
                            }
                        }
                    }
                    else if (a_type[q] == "Net Pairing Action")
                    {
                        var status = ActionDynamicPairing(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        runStatus_Action.AddRange(status.Item1);
                        netPaitFailure = status.Item2;
                    }
                    else if (a_type[q] == "CEC Action")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution started for CEC action " + testcasename + " Test Action tab: " + (q + 1));
                        var cec_action = ExecuteCECAction(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, libConnectionSuccess);
                        runStatus_Action.AddRange(cec_action.Item1);
                        DeviceDiscovery.WriteToLogFile("Execution completed for CEC action " + testcasename + " Test Action tab: " + (q + 1));
                    }
                    else if (a_type[q] == "User Action")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution started for User action " + testcasename + " Test Action tab: " + (q + 1));
                        var user_action = ExecuteUserAction(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        runStatus_Action.AddRange(user_action);
                        DeviceDiscovery.WriteToLogFile("Execution completed for User action " + testcasename + " Test Action tab: " + (q + 1));
                    }
                    else if (a_type[q] == "Skip Action")
                    {
                        runStatus_Action.Add("Skip Action");
                        //updating TempTestCaseActionTabTable Values
                        string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Skip Action', '" + string.Empty + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (String.Equals(a_type[q], "Usb Action", StringComparison.CurrentCultureIgnoreCase))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for USB Action " + testcasename + " Verification tab: " + (q + 1));

                        try
                        {
                            DateTime time = DateTime.Now;
                            var diffInSeconds = (time - datetimeForUSB).TotalSeconds;

                            if (diffInSeconds < 60)
                            {
                                int diff = 60 - Convert.ToInt32(diffInSeconds);
                                Thread.Sleep(diff * 1000);
                            }
                        }
                        catch
                        {
                        }

                        USBMainPage page = new USBMainPage();

                        runStatus_Action = USBAudioBridgeAction(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);

                        DeviceDiscovery.WriteToLogFile("Execution completed for USB Action " + testcasename + " Test Action tab: " + (q + 1));
                    }
                    else if (String.Equals(a_type[q], "QRCM Action", StringComparison.CurrentCultureIgnoreCase))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution started for QRCM Action " + testcasename + " Verification tab: " + (q + 1));
                        string filteredname = filtername(Tabname[q]);
                        if (isQREM)
                        {
                            QREM_API QREM = new QREM_API();
                            runStatus_Action = ExecuteQRCMAction(QREM, tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname, isQREM);
                        }
                        else
                        {
                            QRCM_API QRCM = new QRCM_API();
                            runStatus_Action = ExecuteQRCMAction(QRCM, tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname, isQREM);
                        }

                        DeviceDiscovery.WriteToLogFile("Execution completed for QRCM Action " + testcasename + " Verification tab: " + (q + 1));
                    }
                }

                if (isQREM && v_type[q] != "QRCM Verification" && v_type[q] != "Skip Verification" && !string.IsNullOrEmpty(v_type[q]))
                {
                    runStatus_Verification.Add("Fail");

                    string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + v_type[q] + "', 'Currently not supported for reflect core','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                }
                else
                {
                    Execute_Delay(q, verificationDelay, verificationDelayType);

                    if ((v_type[q] == "Control Verification"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Control Verification " + testcasename + " Verification tab: " + (q + 1));
                        var controlVerification = Execute_Control_Verification(tcid, q, testcasename, string.Empty, TestExecution, exid, testsuitename, testplanname, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, string.Empty);
                        runStatus_Verification = controlVerification.Item1;
                        DeviceDiscovery.WriteToLogFile("Execution completed for Control Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if ((v_type[q] == "Telnet Verification"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Ssh/Telnet Verification " + testcasename + " Verification tab: " + (q + 1));
                        string filteredtabname = filtername(Tabname[q]);
                        var telnetVerification = Execute_Telnet_Verification(tcid, q, testcasename, Tabname[q], string.Empty, string.Empty, TestExecution, TC_log_Pathtowrite + "\\" + rerun + filteredtabname + "\\" + "Telnet", rerun, exid, testsuitename, testplanname, CaseExecutionUniqueID, Testactionname, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, string.Empty, string.Empty, 0);
                        runStatus_Verification = telnetVerification.Item1;
                        //telnetresponses.Clear();
                        DeviceDiscovery.WriteToLogFile("Execution completed for Ssh/Telnet Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if ((v_type[q] == "Audio Precision Verification"))
                    {
                        APx500 apx = new APx500();
                        string installationstatus = TestActionItem.GetApplicationInstallPath("Audio Precision APx500");

                        if (installationstatus == string.Empty)
                        {
                            // MessageBox.Show("Please Install Audio Precision APx500 4.1 software before creating Audio Precision Verification", "Warning", MessageBoxButton.OK, MessageBoxImage.Information);
                            runStatus_Verification.Add("Fail");
                            string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','Audio Precision APx500 4.1 software not available in PC','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                        else
                        {
                            var result = new Version(installationstatus).CompareTo(new Version("4.1"));
                            if (result != 0)
                            {
                                //MessageBox.Show("Please Install Audio Precision APx500 4.1 software before creating Audio Precision Verification", "Warning", MessageBoxButton.OK, MessageBoxImage.Information);
                                runStatus_Verification.Add("Fail");

                                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','Audio Precision APx500 4.1 software not available in PC','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            }
                            else
                            {
                                DeviceDiscovery.WriteToLogFile("Execution Started for Audio Precision Verification " + testcasename + " Verification tab: " + (q + 1));
                                string filteredtabname = filtername(Tabname[q]);
                                Tuple<List<string>, List<string>> status = AP_Execution(tcid, TAID[q], apx, TC_log_Pathtowrite + "\\" + rerun + filteredtabname, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                runStatus_Verification = status.Item1;

                                foreach (string deleteFile in status.Item2)
                                {
                                    if (File.Exists(deleteFile))
                                    {
                                        File.SetAttributes(deleteFile, FileAttributes.Normal);
                                        File.Delete(deleteFile);
                                    }
                                }
                            }
                        }

                        //runStatus = AP_Execution(tcid, TAID[q], apx);
                        DeviceDiscovery.WriteToLogFile("Execution completed for Audio Precision Verification " + testcasename + " Verification tab: " + (q + 1));

                        if (runStatus_Verification.Contains("Fail"))
                        {
                            runStatus_Verification.Add("Fail");
                            //get_status.Add("Fail");
                            //TestExecution.ExecutionStatus = "Fail";

                        }
                        else
                        {
                            runStatus_Verification.Add("Pass");
                            //get_status.Add("Pass");
                            //TestExecution.ExecutionStatus = "Pass";
                        }
                    }
                    else if ((v_type[q] == "Skip Verification"))
                    {
                        runStatus_Verification.Add("Skip Verification");
                        //updating TempTestCaseActionTabTable Values
                        string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Skip Verification', '" + string.Empty + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (v_type[q] == string.Empty)
                    {
                        runStatus_Verification.Add("Skip Verification");
                        //updating TempTestCaseActionTabTable Values
                        string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Skip Verification', '" + string.Empty + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (v_type[q] == "LUA Text Verification")
                    {
                        runStatus_Verification.Add("LUA Text Verification");
                    }
                    else if (v_type[q] == "Log Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Log Verification " + testcasename + " Verification tab: " + (q + 1));
                        var logVerification = Execute_Log_Verification(tcid, q, testcasename, Tabname[q], string.Empty, coreitems, otheritems, testplanname, testsuitename, exid, Date_time_Suite, Qsys_firmware, rerun, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        runStatus_Verification = logVerification.Item1;
                        //telnetresponses.Clear();
                        DeviceDiscovery.WriteToLogFile("Execution completed for Log Verification " + testcasename + " Verification tab: " + (q + 1));


                        //runStatus.Add("Log Verification");
                    }
                    else if ((v_type[q] == "Responsalyzer"))
                    {
                        string filteredname = filtername(Tabname[q]);
                        DeviceDiscovery.WriteToLogFile("Execution Started for Responsalyzer " + testcasename + " Verification tab: " + (q + 1));
                        runStatus_Verification = Execute_Responsalyzer_Verification(tcid, q, testcasename, string.Empty, TestExecution, exid, testsuitename, testplanname, Testactionname, TC_log_Pathtowrite + "\\" + rerun + filteredname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        DeviceDiscovery.WriteToLogFile("Execution completed for Responsalyzer " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if (v_type[q] == "USB Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for USB Verification " + testcasename + " Verification tab: " + (q + 1));
                        try
                        {
                            DateTime time = DateTime.Now;
                            var diffInSeconds = (time - datetimeForUSB).TotalSeconds;

                            if (diffInSeconds < 60)
                            {
                                int diff = 60 - Convert.ToInt32(diffInSeconds);
                                Thread.Sleep(diff * 1000);
                            }
                        }
                        catch { }

                        USBMainPage page = new USBMainPage();
                        List<string> runstatus = USBAudioBridgeVerification(tcid, q, testcasename, TestExecution, exid, testsuitename, testplanname, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        runStatus_Verification = runstatus;
                        DeviceDiscovery.WriteToLogFile("Execution completed for USB Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if (v_type[q] == "CEC Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for CEC Verification " + testcasename + " Verification tab: " + (q + 1));

                        runStatus_Verification = ExecuteCECVerification(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, datetimeTPTCTA);

                        DeviceDiscovery.WriteToLogFile("Execution completed for CEC Verification " + testcasename + " Verification tab: " + (q + 1));

                    }
                    else if (v_type[q] == "QR code Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for QR code Verification " + testcasename + " Verification tab: " + (q + 1));

                        runStatus_Verification = ExecuteQRVerification(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, TC_log_Pathtowrite, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, datetimeTPTCTA, logsave, Rerunvalue, Tabname[q]);

                        DeviceDiscovery.WriteToLogFile("Execution completed for QR code Verification " + testcasename + " Verification tab: " + (q + 1));

                    }
                    else if ((v_type[q] == "Script Verification"))
                    {
                        DeviceDiscovery.WriteToLogFile("Execution Started for Script Verification " + testcasename + " Verification tab: " + (q + 1));

                        string filteredname = filtername(Tabname[q]);
                        runStatus_Verification = ExecuteScriptVerification(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, Date_time_Suite, Qsys_firmware, rerun, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname);

                        DeviceDiscovery.WriteToLogFile("Execution completed for Script Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if (v_type[q] == "User Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution started for User Verification " + testcasename + " Verification tab: " + (q + 1));
                        runStatus_Verification = ExecuteUserVerification(tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                        DeviceDiscovery.WriteToLogFile("Execution completed for User Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                    else if (v_type[q] == "QRCM Verification")
                    {
                        DeviceDiscovery.WriteToLogFile("Execution started for QRCM Verification " + testcasename + " Verification tab: " + (q + 1));
                        string filteredname = filtername(Tabname[q]);
                        if (isQREM)
                        {
                            QREM_API QREM = new QREM_API();
                            runStatus_Verification = ExecuteQRCMVerification(QREM, tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname, isQREM);
                        }
                        else
                        {
                            QRCM_API QRCM = new QRCM_API();
                            runStatus_Verification = ExecuteQRCMVerification(QRCM, tcid, q, exid, testsuitename, testplanname, testcasename, Testactionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, TC_log_Pathtowrite + "\\" + rerun + filteredname, isQREM);
                        }

                        DeviceDiscovery.WriteToLogFile("Execution completed for QRCM Verification " + testcasename + " Verification tab: " + (q + 1));
                    }
                }

                if ((a_type[q] == "Firmware Action"))
                    return new Tuple<List<string>, List<string>, string>(runStatus_Action, runStatus_Verification, firmwareFailure);
                else
                    return new Tuple<List<string>, List<string>, string>(runStatus_Action, runStatus_Verification, netPaitFailure);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        #region Execute QRCM Verification
        private Dictionary<string, string> GetNetpairingDevicename()
        {
            Dictionary<string, string> deviceNamepaired = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            try
            {
                List<string> devicename = new List<string>();
                string query = "select * from DesignInventory where DesignID in(select DesignID from designtable where Designname =(@designName))";
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@designName", Original_desgnname);
                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    devicename.Add("paired-" + read[3].ToString());
                }

                foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                {
                    if (item.QREMcoredetails != null && item.QREMcoredetails.Count() > 0 && devicename.Contains("paired-" + item.ItemDeviceName))
                        deviceNamepaired.Add("paired-" + item.ItemDeviceName, item.QREMcoredetails[0]);
                    else if (!string.IsNullOrEmpty(item.ItemNetPairingSelected) && devicename.Contains("paired-" + item.ItemDeviceName))
                        deviceNamepaired.Add("paired-" + item.ItemDeviceName, item.ItemNetPairingSelected);
                    else if(deviceNamepaired.Keys.Contains("paired-" + item.ItemDeviceName))
                        deviceNamepaired.Add("paired-" + item.ItemDeviceName, "Not Applicable");
                }
            }
            catch (Exception ex)
            {
                if (ex.Message != "Thread was being aborted.")
                    //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return deviceNamepaired;
        }

        private List<string> ExecuteQRCMVerification(dynamic QRCM, int tcid, int tAId, int exid, string testSuiteName, string testPlanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string logPath, bool isQREM)
        {
            List<string> returnStatus = new List<string>();

            try
            {
                ///Read all data from datatable
                Int32[] TAID_array = TAID.ToArray();
                string query = "select Project_Name,Build_version,Reference_Version,Device_name,Device_model,Actual_method_name,Input_arguments,ReferenceFilePath,PayloadFilePath,HasPreMethod,PreMethodName,PreMethodUserKey,PreMethodActualKey,ArgumentMappingIndex,Reference_key,Payload_key,IsPayloadAvailable,QRCMVerificationID from QRCMVerification where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tAId] + "') order by QRCMVerificationID asc";
                //string query = "select Project_Name,Build_version,Reference_Version,Device_name,Device_model,Method_name,Input_arguments,ReferenceFilePath,PayloadFilePath,HasPreMethod,PreMethodForExecution,PreMethodNameForMapping,PreMethodKey,MethodActualKey,ArgumentMappingIndex,Reference_key,Payload_key from QRCMVerification where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tAId] + "')";
                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();

                if (tble.Rows.Count > 0)
                {
                    ///For Dynamic pairing execution, get primary core name and backup core name
                    //string primarydevicename = XmlReadToGetDeviceName(selectedCoreIPAddress);
                    //string backupdevicename = XmlReadToGetDeviceName(backup_selectedCoreIPAddress);
                    Dictionary<string,string> pairedDUTDevices = GetNetpairingDevicename();

                    int actionCnt = 0;
                    while (read.Read())
                    {
                        actionCnt++;
                        Thread.Sleep(1000);
                        string starttime = DateTime.Now.ToString();

                        try
                        {
                            string deviceName = string.Empty;
                            if (read[3] != null)
                                deviceName = read[3].ToString();

                            string deviceModel = string.Empty;
                            if (read[4] != null)
                                deviceModel = read[4].ToString();

                            string ipaddr = string.Empty;
                            string currentToken = string.Empty;
                            string currentFirmwareVersion = string.Empty;
                            Dictionary<string, string> qremDevicedetails = new Dictionary<string, string>();

                            if (!isQREM)
                            {
                                if (deviceName == "Primary core" && !string.IsNullOrEmpty(selectedCoreIPAddress))
                                {
                                    ipaddr = selectedCoreIPAddress;
                                    currentToken = CoreLogonToken;
                                    deviceName = XmlReadToGetDeviceName(selectedCoreIPAddress);
                                    currentFirmwareVersion = core_New_FirmwareVersion.Item2;
                                }
                                else if (deviceName == "Backup core" && !string.IsNullOrEmpty(backup_selectedCoreIPAddress))
                                {
                                    ipaddr = backup_selectedCoreIPAddress;
                                    currentToken = CoreLogonToken_Backup;
                                    deviceName = XmlReadToGetDeviceName(backup_selectedCoreIPAddress);
                                    currentFirmwareVersion = Backup_core_New_FirmwareVersion.Item2;
                                }
                            }
                            else
                            {
                                if (deviceName == "Primary core" && selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0)
                                {
                                    qremDevicedetails.Add("core_id", selectedCoreSystemSiteID[1]);
                                    qremDevicedetails.Add("system_id", selectedCoreSystemSiteID[2]);
                                    qremDevicedetails.Add("site_id", selectedCoreSystemSiteID[3]);
                                    deviceName = selectedCoreSystemSiteID[0];
                                    currentFirmwareVersion = core_New_FirmwareVersion.Item2;
                                }
                                else if (deviceName == "Backup core" && BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0)
                                {
                                    qremDevicedetails.Add("core_id", BackupselectedCoreSystemSiteID[1]);
                                    qremDevicedetails.Add("system_id", BackupselectedCoreSystemSiteID[2]);
                                    qremDevicedetails.Add("site_id", BackupselectedCoreSystemSiteID[3]);
                                    deviceName = BackupselectedCoreSystemSiteID[0];
                                    currentFirmwareVersion = Backup_core_New_FirmwareVersion.Item2;
                                }
                            }

                            bool status = true;
                            string remarks = string.Empty;
                            List<string> expectedValue = new List<string>();
                            List<string> measuredValue = new List<string>();

                            string methodName = string.Empty;
                            if (read[5] != null)
                                methodName = read[5].ToString().Trim();

                            if ((!isQREM && !string.IsNullOrEmpty(ipaddr) && ipaddr != "Not Applicable") || (isQREM && qremDevicedetails != null && qremDevicedetails.Count() > 0))
                            {
                                //string projectName = string.Empty;
                                //if (read[0] != null)
                                //    projectName = read[0].ToString();

                                //string buildVersion = string.Empty;
                                //if (read[1] != null)
                                //    buildVersion = read[1].ToString();

                                //string referenceVersion = string.Empty;
                                //if (read[2] != null)
                                //    referenceVersion = read[2].ToString();                               

                                string inputArguments = string.Empty;
                                if (read[6] != null && read[6].ToString() != string.Empty)
                                {
                                    inputArguments = read[6].ToString();
                                    inputArguments = inputArguments.Replace(";", ":QAT_arg:");
                                }

                                string referenceFilePath = string.Empty;
                                if (read[7] != null)
                                    referenceFilePath = Properties.Settings.Default.ServerPath + @"\QRCM_Files\" + read[7].ToString();

                                //string payloadFilePath = string.Empty;
                                //if (read[8] != null)
                                //    payloadFilePath = read[8].ToString();

                                bool hasPreMethod = false;
                                if (read[9] != null && Convert.ToBoolean(read[9]) == true)
                                    hasPreMethod = true;

                                string preMethodName = string.Empty;
                                if (read[10] != null)
                                    preMethodName = read[10].ToString().Trim();

                                string preMethodKey = string.Empty;
                                if (read[11] != null)
                                {
                                    //if(read[11].ToString().StartsWith("data="))
                                    preMethodKey = read[11].ToString();
                                    //else
                                    //	preMethodKey = "data="+ read[11].ToString();
                                }
                                								
                                string methodActualKey = string.Empty;
                                if (read[12] != null)
                                    methodActualKey = read[12].ToString();

                                int argumentMappingIndex = 0;
                                if (read[13] != null)
                                    argumentMappingIndex = Convert.ToInt32(read[13]);

                                string referencekey = string.Empty;
                                if (read[14] != null)
                                    referencekey = read[14].ToString();

                                //string payloadkey = string.Empty;
                                //if (read[15] != null)
                                //    payloadkey = read[15].ToString();

                                //bool isPayloadAvailable = false;
                                //if (read[16] != null && Convert.ToBoolean(read[16]) == true)
                                //    isPayloadAvailable = true;

                                int qrcmID = 0;
                                if (read[17] != null)
                                    qrcmID = Convert.ToInt32(read[17]);

                                ///if main method has premethod(preMethodName), first execute premethod and premethod output is saved as dictionary(premethodJsonData)
                                Dictionary<string, object> premethodJsonData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                                if (hasPreMethod)
                                {
                                    var premethodstatus = ExecutePreMethod(QRCM,ipaddr, currentToken, preMethodName.Trim(), string.Empty, true, isQREM, qremDevicedetails, currentFirmwareVersion, ref remarks);
                                    if (premethodstatus.Item1)
                                    {
                                        premethodJsonData = premethodstatus.Item3;
                                    }
                                    else
                                    {
                                        status = false;
                                        if (string.IsNullOrEmpty(remarks))
                                            remarks = "Error in " + preMethodName + " method";
                                    }
                                }
                                
                                /////If Premethod true and main method has input arguments, based on user given arguments get actual input arguments using premethod output(premethodJsonData)
                                if (status && hasPreMethod && !string.IsNullOrEmpty(inputArguments))
                                {
                                    if (!string.IsNullOrEmpty(methodActualKey))
                                    {
                                        string duplicateInputArg = inputArguments;
                                        var inputArgOutput = GetActualMethodInputArgument(preMethodName.Trim(), ref duplicateInputArg, argumentMappingIndex, preMethodKey, methodActualKey, premethodJsonData);
                                        if (inputArgOutput.Item1)
                                        { inputArguments = duplicateInputArg; }
                                        else { status = inputArgOutput.Item1; remarks = inputArgOutput.Item2; }
                                    }
                                }
                                
                                if (status)
                                {
                                    ///Actual main method is executed and output is string (qrcmoutput)
                                    //string uri = "http://" + Properties.Settings.Default.QRCMServerName + Properties.Settings.Default.QRCM_URIPort + "ip=" + ipaddr + "&method=" + methodName + "&args=" + inputArguments + "&username=" + Properties.Settings.Default.DeviceUsername + "&password=" + applicationPassword;
                                    //string qrcmOutput = string.Empty;
                                    //var value = HttpGetQRCMjson(uri, string.Empty, out qrcmOutput);
                                   
                                    List<string> argslist = new List<string>();
                                    if (inputArguments != string.Empty)
                                        argslist = (inputArguments.Split(new string[] { ":QAT_arg:" }, StringSplitOptions.None)).ToList();

                                    Tuple<bool, string> value = null;

                                    if (!isQREM)
                                    {
                                        value = QRCM.QRCM_HTTPVerification(methodName, currentToken, ipaddr, argslist);
                                    }
                                    else
                                    {
                                        value = QRCM.QREM_HTTPVerification(methodName, qremDevicedetails, argslist);
                                    }


                                    if (value.Item1)
                                    {
                                        if (!string.IsNullOrEmpty(value.Item2))
                                        {
                                            ///////Main method qrcmOutput Saved in serverpath
                                            //string textfilepath = getpathforScriptLog(logPath, "QRCMVerification");

                                            //if (!string.IsNullOrEmpty(textfilepath))
                                            //{
                                            if (!string.IsNullOrEmpty(logPath))
                                            {
                                                if (!Directory.Exists(logPath))
                                                {
                                                    Directory.CreateDirectory(logPath);
                                                }

                                                using (StreamWriter strwrite = new StreamWriter(logPath + @"\QRCM_RawOutput.txt", true))
                                                {
                                                    strwrite.WriteLine("Verification:" + actionCnt);
                                                    strwrite.WriteLine(value.Item2);
                                                }
                                            }

                                            Dictionary<string, object> actualJsonData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                                            int? actualstatusCode = null;
                                            string hasError = GetDataFromQRCMoutput(value.Item2, true, ref actualJsonData, ref actualstatusCode);

                                            if (string.IsNullOrEmpty(hasError))
                                            {
                                                /////Get reference data as dictionary
                                                Dictionary<string, object> checkedReferenceItems = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                                                int? referenceStatusCode = null;
                                                var refStatus = GetReferenceJSONdata(qrcmID, referenceFilePath, true, pairedDUTDevices, "Reference", ref checkedReferenceItems, ref referenceStatusCode, ref expectedValue);

                                                if (!refStatus.Item1)
                                                {
                                                    status = false; remarks = refStatus.Item2;
                                                }

                                                if (status)
                                                {
                                                    var statusremarks = CompareReferenceWithActualJSON(referenceStatusCode.ToString(), checkedReferenceItems, actualstatusCode.ToString(), actualJsonData, referencekey, ref measuredValue);
                                                    //var statusremarks = CompareReferenceWithActualJSON(referenceFilePath, statusCode.ToString(), actualJsonData, referencekey, ref expectedValue, ref measuredValue);
                                                    if (statusremarks.Item1 == "Fail")
                                                        status = false;

                                                    remarks = statusremarks.Item2;
                                                }
                                            }
                                            else
                                            { status = false; remarks = hasError; }
                                        }
                                        else
                                        {
                                            remarks = "JSON Output is empty for " + methodName;
                                        }
                                    }
                                    else
                                    {
                                        status = false; remarks = value.Item2;
                                    }
                                }
                            }
                            else
                            {
                                expectedValue.Add("Not Applicable");
                                measuredValue.Add("Not Applicable");
                                status = false; remarks = deviceName + " device not available";
                            }

                            if (!status)
                            {
                                //string expectVal = System.Web.HttpUtility.HtmlEncode(string.Join("<br/>", expectedValue));
                                //string measuredVal = System.Web.HttpUtility.HtmlEncode(string.Join("<br/>", measuredValue));

                                string expectVal = string.Join("<br/>", expectedValue);
                                string measuredVal = string.Join("<br/>", measuredValue);

                                if (expectVal == string.Empty)
                                {
                                    expectVal = methodName;
                                }

                                if (measuredVal == string.Empty)
                                {
                                    measuredVal = methodName + " verification failed";
                                }

                                if (string.IsNullOrEmpty(remarks) && measuredVal != methodName + " verification failed")
                                    remarks = "Expected and measured values are different";

                                returnStatus.Add("Fail");
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','QRCM Verification:" + actionCnt + "',@remarks,@expectVal,@measuredVal,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";

                                Dictionary<string, string> parameterval = new Dictionary<string, string>() { { "@TSName", testSuiteName }, { "@TPName", testPlanname }, { "@TCName", testcasename }, { "@TAName", Testactionname }, { "@remarks", remarks }, { "@expectVal", expectVal }, { "@measuredVal", measuredVal } };
                                tble = report_connection.Report_SendCommand_Toreceive(query, parameterval);
                            }
                            else
                            {
                                string expectVal = methodName;
                                string measuredVal = methodName + " successfully verified";

                                returnStatus.Add("Pass");
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','QRCM Verification:" + actionCnt + "',@remarks,'" + expectVal + "','" + measuredVal + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);
                            }
                        }
                        catch (Exception ex)
                        {
                            DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);

                            string expectVal = "Not Applicable";
                            string measuredVal = "Not Applicable";

                            returnStatus.Add("Fail");
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','QRCM Verification:" + actionCnt + "',@remarks,@expectVal,@measuredVal,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";

                            Dictionary<string, string> parameterval = new Dictionary<string, string>() { { "@TSName", testSuiteName }, { "@TPName", testPlanname }, { "@TCName", testcasename }, { "@TAName", Testactionname }, { "@remarks", "Error occured while QRCM action execution" }, { "@expectVal", expectVal }, { "@measuredVal", measuredVal } };
                            tble = report_connection.Report_SendCommand_Toreceive(query, parameterval);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return returnStatus;
        }

        /// <summary>
        /// Compared reference with main method actual output. First it checks statuscode. If statuscode matches, each treeview item will compare.
        /// </summary>
        /// <param name="referenceStatusCode"></param>
        /// <param name="checkedReferenceItems - this is dictionary item which has user given treeview items"></param>
        /// <param name="actualStatusCode"></param>
        /// <param name="actualJSON  - this is dictionary item which has actual main method output"></param>
        /// <param name="uniquekey (Ex:data=xx)"></param>
        /// <param name="measuredValue - Used for report"></param>
        /// <returns></returns>
        private Tuple<string, string> CompareReferenceWithActualJSON(string referenceStatusCode, Dictionary<string, object> checkedReferenceItems, string actualStatusCode, Dictionary<string, object> actualJSON, string uniquekey, ref List<string> measuredValue)
        {
            string status = string.Empty;
            string remarksinJson = string.Empty;

            try
            {
                if (referenceStatusCode.ToString() == actualStatusCode.Trim())
                {
                    ///Split uniquekey value and saved it as dictionary
                    Dictionary<string, string> uniqueKeyval = GetQRCMJsonUniqueKeyValue(uniquekey);

                    if (uniquekey != string.Empty && uniqueKeyval.Count == 0)
                    {
                        status = "Fail"; remarksinJson = "Empty Unique key value";
                    }
                    else
                    {
                        ///uplowLimit - Upperlimit and lower limit value saved in this array. If tree item checked means this limit validated with actual value
                        string[] uplowLimit = new string[2];
                        ///iscomparesuccess - records the pass fail status in QActual and QRCMstatus
                        string iscomparesuccess = string.Empty;

                        List<string> validationSkipitems = new List<string>();
                        foreach (KeyValuePair<string, object> treecheckedproperty in checkedReferenceItems.ToList())
                        {
                            if (treecheckedproperty.Key == "data")
                            {
                                object actualdata = actualJSON[treecheckedproperty.Key] as object;
                                CompareTokenNodes(treecheckedproperty, treecheckedproperty.Key, actualdata, uniqueKeyval, ref uplowLimit, treecheckedproperty.Key, ref iscomparesuccess, ref validationSkipitems);
                            }
                            else if (treecheckedproperty.Key == "dataQActual")
                            {
                                string keyVal = treecheckedproperty.Key.Remove(treecheckedproperty.Key.Length - 7);
                                object act = actualJSON[keyVal] as object;

                                if (act != null)
                                {
                                    var values = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(act);
                                    checkedReferenceItems[treecheckedproperty.Key] = values;
                                }
                            }
                            else if (treecheckedproperty.Key.EndsWith("QRCMstatus"))
                            {
                                checkedReferenceItems[treecheckedproperty.Key] = iscomparesuccess;
                            }
                        }
                        
                        if (validationSkipitems.Count > 0)
                            remarksinJson += string.Join(" ," , validationSkipitems.Distinct()) + " not available.So validation skipped";

                        ///MeasuredValue s are filled for Report purpose
                        List<string> statuslist = new List<string>();
                        foreach (KeyValuePair<string, object> property in checkedReferenceItems)
                        {
                            if (property.Key == "data")
                            {
                                GetStatusFromComparedOutput(property, property.Key, ref measuredValue, ref statuslist);
                            }
                            else if (property.Key == "dataQActual")
                            {
                                string keyVal = property.Key.Remove(property.Key.Length - 7);
                                var values = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(property.Value);
                                if (checkedReferenceItems.Keys.Contains(keyVal + "QRCMstatus") && checkedReferenceItems[keyVal + "QRCMstatus"] != null && checkedReferenceItems[keyVal + "QRCMstatus"].ToString() == "Fail")
                                {
                                    measuredValue.Add(@"<span style=""color: red"">" + keyVal + ":" + values + "</span>");
                                }
                                else
                                {
                                    measuredValue.Add(keyVal + ":" + values);
                                }
                            }
                            else if (property.Key.EndsWith("QRCMstatus"))
                            {
                                statuslist.Add(property.Value.ToString());
                            }
                        }

                        if (statuslist.Contains("Fail"))
                            status = "Fail";
                    }
                }
                else
                {
                    status = "Fail"; remarksinJson = "HTTP status code is mismatched. statusCode for reference:" + referenceStatusCode + ", Actual:" + actualStatusCode;
                }
            }
            catch (Exception ex)
            {
                status = "Fail";
                remarksinJson = "Exception occured while compare execution json with reference json";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<string, string>(status, remarksinJson);
        }
        
        #region Execution - compare actual with tree checked reference
        /// <summary>
        /// Compare reference with acutal items. First it checks the type of dictionary key value. If the type is property upper limit and lower limit value saved in uplowLimit value, after that actual compare value compared with reference value and limit value
        /// </summary>
        /// <param name="referencetreecheckeditem"></param>
        /// <param name="name"></param>
        /// <param name="actualitems"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="uplowLimit"></param>
        /// <param name="parentName"></param>
        /// <param name="iscomparesuccess"></param>
        private void CompareTokenNodes(KeyValuePair<string, object> referencetreecheckeditem, string name, object actualitems, Dictionary<string, string> uniqueKeyval, ref string[] uplowLimit, string parentName, ref string iscomparesuccess, ref List<string> validationSkipitems)
        {
            try
            {
                if (referencetreecheckeditem.Value.GetType() == typeof(object[]))
                {
                    object[] refarraylist = referencetreecheckeditem.Value as object[];
                    object[] actualarraylist = actualitems as object[];
                    CompareArrayNodes(refarraylist, name, actualarraylist, uniqueKeyval, ref uplowLimit, ref iscomparesuccess, ref validationSkipitems);
                }
                else if (referencetreecheckeditem.Value.GetType() == typeof(Dictionary<string, object>))
                {
                    Dictionary<string, object> refobjectlist = referencetreecheckeditem.Value as Dictionary<string, object>;
                    Dictionary<string, object> actualobjectlist = actualitems as Dictionary<string, object>;
                    CompareObjectNodes(refobjectlist, name, actualobjectlist, uniqueKeyval, ref uplowLimit, parentName, ref iscomparesuccess, ref validationSkipitems);
                }
                else
                {
                    if (referencetreecheckeditem.Key.EndsWith("-UpLimit"))
                    {
                        uplowLimit[0] = referencetreecheckeditem.Value.ToString();
                    }
                    else if (referencetreecheckeditem.Key.EndsWith("-LowLimit"))
                    {
                        uplowLimit[1] = referencetreecheckeditem.Value.ToString();
                    }
                    else
                    {
                        string actualValues = string.Empty;
                        if (actualitems != null)
                            actualValues = actualitems.ToString().Trim();

                        string referenceValues = string.Empty;
                        if (referencetreecheckeditem.Value != null && referencetreecheckeditem.Value.ToString().ToLower() != "null")
                            referenceValues = referencetreecheckeditem.Value.ToString().Trim().Replace("\r\n", "\n").Replace("\\n", "\n");

                        //var jsSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                        //var failedvalues = jsSerializer.Serialize(actualValues);
						
                        if (string.Equals(actualValues.ToString().Trim(), referenceValues.ToString().Trim(), StringComparison.CurrentCultureIgnoreCase) || referenceValues.Equals("paired-Not Applicable"))
                        {
                            iscomparesuccess = "Pass";
                        }
                        else if (uplowLimit[0] != null && uplowLimit[1] == null)
                        {
                            bool isupperpass = QRCMCompareLimit(actualValues, uplowLimit[0], "UP");
                            if (!isupperpass)
                                iscomparesuccess = "Fail";
                            else
                                iscomparesuccess = "Pass";
                        }
                        else if (uplowLimit[0] == null && uplowLimit[1] != null)
                        {
                            bool islowerpass = QRCMCompareLimit(actualValues, uplowLimit[1], "LOW");
                            if (!islowerpass)
                                iscomparesuccess = "Fail";
                            else
                                iscomparesuccess = "Pass";
                        }
                        else if (uplowLimit[0] != null && uplowLimit[1] != null)
                        {
                            bool isupperpass = QRCMCompareLimit(actualValues, uplowLimit[0], "UP");
                            bool islowerpass = QRCMCompareLimit(actualValues, uplowLimit[1], "LOW");

                            if (!isupperpass || !islowerpass)
                                iscomparesuccess = "Fail";
                            else
                                iscomparesuccess = "Pass";
                        }
                        else
                        {
                            iscomparesuccess = "Fail";
                        }

                        uplowLimit = new string[2];
                    }
                }
            }
            catch (Exception ex)
            {
                iscomparesuccess = "Fail";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private bool QRCMCompareLimit(object actualitems, string uplowLimit, string upperorLower)
        {
            bool islimitpass = false;

            try
            {
                double actual;
                bool successflt = double.TryParse(actualitems.ToString(), out actual);
                if (successflt)
                {
                    double refval;
                    bool successfltref = double.TryParse(uplowLimit, out refval);
                    if (successfltref)
                    {
                        if (upperorLower == "UP")
                        {
                            if (refval >= actual)
                            {
                                islimitpass = true;
                            }
                        }
                        else if (upperorLower == "LOW")
                        {
                            if (refval <= actual)
                            {
                                islimitpass = true;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return islimitpass;
        }

        /// <summary>
        /// Array's are looped in this function. If uniqueKeyval contains the array key name, loop will execute otherwise it checkes for string array.
        /// If uniqueKeyval contains the array key name: Each referencearraylist value checks actualarray matches the reference value. If matched iscomparesuccess will be "Pass" and break will done. Otherwise loop will execute
        /// </summary>
        /// <param name="referencearraylist"></param>
        /// <param name="name"></param>
        /// <param name="actualarraylist"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="uplowLimit"></param>
        /// <param name="iscomparesuccess"></param>
        private void CompareArrayNodes(object[] referencearraylist, string name, object actualarraylist, Dictionary<string, string> uniqueKeyval, ref string[] uplowLimit, ref string iscomparesuccess, ref List<string> validationSkipitems)
        {
            try
            {
                object[] actualarray = actualarraylist as object[];

                if (uniqueKeyval.Keys.Contains(name))
                {
                    for (var i = 0; i < referencearraylist.Count(); i++)
                    {
                        if (referencearraylist[i] != null)
                        {
                            Dictionary<string, object> referencearray = referencearraylist[i] as Dictionary<string, object>;
                            if (referencearray != null)
                            {
                                if (actualarray == null || actualarray.Count() == 0)
                                {
                                    validationSkipitems.Add(uniqueKeyval[name]);
                                    SetFailToArrayObject(referencearraylist[i], true);
                                }
                                else
                                {
                                    ///hasUniqueMatch matches the uniquekey it is true otherwise false. if false means SetFailToArrayObject function will appply the pass fail status in reference list.
                                    bool hasUniqueMatch = false;
                                    for (int j = 0; j < actualarray.Count(); j++)
                                    {
                                        Dictionary<string, object> actualLists = actualarray[j] as Dictionary<string, object>;
                                        Dictionary<string, object> actualList = new Dictionary<string, object>(actualLists, StringComparer.OrdinalIgnoreCase);

                                        ///Ex: name: xxx, guid: yyy; name: xxx is a uniquekey and guid is matching character; if uniquekey(name) matches other parameters are checked in within the if condition
                                        if (referencearray.ContainsKey(uniqueKeyval[name]) && actualList.ContainsKey(uniqueKeyval[name]) && string.Equals(referencearray[uniqueKeyval[name]].ToString().Trim(), actualList[uniqueKeyval[name]].ToString().Trim(), StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            hasUniqueMatch = true;
                                            CompareTokenNodes(new KeyValuePair<string, object>(name, referencearraylist[i]), $"[{i}]", actualarray[j], uniqueKeyval, ref uplowLimit, name, ref iscomparesuccess, ref validationSkipitems);

                                            if (iscomparesuccess == "Pass")
                                                break;
                                        }
                                    }

                                    if (!hasUniqueMatch)
                                    {
                                        validationSkipitems.Add(uniqueKeyval[name]);
                                        SetFailToArrayObject(referencearraylist[i], true);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    ////It checks for string array comparision
                    if (referencearraylist != null && referencearraylist.Count() > 0)
                    {
                        var singlearray = referencearraylist[0] as Dictionary<string, object>;
                        if (singlearray == null)
                        {
                            if (actualarray != null && actualarray.Count() > 0)
                            {
                                var actualFirstarray = actualarray[0] as Dictionary<string, object>;
                                if (actualFirstarray == null)
                                {
                                    var list = referencearraylist.Except(actualarray).ToList();
                                    if (list.Count() > 0)
                                    {
                                        iscomparesuccess = "Fail";
                                    }
                                }
                                else
                                {
                                    iscomparesuccess = "Fail";
                                }
                            }
                            else
                            {
                                iscomparesuccess = "Fail";
                            }                            
                        }
                        else
                        {
                            iscomparesuccess = "Fail";
                        }
                    }
                    else
                    {
                        iscomparesuccess = "Fail";
                    }
                }
            }
            catch (Exception ex)
            {
                iscomparesuccess = "Fail";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Each reference dictionary executed in foreach loop
        /// </summary>
        /// <param name="refDict - reference dictionary from token node function"></param>
        /// <param name="name - key name"></param>
        /// <param name="actualitems"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="uplowLimit"></param>
        /// <param name="parentName"></param>
        /// <param name="iscomparesuccess"></param>
        public void CompareObjectNodes(Dictionary<string, object> refDict, string name, object actualitems, Dictionary<string, string> uniqueKeyval, ref string[] uplowLimit, string parentName, ref string iscomparesuccess, ref List<string> validationSkipitems)
        {
            try
            {
                Dictionary<string, object> actualdict = actualitems as Dictionary<string, object>;
                Dictionary<string, object> actualdictionary = null;
                if (actualdict != null)
                    actualdictionary = new Dictionary<string, object>(actualdict, StringComparer.OrdinalIgnoreCase);

                if (refDict != null)
                {
                    foreach (KeyValuePair<string, object> refproperty in refDict.ToList())
                    {
                        if (refproperty.Key.EndsWith("QActual"))
                        {
                            ///If refproperty key value is QActual, actual values copied to reference dictionary
                            string keyVal = refproperty.Key.Remove(refproperty.Key.Length - 7);
                            if (actualdictionary != null && actualdictionary.ContainsKey(keyVal))
                            {
                                refDict[refproperty.Key] = actualdictionary[keyVal];
                            }
                            else
                            {
                                refDict[refproperty.Key] = "Key not exist";
                            }
                        }
                        else if (refproperty.Key.EndsWith("-UpLimit") || refproperty.Key.EndsWith("-LowLimit"))
                        {
                            ///If upper limit and lower limit means it will saved in uplowLimit
                            CompareTokenNodes(refproperty, refproperty.Key, null, uniqueKeyval, ref uplowLimit, parentName, ref iscomparesuccess, ref validationSkipitems);
                        }
                        else if (refproperty.Key.EndsWith("QRCMstatus"))
                        {
                            ///Status is saved in reference dictionary
                            if (iscomparesuccess != string.Empty)
                            { refDict[refproperty.Key] = iscomparesuccess; }
                            else
                            { refDict[refproperty.Key] = "Fail"; }
                        }
                        else
                        {
                            ///It checks array is an string array or not. If isarrayaslist true its an string array else normal recursive will run
                            if (actualitems != null && actualdictionary != null && actualdictionary.ContainsKey(refproperty.Key))
                            {
                                object[] refObjArray = refproperty.Value as object[];
                                bool isarrayaslist = false;

                                if (refObjArray != null && refObjArray.Count() > 0)
                                {
                                    Dictionary<string, object> refDictionaryval = refObjArray[0] as Dictionary<string, object>;
                                    if (refDictionaryval == null)
                                    {
                                        isarrayaslist = true;

                                        object[] actualobjectlist = actualdictionary[refproperty.Key] as object[];

                                        if (actualobjectlist != null && actualobjectlist.Count() > 0)
                                        {
                                            Dictionary<string, object> actualarraylist = actualobjectlist[0] as Dictionary<string, object>;
                                            if (actualarraylist == null)
                                            {
                                                var list = actualobjectlist.Except(refObjArray).ToList();
                                                if (list.Count() > 0)
                                                {
                                                    iscomparesuccess = "Fail";
                                                }
                                                else
                                                {
                                                    iscomparesuccess = "Pass";
                                                }
                                            }
                                            else
                                            {
                                                iscomparesuccess = "Fail";
                                            }
                                        }
                                        else
                                        {
                                            iscomparesuccess = "Fail";
                                        }
                                    }
                                }

                                if (!isarrayaslist)
                                {
                                    ///If isarrayaslist false normal recursive will run
                                    CompareTokenNodes(refproperty, refproperty.Key, actualdictionary[refproperty.Key], uniqueKeyval, ref uplowLimit, parentName, ref iscomparesuccess, ref validationSkipitems);
                                }
                            }
                            else if (actualitems != null && actualdictionary == null)
                            {
                                ///Normal datatype will run
                                CompareTokenNodes(refproperty, refproperty.Key, actualitems, uniqueKeyval, ref uplowLimit, parentName, ref iscomparesuccess, ref validationSkipitems);
                            }
                            else
                            {
                                ///If this type is not an string array and normal execution, it sets fail in all loop using this function 'SetFailToArrayObject'
                                SetFailToArrayObject(refproperty.Value, false);
                                iscomparesuccess = "Fail";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                iscomparesuccess = "Fail";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        ///If actual and reference miss matched, QActual and QRCMstatus will fill to Fail
        /// </summary>
        /// <param name="arrayvalue"></param>
        private void SetFailToArrayObject(object arrayvalue, bool isvalidationskip)
        {
            try
            {
                object[] arraylist = arrayvalue as object[];
                Dictionary<string, object> objectlist = arrayvalue as Dictionary<string, object>;

                if (arraylist != null)
                {
                    SetFailToArray(arraylist, isvalidationskip);
                }
                else if (objectlist != null)
                {
                    SetFailToObjects(objectlist, isvalidationskip);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// If actual and reference miss matched, QActual and QRCMstatus will fill to Fail
        /// </summary>
        /// <param name="obj"></param>
        public void SetFailToObjects(Dictionary<string, object> obj, bool isvalidationskip)
        {
            try
            {
                foreach (KeyValuePair<string, object> property in obj.ToList())
                {
                    if (property.Key.EndsWith("QActual"))
                    {
                        if (isvalidationskip)
                            obj[property.Key] = "Validation skipped";
                        else
                            obj[property.Key] = "Key not exist";
                    }
                    else if (property.Key.EndsWith("QRCMstatus"))
                    {
                        obj[property.Key] = "Fail";
                    }
                    else
                    {
                        SetFailToArrayObject(property.Value, isvalidationskip);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// If actual and reference miss matched, QActual and QRCMstatus will fill to Fail
        /// </summary>
        /// <param name="arraylist"></param>
        public void SetFailToArray(object[] arraylist, bool isvalidationskip)
        {
            try
            {
                for (var i = 0; i < arraylist.Count(); i++)
                {
                    if (arraylist[i] != null)
                    {
                        SetFailToArrayObject(arraylist[i], isvalidationskip);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #endregion

        /// <summary>
        /// Each list fill the QActual and status value in list
        /// </summary>
        /// <param name="arrayvalue"></param>
        /// <param name="name"></param>
        /// <param name="measuredValue"></param>
        /// <param name="status"></param>
        private void GetStatusFromComparedOutput(KeyValuePair<string, object> arrayvalue, string name, ref List<string> measuredValue, ref List<string> status)
        {
            try
            {
                if (arrayvalue.Value.GetType() == typeof(object[]))
                {
                    object[] arraylist = arrayvalue.Value as object[];
                    GetStatusFromArray(arraylist, name, ref measuredValue, ref status);
                }
                else if (arrayvalue.Value.GetType() == typeof(Dictionary<string, object>))
                {
                    Dictionary<string, object> objectlist = arrayvalue.Value as Dictionary<string, object>;
                    GetStatusFromObjects(objectlist, name, ref measuredValue, ref status);
                }
                else
                {
                    //var values = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(arrayvalue.Value);
                    //expectedValue.Add(arrayvalue.Key + ":" + values);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Each list fill the QActual and status value in list
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="name"></param>
        /// <param name="measuredValue"></param>
        /// <param name="status"></param>
        public void GetStatusFromObjects(Dictionary<string, object> obj, string name, ref List<string> measuredValue, ref List<string> status)
        {
            try
            {
                foreach (KeyValuePair<string, object> property in obj.ToList())
                {
                    if (property.Key.EndsWith("QActual"))
                    {
                        string keyVal = property.Key.Remove(property.Key.Length - 7);
                        var values = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(property.Value);

                        if (obj.Keys.Contains(keyVal + "QRCMstatus") && obj[keyVal + "QRCMstatus"] != null && obj[keyVal + "QRCMstatus"].ToString() == "Fail")
                        {
                            measuredValue.Add(@"<span style=""color: red"">" + keyVal + ":" + values + "</span>");
                        }
                        else
                        {
                            measuredValue.Add(keyVal + ":" + values);
                        }
                    }
                    else if (property.Key.EndsWith("QRCMstatus"))
                    {
                        status.Add(property.Value.ToString());
                    }
                    else
                    {
                        //GetStatusArrayObject(property, property.Key, ref expectedValue, ref measuredValue, ref status);
                        GetStatusFromComparedOutput(property, property.Key, ref measuredValue, ref status);
                    }
                }
            }
            catch (Exception ex)
            {
                status.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Each list fill the QActual and status value in list
        /// </summary>
        /// <param name="arraylist"></param>
        /// <param name="name"></param>
        /// <param name="measuredValue"></param>
        /// <param name="status"></param>
        public void GetStatusFromArray(object[] arraylist, string name, ref List<string> measuredValue, ref List<string> status)
        {
            try
            {
                for (var i = 0; i < arraylist.Count(); i++)
                {
                    if (arraylist[i] != null)
                    {
                        GetStatusFromComparedOutput(new KeyValuePair<string, object>(name, arraylist[i]), name, ref measuredValue, ref status);
                    }
                }
            }
            catch (Exception ex)
            {
                status.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #endregion



        #region QRCM common functions

        #region PreMethod execution      

        /// <summary>
        /// Execute premethod and from the output convert output string to dictionary
        /// </summary>
        /// <param name="ipaddr to execute premethod"></param>
        /// <param name="premethodName to execute premethod"></param>
        /// <param name="inputArguments for premehod execution.currently empty is passed"></param>
        /// <param name="skipObject - If QRCM action main method execution means skiped output data read as dictionary value"></param>
        /// <param name="remarks"></param>
        /// <returns></returns>
        private Tuple<bool, int?, Dictionary<string, object>> ExecutePreMethod(dynamic QRCM,string ipaddr,string currentToken, string premethodName, string inputArguments, bool skipObject, bool isQREM, Dictionary<string, string> qremDevicedetails,string currentFirmwareVersion, ref string remarks)
        {
            bool isSuccess = false;
            int? premethodstatusCode = null;
            Dictionary<string, object> premethodJsonData = new Dictionary<string, object>(StringComparer.CurrentCultureIgnoreCase);

            try
            {
                // Premethod execution
                //string uri = "http://" + Properties.Settings.Default.QRCMServerName + Properties.Settings.Default.QRCM_URIPort + "ip=" + ipaddr + "&method=" + premethodName + "&args=" + inputArguments + "&username=" + Properties.Settings.Default.DeviceUsername + "&password=" + applicationPassword;
                string premethodOutput = string.Empty;
                //var value = HttpGetQRCMjson(uri, string.Empty, out premethodOutput);
               
                List<string> argslist = new List<string>();
                if (inputArguments != string.Empty)
                    argslist = (inputArguments.Split(new string[] { ":QAT_arg:" }, StringSplitOptions.None)).ToList();

                ////Need change
                Tuple<bool, string> value = null;

                if (isQREM)
                {
                    value = QRCM.QREM_HTTPVerification(premethodName, qremDevicedetails, argslist);
                }
                else
                {
                    value = QRCM.QRCM_HTTPVerification(premethodName, currentToken, ipaddr, argslist);
                }

                if (value.Item1)
                {
                    if (!string.IsNullOrEmpty(value.Item2))
                    {
                        ///From premethod output, string data converted into dictionary data and key as "data". The output is "premethodJsonData"
                        string hasError = GetDataFromQRCMoutput(value.Item2, skipObject, ref premethodJsonData, ref premethodstatusCode);

                        if (string.IsNullOrEmpty(hasError))
                        {
                            premethodJsonData = ExecutePreMethodFilter(premethodJsonData, premethodName, currentFirmwareVersion);
                            isSuccess = true;
                        }
                        else
                        {
                            remarks = "Error in " + premethodName + ".<br/>" + hasError;
                        }
                    }
                    else
                    {
                        remarks = "Reference / Payload JSON Output is empty for " + premethodName;
                    }
                }
                else
                {
                    //if (value.Item2 == "Unable to connect to the remote server")
                    //{
                    //    remarks = "Couldn't able to connect " + Properties.Settings.Default.QRCMServerName + " server";
                    //}
                    //else
                    //{
                        remarks = value.Item2;
                    //}
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                remarks = "Couldn't able to fetch " + premethodName + " output";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, int?, Dictionary<string, object>>(isSuccess, premethodstatusCode, premethodJsonData);
        }


        private Dictionary<string, object> ExecutePreMethodFilter(Dictionary<string, object> premethodJsonData, string preMethodName, string currentFirmwareVersion)
        {
            Dictionary<string, object> premethodJsonFilteredData = new Dictionary<string, object>(StringComparer.CurrentCultureIgnoreCase);
            try
            {
                if (preMethodName == "network_services_details")
                {
                    ////Verifying version
                    bool isNewversion = firmwareVersioncheckGeneral("9.1.1", "fromQRCMPremethodFilter");

                  /////Filtering only id and enabled keys for each object
                    foreach (KeyValuePair<string, object> keypair in premethodJsonData)
                    {
                        if (keypair.Key == "data")
                        {
                            object[] objArray = keypair.Value as object[];
                           
                            if (objArray != null)
                            {
                                object[] objArraynew = new object[objArray.Count()];
                                int index = 0;
                                foreach (Dictionary<string, object> obj in objArray)
                                {
                                    Dictionary<string, object> dict1 = new Dictionary<string, object>();
                                    
                                     foreach (var child in obj)
                                     {
                                       if (dict1.Count() == 2)
                                            break;

                                       if (child.Key.ToLower() == "id" || child.Key.ToLower() == "enabled")
                                             dict1.Add(child.Key, child.Value);
                                    }
                                    objArraynew[index] = dict1;
                                    index++;
                                }

                                premethodJsonFilteredData.Add("data", objArraynew);
                            }

                        }
                          
                    }

                }
                else
                    premethodJsonFilteredData = premethodJsonData;
            }
            catch (Exception ex)
            {
                premethodJsonFilteredData = premethodJsonData;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return premethodJsonFilteredData;
        }



        /// <summary>
        /// Execute uri link
        /// </summary>
        /// <param name="strURI"></param>
        /// <param name="accept is null"></param>
        /// <param name="strResponse - link execution output response"></param>
        /// <returns></returns>
        public Tuple<bool, string> HttpGetQRCMjson(string strURI, string accept, out string strResponse)
        {
            string msg = string.Empty;
            strResponse = string.Empty;
            bool success = false;
            System.Net.HttpWebRequest req = null;

            try
            {
                req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
                req.ContentType = "application/json";
                req.Accept = accept;
                req.Method = "GET";
                req.Timeout = 60000;
                req.ReadWriteTimeout = 60000;

                using (HttpWebResponse resp = (HttpWebResponse)req.GetResponse())
                {
                    success = HttpStatusCodeCheck(resp, "GET", out strResponse);
                }

                req.Abort();
                return new Tuple<bool, string>(success, msg);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                strResponse = "";
                if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                {
                    msg = "Unable to connect to the remote server";
                }
                else
                {
                    msg = ex.Message;
                }

                if (req != null)
                    req.Abort();

                return new Tuple<bool, string>(success, msg);
            }
        }

        /// <summary>
        /// Convert string qrcmoutput into dictionary data using javascriptserializer and if method has error means save it as hasError return string
        /// </summary>
        /// <param name="qrcmOutput"></param>
        /// <param name="skipObject - If QRCM action main method execution means skip string to dictionary convertion. Only error returns"></param>
        /// <param name="actualJsonData - output data"></param>
        /// <param name="statuscode - metho execution status code"></param>
        /// <returns>If error means hasError return the error</returns>
        private string GetDataFromQRCMoutput(string qrcmOutput, bool skipObject, ref Dictionary<string, object> actualJsonData, ref int? statuscode)
        {
            string hasError = string.Empty;

            try
            {
                dynamic array = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(qrcmOutput);
                
                foreach (var item in array)
                {
                    if (item.Key == "error" && !string.IsNullOrEmpty(item.Value))
                    {
                        hasError = item.Value;
                    }
                    else if (item.Key == "QATdata")
                    {
                        object[] objectlist1 = item.Value as object[];

                        foreach (object obj in objectlist1)
                        {
                            if (skipObject)
                            {
                                if (obj != null && obj.GetType() == typeof(int))
                                {
                                    statuscode = Convert.ToInt32(obj);
                                }
                                else
                                {
                                    Dictionary<string, object> objdict = obj as Dictionary<string, object>;

                                    if (objdict != null)
                                    {
                                        Dictionary<string, object> objdict1 = new Dictionary<string, object>(objdict, StringComparer.OrdinalIgnoreCase);

                                        if (objdict1.ContainsKey("data"))
                                        {
                                            foreach (var actualData1 in objdict1)
                                            {
                                                if (actualData1.Key == "data")
                                                {
                                                    actualJsonData.Add("data", actualData1.Value);
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            actualJsonData.Add("data", obj);
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        actualJsonData.Add("data", obj);
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                if (obj != null && obj.GetType() == typeof(int))
                                {
                                    statuscode = Convert.ToInt32(obj);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                hasError = "Parsing JSON data to Dictionary failed";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return hasError;
        }

        private dynamic ReadAllLinesFromReferenceFile(string jsonData, string refOrPayload, int aqrcmID)
        {
            dynamic actualArray = null;

            try
            {
                dynamic array1 = new System.Web.Script.Serialization.JavaScriptSerializer().DeserializeObject(jsonData);
                Dictionary<string, object> treeviewToDictJsonData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                Dictionary<string, object> array = array1;

                if (array1 != null && array != null && refOrPayload == "Payload")
                {
                    if (array.ContainsKey("Action_" + aqrcmID))
                    {
                        actualArray = array["Action_" + aqrcmID];
                    }
                }
                else
                {
                    if (array.ContainsKey("Verification_" + aqrcmID))
                    {
                        actualArray = array["Verification_" + aqrcmID];
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return actualArray;
        }

        /// <summary>
        /// Read reference / Payload treeview file data and convert string to dynamic array. From dictionary, only checked values are filtered and saved in checkedtreeviewItems
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="skipLimit - If QRCM action means, Skip upper limit and lower limit read from payload"></param>
        /// <param name="primarycorename"></param>
        /// <param name="backupcorename"></param>
        /// <param name="refOrPayload - This is common method for action and verification.so this argument used for remarks"></param>
        /// <param name="checkedtreeviewItems - output parameter"></param>
        /// <param name="statusCode"></param>
        /// <param name="expectedValue - expected value saved like key and value"></param>
        /// <returns></returns>
        private Tuple<bool, string> GetReferenceJSONdata(int qrcmID, string filePath, bool skipLimit, Dictionary<string,string> pairedDUTdevices, string refOrPayload, ref Dictionary<string, object> checkedtreeviewItems, ref int? statusCode, ref List<string> expectedValue)
        {
            bool status = true;
            string remarks = string.Empty;

            try
            {
                if (File.Exists(filePath))
                {
                    using (StreamReader read = new StreamReader(filePath))
                    {
                        dynamic actualArrays = null;
                        string filepathOutput = string.Empty;
                        string totalactionlines = string.Empty;
                        while (actualArrays == null && (filepathOutput = read.ReadLine()) != null)
                        {
                            if (filepathOutput.Trim() == ":QAT_Ref_Pay:")
                            {
                                actualArrays = ReadAllLinesFromReferenceFile(totalactionlines, refOrPayload, qrcmID);
                                totalactionlines = string.Empty;
                            }
                            else
                            {
                                totalactionlines += filepathOutput.Trim();
                            }
                        }

                        if (actualArrays != null)
                        {
                            Dictionary<string, object> treeviewToDictJsonData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

                            foreach (var refvalues in actualArrays)
                            {
                                if (refvalues.Key == "QATStatusCode" && refvalues.Value != null)
                                {
                                    statusCode = Convert.ToInt32(refvalues.Value);
                                }
                                else if (refvalues.Key == "data-TreeChecked")
                                {
                                    treeviewToDictJsonData.Add(refvalues.Key, refvalues.Value);
                                }
                                else if (refvalues.Key == "data")
                                {
                                    treeviewToDictJsonData.Add("data", refvalues.Value);
                                    break;
                                }
                            }


                            ///Checked treeview items are filtered from full response
                            string[] checkedLimitValue = new string[3];

                            foreach (KeyValuePair<string, object> property in treeviewToDictJsonData)
                            {
                                bool isparentArray = false;
                                AddTokenNodes(property, property.Key, checkedtreeviewItems, ref isparentArray, ref checkedLimitValue, skipLimit, pairedDUTdevices, refOrPayload, ref expectedValue);
                            }
                        }
                        else
                        {
                            status = false;
                            remarks = refOrPayload + " is empty";
                        }
                    }
                }
                else
                {
                    status = false;
                    remarks = refOrPayload + " file not exist in server path";
                }
            }
            catch (Exception ex)
            {
                status = false;
                remarks = "Error occured in " + refOrPayload + " json parsing";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, string>(status, remarks);
        }

        #region Execution - Treechecked dictionary conversion
        /// <summary>
        /// From referencData, treeview checked data saved in checkedtreeitem. First it checks the data type. If data type is array AddArrayNodesToString method is passed. 
        /// else if data type is object AddObjectNodes function used and else data type is propery checkedtreeitem and expected value filled in the checkedtreeitem dictionary
        /// </summary>
        /// <param name="referenceData"></param>
        /// <param name="name - key name"></param>
        /// <param name="checkedtreeitem"></param>
        /// <param name="isparentArray - passed parent is array or not"></param>
        /// <param name="checkedLimitValue - Limit values are saved in checkedlimitvalue.  If TreeChecked true, limits and actual keypair value saved in checkedtreeitem"></param>
        /// <param name="skipLimit - If QRCM action means, Skip upper limit and lower limit read from payload"></param>
        /// <param name="primarycorename"></param>
        /// <param name="backupcorename"></param>
        /// <param name="expectedValue"></param>
        private void AddTokenNodes(KeyValuePair<string, object> referenceData, string name, Dictionary<string, object> checkedtreeitem, ref bool isparentArray, ref string[] checkedLimitValue, bool skipLimit, Dictionary<string, string> pairedDUTdevices, string refOrPayload, ref List<string> expectedValue)
        {
            try
            {
                if (referenceData.Value.GetType() == typeof(object[]))
                {
                    object[] refererncearraylist = referenceData.Value as object[];
                    AddArrayNodesToString(refererncearraylist, name, checkedtreeitem, pairedDUTdevices, refOrPayload, ref isparentArray, ref checkedLimitValue, skipLimit, ref expectedValue);
                }
                else if (referenceData.Value.GetType() == typeof(Dictionary<string, object>))
                {
                    Dictionary<string, object> refobject = referenceData.Value as Dictionary<string, object>;
                    Dictionary<string, object> referenceObject = new Dictionary<string, object>(refobject, StringComparer.OrdinalIgnoreCase);
                    AddObjectNodes(referenceObject, name, checkedtreeitem, pairedDUTdevices, refOrPayload, ref isparentArray, ref checkedLimitValue, skipLimit, ref expectedValue);
                }
                else
                {
                    if (name.EndsWith("-TreeChecked"))
                    {
                        checkedLimitValue[0] = "true";
                    }
                    else if (name.EndsWith("-UpLimit"))
                    {
                        checkedLimitValue[1] = referenceData.Value.ToString();
                    }
                    else if (name.EndsWith("-LowLimit"))
                    {
                        checkedLimitValue[2] = referenceData.Value.ToString();
                    }
                    else
                    {
                        if (checkedLimitValue[0] == "true")
                        {
                            if (skipLimit)
                            {
                                if (checkedLimitValue[1] != null)
                                    checkedtreeitem.Add(referenceData.Key + "-UpLimit", checkedLimitValue[1].ToString());

                                if (checkedLimitValue[2] != null)
                                    checkedtreeitem.Add(referenceData.Key + "-LowLimit", checkedLimitValue[2].ToString());
                            }

                            bool isPaired = false;
                            if (referenceData.Value.ToString().Trim().StartsWith("paired-", StringComparison.CurrentCultureIgnoreCase) && refOrPayload != "Payload")
                            {
                                if (pairedDUTdevices.Keys.Contains(referenceData.Value.ToString().Trim()))
                                {
                                    string deviceName = pairedDUTdevices[referenceData.Value.ToString().Trim()];
                                    checkedtreeitem.Add(referenceData.Key, deviceName);
                                    expectedValue.Add(referenceData.Key + ":" + deviceName);
                                    isPaired = true;
                                }
                            }
                            //if (referenceData.Value.ToString().Trim().StartsWith("paired-", StringComparison.CurrentCultureIgnoreCase))
                            //{
                            //    checkedtreeitem.Add(referenceData.Key, primarycorename);
                            //    expectedValue.Add(referenceData.Key + ":" + primarycorename);
                            //}
                            //else if (referenceData.Value.ToString().Trim().Equals("backup-paired", StringComparison.CurrentCultureIgnoreCase))
                            //{
                            //    checkedtreeitem.Add(referenceData.Key, backupcorename);
                            //    expectedValue.Add(referenceData.Key + ":" + backupcorename);
                            //}

                            if(!isPaired)
                            {
                                checkedtreeitem.Add(referenceData.Key, referenceData.Value.ToString());

                                List<string> expectedVal = new List<string>();
                                expectedVal.Add(referenceData.Key + ":" + referenceData.Value.ToString());

                                if (checkedLimitValue[1] != null)
                                    expectedVal.Add("Upper Limit:" + checkedLimitValue[1].ToString());

                                if (checkedLimitValue[2] != null)
                                    expectedVal.Add("Lower Limit:" + checkedLimitValue[2].ToString());

                                expectedValue.Add(string.Join(";", expectedVal));
                            }

                            if (skipLimit)
                            {
                                checkedtreeitem.Add(referenceData.Key + "QActual", string.Empty);
                                checkedtreeitem.Add(referenceData.Key + "QRCMstatus", string.Empty);
                                //items.Add(keypair.Key + "QRCMremarks", string.Empty);
                            }
                        }

                        checkedLimitValue = new string[3];
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// It first checks which array.Based on array type datas are added in checkedtreeitem. "QActual" and "QRCMstatus" added for comparision ouput and status
        /// </summary>
        /// <param name="referencearraylist - reference arraylist passed from main token function"></param>
        /// <param name="name - key name"></param>
        /// <param name="checkedtreeitem"></param>
        /// <param name="primarycorename"></param>
        /// <param name="backupcorename"></param>
        /// <param name="isParentArray - passed parent is array or not"></param>
        /// <param name="checkedLimitValue"></param>
        /// <param name="SkipLimit - If qrcm action means, "QActual" and "QRCMstatus" is skipped"></param>
        /// <param name="expectedValue"></param>
        private void AddArrayNodesToString(object[] referencearraylist, string name, Dictionary<string, object> checkedtreeitem, Dictionary<string, string> pairedDUTdevices, string refOrPayload, ref bool isParentArray, ref string[] checkedLimitValue, bool SkipLimit, ref List<string> expectedValue)
        {
            try
            {
                if (checkedLimitValue[0] == "true")
                {
                    List<object> val = new List<object>();
                    bool isArrayasstring = false;

                    if (referencearraylist.Count() > 0)
                    {
                        var refarray = referencearraylist[0] as Dictionary<string, object>;
                        ///If array null means it's a string array (server:["0.pool","1.pool"]) else its object array
                        if (refarray == null)
                        {
                            val = referencearraylist.ToList();
                            isArrayasstring = true;
                            expectedValue.Add(name + ":[" + string.Join(",", val) + "]");
                        }
                        else
                        {
                            for (var i = 0; i < referencearraylist.Count(); i++)
                            {
                                isParentArray = true;

                                Dictionary<string, object> newarraylist = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

                                checkedLimitValue[0] = "true";
                                AddTokenNodes(new KeyValuePair<string, object>(name, referencearraylist[i]), $"[{i}]", newarraylist, ref isParentArray, ref checkedLimitValue, SkipLimit, pairedDUTdevices, refOrPayload, ref expectedValue);
                                if (newarraylist.Count > 0)
                                    val.Add(newarraylist);
                            }
                        }
                    }

                    checkedtreeitem.Add(name, val.ToArray());

                    if (isArrayasstring && SkipLimit)
                    {
                        checkedtreeitem.Add(name + "QActual", string.Empty);
                        checkedtreeitem.Add(name + "QRCMstatus", string.Empty);
                    }

                    isParentArray = false;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Check parent is array or an object and based on that recursive will happen.
        /// </summary>
        /// <param name="referenceObject"></param>
        /// <param name="name"></param>
        /// <param name="checkedtreeitem"></param>
        /// <param name="primarycorename"></param>
        /// <param name="backupcorename"></param>
        /// <param name="isParentArray"></param>
        /// <param name="checkedLimitValue"></param>
        /// <param name="SkipLimit"></param>
        /// <param name="expectedValue"></param>
        public void AddObjectNodes(Dictionary<string, object> referenceObject, string name, Dictionary<string, object> checkedtreeitem, Dictionary<string, string> pairedDUTdevices, string refOrPayload, ref bool isParentArray, ref string[] checkedLimitValue, bool SkipLimit, ref List<string> expectedValue)
        {
            try
            {
                if (checkedLimitValue[0] == "true")
                {
                    checkedLimitValue = new string[3];

                    if (isParentArray)
                    {
                        ////From object array
                        isParentArray = false;

                        foreach (KeyValuePair<string, object> property in referenceObject)
                        {
                            AddTokenNodes(property, property.Key, checkedtreeitem, ref isParentArray, ref checkedLimitValue, SkipLimit, pairedDUTdevices, refOrPayload, ref expectedValue);
                        }
                    }
                    else
                    {
                        ///From array node
                        Dictionary<string, object> val = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

                        foreach (KeyValuePair<string, object> property in referenceObject)
                        {
                            AddTokenNodes(property, property.Key, val, ref isParentArray, ref checkedLimitValue, SkipLimit, pairedDUTdevices, refOrPayload, ref expectedValue);
                        }

                        //If this function from object need to add object list in checkeditem
                        if (val.Count > 0)
                            checkedtreeitem.Add(name, val);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #endregion

        /// <summary>
        /// Based on user given arguments(inputArguments based on index (argumentMappingIndex)) get actual input argument value using premethod output dictionary(premethodJsonData) recursive execution
        /// </summary>
        /// <param name="preMethodName"></param>
        /// <param name="inputArguments - user given input arguments"></param>
        /// <param name="argumentMappingIndex - to which index argument needs to map"></param>
        /// <param name="preMethodKey - Input argumets mapping key (Ex:name)"></param>
        /// <param name="methodActualKey - main method actual key mapping (Ex:guid) "></param>
        /// <param name="premethodJsonData - premethod output dictionary"></param>
        /// <returns></returns>
        private Tuple<bool, string, string> GetActualMethodInputArgument(string preMethodName, ref string inputArguments, int argumentMappingIndex, string preMethodKey, string methodActualKey, Dictionary<string, object> premethodJsonData)
        {
            bool status = true;
            string remarks = string.Empty;
            string inputArgOutput = string.Empty;

            try
            {
                string[] arg = Regex.Split(inputArguments, ":QAT_arg:");
                string premethodValue = string.Empty;

                if (arg.Count() >= argumentMappingIndex)
                {
                    premethodValue = arg[argumentMappingIndex - 1];

                    string[] premethodKeys = null;
                    if (preMethodKey.Contains(","))
                    {
                        string[] KeyValue = preMethodKey.Split(',');
                        premethodKeys = KeyValue.Last().Split('=');
                    }
                    else
                    {
                        premethodKeys = preMethodKey.Split('=');
                    }
                    
                    if (premethodKeys != null && premethodKeys.Count() > 1)
                    {
                        string[] keywithValue = new string[] { premethodKeys[0], premethodKeys[1], premethodValue };
                        string uniqueName = methodActualKey;

                        string[] response = new string[3];

                        ////recursive loop to get corresponding mapping key value
                        foreach (var premethodata in premethodJsonData)
                        {
                            if (string.IsNullOrEmpty(response[1]))
                                PreMethodInputArgumentsToken(premethodata, premethodata.Key, keywithValue, uniqueName, ref response);
                        }

                        if (!string.IsNullOrEmpty(response[2]))
                        {
                            inputArgOutput = arg[argumentMappingIndex - 1] = response[2];
                            inputArguments = string.Join(":QAT_arg:", arg);
                        }
                        else
                        {
                            status = false; remarks = "In " + preMethodName + " method, '" + premethodKeys.Last() + ":" + premethodValue + "' not found";
                        }
                    }
                    else
                    {
                        status = false; remarks = "Invalid premethodKey '" + preMethodKey + "' in " + preMethodName;
                    }
                }
                else
                {
                    status = false; remarks = "Invalid input argument '" + inputArguments + "' in " + preMethodName;
                }
            }
            catch (Exception ex)
            {
                status = false;
                remarks = "Couldn't able to get input argument from " + preMethodName;

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, string, string>(status, remarks, inputArgOutput);
        }

        /// <summary>
        /// For recursive, this is main method. In this method, based on premthoddata type the array and object nodes are passed. Else if the value will be propery, it checks for method property exist or not.
        /// </summary>
        /// <param name="prementhoddata"></param>
        /// <param name="headerName - parentname (ex: data)"></param>
        /// <param name="keywithValue - Premethodkey and premethodvalue saved as string array"></param>
        /// <param name="uniqueName - Actual method input argument"></param>
        /// <param name="response - it has 3 array. If Premethodkey and premethodvalue matches with prementhoddata value, response[0] th array will be true."></param>
        private static void PreMethodInputArgumentsToken(KeyValuePair<string, object> prementhoddata, string headerName, string[] keywithValue, string uniqueName, ref string[] response)
        {
            try
            {
                if (prementhoddata.Value.GetType() == typeof(object[]))
                {
                    object[] arraylist = prementhoddata.Value as object[];
                    PreMethodInputArgumentsArray(arraylist, prementhoddata.Key, keywithValue, uniqueName, ref response);
                }
                else if (prementhoddata.Value.GetType() == typeof(Dictionary<string, object>))
                {
                    Dictionary<string, object> objectlist = objectlist = prementhoddata.Value as Dictionary<string, object>;
                    var caseInsensitiveDictionary = new Dictionary<string, object>(objectlist, StringComparer.OrdinalIgnoreCase);
                    PreMethodInputArgumentsObjects(caseInsensitiveDictionary, prementhoddata.Key, keywithValue, uniqueName, ref response);
                }
                else
                {
                    if (headerName.Trim() == keywithValue[0].ToLower().Trim() && keywithValue[1].ToLower().Trim() == prementhoddata.Key.ToLower().Trim() && keywithValue[2].ToLower().Trim() == prementhoddata.Value.ToString().ToLower().Trim())
                    {
                        response[0] = "true";
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// If the data is object, each object in the obj list will execute recusively and get the uniquename corresponding output
        /// </summary>
        /// <param name="obj - object parameter passed"></param>
        /// <param name="headerName - parentname (ex: data)"></param>
        /// <param name="keywithValue - Premethodkey and premethodvalue saved as string array"></param>
        /// <param name="uniqueName - Actual method input argument"></param>
        /// <param name="response - it has 3 array. If Premethodkey and premethodvalue matches with prementhoddata value, response[0] th array will be true.
        /// If response[0] is true, then get corresponding main method value in response[2] and reponse [1] saved as true. Response[1] is used to skip further execution"></param>
        public static void PreMethodInputArgumentsObjects(Dictionary<string, object> obj, string headerName, string[] keywithValue, string uniqueName, ref string[] response)
        {
            try
            {
                if (string.IsNullOrEmpty(response[1]))
                {
                    foreach (KeyValuePair<string, object> property in obj.ToList())
                    {
                        PreMethodInputArgumentsToken(property, headerName, keywithValue, uniqueName, ref response);

                        if (response[0] == "true")
                        {
                            if (obj.Keys.Contains(uniqueName))
                            { response[1] = "true"; response[2] = obj[uniqueName].ToString(); }
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Each array int the arraylist will search the Premethodkey. If Output receives means (response[0] == "true" && response[1] == "true") means, break the arraylist
        /// </summary>
        /// <param name="arraylist"></param>
        /// <param name="headerName - parentname (ex: data)"></param>
        /// <param name="keywithValue - Premethodkey and premethodvalue saved as string array"></param>
        /// <param name="uniqueName - Actual method input argument"></param>
        /// <param name="response - it has 3 array. If Premethodkey and premethodvalue matches with prementhoddata value, response[0] th array will be true.
        /// If response[0] is true, then get corresponding main method value in response[2] and reponse [1] saved as true. Response[1] is used to skip further execution"></param>
        public static void PreMethodInputArgumentsArray(object[] arraylist, string headerName, string[] keywithValue, string uniqueName, ref string[] response)
        {
            try
            {
                if (string.IsNullOrEmpty(response[1]))
                {
                    for (var i = 0; i < arraylist.Count(); i++)
                    {
                        if (arraylist[i] != null)
                        {
                            PreMethodInputArgumentsToken(new KeyValuePair<string, object>(headerName, arraylist[i]), headerName, keywithValue, uniqueName, ref response);
                        }

                        if (response[0] == "true" && response[1] == "true") break;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #endregion

        /// <summary>
        /// Split uniquekey value and saved it as dictionary
        /// </summary>
        /// <param name="uniquekey (Ex:data=xx)"></param>
        /// <returns></returns>
        private Dictionary<string, string> GetQRCMJsonUniqueKeyValue(string uniquekey)
        {
            Dictionary<string, string> uniqueKeyval = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            try
            {
                if (!string.IsNullOrEmpty(uniquekey))
                {
                    string[] uniquekeys = Regex.Split(uniquekey, "\n");
                    foreach (string act in uniquekeys)
                    {
                        if (act.Contains(","))
                        {
                            string[] KeyValue = act.Split(',');
                            string[] KeyValue1 = KeyValue.Last().Split('=');
                            uniqueKeyval.Add(KeyValue1[0].Trim(), KeyValue1[1].Trim());
                        }
                        else
                        {
                            string[] KeyValue = act.Split('=');
                            uniqueKeyval.Add(KeyValue[0].Trim(), KeyValue[1].Trim());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return uniqueKeyval;
        }

        #endregion


        #region Execute QRCM Action
        private List<string> ExecuteQRCMAction(dynamic QRCM,int tcid, int tAId, int exid, string testSuiteName, string testPlanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string logPath, bool isQREM)
        {
            List<string> returnStatus = new List<string>();

            try
            {
                Int32[] TAID_array = TAID.ToArray();
                string query = "select Project_Name,Build_version,Reference_Version,Device_name,Device_model,Actual_method_name,Input_arguments,ReferenceFilePath,PayloadFilePath,HasPreMethod,PreMethodName,PreMethodUserKey,PreMethodActualKey,ArgumentMappingIndex,Reference_key,Payload_key,IsPayloadAvailable,QRCMActionID from QRCMAction where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tAId] + "') order by QRCMActionID asc";
                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();

                int actionCnt = 0;

                if (tble.Rows.Count > 0)
                {
                    while (read.Read())
                    {
                        actionCnt++;
                        Thread.Sleep(1000);

                        string starttime = DateTime.Now.ToString();

                        string deviceName = string.Empty;
                        if (read[3] != null)
                            deviceName = read[3].ToString();

                        string deviceModel = string.Empty;
                        if (read[4] != null)
                            deviceModel = read[4].ToString();

                        string ipaddr = string.Empty;
                        string currentToken = string.Empty;
                        string currentFirmwareVersion = string.Empty;
                        Dictionary<string, string> qremDevicedetails = new Dictionary<string, string>();
                        if (!isQREM)
                        {
                            if (deviceName == "Primary core" && !string.IsNullOrEmpty(selectedCoreIPAddress))
                            {
                                ipaddr = selectedCoreIPAddress;
                                currentToken = CoreLogonToken;
                                deviceName = XmlReadToGetDeviceName(selectedCoreIPAddress);
                                currentFirmwareVersion = core_New_FirmwareVersion.Item2;
                            }
                            else if (deviceName == "Backup core" && !string.IsNullOrEmpty(backup_selectedCoreIPAddress))
                            {
                                ipaddr = backup_selectedCoreIPAddress;
                                currentToken = CoreLogonToken_Backup;
                                deviceName = XmlReadToGetDeviceName(backup_selectedCoreIPAddress);
                                currentFirmwareVersion = Backup_core_New_FirmwareVersion.Item2;
                            }
                        }
                        else
                        {
                            if (deviceName == "Primary core" && selectedCoreSystemSiteID != null && selectedCoreSystemSiteID.Count() > 0)
                            {
                                qremDevicedetails.Add("core_id", selectedCoreSystemSiteID[1]);
                                qremDevicedetails.Add("system_id", selectedCoreSystemSiteID[2]);
                                qremDevicedetails.Add("site_id", selectedCoreSystemSiteID[3]);
                                deviceName = selectedCoreSystemSiteID[0];
                                currentFirmwareVersion = core_New_FirmwareVersion.Item2;
                            }
                            else if (deviceName == "Backup core" && BackupselectedCoreSystemSiteID != null && BackupselectedCoreSystemSiteID.Count() > 0)
                            {
                                qremDevicedetails.Add("core_id", BackupselectedCoreSystemSiteID[1]);
                                qremDevicedetails.Add("system_id", BackupselectedCoreSystemSiteID[2]);
                                qremDevicedetails.Add("site_id", BackupselectedCoreSystemSiteID[3]);
                                deviceName = BackupselectedCoreSystemSiteID[0];
                                currentFirmwareVersion = Backup_core_New_FirmwareVersion.Item2;
                            }
                        }

                        string actualmethodName = string.Empty;
                        if (read[5] != null)
                            actualmethodName = read[5].ToString().Trim();

                        bool status = true;
                        string remarks = string.Empty;
                        List<string> expectedValues = new List<string>();

                        string expectedValue = actualmethodName;
                        string measuredValue = actualmethodName + " failed";

                        if ((!isQREM && !string.IsNullOrEmpty(ipaddr) && ipaddr != "Not Applicable") || (isQREM && qremDevicedetails != null && qremDevicedetails.Count() > 0))
                        {
                            //string projectName = string.Empty;
                            //if (read[0] != null)
                            //    projectName = read[0].ToString();

                            //string buildVersion = string.Empty;
                            //if (read[1] != null)
                            //    buildVersion = read[1].ToString();

                            //string referenceVersion = string.Empty;
                            //if (read[2] != null)
                            //    referenceVersion = read[2].ToString();
                            
                            string inputArguments = string.Empty;
                            if (read[6] != null && read[6].ToString() != string.Empty)
                            {
                                inputArguments = read[6].ToString();
                                inputArguments = inputArguments.Replace(";", ":QAT_arg:");
                            }

                            //string referenceFilePath = string.Empty;
                            //if (read[7] != null)
                            //    referenceFilePath = read[7].ToString();

                            string payloadFilePath = string.Empty;
                            if (read[8] != null)
                                payloadFilePath = read[8].ToString();

                            bool hasPreMethod = false;
                            if (read[9] != null)
                                hasPreMethod = Convert.ToBoolean(read[9]);

                            string preMethodName = string.Empty;
                            if (read[10] != null)
                                preMethodName = read[10].ToString();

                            string preMethodKey = string.Empty;
                            if (read[11] != null)
                            {
                                /////Need to remove while release
                                //if(read[11].ToString().StartsWith("data="))
                                preMethodKey = read[11].ToString();
                                //preMethodKey = read[11].ToString();
                                //else
                                //	preMethodKey = "data="+ read[11].ToString();
                            }

                            string methodActualKey = string.Empty;
                            if (read[12] != null)
                                methodActualKey = read[12].ToString();

                            int argumentMappingIndex = 0;
                            if (read[13] != null)
                                argumentMappingIndex = Convert.ToInt32(read[13]);

                            //string referencekey = string.Empty;
                            //if (read[14] != null)
                            //    referencekey = read[14].ToString();

                            string payloadkey = string.Empty;
                            if (read[15] != null)
                                payloadkey = read[15].ToString();

                            bool isPayloadAvailable = false;
                            if (read[16] != null)
                                isPayloadAvailable = Convert.ToBoolean(read[16]);

                            int aqrcmID = 0;
                            if (read[17] != null)
                                aqrcmID = Convert.ToInt32(read[17]);

                            ///////////Premethod execution and premethod output string is converted into dictionary
                            Dictionary<string, object> premethodJsonData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                            if (hasPreMethod)
                            {
                                var preconditionstatus = ExecutePreMethod(QRCM,ipaddr, currentToken, preMethodName.Trim(), string.Empty, true, isQREM, qremDevicedetails, currentFirmwareVersion, ref remarks);
                                if (preconditionstatus.Item1)
                                {
                                        premethodJsonData = preconditionstatus.Item3;
                                }
                                else
                                { status = false; if (string.IsNullOrEmpty(remarks)) remarks = "Error in " + preMethodName + " method"; }
                            }

                            /////If Premethod true and main method has input arguments, based on user given arguments get actual input arguments using premethod output(premethodJsonData)
                            string preconditionOutput = string.Empty;
                            if (status && hasPreMethod && !string.IsNullOrEmpty(inputArguments))
                            {
                                if (!string.IsNullOrEmpty(methodActualKey))
                                {
                                    string duplicateInputArg = inputArguments;
                                    var inputArgOutput = GetActualMethodInputArgument(preMethodName.Trim(), ref duplicateInputArg, argumentMappingIndex, preMethodKey, methodActualKey, premethodJsonData);
                                    if (inputArgOutput.Item1)
                                    { preconditionOutput = inputArgOutput.Item3; inputArguments = duplicateInputArg; }
                                    else { status = inputArgOutput.Item1; remarks = inputArgOutput.Item2; }
                                }
                            }

                            ///////////Payload for execution and merge
                            string merged_payload = string.Empty;
                            if (status)
                            {
                                int? referencestatusCode = null;
                                string[] parameters = new string[] { payloadFilePath, inputArguments, payloadkey, methodActualKey, preconditionOutput };
                                merged_payload = GetMergedPayloadData(aqrcmID, premethodJsonData, hasPreMethod, isPayloadAvailable, parameters, ref referencestatusCode, ref expectedValues, ref status, ref remarks);
                                merged_payload = merged_payload.Replace(@"""False""", @"""false""");
                                merged_payload = merged_payload.Replace(@"""True""", @"""true""");
                            }

                            if (status)
                            {
                                //string mainuri = "http://" + Properties.Settings.Default.QRCMServerName + Properties.Settings.Default.QRCM_URIPort + "ip=" + ipaddr + "&method=" + actualmethodName + "&args=" + inputArguments + "&username=" + Properties.Settings.Default.DeviceUsername + "&password=" + applicationPassword;
                                //string qrcmOutput = string.Empty;
                               // var isPostsuccess = HttpPostjsonQRCM(mainuri, string.Empty, merged_payload, out qrcmOutput);
                               
                                List<string> argslist = new List<string>();
                                if (inputArguments != string.Empty)
                                    //argslist = (inputArguments.Split(new string[] { ":QAT_arg:" }, StringSplitOptions.None)).ToList();
                                argslist = Array.ConvertAll(inputArguments.Split(new string[] { ":QAT_arg:" }, StringSplitOptions.None), x => x.Trim()).ToList();


                                Tuple<bool, string> value = null;

                                if (isQREM)
                                {
                                    value = QRCM.QREM_HTTPAction(actualmethodName, qremDevicedetails, argslist, merged_payload);
                                }
                                else
                                {
                                    value = QRCM.QRCM_HTTPAction(actualmethodName, currentToken, ipaddr, argslist, merged_payload);
                                }

                                if (value.Item1)
                                {
                                    if (!string.IsNullOrEmpty(value.Item2))
                                    {
                                        ///////Saved in serverpath
                                        //string textfilepath = getpathforScriptLog(logPath, "QRCMAction");

                                        if (!string.IsNullOrEmpty(logPath))
                                        {
                                            if (!Directory.Exists(logPath))
                                            {
                                                Directory.CreateDirectory(logPath);
                                            }

                                            using (StreamWriter strwrite = new StreamWriter(logPath + @"\QRCM_RawOutput.txt", true))
                                            {
                                                strwrite.WriteLine("Action:" + actionCnt);
                                                strwrite.WriteLine(value.Item2);
                                            }
                                        }

                                        Dictionary<string, object> actualJsonData1 = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                                        int? actual_statusCode = null;
                                        string hasError1 = GetDataFromQRCMoutput(value.Item2, false, ref actualJsonData1, ref actual_statusCode);

                                        if (string.IsNullOrEmpty(hasError1))
                                        {
                                            //if ((referencestatusCode != null && actual_statusCode != null && actual_statusCode == referencestatusCode) || (actual_statusCode >= 200 && actual_statusCode <= 299))
                                            if (actual_statusCode >= 200 && actual_statusCode <= 299)
                                            {
                                                //if (referencestatusCode != null && actual_statusCode != null)
                                                //{
                                                //    expectedValue = referencestatusCode.ToString();
                                                //    measuredValue = actual_statusCode.ToString();
                                                //}

                                                measuredValue = actualmethodName + " successfully set";
                                                status = true;
                                                if (!isQREM && actualmethodName == "login")
                                                {
                                                   if( ipaddr == selectedCoreIPAddress)
                                                    CoreLogonToken = QRCM.QRCMLogonToken;
                                                   else if (ipaddr == backup_selectedCoreIPAddress)
                                                        CoreLogonToken_Backup = QRCM.QRCMLogonToken;
                                                }                                                   
											}
                                            else
                                            {
                                                status = false; remarks = "Status code mismatched";
                                            }

                                            //if (string.IsNullOrEmpty(remarks))
                                            //    remarks = System.Web.HttpUtility.HtmlEncode(qrcmOutput);
                                            //else
                                            //    remarks += System.Web.HttpUtility.HtmlEncode("<br/>" + qrcmOutput);
                                            if (!status)
                                            {
                                                if (string.IsNullOrEmpty(remarks))
                                                    remarks = value.Item2;
                                                else
                                                    remarks += "<br/>" + value.Item2;
                                            }
                                        }
                                        else
                                        {
                                            status = false; remarks = hasError1;
                                        }
                                    }
                                    else
                                    {
                                        remarks = "JSON Output is empty for " + actualmethodName;
                                    }
                                }
                                else
                                {
                                    status = false; remarks = value.Item2;
                                }
                            }
                        }
                        else
                        {
                            status = false;
                            remarks = deviceName + " device not available";
                        }

                        if (status == false)
                        {
                            returnStatus.Add("Fail");
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','QRCM Action:" + actionCnt + "',@remarks,'" + expectedValue + "','" + measuredValue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);
                        }
                        else
                        {
                            returnStatus.Add("Pass");
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','QRCM Action:" + actionCnt + "',@remarks,'" + expectedValue + "','" + measuredValue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return returnStatus;
        }
        
        /// <summary>
        /// User given payload is merged with reference payload
        /// </summary>
        /// <param name="premethodJsonData - Premethod output as in dictionary"></param>
        /// <param name="hasPreMethod"></param>
        /// <param name="isPayloadAvailable"></param>
        /// <param name="parameters"></param>
        /// <param name="referencestatusCode"></param>
        /// <param name="expectedValue"></param>
        /// <param name="status"></param>
        /// <param name="remarks"></param>
        /// <returns></returns>
        private string GetMergedPayloadData(int aqrcmID, Dictionary<string, object> premethodJsonData, bool hasPreMethod, bool isPayloadAvailable, string[] parameters, ref int? referencestatusCode, ref List<string> expectedValue, ref bool status, ref string remarks)
        {
            string merged_payload = string.Empty;

            try
            {
                string payloadFilePath = parameters[0];
                string inputArguments = parameters[1];
                string payloadkey = parameters[2];
                string methodActualKey = parameters[3];
                string preconditionOutput = parameters[4];
                //string primarydevicename = parameters[5];
                //string backupdevicename = parameters[6];

                if (status && hasPreMethod && isPayloadAvailable)
                {
                    if (!string.IsNullOrEmpty(payloadFilePath))
                    {
                        //payloadFilePath = Properties.Settings.Default.ServerPath + @"\QRCMAction\" + payloadFilePath;
                        payloadFilePath = Properties.Settings.Default.ServerPath + @"\QRCM_Files\" + payloadFilePath;

                        ///Read user given payload data as dictionary in checkedpayloadItems
                        Dictionary<string, object> checkedpayloadItems = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
                        var refStatus = GetReferenceJSONdata(aqrcmID, payloadFilePath, false, null, "Payload", ref checkedpayloadItems, ref referencestatusCode, ref expectedValue);

                        if (refStatus.Item1)
                        {
                            ///Split payloadkey value and saved it as dictionary
                            Dictionary<string, string> payloadKeyval = GetQRCMJsonUniqueKeyValue(payloadkey);
                            if (payloadkey != string.Empty && payloadKeyval.Count == 0)
                            {
                                status = false; remarks = "Empty payload Unique key value";
                            }
                            else
                            {
                                Dictionary<string, object> actualData = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

                                if (!string.IsNullOrEmpty(inputArguments) && !string.IsNullOrEmpty(methodActualKey))
                                {
                                    ///If reference payload is an arraylist and main method payload is single array means we need to split particular array from arraylist based on user given inputArguments
                                    foreach (KeyValuePair<string, object> keypair in premethodJsonData)
                                    {
                                        if (keypair.Key == "data")
                                        {
                                            object[] objArray = keypair.Value as object[];
                                            if (objArray != null)
                                            {
                                                foreach (object obj in objArray)
                                                {
                                                    Dictionary<string, object> originalPayloadarray = obj as Dictionary<string, object>;
                                                    Dictionary<string, object> originalPayloadarray1 = new Dictionary<string, object>(originalPayloadarray, StringComparer.OrdinalIgnoreCase);
                                                    if (originalPayloadarray1 != null && originalPayloadarray1.ContainsKey(methodActualKey) && originalPayloadarray1[methodActualKey].ToString() == preconditionOutput)
                                                    {
                                                        actualData.Add("data", originalPayloadarray1);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    actualData.Add("data", premethodJsonData["data"]);
                                }
                                
                                status = true;

                                ///Merge reference payload with premethod execution payload
                                foreach (KeyValuePair<string, object> actualkeypair in actualData.ToList())
                                {
                                    if (checkedpayloadItems.ContainsKey(actualkeypair.Key))
                                    {
                                        bool keypairAspropery = false;
                                        MergeTokenNodes(actualkeypair, actualkeypair.Key, checkedpayloadItems[actualkeypair.Key], payloadKeyval, actualkeypair.Key, ref remarks, ref status, ref keypairAspropery, actualData);
                                        if (keypairAspropery)
                                        {
                                            actualData[actualkeypair.Key] = checkedpayloadItems[actualkeypair.Key];
                                        }
                                    }
                                }

                                if (status)
                                {
                                    if (actualData.ContainsKey("data"))
                                    {
                                        merged_payload = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(actualData["data"]);
                                    }
                                    else
                                    {
                                        status = false; remarks = "Error while merging Payload";
                                    }
                                }
                            }
                        }
                        else
                        {
                            status = refStatus.Item1; remarks = refStatus.Item2;
                        }
                    }
                    else
                    {
                        status = false; remarks = "Payload filepath is empty";
                    }
                }
                else if (status && !hasPreMethod && isPayloadAvailable)
                {
                    if (!string.IsNullOrEmpty(payloadFilePath))
                    {
                        payloadFilePath = Properties.Settings.Default.ServerPath + @"\QRCM_Files\" + payloadFilePath;

                        ///////Payload read
                        Dictionary<string, object> checkedpayloadItems = new Dictionary<string, object>();
                        var refStatus = GetReferenceJSONdata(aqrcmID, payloadFilePath, false, null, "Payload", ref checkedpayloadItems, ref referencestatusCode, ref expectedValue);

                        if (refStatus.Item1)
                        {
                            if (checkedpayloadItems.ContainsKey("data"))
                            {
                                object insideData = checkedpayloadItems["data"];
                                merged_payload = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(insideData);
                            }
                        }
                        else
                        {
                            status = refStatus.Item1; remarks = refStatus.Item2;
                        }
                    }
                }
                else
                {
                    merged_payload = "None";
                }
            }
            catch (Exception ex)
            {
                merged_payload = string.Empty;
                status = false;
                remarks = "Error occured while merging payload data";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return merged_payload;
        }

        #region Merging Payload
        /// <summary>
        /// Based on keypair type actual and reference values are passed to the corresponding array and object method. If keypairAspropery matches reference value will asign to the actual value
        /// </summary>
        /// <param name="actualkeypair - Premethod json dictionary"></param>
        /// <param name="name - key name"></param>
        /// <param name="refpayloaditems - Reference json dictionary object"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="parentName"></param>
        /// <param name="remarks"></param>
        /// <param name="passfail"></param>
        /// <param name="keypairAspropery - If keypair is property, this value will be true and reference value will asign to the actual value"></param>
        /// <param name="parentNode"></param>
        private void MergeTokenNodes(KeyValuePair<string, object> actualkeypair, string name, object refpayloaditems, Dictionary<string, string> uniqueKeyval, string parentName, ref string remarks, ref bool passfail, ref bool keypairAspropery, Dictionary<string, object> parentNode)
        {
            try
            {
                if (passfail)
                {
                    if (actualkeypair.Value != null && actualkeypair.Value.GetType() == typeof(object[]))
                    {
                        object[] actualarraylist = actualkeypair.Value as object[];
                        object refarraylist = refpayloaditems as object;
                        MergeArrayNodes(actualarraylist, name, refarraylist, uniqueKeyval, ref remarks, ref passfail, parentNode);
                    }
                    else if (actualkeypair.Value != null && actualkeypair.Value.GetType() == typeof(Dictionary<string, object>))
                    {
                        Dictionary<string, object> actualobjectlist = actualkeypair.Value as Dictionary<string, object>;
                        object refobjectlist = refpayloaditems as object;
                        MergeObjectNodes(actualobjectlist, name, refobjectlist, uniqueKeyval, parentName, ref remarks, ref passfail);
                    }
                    else
                    {
                        keypairAspropery = true;
                    }
                }
            }
            catch (Exception ex)
            {
                passfail = false;
                remarks = "Error occured while merging JSON data";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        
        /// <summary>
        /// Each reference arrays are added to the acualarraylist
        /// </summary>
        /// <param name="actualarraylist"></param>
        /// <param name="name"></param>
        /// <param name="refitems"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="remarks"></param>
        /// <param name="passfail"></param>
        /// <param name="parentNode - If actualarraylist is null, we have to a this dicitionary is used to "></param>
        private void MergeArrayNodes(object[] actualarraylist, string name, object refitems, Dictionary<string, string> uniqueKeyval, ref string remarks, ref bool passfail, Dictionary<string, object> parentNode)
        {
            try
            {
                if (passfail)
                {
                    object[] referenceobjarray = refitems as object[];

                    if (uniqueKeyval.Keys.Contains(name))
                    {
                        if (referenceobjarray != null && referenceobjarray.Count() != 0)
                        {
                            for (int j = 0; j < referenceobjarray.Count(); j++)
                            {
                                bool hasvalue = false;
                                for (var i = 0; i < actualarraylist.Count(); i++)
                                {
                                    if (actualarraylist[i] != null)
                                    {
                                        Dictionary<string, object> actualdict = actualarraylist[i] as Dictionary<string, object>;
                                        if (actualdict != null)
                                        {
                                            Dictionary<string, object> referenceDict1 = referenceobjarray[j] as Dictionary<string, object>;
                                            Dictionary<string, object> referenceDict = new Dictionary<string, object>(referenceDict1, StringComparer.OrdinalIgnoreCase);

                                            if (actualdict.ContainsKey(uniqueKeyval[name]) && referenceDict.ContainsKey(uniqueKeyval[name]) && actualdict[uniqueKeyval[name]].ToString().Trim() == referenceDict[uniqueKeyval[name]].ToString().Trim())
                                            {
                                                hasvalue = true;
                                                bool keypairAspropery = false;
                                                MergeTokenNodes(new KeyValuePair<string, object>(name, actualarraylist[i]), $"[{i}]", referenceobjarray[j], uniqueKeyval, name, ref remarks, ref passfail, ref keypairAspropery, parentNode);

                                                if (passfail)
                                                    break;
                                            }
                                        }
                                    }
                                }

                                if (!hasvalue)
                                {
                                    Array.Resize<object>(ref actualarraylist, actualarraylist.Count() + 1);
                                    actualarraylist[actualarraylist.Count() - 1] = referenceobjarray[j];
                                    parentNode[name] = actualarraylist;
                                }
                            }
                        }
                    }
                    else
                    {
                        ///It checks for string array
                        bool IsActualArray = false;
                        bool isRefArray = false;
                        if (actualarraylist != null && actualarraylist.Count() > 0)
                        {
                            var singlearray = actualarraylist[0] as Dictionary<string, object>;
                            if (singlearray == null)
                            {
                                IsActualArray = true;
                            }
                        }


                        if (referenceobjarray != null && referenceobjarray.Count() > 0)
                        {
                            var singlerefarray = referenceobjarray[0] as Dictionary<string, object>;
                            if (singlerefarray == null)
                            {
                                isRefArray = true;
                                //var unionlist = actualarraylist.Union(referenceobjarray).ToArray();
                                //parentNode[name] = unionlist;
                                //parentNode[name] = referenceobjarray;
                            }
                        }
                            
                        if(IsActualArray && isRefArray)
                            parentNode[name] = referenceobjarray;
                        else
                        {
                            //If it is not an single array then fail the item
                            passfail = false;
                            remarks = "Erorr occured while merging data. Datatype is different";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                passfail = false;
                remarks = "Error occured while merging JSON data";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        /// <summary>
        /// Each object will merge in this function
        /// </summary>
        /// <param name="actualDict"></param>
        /// <param name="name"></param>
        /// <param name="items"></param>
        /// <param name="uniqueKeyval"></param>
        /// <param name="parentName"></param>
        /// <param name="remarks"></param>
        /// <param name="passfail"></param>
        public void MergeObjectNodes(Dictionary<string, object> actualDict, string name, object items, Dictionary<string, string> uniqueKeyval, string parentName, ref string remarks, ref bool passfail)
        {
            try
            {
                if (passfail)
                {
                    Dictionary<string, object> referenceDict1 = items as Dictionary<string, object>;
                    List<bool> status = new List<bool>();

                    if (referenceDict1 != null)
                    {
                        Dictionary<string, object> referenceDict = new Dictionary<string, object>(referenceDict1, StringComparer.OrdinalIgnoreCase);

                        foreach (KeyValuePair<string, object> property in referenceDict)
                        {
                            Dictionary<string, object> actualDict1 = new Dictionary<string, object>(actualDict, StringComparer.OrdinalIgnoreCase);

                            if (actualDict1 != null && actualDict1.ContainsKey(property.Key))
                            {
                                bool keypairAspropery = false;

                                MergeTokenNodes(new KeyValuePair<string, object>(property.Key, actualDict[property.Key]), property.Key, property.Value, uniqueKeyval, parentName, ref remarks, ref passfail, ref keypairAspropery, actualDict);
                                if (keypairAspropery)
                                {
                                    actualDict[property.Key] = referenceDict[property.Key];
                                }

                                status.Add(passfail);
                            }
                            else
                            {
                                actualDict.Add(property.Key, property.Value);
                            }
                        }
                    }

                    if (status.Contains(false))
                        passfail = false;
                }
            }
            catch (Exception ex)
            {
                passfail = false;
                remarks = "Error occured while merging JSON data";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #endregion

        #endregion




        private List<string> ExecuteUserAction(int tcid, int tAId, int exid, string testSuiteName, string testPlanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> returnStatus = new List<string>();
            string query = string.Empty;
            string starttime = DateTime.Now.ToString();
            try
            {
                List<string> user_action_text_list = new List<string>();
                Int32[] TAID_array = TAID.ToArray();
                query = "select * from UserAction where TCID = '" + tcid + "' and ActionID = '" + TAID_array[tAId] + "'";
                DataTable tbl = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tbl.CreateDataReader();
                while (read.Read())
                {
                    if (read[3] != System.DBNull.Value)
                        user_action_text_list.Add(read.GetString(3).Trim());
                }

                for (int actionCount = 0; actionCount < user_action_text_list.Count; actionCount++)
                {
                    starttime = DateTime.Now.ToString();
                    string ActionWithLoopValue = "User Action: " + (actionCount + 1);

                    var messageResult = ExecutionMessageBox(user_action_text_list[actionCount], "User action Alert", MessageBoxButton.OKCancel, MessageBoxImage.Warning);


                    if (messageResult.Item1 == MessageBoxResult.Cancel)
                    {
                        returnStatus.Add("Fail");
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', 'Action cancelled by user','USER action Success','USER action failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (messageResult.Item1 == MessageBoxResult.None)
                    {
                        returnStatus.Add("Fail");
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', 'USER Action Window closed by the user','USER action Success','USER action failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (messageResult.Item1 == MessageBoxResult.OK)
                    {
                        returnStatus.Add("Pass");
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + string.Empty + "','USER action Success','USER action Success','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }

            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                string remarks = "Error occurred, " + ex.Message;               
                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','User Action', @remarks,'USER action Success','USER action failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif                
            }
            return returnStatus;
        }
        
        private List<string> ExecuteUserVerification(int tcid, int tAId, int exid, string testSuiteName, string testPlanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> returnStatus = new List<string>();
            string query = string.Empty;
            string starttime = DateTime.Now.ToString();
            try
            {               
                List<string> user_Verify_text_list = new List<string>();
                Int32[] TAID_array = TAID.ToArray();
                query = "select * from UserVerification where TCID = '" + tcid + "' and ActionID = '" + TAID_array[tAId] + "'";
                DataTable tbl = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tbl.CreateDataReader();
                while (read.Read())
                {
                    if (read[3] != System.DBNull.Value)
                        user_Verify_text_list.Add(read.GetString(3).Trim());
                }


                for (int actionCount = 0; actionCount < user_Verify_text_list.Count; actionCount++)
                {
                    starttime = DateTime.Now.ToString();
                    string ActionWithLoopValue = "User Verification: " + (actionCount + 1);

                    var result = ExecutionMessageBox(user_Verify_text_list[actionCount], "User verification Alert", MessageBoxButton.OKCancel, MessageBoxImage.Warning);

                    if (result.Item1 == MessageBoxResult.Cancel)
                    {
                        returnStatus.Add("Fail");
                        string remarks = string.Empty;
                        if (result.Item2 != null && result.Item2.Trim() != string.Empty)
                            remarks = result.Item2.Trim();
                        else
                            remarks = "No remarks by user";

                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', @remarks,'USER verification Success','USER verification failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);
                    }
                    else if (result.Item1 == MessageBoxResult.None)
                    {
                        returnStatus.Add("Fail");
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', 'USER verification Window closed by the user','USER verification Success','USER verification failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else if (result.Item1 == MessageBoxResult.OK)
                    {
                        returnStatus.Add("Pass");
                        string remarks = result.Item2.Trim();                    

                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@remarks ,'USER verification Success','USER verification Success','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);
                    }
                }
                       

            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                string remarks = "Error occurred, " + ex.Message;
                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','User Verification', @remarks,'USER verification Success','USER verification failed','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testSuiteName, "@TPName", testPlanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", remarks, string.Empty, string.Empty);

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif                
            }
            return returnStatus;
        }

        private List<string> ExecuteScriptVerification(int tcid, int tAId, int exid, string Testsuitename, string Testplanname, string testcasename, string Testactionname, string Date_time_Suite, string Qsys_firmware, string rerun, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string logPath)
        {
            List<string> returnStatus = new List<string>();

            try
            {
                Int32[] TAID_array = TAID.ToArray();
                string query = "select * from ScriptVerification where TCID = '" + tcid + "' and ActionID = '" + TAID_array[tAId] + "'";
                DataTable tbl = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tbl.CreateDataReader();
                List<TestScriptVerification> scriptItemLst = new List<TestScriptVerification>();
                bool exeutionIteration = false;
                string chkEveryTime = string.Empty;
                string chkEveryTimeUnit = string.Empty;
                string durationTime = string.Empty;
                string durationTimeUnit = string.Empty;

                while (read.Read())
                {
                    TestScriptVerification deviceDetails = new QSC_Test_Automation.TestScriptVerification();

                    if (read[3] != null && read[3].ToString() != string.Empty)
                        deviceDetails.DevicenamelistSelectedItem = read[3].ToString();

                    if (read[4] != null && read[4].ToString() != string.Empty)
                        deviceDetails.DeviceModel = read[4].ToString();

                    if (read[5] != null && read[5].ToString() != string.Empty && (read[5].ToString().StartsWith("CPU Monitoring")))
                    {
                        string[] cpuVal = read[5].ToString().Split('-');
                        deviceDetails.VerifyScriptActionSelectedItem = cpuVal[0];
                        if(cpuVal.Count() > 1)
							deviceDetails.CPUNumberSelectedItem = cpuVal[1];
                    }
                    else
                        deviceDetails.VerifyScriptActionSelectedItem = read[5].ToString();

                    //if (read[5] != null && read[5].ToString() != string.Empty)
                    //    deviceDetails.VerifyScriptActionSelectedItem = read[5].ToString();

                    if (read[6] != null && read[6].ToString() != string.Empty)
                        deviceDetails.CustomCommand = read[6].ToString();

                    if (read[7] != null && read[7].ToString() != string.Empty)
                        deviceDetails.RegexMatch = read[7].ToString();

                    if (read[8] != null && read[8].ToString() != string.Empty)
                        deviceDetails.Upperlimit = read[8].ToString();

                    if (read[9] != null && read[9].ToString() != string.Empty)
                        deviceDetails.Lowerlimit = read[9].ToString();

                    if (read[10] != null && read[10].ToString() != string.Empty)
                        deviceDetails.LimitUnitSelectedItem = read[10].ToString();

                    if (read[15] != null && read[15].ToString() != string.Empty)
                        deviceDetails.VerifyDesignDevicesIsChecked = Convert.ToBoolean(read[15]);
                    
                    scriptItemLst.Add(deviceDetails);

                    if (read[16] != null && read[16].ToString() != string.Empty)
                        exeutionIteration = Convert.ToBoolean(read[16]);

                    if (read[11] != null && read[11].ToString() != string.Empty)
                        chkEveryTime = read[11].ToString();

                    if (read[12] != null && read[12].ToString() != string.Empty)
                        chkEveryTimeUnit = read[12].ToString();

                    if (read[13] != null && read[13].ToString() != string.Empty)
                        durationTime = read[13].ToString();

                    if (read[14] != null && read[14].ToString() != string.Empty)
                        durationTimeUnit = read[14].ToString();
                }

                if (scriptItemLst.Count > 0)
                {
                    Dictionary<string, string[]> networkDeviceList = new Dictionary<string, string[]>();

                    ArrayList AvailableDeviceListScript = DeviceDiscovery.AvailableDeviceList;
                    foreach (string item in AvailableDeviceListScript)
                    {
                        string[] splitvalues = item.Split(',');

                        if (!networkDeviceList.Keys.Contains(splitvalues[1].ToLower()) && !string.IsNullOrEmpty(splitvalues[1].ToLower()) && (!string.IsNullOrEmpty(splitvalues[2].ToLower()) || !string.IsNullOrEmpty(splitvalues[3].ToLower())))
                            networkDeviceList.Add(splitvalues[1].ToLower(), new string[] { splitvalues[0].ToLower(), splitvalues[2].ToLower(), splitvalues[3].ToLower() });
                    }

                    returnStatus = scriptExecution(exid, scriptItemLst, networkDeviceList, Testsuitename, Testplanname, testcasename, Testactionname, exeutionIteration, chkEveryTime, chkEveryTimeUnit, durationTime, durationTimeUnit, Date_time_Suite, Qsys_firmware, rerun, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID,SuiteExecutionUniqueID, logPath);
                }
            }
            catch (Exception ex)
            { //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return returnStatus;
        }

        private List<string> scriptExecution(int executionId, List<TestScriptVerification> scriptItemLst, Dictionary<string, string[]> networkDeviceList, string testsuitename, string testplanname, string testcasename, string testactionname, bool executionIteration, string chkEveryTime, string chkEveryTimeUnit, string durationTime, string durationTimeUnit, string Date_time_Suite, string Qsys_firmware, string rerun, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string logPath)
        {
            CultureInfo ci = CultureInfo.CreateSpecificCulture(CultureInfo.CurrentCulture.Name);
            ci.DateTimeFormat.ShortDatePattern = "MM-dd-yyyy";
            Thread.CurrentThread.CurrentCulture = ci;
            System.Data.DataTable tble = null;
            string fullRemarks = string.Empty;
            string remarks = string.Empty;
            string status = "In Progress";
            string tabstartTime = DateTime.Now.ToString();
            string execidTabname = string.Empty;
            string deviceName = string.Empty;
            string ipAddr = string.Empty;
            string deviceModel = string.Empty;
            List<string> runstatus = new List<string>();
            int iteration = 1;
            string actionCnt = "Script Verification";
            string originalLogPath = string.Empty;

            try
            {
                GrafanaExecution grafanaExecution = new GrafanaExecution();

                foreach (TestScriptVerification scripItem in scriptItemLst)
                {
                    string selectedIPAddr = string.Empty;
                    string selecteddevicemodel = string.Empty;

                    if (scripItem.VerifyScriptActionSelectedItem == "CPU Monitoring" || scripItem.VerifyScriptActionSelectedItem == "Deploy Monitoring" || scripItem.VerifyScriptActionSelectedItem == "LoadFromCore Monitoring")
                    {
                        selectedIPAddr = selectedCoreIPAddress;
                        selecteddevicemodel = "Core";
                        scripItem.DevicenamelistSelectedItem = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedIPAddr, selectedDutDeviceItemList);
                    }
                    else if (networkDeviceList.Keys.Contains(scripItem.DevicenamelistSelectedItem.ToLower()))
                    {
                        selecteddevicemodel = networkDeviceList[scripItem.DevicenamelistSelectedItem.ToLower()][0];

                        if (networkDeviceList[scripItem.DevicenamelistSelectedItem.ToLower()][1] != string.Empty)
                            selectedIPAddr = networkDeviceList[scripItem.DevicenamelistSelectedItem.ToLower()][1];
                    }
                    else
                    {
                        scripItem.NotAvailableDeviceList.Add(scripItem.DevicenamelistSelectedItem);
                    }

                    if (!scripItem.DeviceWithIP.Keys.Contains(scripItem.DevicenamelistSelectedItem))
                        scripItem.DeviceWithIP.Add(scripItem.DevicenamelistSelectedItem, new string[] { selectedIPAddr, selecteddevicemodel });

                    scripItem.BuildVersion = XmlReadToGetDesignversion(selectedIPAddr);

                    if (scripItem.VerifyDesignDevicesIsChecked && selecteddevicemodel.ToLower().StartsWith("core"))
                    {
                        string password = Properties.Settings.Default.DevicePassword;

                        if (passwordRestoreblank.Keys.Contains(selectedIPAddr) || passwordRestore.Keys.Contains(selectedIPAddr))
                        {
                            password = applicationPassword;
                        }

                        //////////Get Inventory
                        var inventDetails = GetCoreInventoryDetails(selectedIPAddr, password);

                        string primaryName = inventDetails.Item1;
                        string backupName = inventDetails.Item2;
                        List<string[]> inventoryDevices = inventDetails.Item3;

                        /////////Get network peripherals original name using device pairing
                        bool isNewversion = firmwareVersioncheckGeneral(scripItem.BuildVersion, "fromScript");

                        var originalNameDetails = GetDesignInventoryOriginalName(selectedIPAddr, isNewversion, scripItem.DevicenamelistSelectedItem, password);
                        Dictionary<string, string> deviceNamewithOriginalName = originalNameDetails.Item1;

                        if (!string.IsNullOrEmpty(primaryName) || !string.IsNullOrEmpty(backupName))
                        {
                            if (!string.IsNullOrEmpty(primaryName))
                                deviceNamewithOriginalName.Add("Core-Primary", primaryName);

                            if (!string.IsNullOrEmpty(backupName))
                                deviceNamewithOriginalName.Add("Core-Backup", backupName);

                            scripItem.NotAvailableDeviceList = GetAlldeviceIPAddress(scripItem, inventoryDevices, deviceNamewithOriginalName, networkDeviceList, scripItem.NotAvailableDeviceList);
                        }
                        else if (inventoryDevices.Count == 0)
                            scripItem.HasInventory = false;
                    }
                }

                ////get delay time
                int delay = 0;
                if (!string.IsNullOrEmpty(chkEveryTime) && chkEveryTimeUnit == "Sec")
                    delay = Convert.ToInt32(chkEveryTime) * 1000;
                if (!string.IsNullOrEmpty(chkEveryTime) && chkEveryTimeUnit == "Min")
                    delay = Convert.ToInt32(chkEveryTime) * 60 * 1000;
                if (!string.IsNullOrEmpty(chkEveryTime) && chkEveryTimeUnit == "Hour")
                    delay = Convert.ToInt32(chkEveryTime) * 60 * 60 * 1000;

                DateTime checktime = DateTime.Now;
                if (!string.IsNullOrEmpty(durationTime) && durationTimeUnit == "Hour")
                    checktime = DateTime.Now.AddHours(Convert.ToInt32(durationTime));
                if (!string.IsNullOrEmpty(durationTime) && durationTimeUnit == "Min")
                    checktime = DateTime.Now.AddMinutes(Convert.ToInt32(durationTime));
                if (!string.IsNullOrEmpty(durationTime) && durationTimeUnit == "Day")
                    checktime = DateTime.Now.AddDays(Convert.ToInt32(durationTime));

                //if (executionIteration)
                //    enableTimer(checktime, durationTimeUnit);


                tabstartTime = DateTime.Now.ToString();
                string[] strResponseArray = new string[0];
                string response = string.Empty;
                List<bool> isBreak = new List<bool>();
                //int MailFailedCount = 1;
                bool isSecondTime = false;
                string query = string.Empty;
                Dictionary<string, string[]> scriptDic = new Dictionary<string, string[]>();
                string tmpPath = string.Empty;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    tmpPath = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + executionId.ToString();
                }
                else
                {
                    tmpPath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + executionId.ToString();
                }

                while ((checktime > DateTime.Now && isBreak.Count != scriptItemLst.Count) || !executionIteration)
                {
                    if (isSecondTime)
                        Thread.Sleep(delay);

                    int scriptTabcnt = 0;
                    isBreak.Clear();

                    foreach (TestScriptVerification scripItem in scriptItemLst)
                    {
                        if (!scripItem.SkipExecution)
                        {
                            fullRemarks = string.Empty;
                            remarks = string.Empty;
                            string actualValue = string.Empty;
                            actionCnt = "Script Verification : " + (scriptItemLst.IndexOf(scripItem) + 1);

                            if (scripItem.HasInventory)
                            {
                                scriptTabcnt++;
                                execidTabname = executionId + testactionname + tabstartTime;
                                Thread.Sleep(1000);

                                if (scripItem.VerifyScriptActionSelectedItem == "CPU Monitoring")
                                {
                                    originalLogPath = string.Empty;
                                    actualValue = "Not Applicable";
                                    response = "Not Applicable";
                                    remarks = string.Empty;
                                    tabstartTime = DateTime.Now.ToString();
                                    execidTabname = executionId + testactionname + tabstartTime;

                                    if (selectedCoreIPAddress != string.Empty)
                                        ipAddr = selectedCoreIPAddress;

                                    if (!string.IsNullOrEmpty(ipAddr))
                                    {
                                        deviceName = scripItem.DevicenamelistSelectedItem;

                                        List<string> cpuNumber = new List<string>();

                                        if (string.IsNullOrEmpty(scripItem.CPUNumberSelectedItem)) { cpuNumber.Add("0");}
                                        else if (scripItem.CPUNumberSelectedItem == "All") { cpuNumber.Add("0"); cpuNumber.Add("1"); cpuNumber.Add("2"); cpuNumber.Add("3"); }
                                        else { cpuNumber.Add(scripItem.CPUNumberSelectedItem); }

                                        string textfilepath = getpathforScriptLog(logPath, "Script_" + (scriptItemLst.IndexOf(scripItem) + 1));
                                        string serverPath = QatConstants.QATServerPath + "\\Logs" + "\\" + executionId.ToString();
                                        originalLogPath = textfilepath.Remove(0, serverPath.Length);
                                        List<string> remarksList = new List<string>();
                                        string[] logAvg = new string[] { "log", "Avg" };

                                        foreach (string cpunumbertext in cpuNumber)
                                        {
                                            for (int i = 0; i < logAvg.Count(); i++)
                                            {
                                                string logTxt = string.Empty;
                                                bool isRemarksexist = false;

                                                var webOut = WebClientDownloadCPU(ipAddr, cpunumbertext, logAvg[i], scripItem.DevicenamelistSelectedItem);
                                                logTxt = webOut.Item1;
                                                if(webOut.Item3 == "Fail")
                                                {
                                                    remarksList.Add(webOut.Item2);
                                                    isRemarksexist = true;
                                                    status = "Fail";
                                                    runstatus.Add(status);
                                                }                                                
                                                
                                                if (!string.IsNullOrEmpty(logTxt))
                                                {
                                                    string tempPath = tmpPath + "\\CPU";
                                                    if(!Directory.Exists(tempPath))
                                                    {
                                                        Directory.CreateDirectory(tempPath);
                                                    }

                                                    string scriptPath = tempPath + @"\" + deviceName + "_CPU" + cpunumbertext + "_" + logAvg[i] + ".txt";
                                                    FileInfo file = new FileInfo(scriptPath);
                                                    var tmpOut = StreamwritertotempServer(scriptPath, logTxt, logAvg[i], scripItem.DevicenamelistSelectedItem, cpunumbertext, "temp");

                                                    if (tmpOut.Item2 == "Fail")
                                                    {
                                                        remarksList.Add(tmpOut.Item1);
                                                        status = "Fail";
                                                        runstatus.Add(status);
                                                        try { file.Delete(); }catch(Exception ex) { }
                                                    }
                                                    else
                                                    {
                                                        string grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "CPU" + cpunumbertext + "_" + logAvg[i], scripItem.BuildVersion, desgnname, scriptPath);

                                                        if (!string.IsNullOrEmpty(grafanaremarks))
                                                        {
                                                            remarksList.Add(grafanaremarks);
                                                            status = "Fail";
                                                            runstatus.Add(status);
                                                        }

                                                        try
                                                        {
                                                            string scriptserverPath = textfilepath + @"\" + deviceName + "_CPU" + cpunumbertext + "_" + logAvg[i] + ".txt";
                                                            file.CopyTo(scriptserverPath);
                                                            file.Delete();
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            remarksList.Add(deviceName + "_CPU" + cpunumbertext + "_" + logAvg[i] + ".txt" + " - Failed to move datapoints from temp path to server path");
                                                            status = "Fail";
                                                            runstatus.Add(status);
                                                        }

                                                        //var serverOut = StreamwritertotempServer(textfilepath + @"\" + deviceName + "_CPU" + cpunumbertext + "_" + logAvg[i] + ".txt", logTxt, logAvg[i], scripItem.DevicenamelistSelectedItem, cpunumbertext, "Server");
                                                        //if (serverOut.Item2 == "Fail")
                                                        //{
                                                        //    remarksList.Add(serverOut.Item1);
                                                        //    status = "Fail";
                                                        //    runstatus.Add(status);
                                                        //}
                                                    }
                                                }
                                                else if (!isRemarksexist)
                                                {
                                                    if (logAvg[i] == "Avg")
                                                        remarksList.Add(scripItem.DevicenamelistSelectedItem + " - " + "CPU " + cpunumbertext + " average log is empty");
                                                    else
                                                        remarksList.Add(scripItem.DevicenamelistSelectedItem + " - " + "CPU " + cpunumbertext + " log is empty");

                                                    status = "Fail";
                                                    runstatus.Add(status);
                                                    //scripItem.SkipExecution = true;
                                                    //isBreak.Add(true);
                                                }
                                            }
                                        }

                                        if (remarksList.Count == 0)
                                        {
                                            status = "Pass";
                                            runstatus.Add(status);
                                        }
                                        else
                                        {
                                            remarks = string.Join("<br/>", remarksList);
                                        }
                                    }
                                    else
                                    {
                                        remarks = scripItem.DevicenamelistSelectedItem + " - " + "Not available in the network";
                                        status = "Fail";
                                        runstatus.Add(status);
                                        scripItem.SkipExecution = true;
                                        isBreak.Add(true);
                                    }
                                }
                                else if (scripItem.VerifyScriptActionSelectedItem == "Deploy Monitoring")
                                {
                                    originalLogPath = string.Empty;
                                    actualValue = "Not Applicable";
                                    tabstartTime = DateTime.Now.ToString();
                                    execidTabname = executionId + testactionname + tabstartTime;

                                    string tempPath = tmpPath + @"\Designer";

                                    if (Directory.Exists(tempPath))
                                    {
                                        bool isfileExist = false;
                                        DirectoryInfo info = new DirectoryInfo(tempPath);
                                        var val = info.GetFiles().Where(file => file.Name.Contains("Total"));
                                        if (val.Count() > 0)
                                        {
                                            List<string> remarksLst = new List<string>();
                                            foreach (var file in info.GetFiles())
                                            {
                                                string textfilepath = getpathforScriptLog(logPath, "Script_" + (scriptItemLst.IndexOf(scripItem) + 1));
                                                string serverPath = QatConstants.QATServerPath + "\\Logs" + "\\" + executionId.ToString();
                                                originalLogPath = textfilepath.Remove(0, serverPath.Length);

                                                string grafanaremarks = string.Empty;

                                                if (file.Name.ToLower().Contains("compile"))
                                                    grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "Deploy_Compile", scripItem.BuildVersion, desgnname, file.FullName);
                                                if (file.Name.ToLower().Contains("upload"))
                                                    grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "Deploy_Upload", scripItem.BuildVersion, desgnname, file.FullName);
                                                if (file.Name.ToLower().Contains("ok"))
                                                    grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "Deploy_Ok", scripItem.BuildVersion, desgnname, file.FullName);
                                                if (file.Name.ToLower().Contains("total"))
                                                    grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "Deploy_Total", scripItem.BuildVersion, desgnname, file.FullName);

                                                if (!string.IsNullOrEmpty(grafanaremarks))
                                                {
                                                    remarksLst.Add(file.Name + " - " + grafanaremarks);
                                                    status = "Fail";
                                                    runstatus.Add(status);
                                                }
                                                
                                                try
                                                {
                                                    string deployPath = textfilepath + @"\" + file.Name;
                                                    file.CopyTo(deployPath);
                                                    isfileExist = true;
                                                    file.Delete();
                                                }
                                                catch (Exception ex)
                                                {
                                                    remarksLst.Add(file.Name + " - Failed to move datapoints from temp path to server path");
                                                    status = "Fail";
                                                    runstatus.Add(status);
                                                    scripItem.SkipExecution = true;
                                                    isBreak.Add(true);
                                                }
                                            }

                                            if(remarksLst.Count > 0)
                                                remarks = string.Join("<br/>", remarksLst);
                                        }

                                        if(!isfileExist)
                                        {
                                            remarks = "Deploy monitoring data not available in temp path";
                                            status = "Fail";
                                            runstatus.Add(status);
                                            scripItem.SkipExecution = true;
                                            isBreak.Add(true);
                                        }
                                        else
                                        {
                                            runstatus.Add("Pass");
                                            status = "Pass";
                                        }
                                    }
                                    else
                                    {
                                        remarks = "Deploy monitoring folder not available in temp path";
                                        status = "Fail";
                                        runstatus.Add(status);
                                        scripItem.SkipExecution = true;
                                        isBreak.Add(true);
                                    }
                                }
                                else if (scripItem.VerifyScriptActionSelectedItem == "LoadFromCore Monitoring")
                                {
                                    originalLogPath = string.Empty;
                                    actualValue = "Not Applicable";
                                    tabstartTime = DateTime.Now.ToString();
                                    execidTabname = executionId + testactionname + tabstartTime;

                                    ////Directory check
                                    ///------------Need to remove
                                    //tmpPath = @"F:\";
                                    DirectoryInfo dir = new DirectoryInfo(tmpPath + @"\LFC\");

                                    if (Directory.Exists(dir.FullName))
                                    {
                                        var filecount = dir.GetFiles().Count();
                                        if (filecount == 1)
                                        {
                                            foreach (var file in dir.GetFiles())
                                            {
                                                //FileInfo fileinfo = new FileInfo(file.GetFiles(0))
                                                if (File.Exists(file.FullName))
                                                {
                                                    string textfilepath = getpathforScriptLog(logPath, "Script_" + (scriptItemLst.IndexOf(scripItem) + 1));
                                                    string serverPath = QatConstants.QATServerPath + "\\Logs" + "\\" + executionId.ToString();
                                                    originalLogPath = textfilepath.Remove(0, serverPath.Length);

                                                    string grafanaremarks = grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabstartTime, testactionname, "LoadFromCore", scripItem.BuildVersion, desgnname, file.FullName);
                                                    if (!string.IsNullOrEmpty(grafanaremarks))
                                                    {
                                                        remarks = grafanaremarks;
                                                        status = "Fail";
                                                        runstatus.Add(status);
                                                    }

                                                    try
                                                    {
                                                        string deployPath = textfilepath + @"\" + file.Name;
                                                        file.CopyTo(deployPath);
                                                        file.Delete();
                                                        status = "Pass";
                                                        runstatus.Add(status);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        remarks = "Failed to move datapoints from temp path to server path";
                                                        status = "Fail";
                                                        runstatus.Add(status);
                                                    }
                                                }
                                                else
                                                {
                                                    remarks = "Load from core monitoring data not available in temp path";
                                                    status = "Fail";
                                                    runstatus.Add(status);
                                                }

                                                break;
                                            }
                                        }
                                        else if(filecount > 1)
                                        {
                                            remarks = "Number of 'Load from core monitoring' file in the temp path is greater than one";
                                            status = "Fail";
                                            runstatus.Add(status);
                                        }
                                        else
                                        {
                                            remarks = "Load from core monitoring data not available in temp path";
                                            status = "Fail";
                                            runstatus.Add(status);
                                        }
                                    }
                                    else
                                    {
                                        remarks = "Load From Core monitoring folder not available in temp path";
                                        status = "Fail";
                                        runstatus.Add(status);
                                    }
                                }
                                else
                                {
                                    if(!scriptDic.Keys.Contains(actionCnt))
                                        tabstartTime = DateTime.Now.ToString();

                                    string sshcommand = scripItem.CustomCommand;

                                    if (!string.IsNullOrEmpty(scripItem.Upperlimit) && !string.IsNullOrEmpty(scripItem.Lowerlimit))
                                        actualValue = "Upperlimit: " + scripItem.Upperlimit + ", Lowerlimit: " + scripItem.Lowerlimit;
                                    else if (string.IsNullOrEmpty(scripItem.Upperlimit))
                                        actualValue = "Upperlimit: No limit, Lowerlimit: " + scripItem.Lowerlimit;
                                    else if (string.IsNullOrEmpty(scripItem.Lowerlimit))
                                        actualValue = "Upperlimit: " + scripItem.Upperlimit + ", Lowerlimit: No limit";

                                    string textfilepath = getpathforScriptLog(logPath, "Script_" + (scriptItemLst.IndexOf(scripItem) + 1));
                                    //string[] filePath = Regex.Split(textfilepath, QatConstants.QATServerPath + "\\Logs" + "\\" + executionId.ToString());
                                    string serverPath = QatConstants.QATServerPath + "\\Logs" + "\\" + executionId.ToString();
                                    originalLogPath = textfilepath.Remove(0, serverPath.Length);

                                    if (scripItem.DeviceWithIP.Count > 0)
                                    {
                                        foreach (var devicedetail in scripItem.DeviceWithIP)
                                        {
                                            remarks = string.Empty;
                                            deviceName = devicedetail.Key;
                                            ipAddr = devicedetail.Value[0];
                                            deviceModel = devicedetail.Value[1];

                                            int sshIteration = 0;

                                            retry_sending_command:

                                            sshIteration++;

                                            DeviceDiscovery.WriteToLogFile("Sending Ssh command " + sshcommand + " to ip address " + ipAddr);
                                            ssh SSHClient = new ssh();
                                            bool issshsuccess = SSHClient.session(ipAddr, sshcommand, sshPrivatekeyFilePath, out strResponseArray);
                                            if (strResponseArray[2] != null && strResponseArray[2] != string.Empty)
                                                sshPrivatekeyFilePath = strResponseArray[2];

                                            if (issshsuccess)
                                            {
                                                if (strResponseArray[0] != null && strResponseArray[0] != string.Empty)
                                                {
                                                    Tuple<bool, string, string> result = new Tuple<bool, string, string>(false, string.Empty, string.Empty);
                                                    result = Regexcompare(scripItem.RegexMatch, scripItem.VerifyScriptActionSelectedItem, scripItem.Lowerlimit, scripItem.Upperlimit, scripItem.LimitUnitSelectedItem, strResponseArray[0], out response);

                                                    if (textfilepath != string.Empty && !(string.IsNullOrEmpty(result.Item3)))
                                                    {
                                                        using (StreamWriter stream_writer = new StreamWriter(textfilepath + @"\" + deviceName + ".txt", true))
                                                        {
                                                            if (!scripItem.IsUnitEntered && scripItem.LimitUnitSelectedItem != "No Unit")
                                                            {
                                                                stream_writer.WriteLine("Unit:" + scripItem.LimitUnitSelectedItem);
                                                                scripItem.IsUnitEntered = true;
                                                            }

                                                            //if (scripItem.LimitUnitSelectedItem != "No Unit")
                                                            //    stream_writer.WriteLine(result.Item3 + scripItem.LimitUnitSelectedItem);
                                                            //else
                                                                stream_writer.WriteLine(result.Item3);

                                                            if (!scriptDic.Keys.Contains(actionCnt))
                                                            {
                                                                string verificationPath = textfilepath + @"\" + deviceName + ".txt";
                                                                scriptDic.Add(actionCnt, new string[] { tabstartTime, scripItem.VerifyScriptActionSelectedItem, scripItem.BuildVersion, verificationPath});
                                                            }
                                                        }
                                                    }

                                                    if (result.Item1)
                                                    {
                                                        runstatus.Add("Pass");
                                                        status = "Pass";
                                                    }
                                                    else
                                                    {
                                                        runstatus.Add("Fail");
                                                        status = "Fail";
                                                        scripItem.SkipExecution = true;
                                                        remarks = deviceName + " - " + result.Item2;
                                                        isBreak.Add(true);
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    runstatus.Add("Fail");
                                                    status = "Fail";
                                                    scripItem.SkipExecution = true;
                                                    remarks = deviceName + " - " + "No response while sending SSH command";
                                                    isBreak.Add(true);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("QSC DEVICE CONNECTION REFUSED"))
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + " QSC DEVICE CONNECTION REFUSED");
                                                    string password = Properties.Settings.Default.DevicePassword;

                                                    if (passwordRestoreblank.Keys.Contains(ipAddr) || passwordRestore.Keys.Contains(ipAddr))
                                                    {
                                                        password = applicationPassword;
                                                    }

                                                    var result = SSH_enable_for_all_devices(ipAddr, scripItem.BuildVersion, deviceModel, deviceName, iteration, password);

                                                    if (result.Item1 == true)
                                                    {
                                                        if (sshIteration > 1)
                                                            Thread.Sleep(10000);

                                                        goto retry_sending_command;
                                                    }
                                                    else
                                                    {
                                                        if (result.Item2 != string.Empty)
                                                            remarks = result.Item2;
                                                        else
                                                            remarks = deviceName + " - " + "Could not enable ssh";
                                                    }
                                                }
                                                else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID SSH KEY FILE"))
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + " Invalid ssh key file");
                                                    remarks = deviceName + " - " + "Invalid ssh key file";
                                                }
                                                else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INCORRECT CREDENTIAL"))
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + " Incorrect ssh credential");
                                                    remarks = deviceName + " - " + "Incorrect ssh credential";
                                                }
                                                else if (strResponseArray[1] != null && (strResponseArray[1].ToUpper().Contains("COMMAND NOT FOUND") || strResponseArray[1].ToUpper().Contains("SYNTAX ERROR") || strResponseArray[1].ToUpper().Contains("INVALID SSH COMMAND")))
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + " Invalid ssh command");
                                                    remarks = deviceName + " - " + "Invalid ssh command";
                                                }
                                                else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("COULD NOT CONNECT SSH"))
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + "Could not connect ssh");
                                                    remarks = deviceName + " - " + "Could not connect ssh for";
                                                }
                                                else
                                                {
                                                    DeviceDiscovery.WriteToLogFile("SSH action for " + testcasename + " failed as " + deviceName + "SSH response is empty");
                                                    if (strResponseArray[1] != null && strResponseArray[1] != string.Empty)
                                                        remarks = deviceName + " - " + strResponseArray[1];
                                                    else
                                                        remarks = deviceName + " - " + "SSH response is empty for";
                                                }

                                                status = "Fail";
                                                runstatus.Add(status);
                                                scripItem.SkipExecution = true;
                                                isBreak.Add(true);
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        remarks = scripItem.DevicenamelistSelectedItem + " - " + "Not available in the network";
                                        status = "Fail";
                                        runstatus.Add(status);
                                        scripItem.SkipExecution = true;
                                        isBreak.Add(true);
                                    }
                                }

                                string measuredValue = response;
                                if (measuredValue == string.Empty)
                                    measuredValue = "Not Applicable";

                                if (status == "Pass")
                                {
                                    if (scripItem.NotAvailableDeviceList.Count > 0)
                                    {
                                        if (!string.IsNullOrEmpty(scripItem.BuildVersion))
                                            fullRemarks = string.Join(",", scripItem.NotAvailableDeviceList) + " devices are not available in network" + "<br />" + "Build Version: " + scripItem.BuildVersion;
                                        else
                                            fullRemarks = string.Join(",", scripItem.NotAvailableDeviceList) + " devices are not available in network";

                                        query = "Insert into TempTestCaseActionTabTable values('" + executionId + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + tabstartTime + "','" + DateTime.Now.ToString() + "', @execidTabname ,'" + actionCnt + "',@remarks,'" + actualValue + "','" + measuredValue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + originalLogPath + "')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);

                                        scripItem.SkipExecution = true;
                                        runstatus.Add("Fail");
                                        isBreak.Add(true);
                                    }
                                    else if (!isSecondTime)
                                    {
                                        if (!string.IsNullOrEmpty(scripItem.BuildVersion))
                                            fullRemarks = "Build Version: " + scripItem.BuildVersion;

                                        query = "Insert into TempTestCaseActionTabTable values('" + executionId + "','In Progress',@TSName, @TPName, @TCName,@TAName,'" + tabstartTime + "','" + string.Empty + "', @execidTabname ,'" + actionCnt + "',@remarks,'" + actualValue + "','" + measuredValue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + originalLogPath + "')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                                    }
                                }
                                else if (status == "Fail")
                                {
                                    string notavailableLst = string.Empty;
                                    if (scripItem.NotAvailableDeviceList.Count > 0)
                                        notavailableLst = "<br />" + string.Join(",", scripItem.NotAvailableDeviceList) + " devices are not available in network";

                                    if (executionIteration)
                                    {
                                        fullRemarks = "Failed at iteration : " + iteration + "<br />";
                                    }

                                    if (string.IsNullOrEmpty(scripItem.BuildVersion))
                                        fullRemarks += remarks + notavailableLst;
                                    else
                                        fullRemarks += remarks + notavailableLst + "<br/> Build Version: " + scripItem.BuildVersion;

                                    query = "select * from TempTestCaseActionTabTable where ExecID = '" + executionId + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and Action_Name_Values='" + actionCnt + "' and CaseActionTabTableExecutionUniqueID=" + CaseExecutionUniqueID + " and ActionTabTableCaseAlogPlanExecutionUniqueID = " + ActionTabCaseAlogPlanExecutionUniqueID + " and SuiteAlongwithplanandcaseExecid = " + SuiteExecutionUniqueID + "";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);

                                    if (tble.Rows.Count == 0)
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + executionId + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + tabstartTime + "','" + DateTime.Now.ToString() + "',@execidTabname,'" + actionCnt + "', @remarks,'" + actualValue + "','" + measuredValue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + originalLogPath + "')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                                    }
                                    else
                                    {
                                        query = "Update TempTestCaseActionTabTable set status='Fail', Remarks=@remarks, EndTime ='" + DateTime.Now.ToString() + "',Expected_Value='" + measuredValue + "' where ExecID = '" + executionId + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and Action_Name_Values='" + actionCnt + "' and CaseActionTabTableExecutionUniqueID=" + CaseExecutionUniqueID + " and ActionTabTableCaseAlogPlanExecutionUniqueID = " + ActionTabCaseAlogPlanExecutionUniqueID + " and SuiteAlongwithplanandcaseExecid = " + SuiteExecutionUniqueID + "";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                                    }
                                }
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(scripItem.BuildVersion))
                                    fullRemarks = scripItem.DevicenamelistSelectedItem + " - " + "No running design in core/Couldn't able to fetch core design peripherals";
                                else
                                    fullRemarks = scripItem.DevicenamelistSelectedItem + " - " + "No running design in core/Couldn't able to fetch core design peripherals" + "<br/> Build Version: " + scripItem.BuildVersion;

                                status = "Fail";
                                runstatus.Add(status);
                                scripItem.SkipExecution = true;
                                isBreak.Add(true);

                                query = "Insert into TempTestCaseActionTabTable values('" + executionId + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + tabstartTime + "','" + DateTime.Now.ToString() + "',@execidTabname,'" + actionCnt + "', @remarks,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + string.Empty + "')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                            }

                        }
                    }

                    isSecondTime = true;
                    iteration++;

                    if (!executionIteration)
                        break;
                }

                //foreach (var tabNameAndPath in scriptDic)
                //{
                //    grafanaExecution.SaveDataPoints(executionId, testsuitename, testplanname, testcasename, tabNameAndPath.Value[0], testactionname, tabNameAndPath.Value[1], tabNameAndPath.Value[2], mstrDesignName, tabNameAndPath.Value[3]);
                //}

                query = "Update TempTestCaseActionTabTable set status='Pass', EndTime ='" + DateTime.Now.ToString() + "' where Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname =@tabName and ExecID='" + executionId + "' and status='In Progress'";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@tabName", testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
            }
            catch (Exception ex)
            {
                if (executionIteration)
                {
                    fullRemarks = "Failed at iteration : " + iteration + "<br />" + remarks;
                }

                fullRemarks += remarks;

                string query = "select * from TempTestCaseActionTabTable where ExecID = '" + executionId + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and Action_Name_Values='" + actionCnt + "' and CaseActionTabTableExecutionUniqueID=" + CaseExecutionUniqueID + " and ActionTabTableCaseAlogPlanExecutionUniqueID = " + ActionTabCaseAlogPlanExecutionUniqueID + " and SuiteAlongwithplanandcaseExecid = " + SuiteExecutionUniqueID + "";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);

                if (tble.Rows.Count == 0)
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + executionId + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + tabstartTime + "','" + DateTime.Now.ToString() + "',@execidTabname,'" + actionCnt + "', @remarks,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + originalLogPath + "')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                }
                else
                {
                    query = "Update TempTestCaseActionTabTable set status='Fail', Remarks='" + fullRemarks + "', EndTime ='" + DateTime.Now.ToString() + "' where ExecID = '" + executionId + "' and Testsuitename=@TSName and Testplanname=@TPName and Testcasename=@TCName and Tabname=@TAName and Action_Name_Values='" + actionCnt + "' and CaseActionTabTableExecutionUniqueID=" + CaseExecutionUniqueID + " and ActionTabTableCaseAlogPlanExecutionUniqueID = " + ActionTabCaseAlogPlanExecutionUniqueID + " and SuiteAlongwithplanandcaseExecid = " + SuiteExecutionUniqueID + "";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", testactionname, "@execidTabname", execidTabname, "@remarks", fullRemarks);
                }

                runstatus.Add("Fail");

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                            MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
            //finally
            //{
            //    ExecutionLoopCount(ExecutionMessage);
            //    if (dutStatusUpdate != null)
            //        dutStatusUpdate.Dispose();
            //}

            return runstatus;
        }

        private Tuple<string, string,string> WebClientDownloadCPU(string ipAddr, string cpunumbertext, string logAvg, string devicenamelistSelectedItem)
        {
            string logTxt = string.Empty;
            string remarks = string.Empty;
            string status = string.Empty;

            try
            {
                using (WebClient webClient = new WebClient())
                {
                    logTxt = webClient.DownloadString("http://" + ipAddr + "/media/Audio/CPU" + cpunumbertext + "_" + logAvg + ".txt");
                    webClient.Dispose();
                }

                return new Tuple<string, string, string>(logTxt, remarks, status);
            }
            catch (Exception ex)
            {
                if (logAvg == "Avg")
                    remarks = devicenamelistSelectedItem + " - " + "Unable to download CPU " + cpunumbertext + " average log";
                else
                    remarks = devicenamelistSelectedItem + " - " + "Unable to download CPU " + cpunumbertext + " log";
                
                status = "Fail";
                return new Tuple<string, string, string>(logTxt, remarks, status);
            }
        }

        private Tuple<string, string> StreamwritertotempServer(string scriptPath, string logTxt, string logAvg, string devicenamelistSelectedItem,string cpunumbertext, string tmpOrServer)
        {
            string remarks = string.Empty;
            string status = string.Empty;

            try
            {
                using (StreamWriter write = new StreamWriter(scriptPath))
                {
                    write.WriteLine("Unit:Sec");
                    write.WriteLine(logTxt);
                }
            }
            catch (Exception ex)
            {
                if (tmpOrServer == "temp")
                {
                    if (logAvg == "Avg")
                        remarks = devicenamelistSelectedItem + " - " + "Error while writting CPU " + cpunumbertext + " average log in temp path";
                    else
                        remarks = devicenamelistSelectedItem + " - " + "Error while writting CPU " + cpunumbertext + " log in temp path";
                }
                else
                {
                    if (logAvg == "Avg")
                        remarks = devicenamelistSelectedItem + " - " + "Error while writting CPU " + cpunumbertext + " average log in server path";
                    else
                        remarks = devicenamelistSelectedItem + " - " + "Error while writting CPU " + cpunumbertext + " log in server path";
                }

                status = "Fail";
            }

            return new Tuple<string, string>(remarks, status);
        }

        //        private DateTime TimeRemainingValue;
        //        public DateTime TimeRemaining
        //        {
        //            get
        //            {
        //                return TimeRemainingValue;
        //            }
        //            set
        //            {
        //                TimeRemainingValue = value;
        //            }
        //        }

        //        private string durationTimeUnitValue = null;
        //        public string durationTimeUnit
        //        {
        //            get
        //            {
        //                return durationTimeUnitValue;
        //            }
        //            set
        //            {
        //                durationTimeUnitValue = value;
        //            }
        //        }

        //        private Timer dutStatusUpdateValue = null;
        //        public Timer dutStatusUpdate
        //        {
        //            get
        //            {
        //                return dutStatusUpdateValue;
        //            }
        //            set
        //            {
        //                dutStatusUpdateValue = value;
        //            }
        //        }

        //        private void enableTimer(DateTime checktime, string durationTimeUnitValue)
        //        {
        //            try
        //            {
        //                TimeRemaining = checktime;
        //                durationTimeUnit = durationTimeUnitValue;
        //                dutStatusUpdate = new Timer(new TimerCallback(StatusTimer));
        //                dutStatusUpdate.Change(0, 10);
        //            }
        //            catch (Exception ex)
        //            {
        //                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
        //#if DEBUG
        //                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
        //#endif
        //            }

        //        }

        //        void StatusTimer(object state)
        //        {
        //            try
        //            {
        //                TimeSpan span = TimeRemaining - DateTime.Now;

        //                if (span.Hours >= 0 && span.Minutes >= 0 && span.Seconds >= 0)
        //                {
        //                    string TimerData = timeFunction(span);

        //                        ExecutionLoopCount(ExecutionMessage + "Remaining time for Script Execution : " + TimerData);

        //                }
        //                else
        //                {
        //                    ExecutionLoopCount(ExecutionMessage);
        //                    if (dutStatusUpdate != null)
        //                        dutStatusUpdate.Dispose();
        //                }

        //            }
        //            catch (Exception ex)
        //            {
        //                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
        //#if DEBUG
        //                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
        //#endif
        //            }
        //        }

        //        public string timeFunction(TimeSpan span)
        //        {
        //            try
        //            {
        //                if (durationTimeUnit == "Hour" || durationTimeUnit == "Day")
        //                {
        //                    if (span.Hours >= 0 && span.Minutes >= 0 && span.Seconds >= 0)
        //                    {
        //                        if (span.Days > 0)
        //                            return ((span.Hours).ToString() + " : " + (span.Minutes).ToString() + " : " + (span.Seconds).ToString() + " + " + (span.Days).ToString() + " day");
        //                        else
        //                            return ((span.Hours).ToString() + " : " + (span.Minutes).ToString() + " : " + (span.Seconds).ToString() + " ");
        //                    }
        //                    else
        //                    { return "Waiting for script execution completion"; }
        //                }
        //                else if (durationTimeUnit == "Min")
        //                {
        //                    if (span.Hours > 0 && span.Minutes >= 0 && span.Seconds >= 0)
        //                    {
        //                        if (span.Days > 0)
        //                            return ((span.Hours).ToString() + " : " + (span.Minutes).ToString() + " : " + (span.Seconds).ToString() + " :+ " + (span.Days).ToString() + " day");
        //                        else
        //                            return ((span.Hours).ToString() + " : " + (span.Minutes).ToString() + " : " + (span.Seconds).ToString() + " ");
        //                    }
        //                    else if (span.Minutes >= 0 && span.Seconds >= 0)
        //                        return ((span.Minutes).ToString() + " : " + (span.Seconds).ToString() + " ");
        //                    else
        //                    { return "Waiting for script execution completion"; }
        //                }
        //                return string.Empty;
        //            }
        //            catch (Exception ex)
        //            {
        //                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
        //#if DEBUG
        //                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
        //#endif
        //                return string.Empty;
        //            }
        //        }

        private Tuple<List<string[]>, string, string> InventoryGet(string selectedIPAddr)
        {
            List<string[]> inventoryDevices = new List<string[]>();
            string primaryName = string.Empty;
            string backupName = string.Empty;

            try
            {
                Rpc Inventory_monitor = new Rpc();
                var resp = Inventory_monitor.Send(selectedIPAddr, "Inventory.Get", "", false, string.Empty);
                string responseFromRPC = resp.Item2.Trim();

                if (responseFromRPC != string.Empty)
                {
                    var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadInventoryList>(responseFromRPC);

                    if (resultValue != null && resultValue.result != null && resultValue.result.Count > 0)
                    {
                        foreach (var inventoryValues in resultValue.result)
                        {
                            if (!inventoryValues.Type.ToLower().StartsWith("camera"))
                            {
                                if (inventoryValues.Redundancy != null && !string.IsNullOrEmpty(inventoryValues.Redundancy.PrimaryName))
                                {
                                    if (inventoryValues.Type.ToLower().StartsWith("core"))
                                    {
                                        primaryName = inventoryValues.Redundancy.PrimaryName.ToLower();
                                    }

                                    if (DeviceDiscovery.Netpair_devicesSupported.Contains(inventoryValues.Model) || inventoryValues.Type.ToLower().StartsWith("core"))
                                    {
                                        inventoryDevices.Add(new string[] { inventoryValues.Redundancy.PrimaryName.ToLower(), inventoryValues.Model.ToLower() });
                                    }

                                    if (!string.IsNullOrEmpty(inventoryValues.Redundancy.BackupName))
                                    {
                                        if (inventoryValues.Type.ToLower().StartsWith("core"))
                                        {
                                            backupName = inventoryValues.Redundancy.BackupName.ToLower();
                                        }

                                        if (DeviceDiscovery.Netpair_devicesSupported.Contains(inventoryValues.Model) || inventoryValues.Type.ToLower().StartsWith("core"))
                                        {
                                            inventoryDevices.Add(new string[] { inventoryValues.Redundancy.BackupName.ToLower(), inventoryValues.Model.ToLower() });
                                        }
                                    }
                                }
                                else
                                {
                                    if (DeviceDiscovery.Netpair_devicesSupported.Contains(inventoryValues.Model) || inventoryValues.Type.ToLower().StartsWith("core"))
                                    {
                                        inventoryDevices.Add(new string[] { inventoryValues.Name.ToLower(), inventoryValues.Model.ToLower() });
                                    }

                                    if (inventoryValues.Type.ToLower().StartsWith("core"))
                                    {
                                        primaryName = inventoryValues.Name.ToLower();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<List<string[]>, string, string>(inventoryDevices, primaryName, backupName);
        }

        private Tuple<Dictionary<string, string>, bool> GetDesignInventoryOriginalName(string selectedIPAddr, bool isNewversion, string selectedDeviceName, string password)
        {
            Dictionary<string, string> deviceNamewithOriginalName = new Dictionary<string, string>();
            bool isPasswordwrong = false;

            try
            {                
                if (isNewversion)
                {
                    string token = string.Empty;
                    string outresponse = string.Empty;
                    var checkOpenAccess = AccessOpen(selectedIPAddr, password, out outresponse);
                    bool isSuccess = false;
                    if (checkOpenAccess.Item1)
                    {
                        var val = enable_ssh("http://" + selectedIPAddr + "/api/v0/cores/self/config/network/services", selectedIPAddr, true, string.Empty, password);
                        isSuccess = val.Item1;
                    }
                    else
                    {
                        var logonsuccess = Corelogon(selectedIPAddr, password, out token);

                        if (logonsuccess.Item1 == false && logonsuccess.Item3 == "404")
                        {
                            isPasswordwrong = true;
                        }

                        if (logonsuccess.Item1 == true && token != string.Empty)
                        {
                            var val = enable_ssh("http://" + selectedIPAddr + "/api/v0/cores/self/config/network/services", selectedIPAddr, true, token, password);
                            isSuccess = val.Item1;
                        }
                    }

                    if (isSuccess == true)
                    {
                        string pairresponse = string.Empty;
                        var result = HttpGet_json("http://" + selectedIPAddr + "/api/v0/systems/1/device_pairing", token, selectedIPAddr, password, string.Empty, out pairresponse);

                        dynamic array = new JavaScriptSerializer().DeserializeObject(pairresponse);
                        if (array != null && array.Length > 0)
                        {
                            foreach (var item in array)
                            {
                                var devicepairdetails = item["devicePairing"];
                                string itemId = devicepairdetails["itemId"];
                                string primary = devicepairdetails["primary"];
                                deviceNamewithOriginalName.Add(itemId.ToLower(), primary.ToLower());
                            }
                        }
                    }
                }
                else
                {
                    string[] strChildElement1 = new string[] { "device" };

                    string[] strAttributeFields1 = new string[] { "type", "primary", "dynamic_primary", "backup", "dynamic_backup", "part_number" };

                    string[][] strDeviceData1;

                    if (parse_XML_attribute("http://" + selectedIPAddr + "/designs/current_design/settings/device_pairing.xml", strChildElement1, strAttributeFields1, out strDeviceData1))
                    {
                        for (int i = 0; i < strDeviceData1.Count(); i++)
                        {
                            if (!string.IsNullOrEmpty(strDeviceData1[i][1]) && !deviceNamewithOriginalName.ContainsKey(strDeviceData1[i][1]))
                            {
                                deviceNamewithOriginalName.Add(strDeviceData1[i][1].ToLower(), strDeviceData1[i][2].ToLower());
                            }

                            if (!string.IsNullOrEmpty(strDeviceData1[i][3]) && !deviceNamewithOriginalName.ContainsKey(strDeviceData1[i][3]))
                            {
                                deviceNamewithOriginalName.Add(strDeviceData1[i][3].ToLower(), strDeviceData1[i][4].ToLower());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<Dictionary<string, string>, bool>(deviceNamewithOriginalName, isPasswordwrong);
        }

        private Tuple<string,string, List<string[]>> GetCoreInventoryDetails(string selectedIPAddr, string password)
        {
            List<string[]> inventoryDevices = new List<string[]>();
            string primaryName = string.Empty;
            string backupName = string.Empty;

            try
            {
                string[] strChildElement = new string[] { "device" };

                string[] strAttributeFields = new string[] { "primary", "backup", "part_number" };

                string[][] strDeviceData;

                if (parse_XML_attributeForScript("http://" + selectedIPAddr + "/designs/current_design/inventory.xml", strChildElement, strAttributeFields, password, out strDeviceData))
                {
                    for (int i = 0; i < strDeviceData.Count(); i++)
                    {
                        if (strDeviceData[i][2].ToString().ToLower().StartsWith("core"))
                        {
                            primaryName = strDeviceData[i][0].ToLower();
                            backupName = strDeviceData[i][1].ToLower();
                            inventoryDevices.Add(new string[] { "Core-Primary", strDeviceData[i][0].ToLower() });

                            if(!string.IsNullOrEmpty(backupName))
                            inventoryDevices.Add(new string[] { "Core-Backup", strDeviceData[i][1].ToLower() });
                        }
                        else
                        {
                            inventoryDevices.Add(new string[] { strDeviceData[i][0].ToLower(), strDeviceData[i][2].ToLower() });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<string, string, List<string[]>>(primaryName, backupName, inventoryDevices);
        }
		
        public bool parse_XML_attributeForScript(string strXML, string[] strSearchElements, string[] strSearchAttributes, string password, out string[][] strParsed)
        {
            try
            {
                XmlDocument xDoc = new XmlDocument();
                xDoc = XmlLoadUsingHttp(strXML, "parse_XML_attribute", password);

                if (xDoc == null)
                {
                    strParsed = null;
                    return false;
                }

                XmlNodeList[] xNodList = new XmlNodeList[strSearchElements.Length];
                for (int i = 0; i < strSearchElements.Length; i++)
                {
                    if (xDoc.GetElementsByTagName(strSearchElements[i]) != null)
                    {
                        xNodList[i] = xDoc.GetElementsByTagName(strSearchElements[i]);
                    }
                }

                strParsed = new string[xNodList[0].Count][];
                for (int i = 0; i < xNodList[0].Count; i++)
                {
                    string[] strAttrItem = new string[strSearchAttributes.Length];
                    for (int j = 0; j < strSearchAttributes.Length; j++)
                    {
                        if (xNodList[0].Item(i) != null && xNodList[0].Item(i).Attributes[strSearchAttributes[j]] != null)
                        {
                            strAttrItem[j] = xNodList[0].Item(i).Attributes[strSearchAttributes[j]].Value.ToString();
                        }
                        else
                        {
                            strAttrItem[j] = "";
                        }

                        strParsed[i] = strAttrItem;
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                //Debug.WriteLine("Error gathering attributes from " + strXML + "\n\r" + e.ToString());
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strParsed = null;
                return false;
            }
        }

        public XmlDocument XmlLoadUsingHttp(string deviceUrl, string functionName, string password)
        {
            HttpWebRequest http = (HttpWebRequest)WebRequest.Create(deviceUrl);

            try
            {
                XmlDocument xml = new XmlDocument();


                http.Timeout = 10000;

                SetBasicAuthHeader(ref http, Properties.Settings.Default.DeviceUsername, password);

                using (HttpWebResponse response = http.GetResponse() as HttpWebResponse)
                {
                    using (Stream responseStream = response.GetResponseStream())
                    {
                        XmlTextReader reader = new XmlTextReader(responseStream);
                        xml.Load(reader);
                    }
                    //response.Close();
                    http.Abort();
                    return xml;
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG_MESSAGEBOX
                if (!String.Equals(ex.Message, "The operation has timed out") && !String.Equals(ex.Message, "Unable to connect to the remote server"))
                    MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC03006", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                http.Abort();
                return null;
            }
        }

        private List<string> GetAlldeviceIPAddress(TestScriptVerification scripItem, List<string[]> inventoryDevices, Dictionary<string, string> deviceNamewithOriginalName, Dictionary<string, string[]> networkDeviceList, List<string> notAvailableDeviceList)
        {
            try
            {
                foreach (string[] inventory in inventoryDevices)
                {
                    if (deviceNamewithOriginalName.Keys.Contains(inventory[0]) && !string.IsNullOrEmpty(deviceNamewithOriginalName[inventory[0]]))
                    {
                        if (networkDeviceList.Keys.Contains(deviceNamewithOriginalName[inventory[0]]))
                        {
                            string ipad = string.Empty;
                            if (networkDeviceList[deviceNamewithOriginalName[inventory[0]]][1] != string.Empty)
                                ipad = networkDeviceList[deviceNamewithOriginalName[inventory[0]]][1];

                            if (!scripItem.DeviceWithIP.Keys.Contains(deviceNamewithOriginalName[inventory[0]]))
                                scripItem.DeviceWithIP.Add(deviceNamewithOriginalName[inventory[0]], new string[] { ipad, inventory[1] });
                        }
                        else
                        {
                            if (!notAvailableDeviceList.Contains(inventory[0]))
                                notAvailableDeviceList.Add(inventory[0]);
                        }
                    }
                    else
                    {
                        if (networkDeviceList.Keys.Contains(inventory[0]))
                        {
                            string ipad = string.Empty;
                            if (networkDeviceList[inventory[0]][1] != string.Empty)
                                ipad = networkDeviceList[inventory[0]][1];

                            if (!scripItem.DeviceWithIP.Keys.Contains(inventory[0]))
                                scripItem.DeviceWithIP.Add(inventory[0], new string[] { ipad, inventory[1] });
                        }
                        else
                        {
                            if (!notAvailableDeviceList.Contains(inventory[0]))
                                notAvailableDeviceList.Add(inventory[0]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return notAvailableDeviceList;
        }

        public Tuple<bool, string> SSH_enable_for_all_devices(string ipAddr, string build_Version, string deviceModel, string deviceName, int iteration, string password)
        {
            bool isSuccess = false;
            string remarks = string.Empty;
            try
            {
                string outresponse = string.Empty;
                bool isNewversion = firmwareVersioncheckGeneral(build_Version, "fromScript");

                if (deviceModel.ToUpper().StartsWith("CORE") && isNewversion)
                {
                    var checkOpenAccess = AccessOpen(ipAddr, password, out outresponse);
                    if (checkOpenAccess.Item1)
                    {
                        var val = enable_ssh("http://" + ipAddr + "/api/v0/cores/self/config/network/services", ipAddr, true, string.Empty, password);
                        isSuccess = val.Item1;
                    }
                    else
                    {
                        string token = string.Empty;
                        var logonsuccess = Corelogon(ipAddr, password, out token);
                        if (logonsuccess.Item1 == false && logonsuccess.Item3 == "404" && iteration == 1)
                        {
                            DeviceDiscovery.WriteToLogFile("The " + deviceName + " Username/password does not match with Username/password in preferences.");
                            remarks = deviceName + " Username/password does not match with Username/password in preferences";
                        }

                        if (logonsuccess.Item1 == true && token != string.Empty)
                        {
                            var val = enable_ssh("http://" + ipAddr + "/api/v0/cores/self/config/network/services", ipAddr, true, token, password);
                            isSuccess = val.Item1;
                        }
                    }
                }
                else
                {
                    var result = HttpGet("http://" + ipAddr + "/cgi-bin/access_config?ssh=true", password, string.Empty, ipAddr, build_Version, out outresponse);
                    isSuccess = result.Item1;
                }

                return new Tuple<bool, string>(isSuccess, remarks);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(isSuccess, remarks);
            }
        }

        public bool firmwareVersioncheckGeneral(string version, string fromMethod)
        {
            bool isnewversion = true;

            try
            {
                if (!string.IsNullOrEmpty(version) && !version.ToLower().StartsWith("dev"))
                {
                    string regex = Regex.Match(version, @"[0-9\.]+").Value;
                    Version firmwarever = new Version(regex);

                    switch (fromMethod)
                    {
                        case ("fromPeripheralPasswordChange"):
                            {
                                if (firmwarever < new Version(Properties.Settings.Default.NewPeripheralFirmwareVersion))
                                    isnewversion = false;
                                break;
                            }
                        case ("fromScript"):
                            {
                                if (firmwarever < new Version(Properties.Settings.Default.CompareFirmwareVersion))
                                    isnewversion = false;
                                break;
                            }
                        case ("fromAllowLegacyFirmware"):
                            {
                                if (firmwarever < new Version("9.1"))
                                    isnewversion = false;
                                break;
                            }
							case ("fromQRCMPremethodFilter"):
                            {
                                if (firmwarever < new Version("9.1.1"))
                                    isnewversion = false;
                                break;
                            }
                        default:
                            {
                                break;
                            }
                    }
                }
            }
            catch (Exception ex)
            {
                isnewversion = true;
            }

            return isnewversion;
        }

        private Tuple<bool, string, string> Regexcompare(string regexMatch, string command, string lowerLimit, string upperLimit, string limitUnit, string fullresponse, out string responsetoreturn)
        {
            responsetoreturn = string.Empty;
            string Remarks = string.Empty;
            bool ispassed = false;
            double resultvalue = 0;
            string responsetoWriteLog = string.Empty;

            try
            {
                Match regex = null;
                try
                {
                    //regexMatch = @"(\d+.\d+.).*sqlite3.db";
                    regex = Regex.Match(fullresponse, regexMatch, RegexOptions.IgnoreCase);
                }
                catch (Exception excep)
                {
                    Remarks = "Error occured during regex match.Please enter valid Regex";
                }

                if (regex.Success)
                {

                    if (string.IsNullOrEmpty(regex.Groups[1].Value))
                    {
                        Remarks = "Incorrect Regex";
                        return new Tuple<bool, string, string>(ispassed, Remarks, responsetoWriteLog);
                    }

                    if (command == "SQLITE3.db Available Space" && regex.Groups.Count > 0)
                    {
                        responsetoreturn = responsetoWriteLog = regex.Groups[1].Value.Trim();
                        resultvalue = Convert.ToDouble(regex.Groups[1].Value.Trim());
                    }
                    else if (command == "Memory Monitoring" && regex.Groups.Count > 0)
                    {
                        string resultValueToCompare = regex.Groups[1].Value.Trim();

                        Regex resValue = new Regex("[0-9-.]+");
                        var resultVaylueToCompare = resValue.Match(resultValueToCompare);

                        if (!string.IsNullOrEmpty(resultVaylueToCompare.Groups[0].Value))
                            double.TryParse(resultVaylueToCompare.Groups[0].Value, out resultvalue);

                        responsetoreturn = responsetoWriteLog = resultvalue.ToString();
                    }
                    else
                    {
                        string resultValueToCompare = regex.Groups[1].Value.Trim();

                        Regex resValue = new Regex("[0-9-.]+");
                        var resultVaylueToCompare = resValue.Match(resultValueToCompare);

                        if (!string.IsNullOrEmpty(resultVaylueToCompare.Groups[0].Value))
                            double.TryParse(resultVaylueToCompare.Groups[0].Value, out resultvalue);

                        if (limitUnit != "No Unit")
                        {
                            string extension = string.Empty;

                            if (limitUnit == "KB" || limitUnit == "MB" || limitUnit == "GB" || limitUnit == "Bytes")
                            {
                                extension = Regex.Replace(resultValueToCompare.Trim(), "[^A-Za-z]", string.Empty);
                            }

                            if (!string.IsNullOrEmpty(extension))
                            {
                                if (limitUnit.ToLower().Trim() != extension.ToLower().Trim())
                                {
                                    if (extension.ToUpper().StartsWith("K"))
                                    {
                                        resultvalue = Math.Round(KBtoAnyByteConversion(limitUnit, resultvalue), 3, MidpointRounding.AwayFromZero);
                                    }
                                    else if (extension.ToUpper().StartsWith("M"))
                                    {
                                        resultvalue = Math.Round(MBtoAnyByteConversion(limitUnit, resultvalue), 3, MidpointRounding.AwayFromZero);
                                    }
                                    else if (extension.ToUpper().StartsWith("G"))
                                    {
                                        resultvalue = Math.Round(GBtoAnyByteConversion(limitUnit, resultvalue), 3, MidpointRounding.AwayFromZero);
                                    }
                                    else if (extension.ToUpper().StartsWith("B"))
                                    {
                                        resultvalue = Math.Round(BytestoAnyByteConversion(limitUnit, resultvalue), 3, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                        }

                        responsetoreturn = responsetoWriteLog = resultvalue.ToString();
                    }


                    /////Lower Limit
                    if (!string.IsNullOrEmpty(lowerLimit))
                    {
                        if (Convert.ToDouble(lowerLimit) <= resultvalue)
                        {
                            ispassed = true;
                            Remarks = "Pass";
                        }
                        else
                        {
                            ispassed = false;
                            Remarks = "Failed at Lower limit";
                            responsetoWriteLog = "Failed point: " + responsetoWriteLog;
                        }
                    }

                    /////Upper Limit
                    if (ispassed == true || string.IsNullOrEmpty(lowerLimit))
                    {
                        if (upperLimit != string.Empty && upperLimit != null)
                        {
                            if (Convert.ToDouble(upperLimit) >= resultvalue)
                            {
                                ispassed = true;
                                Remarks = "Pass";
                            }
                            else
                            {
                                ispassed = false;
                                Remarks = "Failed at Upper limit";
                                responsetoWriteLog = "Failed point: " + responsetoWriteLog;
                            }
                        }
                    }
                }
                else
                {
                    Remarks = "Incorrect Regex";
                }

                return new Tuple<bool, string, string>(ispassed, Remarks, responsetoWriteLog);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                Remarks = "Error occured while regex match. " + ex.Message.ToString();
                return new Tuple<bool, string, string>(ispassed, Remarks, responsetoWriteLog);
            }
        }

        public double KBtoAnyByteConversion(string anyBytes, double input)
        {
            double output = input;

            try
            {
                int counter = 0;

                if (anyBytes == "Bytes")
                    output = output * 1024;
                else if (anyBytes == "MB")
                    counter = 1;
                else if (anyBytes == "GB")
                    counter = 2;

                while (counter != 0)
                {
                    output = output / 1024;
                    counter--;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return output;
        }

        public double MBtoAnyByteConversion(string anyBytes, double input)
        {
            double output = input;

            try
            {
                if (anyBytes == "Bytes")
                    output = output * 1024 * 1024;
                else if (anyBytes == "KB")
                    output = output * 1024;
                else if (anyBytes == "GB")
                    output = output / 1024;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return output;
        }

        public double GBtoAnyByteConversion(string anyBytes, double input)
        {
            //Convert to MB
            double output = input;

            try
            {
                int counter = 0;

                if (anyBytes == "MB")
                    counter = 1;
                else if (anyBytes == "KB")
                    counter = 2;
                else if (anyBytes == "Bytes")
                    counter = 3;

                while (counter != 0)
                {
                    output = output * 1024;
                    counter--;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return output;
        }

        public double BytestoAnyByteConversion(string anyBytes, double input)
        {
            //Convert to MB
            double output = input;

            try
            {
                int counter = 0;

                if (anyBytes == "KB")
                    counter = 1;
                else if (anyBytes == "MB")
                    counter = 2;
                else if (anyBytes == "GB")
                    counter = 3;

                while (counter != 0)
                {
                    output = output / 1024;
                    counter--;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return output;
        }

        private Tuple<List<string>, string> ExecuteCECAction(int tcID, int tAId, Int32 exid, string testsuitename, string testplanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, bool libConnectionSuccess)
        {
            List<string> returnStatus = new List<string>();
            //List<string> returnStatus_tab = new List<string>();
            string remarks = string.Empty;
            //CecSharpClient open_libcec = new CecSharpClient();
            //bool isSaveLog = false;
            //bool isEndLog = false;
            //bool isSuccessConnect = false;
            string starttime = DateTime.Now.ToString();
            string expectedvalue = string.Empty;
            string actualvalue = string.Empty;
            try
            {
                Int32[] TAID_array = TAID.ToArray();
                string query = "select * from CECAction where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";
                System.Data.DataTable cecaction_count = QscDatabase.SendCommand_Toreceive(query);
                //DataTableReader read = tble.CreateDataReader();

                if (cecaction_count.Rows.Count > 0)
                {
                    //if (!libConnectionSuccess)
                    //{
                    //    if (open_libcec.Connect(10000))
                    //    {
                    //        libConnectionSuccess = true;
                    //        open_libcec.SetLogEnable(true, exid);
                    //    }
                    //}
                    
                    //query = "select * from CECVerification where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";
                    //System.Data.DataTable cecverification_count = QscDatabase.SendCommand_Toreceive(query);

                    //open_libcec.GetInitialDevice();
                    CecLogicalAddress addr = CecLogicalAddress.PlaybackDevice1;
                    addr = open_libcec.GetDesinationDevice();

                    for (int i = 0; i < cecaction_count.Rows.Count; i++)
                    {
                        starttime = DateTime.Now.ToString();
                        string ActionWithLoopValue = "CEC Action: " + (i + 1);

                        
                            string adaptorName = cecaction_count.Rows[i][3].ToString();
                            string deviceName = cecaction_count.Rows[i][4].ToString();
                            string cecCommand = cecaction_count.Rows[i][5].ToString();
                            string opcode = cecaction_count.Rows[i][6].ToString();


                            if (cecCommand.ToUpper() != "OTHERS")
                                expectedvalue = cecCommand;
                            else
                                expectedvalue = opcode;

                        if (libConnectionSuccess)
                        {
                            string status_write = "Fail";

                            //if (cecverification_count.Rows.Count > 0)
                            //{
                            //    open_libcec.SetLogEnable(true, exid);
                            //}            

                            bool status = open_libcec.CECCommandsExecution(cecCommand, deviceName, opcode, addr);


                            if (!status)
                            {
                                status_write = "Fail";
                                remarks = "Command ACK Failed";
                                actualvalue = expectedvalue + " send failure";
                            }
                            else
                            {
                                status_write = "Pass";
                                actualvalue = expectedvalue + " send success";
                            }

                            returnStatus.Add(status_write);

                            ////updating TempTestCaseActionTabTable Values
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status_write + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + remarks + "','" + expectedvalue + "','" + actualvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            remarks = string.Empty;
                        }
                        else
                        {
                            returnStatus.Add("Fail");
                            remarks = "Could not open a connection to the CEC adapter";
                            actualvalue = expectedvalue + " send failure";

                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + remarks + "','" + expectedvalue + "','" + actualvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            remarks = string.Empty;
                        }
                    }

                    //if (libConnectionSuccess && cecverification_count.Rows.Count > 0)
                    //{
                    //    Thread.Sleep(30000);
                    //    //open_libcec.SetLogEnable(false, 0);
                    //}
                }

                return new Tuple<List<string>, string>(returnStatus, string.Empty);
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                //open_libcec.SetLogEnable(false, 0);

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<List<string>, string>(returnStatus, string.Empty);
            }
        }

        private List<string> USBAudioBridgeAction(int tcID, int tAId, Int32 exid, string testsuitename, string testplanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> returnStatus = new List<string>();
            string starttime = DateTime.Now.ToString();

            try
            {
                //string bridgeName = string.Empty;
                string audioType = string.Empty;
                string ComponentPrettyName = string.Empty;
                string deviceName = string.Empty;

                Int32[] TAID_array = TAID.ToArray();
                int i = 0;
                string query = "select BridgeName,AudioType,ComponentPrettyName,DefaultOption from UsbAction where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";

                System.Data.DataTable tble = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    List<string> expectedValue = new List<string>();

                    i++;
                    List<string> actualVal = new List<string>();
                    string status = string.Empty;
                    //List<string> failStatus = new List<string>();
                    MMDevice currentDeviceName = null;
                    deviceName = read[0].ToString();
                    audioType = read[1].ToString();
                    ComponentPrettyName = read[2].ToString();
                    string mediaType = read[3].ToString();
                    string bridgeName = deviceName;
                    if (audioType == "Playback" || audioType == "Recording")
                    {
                        string[] componentSplit = Regex.Split(ComponentPrettyName, " ");

                        if (componentSplit.Count() > 2)
                        {
                            //string deviceName = bridgeName + " " + componentSplit[1];
                            
                            if (componentSplit[1] == "Speakerphone")
                            {
                                deviceName += " " + componentSplit[1];
                            }
                            else if (componentSplit[1] == "Sound" && componentSplit.Count() >= 3)
                            {
                                deviceName += " " + componentSplit[1] + " " + componentSplit[2];
                            }
                            else
                            {
                                if (componentSplit.Count() > 3)
                                {
                                    deviceName += " " + componentSplit[2];
                                }
                            }

                            EDataFlow dataFlow = EDataFlow.eAll;

                            if (audioType == "Playback")
                            {
                                dataFlow = EDataFlow.eRender;
                            }
                            else if (audioType == "Recording")
                            {
                                dataFlow = EDataFlow.eCapture;
                            }

                            var alldeviceFriendlyName = EndPoints.GetAllDeviceList(dataFlow);

                            if (alldeviceFriendlyName.Count > 0)
                            {
                                currentDeviceName = alldeviceFriendlyName.Find(item => item.DeviceFriendlyName.Equals(deviceName));

                                if (currentDeviceName == null)
                                {
                                    currentDeviceName = alldeviceFriendlyName.Find(item => item.DeviceFriendlyName.Equals(bridgeName));
                                    deviceName = bridgeName;
                                }
                            }

                            List<ERole> eroles = new List<ERole>();

                            if (string.Equals(mediaType, "Default device", StringComparison.CurrentCultureIgnoreCase))
                            {
                                eroles.Add(ERole.eMultimedia);
                            }
                            else if (string.Equals(mediaType, "Default Communication", StringComparison.CurrentCultureIgnoreCase))
                            {
                                eroles.Add(ERole.eCommunications);
                            }
                            else if (string.Equals(mediaType, "Both", StringComparison.CurrentCultureIgnoreCase))
                            {
                                eroles.Add(ERole.eMultimedia);
                                eroles.Add(ERole.eCommunications);
                            }
                            else if (mediaType == null || mediaType == string.Empty)
                            {
                                mediaType = "Default device";
                                eroles.Add(ERole.eMultimedia);
                            }

                            

                            if (currentDeviceName != null)
                            {
                                EndPoints.RefreshDeviceList(dataFlow);

                                foreach (ERole eRole in eroles)
                                {
                                    EndPoints.SetDefaultDeviceByName(currentDeviceName.FriendlyName, eRole);

                                    MMDevice actual = EndPoints.GetDefaultMMDevice(dataFlow, eRole);

                                    string media = string.Empty;

                                    if (eRole == ERole.eMultimedia)
                                        media = "Default device";
                                    else
                                        media = "Default Communication";


                                    if (deviceName != null && deviceName != string.Empty && !expectedValue.Contains(deviceName + " set as " + media))
                                    {
                                        expectedValue.Add(deviceName + " set as " + media);
                                    }

                                    if (!actualVal.Contains(actual.DeviceFriendlyName + " set as " + media))
                                        actualVal.Add(actual.DeviceFriendlyName + " set as " + media);

                                    if (actual.FriendlyName == currentDeviceName.FriendlyName)
                                    {
                                        returnStatus.Add("Pass");
                                        DeviceDiscovery.WriteToLogFile("USB Action is Passed");
                                    }
                                    else
                                    {
                                        returnStatus.Add("Fail");
                                        status = "Fail";

                                        //if (mediaType != "Both")
                                        //{
                                        //    if (!failStatus.Contains(currentDeviceName.DeviceFriendlyName + " device is not set as " + mediaType))
                                        //        failStatus.Add(currentDeviceName.DeviceFriendlyName + " device is not set as " + mediaType);
                                        //}
                                        //else
                                        //{
                                        //    if (!failStatus.Contains("The device is not set as default device and default communication"))
                                        //        failStatus.Add("The device is not set as default device and default communication");
                                        //}

                                        DeviceDiscovery.WriteToLogFile("USB Action is failed");
                                    }
                                }
                            }
                            else
                            {
                                returnStatus.Add("Fail");
                                status = "Fail";

                                actualVal.Add("Device is not connected");

                                //if (deviceName != null && deviceName != string.Empty)
                                //{
                                //    if(!failStatus.Contains(deviceName + " device is not available"))
                                //        failStatus.Add(deviceName + " device is not available");
                                //}
                                //else
                                //{
                                //    if(!failStatus.Contains("Selected device is not available"))
                                //        failStatus.Add("Selected device is not available");
                                //}

                                DeviceDiscovery.WriteToLogFile("USB Action is Failed");
                            }
                        }
                        else
                        {
                            returnStatus.Add("Fail");
                            status = "Fail";
                            //failStatus.Add("Action does not contain SpeakerPhone / Soundcard");
                            DeviceDiscovery.WriteToLogFile("USB Action is Failed");
                        }
                    }
                    else
                    {
                        returnStatus.Add("Fail");
                        status = "Fail";
                        //failStatus.Add("Action does not contain SpeakerPhone / Soundcard");
                        DeviceDiscovery.WriteToLogFile("USB Action is Failed");
                    }

                    string actionCount = "USB Action : " + i;
                    
                    if(expectedValue.Count == 0 && deviceName != null && deviceName != string.Empty)
                    {
                        expectedValue.Add(deviceName);
                    }

                    if (status == "Fail")
                    {
                        if (actualVal.Count == 0)
                        {
                            actualVal.Add("Measured Value is Empty");
                        }

                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + actionCount + "', '" + string.Empty + "','" + string.Join(";", expectedValue) + "','" + string.Join(";", actualVal) + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + actionCount +"', '" + string.Empty + "','" + string.Join(";", expectedValue) + "','" + string.Join(";", actualVal) + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return returnStatus;
        }

        private List<string> ExecuteCECVerification(int tcID, int tAId, Int32 exid, string testsuitename, string testplanname, string testcasename, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string[] datetimeTPTCTA)
        {
            List<string> returnStatus = new List<string>();

            string path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid;
            string filePath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid + @"\CECLog.txt";
            string starttime = DateTime.Now.ToString();

            try
            {
                Int32[] TAID_array = TAID.ToArray();

                string query = "select * from CECVerification where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";
                System.Data.DataTable cecVerify = QscDatabase.SendCommand_Toreceive(query);


                for (int i = 0; i < cecVerify.Rows.Count; i++)
                {
                    starttime = DateTime.Now.ToString();
                    string expectedvalue = string.Empty;

                    bool isPass = false;
                    string adaptorName = cecVerify.Rows[i][3].ToString();
                    string deviceName = cecVerify.Rows[i][4].ToString();
                    string cecCommand = cecVerify.Rows[i][5].ToString();
                    string opcode = cecVerify.Rows[i][6].ToString();
                    string cecverifyfrom = cecVerify.Rows[i][7].ToString();

                    expectedvalue = opcode;

                    string cecLogCollectTime = string.Empty;

                    if (cecverifyfrom == "Test Plan start time")
                        cecLogCollectTime = datetimeTPTCTA[0];
                    else if (cecverifyfrom == "Test Case start time")
                        cecLogCollectTime = datetimeTPTCTA[1];
                    else if (cecverifyfrom == "Tab start time")
                        cecLogCollectTime = datetimeTPTCTA[2];

                    string verificationCount = "CEC Verification : " + (i + 1);

                    if (Directory.Exists(path) && File.Exists(filePath))
                    {
                        //using (StreamReader read = new StreamReader(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Command.txt"))
                        using (StreamReader read = new StreamReader(filePath))
                        {
                            string val = string.Empty;
                            DateTime originalDatetime;
                            DateTime.TryParse(cecLogCollectTime, out originalDatetime);

                            while ((val = read.ReadLine()) != null)
                            {
                                string[] arr = val.Split(new[] { "*CEC*" }, StringSplitOptions.None);
                                
                                if (arr.Count() > 1)
                                {
                                    if(arr[0] != null && arr[1] != null && arr[0] != string.Empty && arr[1] != string.Empty)
                                    {
                                        DateTime reportDatetime;
                                        DateTime.TryParse(arr[0], out reportDatetime);

                                        if (originalDatetime <= reportDatetime)
                                        {
                                            arr[1] = arr[1].Replace(" ", string.Empty);
                                            if (arr[1] == opcode)
                                            {
                                                isPass = true;
                                                break;
                                            }
                                        }
                                    }                                    
                                }
                            }
                        }

                        if (!isPass)
                        {
                            returnStatus.Add("Fail");

                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', 'Expected opcode not received.','" + expectedvalue + "','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                        else
                        {
                            returnStatus.Add("Pass");

                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', '" + string.Empty + "','" + expectedvalue + "','" + expectedvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                    }
                    else
                    {
                        returnStatus.Add("Fail");

                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', 'No Opcode received / No CEC Acion','" + expectedvalue + "','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
           
            return returnStatus;
        }
        private List<string> ExecuteQRVerification(int tcID, int tAId, Int32 exid, string testsuitename, string testplanname, string testcasename, string Testactionname, string imagesavepath,Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string[] datetimeTPTCTA,string logsave, string runorrerun, string tabname)
        {
            List<string> returnStatus = new List<string>();

            string path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid;
            //string filePath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid + @"\CECLog.txt";
            string starttime = DateTime.Now.ToString();

            try
            {
                Int32[] TAID_array = TAID.ToArray();

                string query = "select * from QRVerification where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";
                System.Data.DataTable QRVerify = QscDatabase.SendCommand_Toreceive(query);


                for (int i = 0; i < QRVerify.Rows.Count; i++)
                {
                    List<string> cameraName1 = new List<string>();
                    List<string> cameraModel1 = new List<string>();
                    starttime = DateTime.Now.ToString();
                    string expectedvalue = string.Empty;
                    string Measuredvalue = "Not Applicable";
                    string cameraname = (QRVerify.Rows[i][3].ToString());
                    string cameraModel = QRVerify.Rows[i][4].ToString();
                    string qrValue = QRVerify.Rows[i][5].ToString();
                    expectedvalue = qrValue;
                    string verificationCount = "QR Verification : " + (i + 1);
                    string vcount= "QR Verification " + (i + 1);
                    QR_Reader QRcode = new QR_Reader();
                    cameraName1.Add(cameraname);
                    cameraModel1.Add(cameraModel);
                    var currentdeviceiplist = GetAllIpForSelectedAction(cameraName1,cameraModel1);
                    Tuple<bool, string, string> result = null;
                    QRcode.capture_image(currentdeviceiplist, qrValue, path, vcount, out result);
                    
                    if (!result.Item1)
                    {
                        returnStatus.Add("Fail");
                        if (result.Item3.ToString() != string.Empty)
                            Measuredvalue = result.Item3.ToString();
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "','" + result.Item2.ToString() + "' ,'" + expectedvalue + "','" + Measuredvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);

                        if (!string.IsNullOrEmpty(logsave) && logsave != "Never Save logs")
                        {
                            string logpath = string.Empty;
                            string filteredactionname = filtername(tabname);
                            if (runorrerun.ToUpper().Contains("RERUN"))
                                logpath = imagesavepath + "\\" + runorrerun + "_" + filteredactionname;

                            else
                                logpath = imagesavepath + "\\" + filteredactionname;


                            if (!Directory.Exists(logpath))
                                Directory.CreateDirectory(logpath);

                            if (File.Exists(System.IO.Path.Combine(path, vcount + ".jpg")))
                                File.Move(path + "\\" + vcount + ".jpg", logpath + "\\" + vcount + ".jpg");

                        }
                    }
                    else
                    {
                        returnStatus.Add("Pass");

                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', '" + string.Empty + "','" + expectedvalue + "','" + expectedvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                 }
            }
            catch (Exception ex)
            {
                returnStatus.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
          return returnStatus;
        }
        private List<string> USBAudioBridgeVerification(int tcid, int tabnumber, string testcasename, TreeViewExplorer PlanExecution, int exid, string Testsuitename, string Testplanname, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();

            try
            {
                string audioType = string.Empty;
                string componentPrettyName = string.Empty;
                string starttime = DateTime.Now.ToString();
                int i = 0;
                Int32[] TAID_array = TAID.ToArray();

                string query = "select BridgeName,AudioType,ComponentPrettyName,DefaultOption from UsbVerify where TCID = '" + tcid + "' and ActionID = '" + TAID_array[tabnumber] + "'";
                System.Data.DataTable tble = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    List<string> expectedValue = new List<string>();

                    i++;
                    string status = string.Empty;
                    //List<string> failstatus = new List<string>();
                    List<string> actualVal = new List<string>();

                    MMDevice currentDeviceName = null;

                    string deviceName = read[0].ToString();

                    audioType = read[1].ToString();
                    componentPrettyName = read[2].ToString();
                    string mediaType = read[3].ToString();
                    string bridgeName = deviceName;
                    if (audioType == "Playback" || audioType == "Recording")
                    {
                        string[] componentSplit = Regex.Split(componentPrettyName, " ");

                        if (componentSplit.Count() > 2)
                        {
                            //string deviceName = bridgeName + " " + componentSplit[1];

                            if (componentSplit[1] == "Speakerphone")
                            {
                                deviceName += " " + componentSplit[1];
                            }
                            else if(componentSplit[1] == "Sound" && componentSplit.Count() >= 3)
                            {
                                deviceName += " " + componentSplit[1] + " " + componentSplit[2];
                            }
                            else
                            {
                                if (componentSplit.Count() > 3)
                                {
                                    deviceName += " " + componentSplit[2];
                                }
                            }

                            EDataFlow dataFlow = EDataFlow.eAll;

                            if (audioType == "Playback")
                            {
                                dataFlow = EDataFlow.eRender;
                            }
                            else if (audioType == "Recording")
                            {
                                dataFlow = EDataFlow.eCapture;
                            }

                            var alldeviceFriendlyName = EndPoints.GetAllDeviceList(dataFlow);

                            if (alldeviceFriendlyName.Count > 0)
                            {
                                currentDeviceName = alldeviceFriendlyName.Find(item => item.DeviceFriendlyName.Equals(deviceName));

                                if (currentDeviceName == null)
                                {
                                    currentDeviceName = alldeviceFriendlyName.Find(item => item.DeviceFriendlyName.Equals(bridgeName));
                                    deviceName = bridgeName;
                                }
                            }

                            
                            if (currentDeviceName != null)
                            {
                                List<ERole> eroles = new List<ERole>();

                                if (string.Equals(mediaType, "Default device", StringComparison.CurrentCultureIgnoreCase))
                                {
                                    eroles.Add(ERole.eMultimedia);
                                }
                                else if (string.Equals(mediaType, "Default Communication", StringComparison.CurrentCultureIgnoreCase))
                                {
                                    eroles.Add(ERole.eCommunications);
                                }
                                else if (string.Equals(mediaType, "Both", StringComparison.CurrentCultureIgnoreCase))
                                {
                                    eroles.Add(ERole.eMultimedia);
                                    eroles.Add(ERole.eCommunications);
                                }
                                else if(mediaType == null || mediaType == string.Empty)
                                {
                                    mediaType = "Default device";
                                    eroles.Add(ERole.eMultimedia);
                                }

                                foreach (ERole eRole in eroles)
                                {
                                    var list = EndPoints.GetDefaultMMDevice(dataFlow, eRole);

                                    if (list != null)
                                    {
                                        string media = string.Empty;

                                        if (eRole == ERole.eMultimedia)
                                            media = "Default device";
                                        else
                                            media = "Default Communication";


                                        if (deviceName != null && deviceName != string.Empty && !expectedValue.Contains(deviceName + " set as " + media))
                                        {
                                            expectedValue.Add(deviceName + " set as " + media);
                                        }

                                        if (!actualVal.Contains(list.DeviceFriendlyName + " set as " + media))
                                            actualVal.Add(list.DeviceFriendlyName + " set as " + media);
                                    }

                                    if (list != null && list.FriendlyName == currentDeviceName.FriendlyName)
                                    {
                                        runStatus.Add("Pass");
                                        DeviceDiscovery.WriteToLogFile("USB Verification is Passed");
                                    }
                                    else
                                    {
                                        runStatus.Add("Fail");
                                        status = "Fail";

                                        //if (list != null)
                                        //{
                                        //    if (mediaType != "Both")
                                        //    {
                                        //        if (!failstatus.Contains(currentDeviceName.DeviceFriendlyName + " device is not set as " + mediaType))
                                        //            failstatus.Add(currentDeviceName.DeviceFriendlyName + " device is not set as " + mediaType);
                                        //    }
                                        //    else
                                        //    {
                                        //        if (!failstatus.Contains("The device is not set as default device and default communication"))
                                        //            failstatus.Add("The device is not set as default device and default communication");
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (mediaType != "Both")
                                        //    {
                                        //        if (!failstatus.Contains("The device is not set as " + mediaType))
                                        //            failstatus.Add("The device is not set as " + mediaType);
                                        //    }
                                        //    else
                                        //    { 
                                        //        if (!failstatus.Contains("The device is not set as default device and default communication"))
                                        //            failstatus.Add("The device is not set as default device and default communication");
                                        //    }
                                        //}

                                        DeviceDiscovery.WriteToLogFile("USB Verification is Failed");
                                    }
                                }
                            }
                            else
                            {
                                runStatus.Add("Fail");
                                status = "Fail";
                                actualVal.Add("Device is not connected");

                                //if(!failstatus.Contains(deviceName + " device is not available"))
                                //    failstatus.Add(deviceName + " device is not available");

                                DeviceDiscovery.WriteToLogFile("USB Verification is Failed");
                            }
                        }
                        else
                        {
                            runStatus.Add("Fail");
                            status = "Fail";
                            //failStatus = "USB Action is failed.";
                            DeviceDiscovery.WriteToLogFile("USB Verification is Failed");
                        }
                    }
                    else
                    {
                        runStatus.Add("Fail");
                        status = "Fail";
                        //failStatus = "AudioType (PlayBack or Recording) is not selected properly";
                        DeviceDiscovery.WriteToLogFile("USB Verification is Failed");
                    }

                    string verificationCount = "USB Verification : " + i;

                    
                    if(expectedValue.Count == 0 && deviceName != null && deviceName != string.Empty)
                    {
                        expectedValue.Add(deviceName);
                    }
                    
                    if (status == "Fail")
                    {
                        if(actualVal.Count == 0)
                        {
                            actualVal.Add("Measured Value is Empty");
                        }

                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', '" + string.Empty + "','" + string.Join(";", expectedValue) + "','" + string.Join(";", actualVal) + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + verificationCount + "', '" + string.Empty + "','" + string.Join(";", expectedValue) + "','" + string.Join(";", actualVal) + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }
            }
            catch(Exception ex)
            {
                runStatus.Add("Fail");
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return runStatus;
        }

        private Tuple<List<string>, string> ActionDynamicPairing(int tcID, int tAId,Int32 exid, string testsuitename, string testplanname, string testcasename,string Testactionname,Int32 CaseExecutionUniqueID,Int32 ActionTabCaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID)
        {
            List<string> runstatus = new List<string>();
            string NetPairActionAction = string.Empty;
            string status = "Pass";
            string starttime = DateTime.Now.ToString();

            try
            {
                List<string> deviceNameIndesignChk = new List<string>();
                List<string> deviceNameToNetPair = new List<string>();
                Int32[] TAID_array = TAID.ToArray();

                string query = "select DeviceNameInDesign,NetPairing from NetpairingAction where TCID = '" + tcID + "' and ActionID = '" + TAID_array[tAId] + "'";
                System.Data.DataTable tble = QscDatabase.SendCommand_Toreceive(query);

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    if (read[1].ToString() == "None")
                    {
                        deviceNameIndesignChk.Add(read[0].ToString());
                        deviceNameToNetPair.Add("None");
                    }
                    else if (read[1].ToString() != "Not Applicable")
                    {
                        deviceNameIndesignChk.Add(read[0].ToString());
                        deviceNameToNetPair.Add(read[1].ToString());
                    }
                    
                }

                if (deviceNameIndesignChk.Count > 0)
                {
                    bool stat = false;

                    if(core_New_FirmwareVersion.Item1)
                      stat = Set_Dynamic_Pairing_new(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);
                    else
                      stat = Set_Dynamic_Pairing(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);

                    if (stat == true)
                    {
                        status = "Pass";
                        runstatus.Add("Pass");
                        DeviceDiscovery.WriteToLogFile("Dynamic paring successfully applied");
                    }
                    else
                    {
                        status = "Fail";
                        runstatus.Add("Fail");
                        DeviceDiscovery.WriteToLogFile("Dynamic paring failed");
                    }

                    if (!runstatus.Contains("Fail"))
                    {
                        Tuple<bool, List<string>> dynamicChk = new Tuple<bool, List<string>>(false,null);

                        if (core_New_FirmwareVersion.Item1)
                            dynamicChk = VerifyDynamicPairing_new(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);
                        else
                            dynamicChk = VerifyDynamicPairing(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);
                                                
                        if (dynamicChk.Item1)
                        {
                            status = "Pass";
                            runstatus.Add("Pass");
                        }
                        else
                        {
                            status = "Fail";
                            runstatus.Add("Fail");
                            List<string> deviceName = dynamicChk.Item2;
                            NetPairActionAction = "NetPairing is failed in " + String.Join(",", deviceName) + "devices";
                        }
                    }
                    if (status == "Fail")
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','NetPairing Action', '" + NetPairActionAction + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','NetPairing Action', '" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }

                    return new Tuple<List<string>, string>(runstatus, NetPairActionAction);
                }
                else
                {
                    if (status == "Fail")
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','NetPairing Action', '" + NetPairActionAction + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','NetPairing Action', '" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    status = "Pass";
                    runstatus.Add("Pass");
                    return new Tuple<List<string>, string>(runstatus, NetPairActionAction);
                }


            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15026", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<List<string>, string>(runstatus, NetPairActionAction);
            }
        }

        private Tuple<bool, List<string>> VerifyDynamicPairing(string ipAddr, List<string> deviceNameIndesignChk, List<string> deviceNameToNetPair)
        {
            List<string> failureNetPair = new List<string>();
            try
            {
                XmlDocument xml = new XmlDocument();

                xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + ipAddr + "//designs//current_design//settings//device_pairing.xml", "dynamicPairingRequest");

                if (xml == null)
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + ipAddr + "/designs//current_design//settings//device_pairing.xml", "dynamicPairingRequest");
                if(xml==null)
                 return new Tuple<bool, List<string>>(false, failureNetPair);

                XmlNodeList node_device = xml.SelectNodes("inventory/device");

                if (node_device != null)
                {
                    string primary = string.Empty;
                    string dynamicPrimary = string.Empty;
                    failureNetPair.AddRange(deviceNameIndesignChk);

                    for (int i = 0; i < deviceNameIndesignChk.Count; i++)
                    {
                        foreach (XmlNode node in node_device)
                        {
                            if (node.Attributes["primary"] != null)
                            {
                                primary = node.Attributes["primary"].Value;
                                if (deviceNameIndesignChk[i] == primary)
                                {
                                    if (node.Attributes["dynamic_primary"] != null)
                                    {
                                        dynamicPrimary = node.Attributes["dynamic_primary"].Value;

                                        if (deviceNameToNetPair[i] == dynamicPrimary)
                                        {
                                            failureNetPair.Remove(deviceNameIndesignChk[i]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (failureNetPair.Count > 0)
                    return new Tuple<bool, List<string>>(false, failureNetPair);
                else
                    return new Tuple<bool, List<string>>(true, failureNetPair);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15013", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                hasdesign = false;
                return new Tuple<bool, List<string>>(false, failureNetPair);
            }
        }

        private Tuple<bool, List<string>> VerifyDynamicPairing_new(string ipAddr, List<string> deviceNameIndesignChk, List<string> deviceNameToNetPair)
        {
            List<string> failureNetPair = new List<string>();

            try
            {
                string response = string.Empty;
                var result = HttpGet_json("http://" + ipAddr + "/api/v0/systems/1/device_pairing", CoreLogonToken, ipAddr, applicationPassword, string.Empty, out response);

                if (result.Item1 == false && response == "503" && isBackupCoreAvailable == true && backup_selectedCoreIPAddress != null && backup_selectedCoreIPAddress != string.Empty)
                {
                    string redundancy_state = XmlReadToGetRedundancyState();
                    if (redundancy_state == "Standby")
                        result = HttpGet_json("http://" + backup_selectedCoreIPAddress + "/api/v0/systems/1/device_pairing", CoreLogonToken_Backup, backup_selectedCoreIPAddress, applicationPassword, string.Empty, out response);
                }

                if (response == string.Empty)
                    return new Tuple<bool, List<string>>(false, failureNetPair);

                //for pairing failed devices remarks
                failureNetPair.AddRange(deviceNameIndesignChk);

                //verify devices name
                dynamic array = new JavaScriptSerializer().DeserializeObject(response);

                foreach (var item in array)
                {
                    for (int i = 0; i < deviceNameIndesignChk.Count; i++)
                    {                        
                        if (String.Equals(deviceNameIndesignChk[i], item["name"].ToString(), StringComparison.CurrentCultureIgnoreCase))
                        {                      
                            if ((deviceNameToNetPair[i] == item["devicePairing"]["primary"].ToString()) || (deviceNameToNetPair[i]=="None" && item["devicePairing"]["mode"] == "none"))
                            {
                                failureNetPair.Remove(deviceNameIndesignChk[i]);
                            }   
                        }
                    }
                }

                if (failureNetPair.Count > 0)
                    return new Tuple<bool, List<string>>(false, failureNetPair);
                else
                    return new Tuple<bool, List<string>>(true, failureNetPair);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15013", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                hasdesign = false;
                return new Tuple<bool, List<string>>(false, failureNetPair);
            }
        }

        public Tuple<bool, string> CopyApxfiletolocalfolder(string filePath, string fileName, string message)
        {
            string localdirectpath = string.Empty;
            string localdirecpathWithName = string.Empty;

            try
            {
                string PreferencesServerPath = QatConstants.QATServerPath;
                if (PreferencesServerPath == string.Empty | !Directory.Exists(PreferencesServerPath))
                {
                    //ExecutionMessageBox("Please enter server path in preferences menu to perform Execution", "Message", MessageBoxButton.OK, MessageBoxImage.Information);
                    hasdesign = true;
                    return new Tuple<bool, string>(hasdesign, string.Empty);
                }
                else
                {
                    //string serverpathfile = System.IO.Path.Combine(PreferencesServerPath + @"\Audio Precision\AP Project Files\" + fileName);
                    string serverpathfile = System.IO.Path.Combine(PreferencesServerPath + filePath + "\\" + fileName);

                    if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    {
                        var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_"+ dupExecID + filePath;
                        localdirectpath = directorycreate;
                    }
                    else
                    {
                        var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_"+ dupExecID + filePath);
                        localdirectpath = directorycreate.FullName;
                    }

                    if (File.Exists(serverpathfile))
                    {
                        if (!Directory.Exists(localdirectpath))
                        {
                            Directory.CreateDirectory(localdirectpath);
                        }

                        localdirecpathWithName = System.IO.Path.Combine(localdirectpath, fileName);
                        //localpathfile = localdirectorypath + fileName;

                        if (!File.Exists(localdirecpathWithName))
                        {
                            File.Copy(serverpathfile, localdirecpathWithName);
                            File.SetAttributes(localdirectpath, FileAttributes.Normal);
                        }

                        hasdesign = false;
                        DeviceDiscovery.WriteToLogFile(message + " copied to local excution folder successfully: " + desgnname);
                        return new Tuple<bool, string>(hasdesign, localdirecpathWithName);
                    }
                    else
                    {
                        //ExecutionMessageBox(message + " is not available in server path, please reload the design using designer", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        hasdesign = true;
                        return new Tuple<bool, string>(hasdesign, localdirecpathWithName);
                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15013", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                hasdesign = true;
                DeviceDiscovery.WriteToLogFile("Design file not copied to local excution folder : " + desgnname);
                return new Tuple<bool, string>(hasdesign, localdirecpathWithName);
            }
        }

        public Tuple<List<string>, List<string>> AP_Execution(int tcID, int actionID, APx500 apx, string APxresultpath,Int32 exid,string testsuitename,string testplanname, string testCasename, string testActionname,Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runstatus = new List<string>();
            List<string> waveFileForDelete = new List<string>();
            string starttime = DateTime.Now.ToString();
            string verifyType = string.Empty;

            try
            {
                System.Data.DataTable tbl1 = new System.Data.DataTable();
                DataTableReader read1 = null;
                string query = "Select VerificationType,ApxPath from APVerification where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl1 = QscDatabase.SendCommand_Toreceive(query);
                read1 = tbl1.CreateDataReader();

                if (read1.HasRows)
                {
                    while (read1.Read())
                    {
                        verifyType = read1.GetValue(0).ToString();
                        string apxPath = read1.GetValue(1).ToString();
                        //FileInfo apexePath = new FileInfo(apxPath);
                        //string fileName = apexePath.Name;

                        Tuple<bool, string> isFileCopied = CopyApxfiletolocalfolder("\\Audio Precision\\AP Project Files", apxPath, "Ap File");

                        if (!isFileCopied.Item1)
                        {
                            System.Data.DataTable tbl = new System.Data.DataTable();
                            DataTableReader read = null;
                            query = "Select * from APSettings where TCID= " + tcID + " and ActionID =" + actionID + "";
                            tbl = QscDatabase.SendCommand_Toreceive(query);
                            read = tbl.CreateDataReader();

                            while (read.Read())
                            {
                                apx.OpenProject(isFileCopied.Item2);
                                waveFileForDelete.Add(isFileCopied.Item2);

                                if (!apx.Visible)
                                    apx.Visible = true;

                                string modeType = string.Empty;
                                if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                    modeType = read.GetValue(3).ToString();

                                if (modeType == "BenchMode")
                                {
                                    if(apx.OperatingMode != APxOperatingMode.BenchMode)
                                        apx.OperatingMode = APxOperatingMode.BenchMode;

                                    if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    {
                                        bool val = false;
                                        bool.TryParse(read.GetValue(4).ToString(), out val);
                                        apx.BenchMode.Generator.On = val;
                                    }

                                    //List<string> waveList = new  List<string >{"Sine", "Sine, Dual", "Sine, Var Phase", "IMD", "Noise" };
                                    string[] waveList = apx.BenchMode.Generator.WaveformNames;

                                    if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                    {
                                        if (waveList.Contains(read.GetValue(5).ToString()))
                                        {
                                            apx.BenchMode.Generator.Waveform = read.GetValue(5).ToString();
                                        }
                                        else
                                        {
                                            Tuple<bool, string> isWaveFileCopied = CopyApxfiletolocalfolder("\\Audio Precision\\AP Waveform Files", read.GetValue(5).ToString(), "Ap Wave File");
                                            if (!isWaveFileCopied.Item1)
                                            {
                                                waveFileForDelete.Add(isWaveFileCopied.Item2);
                                                apx.BenchMode.Generator.LoadWaveformFile(isWaveFileCopied.Item2, true);
                                            }
                                        }
                                    }

                                    if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    {
                                        bool val = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val);
                                        apx.BenchMode.Generator.Levels.TrackFirstChannel = val;
                                    }

                                    int cnt = 0;
                                    if (read.GetValue(36) != null && !string.IsNullOrEmpty(read.GetValue(36).ToString()))
                                    {
                                        Int32 val = 0;
                                        Int32.TryParse(read.GetValue(36).ToString(), out val);
                                        cnt = val;
                                    }

                                    if (cnt > 0)
                                    {
                                        if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                            apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(7).ToString());

                                        if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                            apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch1, read.GetValue(8).ToString());

                                        if (read.GetValue(25) != null && !string.IsNullOrEmpty(read.GetValue(25).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(25).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, val);
                                        }
                                    }

                                    if (cnt > 1)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch2, read.GetValue(9).ToString());

                                            if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch2, read.GetValue(10).ToString());
                                        }

                                        if (read.GetValue(26) != null && !string.IsNullOrEmpty(read.GetValue(26).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(26).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, val);
                                        }
                                    }

                                    if (cnt > 2)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch3, read.GetValue(11).ToString());

                                            if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch3, read.GetValue(12).ToString());
                                        }

                                        if (read.GetValue(27) != null && !string.IsNullOrEmpty(read.GetValue(27).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(27).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, val);
                                        }
                                    }

                                    if (cnt > 3)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch4, read.GetValue(13).ToString());

                                            if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch4, read.GetValue(14).ToString());
                                        }

                                        if (read.GetValue(28) != null && !string.IsNullOrEmpty(read.GetValue(28).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(28).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, val);
                                        }
                                    }

                                    if (cnt > 4)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch5, read.GetValue(15).ToString());

                                            if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch5, read.GetValue(16).ToString());
                                        }

                                        if (read.GetValue(29) != null && !string.IsNullOrEmpty(read.GetValue(29).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(29).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, val);
                                        }
                                    }

                                    if (cnt > 5)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch6, read.GetValue(17).ToString());

                                            if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch6, read.GetValue(18).ToString());
                                        }

                                        if (read.GetValue(30) != null && !string.IsNullOrEmpty(read.GetValue(30).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(30).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, val);
                                        }
                                    }

                                    if (cnt > 6)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch7, read.GetValue(19).ToString());

                                            if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch7, read.GetValue(20).ToString());
                                        }

                                        if (read.GetValue(31) != null && !string.IsNullOrEmpty(read.GetValue(31).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(31).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, val);
                                        }
                                    }

                                    if (cnt > 7)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(21) != null && !string.IsNullOrEmpty(read.GetValue(21).ToString()))
                                                apx.BenchMode.Generator.Levels.SetValue(OutputChannelIndex.Ch8, read.GetValue(21).ToString());

                                            if (read.GetValue(22) != null && !string.IsNullOrEmpty(read.GetValue(22).ToString()))
                                                apx.BenchMode.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch8, read.GetValue(22).ToString());
                                        }

                                        if (read.GetValue(32) != null && !string.IsNullOrEmpty(read.GetValue(32).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(32).ToString(), out val);
                                            apx.BenchMode.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, val);
                                        }
                                    }

                                    if (read.GetValue(23) != null && !string.IsNullOrEmpty(read.GetValue(23).ToString()))
                                        apx.BenchMode.Generator.Frequency.Text = read.GetValue(23).ToString();

                                    if (apx.BenchMode.Generator.Waveform == "Sine, Dual")
                                        if (read.GetValue(24) != null && !string.IsNullOrEmpty(read.GetValue(24).ToString()))
                                            apx.BenchMode.Generator.SineDual.FrequencyB.Text = read.GetValue(24).ToString();
                                }
                                else if (modeType == "SequenceMode")
                                {
                                    if(apx.OperatingMode != APxOperatingMode.SequenceMode)
                                        apx.OperatingMode = APxOperatingMode.SequenceMode;

                                    if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    {
                                        bool val = false;
                                        bool.TryParse(read.GetValue(4).ToString(), out val);
                                        apx.SignalPathSetup.Generator.On = val;
                                    }

                                    //List<string> waveList = new List<string> { "Sine", "Sine, Dual", "Sine, Var Phase", "Noise" };
                                    string[] waveList = apx.SignalPathSetup.Generator.WaveformNames;

                                    if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                    {
                                        if (waveList.Contains(read.GetValue(5).ToString()))
                                        {
                                            apx.SignalPathSetup.Generator.Waveform = read.GetValue(5).ToString();
                                        }
                                        else
                                        {
                                            Tuple<bool, string> isWaveFileCopied = CopyApxfiletolocalfolder("\\Audio Precision\\AP Waveform Files", read.GetValue(5).ToString(), "Ap Wave File");
                                            if (!isWaveFileCopied.Item1)
                                            {
                                                waveFileForDelete.Add(isWaveFileCopied.Item2);
                                                apx.SignalPathSetup.Generator.LoadWaveformFile(isWaveFileCopied.Item2, true);
                                            }
                                        }
                                    }

                                    //apx.SignalPathSetup.Generator.Waveform = read.GetValue(5).ToString();

                                    if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    {
                                        bool val = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val);
                                        apx.SignalPathSetup.Generator.Levels.TrackFirstChannel = val;
                                    }

                                    int cnt = 0;
                                    if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    {
                                        Int32 val = 0;
                                        Int32.TryParse(read.GetValue(35).ToString(), out val);
                                        cnt = val;
                                    }

                                    if (cnt > 0)
                                    {
                                        if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                            apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(7).ToString());

                                        if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                            apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch1, read.GetValue(8).ToString());

                                        if (read.GetValue(25) != null && !string.IsNullOrEmpty(read.GetValue(25).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(25).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, val);
                                        }
                                    }

                                    if (cnt > 1)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch2, read.GetValue(9).ToString());

                                            if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch2, read.GetValue(10).ToString());
                                        }

                                        if (read.GetValue(26) != null && !string.IsNullOrEmpty(read.GetValue(26).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(26).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, val);
                                        }
                                    }

                                    if (cnt > 2)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch3, read.GetValue(11).ToString());

                                            if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch3, read.GetValue(12).ToString());
                                        }

                                        if (read.GetValue(27) != null && !string.IsNullOrEmpty(read.GetValue(27).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(27).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, val);
                                        }
                                    }

                                    if (cnt > 3)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch4, read.GetValue(13).ToString());

                                            if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch4, read.GetValue(14).ToString());
                                        }

                                        if (read.GetValue(28) != null && !string.IsNullOrEmpty(read.GetValue(28).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(28).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, val);
                                        }
                                    }

                                    if (cnt > 4)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch5, read.GetValue(15).ToString());

                                            if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch5, read.GetValue(16).ToString());
                                        }

                                        if (read.GetValue(29) != null && !string.IsNullOrEmpty(read.GetValue(29).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(29).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, val);
                                        }
                                    }

                                    if (cnt > 5)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch6, read.GetValue(17).ToString());

                                            if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch6, read.GetValue(18).ToString());
                                        }

                                        if (read.GetValue(30) != null && !string.IsNullOrEmpty(read.GetValue(30).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(30).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, val);
                                        }
                                    }

                                    if (cnt > 6)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch7, read.GetValue(19).ToString());

                                            if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch7, read.GetValue(20).ToString());
                                        }

                                        if (read.GetValue(31) != null && !string.IsNullOrEmpty(read.GetValue(31).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(31).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, val);
                                        }
                                    }

                                    if (cnt > 7)
                                    {
                                        bool val1 = false;
                                        bool.TryParse(read.GetValue(6).ToString(), out val1);
                                        if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()) && val1)
                                        {
                                            if (read.GetValue(21) != null && !string.IsNullOrEmpty(read.GetValue(21).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetValue(OutputChannelIndex.Ch8, read.GetValue(21).ToString());

                                            if (read.GetValue(22) != null && !string.IsNullOrEmpty(read.GetValue(22).ToString()))
                                                apx.SignalPathSetup.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch8, read.GetValue(22).ToString());
                                        }

                                        if (read.GetValue(32) != null && !string.IsNullOrEmpty(read.GetValue(32).ToString()))
                                        {
                                            bool val = false;
                                            bool.TryParse(read.GetValue(32).ToString(), out val);
                                            apx.SignalPathSetup.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, val);
                                        }
                                    }

                                    if (read.GetValue(23) != null && !string.IsNullOrEmpty(read.GetValue(23).ToString()))
                                        apx.SignalPathSetup.Generator.Frequency.Text = read.GetValue(23).ToString();

                                    if (apx.SignalPathSetup.Generator.Waveform == "Sine, Dual")
                                        if (read.GetValue(24) != null && !string.IsNullOrEmpty(read.GetValue(24).ToString()))
                                            apx.SignalPathSetup.Generator.SineDual.FrequencyB.Text = read.GetValue(24).ToString();

                                    if (read.GetValue(33) != null && !string.IsNullOrEmpty(read.GetValue(33).ToString()))
                                        apx.SignalPathSetup.Generator.VerificationChannel = (SignalPathSetupOutputChannelIndex)Enum.Parse(typeof(SignalPathSetupOutputChannelIndex), read.GetValue(33).ToString());

                                    if (read.GetValue(34) != null && !string.IsNullOrEmpty(read.GetValue(34).ToString()))
                                        apx.SignalPathSetup.DeviceDelay.Text = read.GetValue(34).ToString();
                                }
                            }

                            Tuple<List<string>, List<String>> getMeasurement = null;
                            if (verifyType == "Level and Gain")
                            {
                                getMeasurement = AP_LevelandGainExecute(tcID, actionID, apx, APxresultpath, exid, testsuitename, testplanname, testCasename, testActionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                            }
                            else if (verifyType == "Frequency sweep")
                            {
                                runstatus.AddRange(AP_FreqResponseExecute(tcID, actionID, apx, APxresultpath, exid, testsuitename, testplanname, testCasename, testActionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                            }
                            else if (verifyType == "Phase")
                            {
                                runstatus.AddRange(AP_InterChannelPhaseExecute(tcID, actionID, apx, APxresultpath, exid, testsuitename, testplanname, testCasename, testActionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                            }
                            else if (verifyType == "Stepped Frequency Sweep")
                            {
                                runstatus.AddRange(AP_SteppedFreqSweepExecute(tcID, actionID, apx, APxresultpath, exid, testsuitename, testplanname, testCasename, testActionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                            }
                            else if (verifyType == "THD+N")
                            {
                                runstatus.AddRange(AP_THDNExecute(tcID, actionID, apx, APxresultpath, exid, testsuitename, testplanname, testCasename, testActionname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                            }

                            if (getMeasurement != null)
                            {
                                if(getMeasurement.Item1 != null)
                                    runstatus.AddRange(getMeasurement.Item1);

                                if (getMeasurement.Item2 != null)
                                    runstatus.AddRange(getMeasurement.Item2);
                            }

                            //RemoveProcess();
                        }
                        else
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','APx file copied is failed','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            runstatus.Add("Fail");
                            return new Tuple<List<string>, List<string>>(runstatus, waveFileForDelete);
                        }
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','Apx verification not available','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runstatus.Add("Fail");
                    return new Tuple<List<string>, List<string>>(runstatus, waveFileForDelete);
                }

                if (verifyType == null || verifyType == string.Empty)
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','" + string.Empty + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runstatus.Add("Pass");
                }

                return new Tuple<List<string>, List<string>>(runstatus, waveFileForDelete);
            }
            catch (APException ex)
            {
                //RemoveProcess();

                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20006", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runstatus.Add("Fail");
                return new Tuple<List<string>, List<string>>(runstatus, waveFileForDelete);
            }
            catch (Exception ex)
            {
                //RemoveProcess();

                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20006", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runstatus.Add("Fail");
                return new Tuple<List<string>, List<string>>(runstatus, waveFileForDelete);
            }
            finally
            {
                try
                {
                    RemoveProcess();
                }
                catch { }
            }
        }

        public void RemoveProcess()
        {
            try
            {
                Process application = null;
                foreach (var proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("AudioPrecision"))
                    {
                        application = proc;
                        if (application != null || application.Responding)
                        {
                            application.Kill();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public Tuple<List<string>, List<string>> AP_LevelandGainExecute(int tcID, int actionID, APx500 apx, string apxGraphPath, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            List<string> wavefileToDelete = new List<string>();
            string starttime = DateTime.Now.ToString();
            string ActionWithLoopValue = "APx Verification: Gain channel";

            try
            {
                System.Data.DataTable tbl = new System.Data.DataTable();
                DataTableReader read = null;
                string query = "Select * from LevelAndGain where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl = QscDatabase.SendCommand_Toreceive(query);
                read = tbl.CreateDataReader();
                while (read.Read())
                {
                    if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                        apx.OperatingMode = APxOperatingMode.SequenceMode;

                    int cnt = apx.Sequence[0].Count;
                    for (int i = 1; i < cnt; i++)
                    {
                        apx.ShowMeasurement(0, i);
                        if (apx.ActiveMeasurementType == MeasurementType.LevelAndGain)
                        {
                            //apx.Sequence[0].GetMeasurement(i).Checked = true;
                            //apx.LevelAndGain.Generator.On = Convert.ToBoolean(read.GetValue(3));

                            //List<string> waveList = new List<string> { "Sine", "Sine, Dual", "Sine, Var Phase" };
                            string[] waveList = apx.LevelAndGain.Generator.WaveformNames;

                            if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                            {
                                if (waveList.Contains(read.GetValue(4).ToString()))
                                {
                                    apx.LevelAndGain.Generator.Waveform = read.GetValue(4).ToString();
                                }
                                else
                                {
                                    Tuple<bool, string> isWaveFileCopied = CopyApxfiletolocalfolder("\\Audio Precision\\AP Waveform Files", read.GetValue(4).ToString(), "Ap Wave File");
                                    if (!isWaveFileCopied.Item1)
                                    {
                                        wavefileToDelete.Add(isWaveFileCopied.Item2);
                                        apx.LevelAndGain.Generator.LoadWaveformFile(isWaveFileCopied.Item2, true);
                                    }
                                }
                            }

                            //apx.LevelAndGain.Generator.Waveform = read.GetValue(4).ToString();
                            if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                            {
                                bool val = false;
                                bool.TryParse(read.GetValue(5).ToString(), out val);
                                apx.LevelAndGain.Generator.Levels.TrackFirstChannel = val;
                            }

                            int count = 0;
                            if (read.GetValue(39) != null && !string.IsNullOrEmpty(read.GetValue(39).ToString()))
                            {
                                Int32 val = 0;
                                Int32.TryParse(read.GetValue(39).ToString(), out val);
                                count = val;
                            }

                            if (count > 0)
                            {
                                if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(6).ToString());

                                if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch1, read.GetValue(7).ToString());

                                if (read.GetValue(23) != null && !string.IsNullOrEmpty(read.GetValue(23).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(23).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, val);
                                }
                            }

                            if (count > 1)
                            {
                                if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch2, read.GetValue(8).ToString());

                                if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch2, read.GetValue(9).ToString());

                                if (read.GetValue(24) != null && !string.IsNullOrEmpty(read.GetValue(24).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(24).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, val);
                                }
                            }

                            if (count > 2)
                            {
                                if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch3, read.GetValue(10).ToString());

                                if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch3, read.GetValue(11).ToString());

                                if (read.GetValue(25) != null && !string.IsNullOrEmpty(read.GetValue(25).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(25).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, val);
                                }
                            }

                            if (count > 3)
                            {
                                if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch4, read.GetValue(12).ToString());

                                if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch4, read.GetValue(13).ToString());

                                if (read.GetValue(26) != null && !string.IsNullOrEmpty(read.GetValue(26).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(26).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, val);
                                }
                            }

                            if (count > 4)
                            {
                                if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch5, read.GetValue(14).ToString());

                                if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch5, read.GetValue(15).ToString());

                                if (read.GetValue(27) != null && !string.IsNullOrEmpty(read.GetValue(27).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(27).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, val);
                                }
                            }

                            if (count > 5)
                            {
                                if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch6, read.GetValue(16).ToString());

                                if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch6, read.GetValue(17).ToString());

                                if (read.GetValue(28) != null && !string.IsNullOrEmpty(read.GetValue(28).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(28).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, val);
                                }
                            }

                            if (count > 6)
                            {
                                if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch7, read.GetValue(18).ToString());

                                if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch7, read.GetValue(19).ToString());

                                if (read.GetValue(29) != null && !string.IsNullOrEmpty(read.GetValue(29).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(29).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, val);
                                }
                            }

                            if (count > 7)
                            {
                                if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetValue(OutputChannelIndex.Ch8, read.GetValue(20).ToString());

                                if (read.GetValue(21) != null && !string.IsNullOrEmpty(read.GetValue(21).ToString()))
                                    apx.LevelAndGain.Generator.Levels.SetOffsetValue(OutputChannelIndex.Ch8, read.GetValue(21).ToString());

                                if (read.GetValue(30) != null && !string.IsNullOrEmpty(read.GetValue(30).ToString()))
                                {
                                    bool val = false;
                                    bool.TryParse(read.GetValue(30).ToString(), out val);
                                    apx.LevelAndGain.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, val);
                                }
                            }

                            if (read.GetValue(22) != null && !string.IsNullOrEmpty(read.GetValue(22).ToString()))
                                apx.LevelAndGain.Generator.Frequency.Text = read.GetValue(22).ToString();

                            if (apx.LevelAndGain.Generator.Waveform == "Sine, Dual")
                                if (read.GetValue(40) != null && !string.IsNullOrEmpty(read.GetValue(40).ToString()))
                                    apx.LevelAndGain.Generator.SineDual.FrequencyB.Text = read.GetValue(40).ToString();

                            //apx.Sequence.Run();
                            if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                apx.LevelAndGain.Generator.On = Convert.ToBoolean(read.GetValue(3));

                            //////////Verification
                            Thread.Sleep(5000);

                            //if (apx.LevelAndGain.Generator.On == true)
                            //{
                            double[] individualReading = null;
                            bool hasResult = false;

                            IMeasurement meas = apx.ActiveMeasurement;
                            foreach (IGraph results in meas.Graphs)
                            {
                                MeasurementResultType resType = results.ViewType;
                                if (resType == MeasurementResultType.LevelMeter)
                                {
                                    hasResult = true;
                                    IMeterGraph reading = apx.LevelAndGain.Level.Result.AsMeterGraph();
                                    //individualReading = reading.GetText();
                                    individualReading = reading.GetValues();

                                    int value = 31;
                                    int upValue = 41;
                                    int lowValue = 49;

                                    if (individualReading != null && individualReading.Length > 0)
                                    {
                                        for (int j = 0; j < individualReading.Length; j++)
                                        {
                                            starttime = DateTime.Now.ToString();
                                            ActionWithLoopValue = "APx Verification: Gain channel : " + (j + 1);
                                            string ExpectedValue = string.Empty;
                                            //string indRead = Regex.Replace(individualReading[j], "[^0-9.-]+", string.Empty);

                                            if (read.GetValue(value) != null && !string.IsNullOrEmpty(read.GetValue(value).ToString()))
                                            {
                                                string dBRead = Regex.Replace(read.GetValue(value).ToString(), "[^0-9.-]+", string.Empty);

                                                //if (indRead != string.Empty && dBRead != string.Empty && indRead != "----" && dBRead != "----")
                                                //{
                                                //double apReading = Convert.ToDouble(indRead);

                                                double dBReading = Convert.ToDouble(dBRead);

                                                if (read.GetValue(upValue) != null && read.GetValue(upValue).ToString() != string.Empty && read.GetValue(lowValue) != null && read.GetValue(lowValue).ToString() != string.Empty)
                                                {
                                                    string dbUpRead = Regex.Replace(read.GetValue(upValue).ToString(), "[^0-9.-]+", string.Empty);
                                                    string dbLowRead = Regex.Replace(read.GetValue(lowValue).ToString(), "[^0-9.-]+", string.Empty);

                                                    if (dbUpRead != string.Empty && dbLowRead != string.Empty && dbUpRead != "----" && dbLowRead != "----")
                                                    {
                                                        double dBUpperReading = Convert.ToDouble(dbUpRead);
                                                        double dBLowerReading = Convert.ToDouble(dbLowRead);
                                                        ExpectedValue = dBUpperReading + ">=" + individualReading[j] + ">=" + dBLowerReading;

                                                        if (dBUpperReading >= individualReading[j])
                                                        {
                                                            if (individualReading[j] >= dBLowerReading)
                                                            {
                                                                runStatus.Add("Pass");
                                                                //updating TempTestCaseActionTabTable Values
                                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + string.Empty + "','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                            }
                                                            else
                                                            {
                                                                runStatus.Add("Fail");
                                                                //updating TempTestCaseActionTabTable Values
                                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Value mismatched in lower reading','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                            }

                                                        }
                                                        else
                                                        {
                                                            runStatus.Add("Fail");
                                                            //updating TempTestCaseActionTabTable Values
                                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Value mismatched in upper reading','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        runStatus.Add("Fail");
                                                        //updating TempTestCaseActionTabTable Values
                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','No Reference for comparision','Not applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                    }
                                                }
                                                else
                                                {
                                                    if (individualReading[j] == dBReading)
                                                    {
                                                        runStatus.Add("Pass");
                                                        //updating TempTestCaseActionTabTable Values
                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + string.Empty + "','" + dBReading + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                    }
                                                    else
                                                    {
                                                        //updating TempTestCaseActionTabTable Values
                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Value mismatched','" + dBReading + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        runStatus.Add("Fail");
                                                    }
                                                }
                                                //}
                                                //else
                                                //{
                                                //    //updating TempTestCaseActionTabTable Values
                                                //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','No value received from APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                                //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                //    runStatus.Add("Fail");
                                                //}
                                            }
                                            else
                                            {
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','No Reference for comparision','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                runStatus.Add("Fail");
                                            }

                                            value++;
                                            upValue++;
                                            lowValue++;

                                        }
                                    }
                                    else
                                    {
                                        //updating TempTestCaseActionTabTable Values
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Gain Channel','No value received from APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                        runStatus.Add("Fail");
                                    }
                                    //}
                                    //else
                                    //    runStatus.Add("Fail");

                                    if (runStatus.Contains("Fail"))
                                    {
                                        if (!File.Exists(apxGraphPath))
                                        {
                                            if (!Directory.Exists(apxGraphPath))
                                            {
                                                Directory.CreateDirectory(apxGraphPath);
                                            }
                                        }

                                        string path = ApxGraphSavedPath(apxGraphPath, "LevelAndGain");
                                        results.Save(path, GraphImageType.PNG);
                                    }
                                }
                            }

                            if (hasResult == false)
                            {
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','"+ ActionWithLoopValue + "','No results found in Apx project file','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                runStatus.Add("Fail");
                            }

                            return new Tuple<List<string>, List<string>>(runStatus, wavefileToDelete);
                        }
                        else
                        {
                            apx.ShowMeasurement(0, i);
                        }
                    }
                }

                return new Tuple<List<string>, List<string>>(runStatus, wavefileToDelete);
            }
            catch (APException ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return new Tuple<List<string>, List<string>>(runStatus, wavefileToDelete);
            }
            catch (Exception ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return new Tuple<List<string>, List<string>>(runStatus, wavefileToDelete);
            }
        }

        public string ApxGraphSavedPath(string apxGraphPath,string fileName)
        {
            string path = string.Empty;
            try
            {
                
                int counter = 0;

                do
                {
                    if (counter == 0)
                    {
                        path = apxGraphPath + "\\" + fileName + ".png";
                    }
                    else
                    {
                        path = apxGraphPath + "\\" + fileName + "_" + counter + ".png";
                    }

                    counter++;

                } while (File.Exists(path));

                return path;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif//MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                return path;
            }
        }
		
        public List<string> AP_FreqResponseExecute(int tcID, int actionID, APx500 apx, string apxGraphPath, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            string starttime = DateTime.Now.ToString();
            try
            {
                System.Data.DataTable tbl = new System.Data.DataTable();
                DataTableReader read = null;
                string query = "Select * from APFrequencyResponse where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl = QscDatabase.SendCommand_Toreceive(query);
                read = tbl.CreateDataReader();
                if (read.HasRows)
                {
                    while (read.Read())
                    {
                        if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                            apx.OperatingMode = APxOperatingMode.SequenceMode;

                        bool hasMeasurement = false;
                        int cnt = apx.Sequence[0].Count;
                        for (int i = 1; i < cnt; i++)
                        {
                            apx.ShowMeasurement(0, i);
                            if (apx.ActiveMeasurementType == MeasurementType.FrequencyResponse)
                            {
                                hasMeasurement = true;
                                if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    apx.FrequencyResponse.Generator.StartFrequency.Text = read.GetValue(4).ToString();

                                if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                    apx.FrequencyResponse.Generator.StopFrequency.Text = read.GetValue(5).ToString();

                                if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    apx.FrequencyResponse.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(6).ToString());

                                int count = 0;
                                if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                {
                                    Int32 val = 0;
                                    Int32.TryParse(read.GetValue(15).ToString(), out val);
                                    count = val;
                                }

                                if (count > 0)
                                    if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, Convert.ToBoolean(read.GetValue(7)));

                                if (count > 1)
                                    if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, Convert.ToBoolean(read.GetValue(8)));

                                if (count > 2)
                                    if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, Convert.ToBoolean(read.GetValue(9)));

                                if (count > 3)
                                    if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, Convert.ToBoolean(read.GetValue(10)));

                                if (count > 4)
                                    if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, Convert.ToBoolean(read.GetValue(11)));

                                if (count > 5)
                                    if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, Convert.ToBoolean(read.GetValue(12)));

                                if (count > 6)
                                    if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, Convert.ToBoolean(read.GetValue(13)));

                                if (count > 7)
                                    if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                        apx.FrequencyResponse.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, Convert.ToBoolean(read.GetValue(14)));


                                if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                    if (Convert.ToBoolean(read.GetValue(3)))
                                        apx.FrequencyResponse.Start();

                                Thread.Sleep(5000);

                                string localPath = LocalTempPath();

                                string refTextFileName = string.Empty;
                                if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                    refTextFileName = read.GetValue(16).ToString();

                                if (refTextFileName != string.Empty)
                                {
                                    string refTxtFilePath = CreateVerficationTempPath(refTextFileName);

                                    if (refTxtFilePath != null && refTxtFilePath != string.Empty)
                                    {
                                        bool hasResult = false;
                                        IMeasurement meas = apx.ActiveMeasurement;
                                        foreach (IGraph results in meas.Graphs)
                                        {
                                            starttime = DateTime.Now.ToString();
                                            MeasurementResultType resType = results.ViewType;
                                            if (resType == MeasurementResultType.GainVsFrequency)
                                            {
                                                hasResult = true;
                                                string sheetName = results.Name;

                                                bool isExported = ExportFreqResponseGraph(apx, localPath, results);

                                                if (isExported == true)
                                                    runStatus.AddRange(ReadApxXYGraphExcelValues(apx, localPath, sheetName, refTxtFilePath, exid, testsuitename, testplanname, testCasename, testActionname, "Frequency Response", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                                                else
                                                {
                                                    runStatus.Add("Fail");
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','Error occured during exporting the graph informations','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                                    return runStatus;
                                                }

                                                if (runStatus.Contains("Fail"))
                                                {
                                                    if (!File.Exists(apxGraphPath))
                                                    {
                                                        if (!Directory.Exists(apxGraphPath))
                                                        {
                                                            Directory.CreateDirectory(apxGraphPath);
                                                        }
                                                    }

                                                    string path = ApxGraphSavedPath(apxGraphPath, "FreqResponse");
                                                    results.Save(path, GraphImageType.PNG);
                                                }
                                            }
                                        }

                                        if (hasResult == false)
                                        {
                                            //updating TempTestCaseActionTabTable Values
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','No results in Apx project file','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','Verification file is not available in server path','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                        runStatus.Add("Fail");
                                    }

                                    if (File.Exists(localPath))
                                    {
                                        File.SetAttributes(localPath, FileAttributes.Normal);
                                        File.Delete(localPath);
                                    }

                                    if (File.Exists(refTxtFilePath))
                                    {
                                        File.SetAttributes(refTxtFilePath, FileAttributes.Normal);
                                        File.Delete(refTxtFilePath);
                                    }

                                    return runStatus;
                                }
                                else
                                {
                                    //updating TempTestCaseActionTabTable Values
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','Reference files are not available for this measurement','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    runStatus.Add("Fail");
                                    return runStatus;
                                }
                            }
                        }

                        if (hasMeasurement == false)
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','No Measurement available in APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            runStatus.Add("Fail");
                        }
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','No Verification settings found','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runStatus.Add("Fail");
                }
                
                return runStatus;
            }
            catch (APException ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
            catch (Exception ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Frequency response',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);
                
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
        }

        private bool ExportFreqResponseGraph(APx500 ap, string localPath, IGraph results)
        {
            try
            {
                if (File.Exists(localPath))
                {
                    File.SetAttributes(localPath, FileAttributes.Normal);
                    File.Delete(localPath);
                }

                ap.FrequencyResponse.Gain.ExportData(localPath, results.Result.AsXYGraph().XAxis.Unit, results.Result.AsXYGraph().YAxis.Unit);
                return true;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "The object does not contain any data to export. Export operation aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public List<string> AP_InterChannelPhaseExecute(int tcID, int actionID, APx500 apx, string apxGraphPath, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname,Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            string starttime = DateTime.Now.ToString();
            try
            {
                System.Data.DataTable tbl = new System.Data.DataTable();
                DataTableReader read = null;
                string query = "Select * from APPhaseSettings where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl = QscDatabase.SendCommand_Toreceive(query);
                read = tbl.CreateDataReader();
                if (read.HasRows)
                {
                    while (read.Read())
                    {
                        if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                            apx.OperatingMode = APxOperatingMode.SequenceMode;

                        bool isMeasurementTrue = false;
                        int cnt = apx.Sequence[0].Count;
                        for (int i = 1; i < cnt; i++)
                        {
                            apx.ShowMeasurement(0, i);
                            if (apx.ActiveMeasurementType == MeasurementType.InterchannelPhase)
                            {
                                isMeasurementTrue = true;

                                if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    apx.InterchannelPhase.Generator.Levels.TrackFirstChannel = Convert.ToBoolean(read.GetValue(4));

                                int outChCount = 0;
                                if (read.GetValue(24) != null && !string.IsNullOrEmpty(read.GetValue(24).ToString()))
                                {
                                    Int32 val = 0;
                                    Int32.TryParse(read.GetValue(24).ToString(), out val);
                                    outChCount = val;
                                }

                                int inChCount = 0;
                                if (read.GetValue(25) != null && !string.IsNullOrEmpty(read.GetValue(25).ToString()))
                                {
                                    Int32 val = 0;
                                    Int32.TryParse(read.GetValue(25).ToString(), out val);
                                    inChCount = val;
                                }

                                if (outChCount > 0)
                                {
                                    if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(5).ToString());

                                    if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, Convert.ToBoolean(read.GetValue(14)));
                                }

                                if (outChCount > 1)
                                {
                                    if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch2, read.GetValue(6).ToString());

                                    if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, Convert.ToBoolean(read.GetValue(15)));
                                }

                                if (outChCount > 2)
                                {
                                    if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch3, read.GetValue(7).ToString());

                                    if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, Convert.ToBoolean(read.GetValue(16)));
                                }

                                if (outChCount > 3)
                                {
                                    if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch4, read.GetValue(8).ToString());

                                    if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, Convert.ToBoolean(read.GetValue(17)));
                                }

                                if (outChCount > 4)
                                {
                                    if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch5, read.GetValue(9).ToString());

                                    if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, Convert.ToBoolean(read.GetValue(18)));
                                }

                                if (outChCount > 5)
                                {
                                    if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch6, read.GetValue(10).ToString());

                                    if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, Convert.ToBoolean(read.GetValue(19)));
                                }

                                if (outChCount > 6)
                                {
                                    if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch7, read.GetValue(11).ToString());

                                    if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, Convert.ToBoolean(read.GetValue(20)));
                                }

                                if (outChCount > 7)
                                {
                                    if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                        apx.InterchannelPhase.Generator.Levels.SetValue(OutputChannelIndex.Ch8, read.GetValue(12).ToString());

                                    if (read.GetValue(21) != null && !string.IsNullOrEmpty(read.GetValue(21).ToString()))
                                        apx.InterchannelPhase.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, Convert.ToBoolean(read.GetValue(21)));
                                }

                                if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                    apx.InterchannelPhase.Generator.Frequency.Text = read.GetValue(13).ToString();

                                if (read.GetValue(22) != null && !string.IsNullOrEmpty(read.GetValue(22).ToString()))
                                    apx.InterchannelPhase.ReferenceChannel = (InputChannelIndex)Enum.Parse(typeof(InputChannelIndex), read.GetValue(22).ToString(), true);

                                string meterRange = string.Empty;
                                if (read.GetValue(23) != null && !string.IsNullOrEmpty(read.GetValue(23).ToString()))
                                    meterRange = read.GetValue(23).ToString();

                                if (meterRange == "0 -> 360 deg")
                                {
                                    meterRange = "ZeroTo360";
                                }
                                else if (meterRange == "-90 -> 270 deg")
                                {
                                    meterRange = "Minus90To270";
                                }
                                else if (meterRange == "-180 -> 180 deg")
                                {
                                    meterRange = "Minus180To180";
                                }

                                apx.InterchannelPhase.MeterRange = (PhaseMeterRange)Enum.Parse(typeof(PhaseMeterRange), meterRange, true);

                                if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                    apx.InterchannelPhase.Generator.On = Convert.ToBoolean(read.GetValue(3));

                                Thread.Sleep(5000);

                                //if (apx.InterchannelPhase.Generator.On == true)
                                //{
                                string localPath = LocalTempPath();

                                string refTextFileName = string.Empty;
                                if (read.GetValue(26) != null && !string.IsNullOrEmpty(read.GetValue(26).ToString()))
                                    refTextFileName = read.GetValue(26).ToString();

                                if (refTextFileName != string.Empty)
                                {
                                    bool isResultTrue = false;
                                    string refTxtFilePath = CreateVerficationTempPath(refTextFileName);

                                    if (refTxtFilePath != null && refTxtFilePath != string.Empty)
                                    {
                                        IMeasurement meas = apx.ActiveMeasurement;
                                        foreach (IGraph results in meas.Graphs)
                                        {
                                            MeasurementResultType resType = results.ViewType;
                                            if (resType == MeasurementResultType.PhaseMeter)
                                            {
                                                isResultTrue = true;

                                                IMeterGraph reading = apx.InterchannelPhase.Phase.Result.AsMeterGraph();
                                                var individualReading = reading.GetValues();
                                                runStatus.AddRange(CompareBarValueWithRefValues(individualReading, refTxtFilePath, starttime, exid, testsuitename, testplanname, testCasename, testActionname, "InterChannelPhase", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));

                                                //string sheetName = results.Name;
                                                //bool isExported = ExportInterChPhaseGraph(apx, localPath, results);

                                                //if (isExported)
                                                //    runStatus.AddRange(ReadApxBarGraphExcelValues(apx, localPath, sheetName, refTxtFilePath, exid, testsuitename, testplanname, testCasename, testActionname, "InterChannel Phase", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                                                //else
                                                //{
                                                //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" +starttime  + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Interchannel phase','Error occured during exporting the graph informations','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                                //    runStatus.Add("Fail");

                                                //    return runStatus;
                                                //}

                                                if (runStatus.Contains("Fail"))
                                                {
                                                    if (!File.Exists(apxGraphPath))
                                                    {
                                                        if (!Directory.Exists(apxGraphPath))
                                                        {
                                                            Directory.CreateDirectory(apxGraphPath);
                                                        }
                                                    }

                                                    string path = ApxGraphSavedPath(apxGraphPath, "InterChannelPhase");
                                                    results.Save(path, GraphImageType.PNG);
                                                }
                                            }
                                        }

                                        if (isResultTrue == false)
                                        {
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','No results found in Apx project file','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','Verification file is not available in server path','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                        runStatus.Add("Fail");
                                    }

                                    if (File.Exists(localPath))
                                    {
                                        File.SetAttributes(localPath, FileAttributes.Normal);
                                        File.Delete(localPath);
                                    }

                                    if (File.Exists(refTxtFilePath))
                                    {
                                        File.SetAttributes(refTxtFilePath, FileAttributes.Normal);
                                        File.Delete(refTxtFilePath);
                                    }
                                }
                                else
                                {
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','Reference files are not available for this measurement','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    runStatus.Add("Fail");
                                }
                                //}
                                //else
                                //{
                                //    runStatus.Add("Fail");
                                //    return runStatus;
                                //}
                            }
                        }

                        if (isMeasurementTrue == false)
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','No Measurement available in APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            runStatus.Add("Fail");
                        }
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','No Verification settings found','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runStatus.Add("Fail");
                }
                return runStatus;
            }
            catch (APException ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
            catch (Exception ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: InterChannelPhase',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
        }

        private bool ExportInterChPhaseGraph(APx500 ap, string localPath, IGraph results)
        {
            try
            {
                if (File.Exists(localPath))
                {
                    File.SetAttributes(localPath, FileAttributes.Normal);
                    File.Delete(localPath);
                }

                ap.InterchannelPhase.Phase.ExportData(localPath, results.Result.AsMeterGraph().Axis.Unit);
                return true;
            }
            catch (Exception ex)
            {
                if (ex.Message != "The object does not contain any data to export. Export operation aborted.")
                    //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public List<string> AP_SteppedFreqSweepExecute(int tcID, int actionID, APx500 apx, string apxGraphPath, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname,Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            string starttime = DateTime.Now.ToString();

            try
            {
                System.Data.DataTable tbl = new System.Data.DataTable();
                DataTableReader read = null;
                string query = "Select * from APSteppedFreqSweepSettings where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl = QscDatabase.SendCommand_Toreceive(query);
                read = tbl.CreateDataReader();
                if (read.HasRows)
                {
                    while (read.Read())
                    {
                        if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                            apx.OperatingMode = APxOperatingMode.SequenceMode;

                        bool hasMeasurement = false;
                        int cnt = apx.Sequence[0].Count;
                        for (int i = 1; i < cnt; i++)
                        {
                            apx.ShowMeasurement(0, i);
                            if (apx.ActiveMeasurementType == MeasurementType.SteppedFrequencySweep)
                            {
                                hasMeasurement = true;

                                if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    apx.SteppedFrequencySweep.Generator.StartFrequency.Text = read.GetValue(4).ToString();

                                if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                    apx.SteppedFrequencySweep.Generator.StopFrequency.Text = read.GetValue(5).ToString();

                                string stepType = string.Empty;
                                if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                    stepType = read.GetValue(6).ToString();

                                if (stepType == "Logarithmic")
                                    stepType = "Log";
                                else if (stepType == "Linear")
                                    stepType = "Lin";

                                apx.SteppedFrequencySweep.Generator.SweepParameters.StepType = (SweepStepType)Enum.Parse(typeof(SweepStepType), stepType, true);

                                if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                    apx.SteppedFrequencySweep.Generator.SweepParameters.NumberOfPoints = Convert.ToInt32(read.GetValue(7));

                                if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                    apx.SteppedFrequencySweep.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(8).ToString());

                                int outChCount = 0;
                                if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                {
                                    Int32 val = 0;
                                    Int32.TryParse(read.GetValue(18).ToString(), out val);
                                    outChCount = val;
                                }

                                int inChCount = 0;
                                if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                {
                                    Int32 val = 0;
                                    Int32.TryParse(read.GetValue(19).ToString(), out val);
                                    inChCount = val;
                                }

                                if (outChCount > 0)
                                {
                                    if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, Convert.ToBoolean(read.GetValue(9)));
                                }

                                if (outChCount > 1)
                                {
                                    if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, Convert.ToBoolean(read.GetValue(10)));
                                }

                                if (outChCount > 2)
                                {
                                    if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, Convert.ToBoolean(read.GetValue(11)));
                                }

                                if (outChCount > 3)
                                {
                                    if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, Convert.ToBoolean(read.GetValue(12)));
                                }

                                if (outChCount > 4)
                                {
                                    if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, Convert.ToBoolean(read.GetValue(13)));
                                }

                                if (outChCount > 5)
                                {
                                    if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, Convert.ToBoolean(read.GetValue(14)));
                                }

                                if (outChCount > 6)
                                {
                                    if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, Convert.ToBoolean(read.GetValue(15)));
                                }

                                if (outChCount > 7)
                                {
                                    if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                        apx.SteppedFrequencySweep.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, Convert.ToBoolean(read.GetValue(16)));
                                }

                                if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                    apx.SteppedFrequencySweep.PhaseReferenceChannel = (InputChannelIndex)Enum.Parse(typeof(InputChannelIndex), read.GetValue(17).ToString(), true);

                                if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                    if (Convert.ToBoolean(read.GetValue(3)))
                                        apx.SteppedFrequencySweep.Start();

                                Thread.Sleep(5000);

                                string localPath = LocalTempPath();

                                string refTextFileName = string.Empty;
                                if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                    refTextFileName = read.GetValue(20).ToString();

                                if (refTextFileName != string.Empty)
                                {
                                    string refTxtFilePath = CreateVerficationTempPath(refTextFileName);
                                    
                                    if (refTxtFilePath != null && refTxtFilePath != string.Empty)
                                    {
                                        bool hasResult = false;
                                        IMeasurement meas = apx.ActiveMeasurement;
                                        foreach (IGraph results in meas.Graphs)
                                        {
                                            MeasurementResultType resType = results.ViewType;
                                            if (resType == MeasurementResultType.GainVsFrequency)
                                            {
                                                hasResult = true;
                                                string sheetName = results.Name;

                                                bool hasExcelExist = ExportSteppedFreqSweepGraph(apx, localPath, results);
                                                if (hasExcelExist)
                                                {
                                                    runStatus.AddRange(ReadApxXYGraphExcelValues(apx, localPath, sheetName, refTxtFilePath, exid, testsuitename, testplanname, testCasename, testActionname, "Stepped Frequency Sweep", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                                                }
                                                else
                                                {
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','Error occured during exporting the graph informations','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                                    runStatus.Add("Fail");
                                                    return runStatus;
                                                }

                                                if (runStatus.Contains("Fail"))
                                                {
                                                    if (!File.Exists(apxGraphPath))
                                                    {
                                                        if (!Directory.Exists(apxGraphPath))
                                                        {
                                                            Directory.CreateDirectory(apxGraphPath);
                                                        }
                                                    }

                                                    string path = ApxGraphSavedPath(apxGraphPath, "SteppedFreqSweep");
                                                    results.Save(path, GraphImageType.PNG);
                                                }
                                            }
                                        }

                                        if (hasResult == false)
                                        {
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','No results found in Apx project file','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','Verification file is not available in server path','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                        runStatus.Add("Fail");
                                    }

                                    if (File.Exists(localPath))
                                    {
                                        File.SetAttributes(localPath, FileAttributes.Normal);
                                        File.Delete(localPath);
                                    }

                                    if (File.Exists(refTxtFilePath))
                                    {
                                        File.SetAttributes(refTxtFilePath, FileAttributes.Normal);
                                        File.Delete(refTxtFilePath);
                                    }
                                }
                                else
                                {
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','Reference files are not available for this measurement','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                    runStatus.Add("Fail");
                                    return runStatus;
                                }
                            }
                        }

                        if (hasMeasurement == false)
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','No Measurement available in APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            
                            runStatus.Add("Fail");
                        }
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" +starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','No Verification settings found','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runStatus.Add("Fail");
                }

                return runStatus;
            }
            catch (APException ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
            catch (Exception ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: Stepped Frequency Sweep',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
        }

        private bool ExportSteppedFreqSweepGraph(APx500 ap, string localPath, IGraph results)
        {
            try
            {
                if (File.Exists(localPath))
                {
                    File.SetAttributes(localPath, FileAttributes.Normal);
                    File.Delete(localPath);
                }

                ap.SteppedFrequencySweep.Gain.ExportData(localPath, results.Result.AsXYGraph().XAxis.Unit, results.Result.AsXYGraph().YAxis.Unit);
                return true;
            }
            catch (Exception ex)
            {
                if (ex.Message != "The object does not contain any data to export. Export operation aborted.")
                    //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public List<string> AP_THDNExecute(int tcID, int actionID, APx500 apx, string apxGraphPath, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            string starttime = DateTime.Now.ToString();

            try
            {
                System.Data.DataTable tbl = new System.Data.DataTable();
                DataTableReader read = null;
                string query = "Select * from APTHDNSettings where TCID= " + tcID + " and ActionID =" + actionID + "";
                tbl = QscDatabase.SendCommand_Toreceive(query);
                read = tbl.CreateDataReader();
                if (read.HasRows)
                {
                    while (read.Read())
                    {
                        if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                            apx.OperatingMode = APxOperatingMode.SequenceMode;

                        bool hasMeasurement = false;
                        int cnt = apx.Sequence[0].Count;
                        for (int i = 1; i < cnt; i++)
                        {
                            apx.ShowMeasurement(0, i);
                            if (apx.ActiveMeasurementType == MeasurementType.ThdN)
                            {
                                hasMeasurement = true;

                                if (read.GetValue(4) != null && !string.IsNullOrEmpty(read.GetValue(4).ToString()))
                                    apx.ThdN.Generator.Levels.TrackFirstChannel = Convert.ToBoolean(read.GetValue(4));

                                int outChCount = 0;
                                if (read.GetValue(26) != null && !string.IsNullOrEmpty(read.GetValue(26).ToString()))
                                    outChCount = Convert.ToInt32(read.GetValue(26));

                                if (outChCount > 0)
                                {
                                    if (read.GetValue(5) != null && !string.IsNullOrEmpty(read.GetValue(5).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch1, read.GetValue(5).ToString());

                                    if (read.GetValue(14) != null && !string.IsNullOrEmpty(read.GetValue(14).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch1, Convert.ToBoolean(read.GetValue(14)));
                                }

                                if (outChCount > 1)
                                {
                                    if (read.GetValue(6) != null && !string.IsNullOrEmpty(read.GetValue(6).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch2, read.GetValue(6).ToString());

                                    if (read.GetValue(15) != null && !string.IsNullOrEmpty(read.GetValue(15).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch2, Convert.ToBoolean(read.GetValue(15)));
                                }

                                if (outChCount > 2)
                                {
                                    if (read.GetValue(7) != null && !string.IsNullOrEmpty(read.GetValue(7).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch3, read.GetValue(7).ToString());

                                    if (read.GetValue(16) != null && !string.IsNullOrEmpty(read.GetValue(16).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch3, Convert.ToBoolean(read.GetValue(16)));
                                }

                                if (outChCount > 3)
                                {
                                    if (read.GetValue(8) != null && !string.IsNullOrEmpty(read.GetValue(8).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch4, read.GetValue(8).ToString());

                                    if (read.GetValue(17) != null && !string.IsNullOrEmpty(read.GetValue(17).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch4, Convert.ToBoolean(read.GetValue(17)));
                                }

                                if (outChCount > 4)
                                {
                                    if (read.GetValue(9) != null && !string.IsNullOrEmpty(read.GetValue(9).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch5, read.GetValue(9).ToString());

                                    if (read.GetValue(18) != null && !string.IsNullOrEmpty(read.GetValue(18).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch5, Convert.ToBoolean(read.GetValue(18)));
                                }

                                if (outChCount > 5)
                                {
                                    if (read.GetValue(10) != null && !string.IsNullOrEmpty(read.GetValue(10).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch6, read.GetValue(10).ToString());

                                    if (read.GetValue(19) != null && !string.IsNullOrEmpty(read.GetValue(19).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch6, Convert.ToBoolean(read.GetValue(19)));
                                }

                                if (outChCount > 6)
                                {
                                    if (read.GetValue(11) != null && !string.IsNullOrEmpty(read.GetValue(11).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch7, read.GetValue(11).ToString());

                                    if (read.GetValue(20) != null && !string.IsNullOrEmpty(read.GetValue(20).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch7, Convert.ToBoolean(read.GetValue(20)));
                                }

                                if (outChCount > 7)
                                {
                                    if (read.GetValue(12) != null && !string.IsNullOrEmpty(read.GetValue(12).ToString()))
                                        apx.ThdN.Generator.Levels.SetValue(OutputChannelIndex.Ch8, read.GetValue(12).ToString());

                                    if (read.GetValue(21) != null && !string.IsNullOrEmpty(read.GetValue(21).ToString()))
                                        apx.ThdN.Generator.SetChannelEnabled(OutputChannelIndex.Ch8, Convert.ToBoolean(read.GetValue(21)));
                                }

                                if (read.GetValue(13) != null && !string.IsNullOrEmpty(read.GetValue(13).ToString()))
                                    apx.ThdN.Generator.Frequency.Text = read.GetValue(13).ToString();

                                if (read.GetValue(22) != null && !string.IsNullOrEmpty(read.GetValue(22).ToString()))
                                    apx.ThdN.LowpassFilterType = (MeasurementLowpassFilterType)Enum.Parse(typeof(MeasurementLowpassFilterType), read.GetValue(22).ToString(), true);

                                if (read.GetValue(23) != null && !string.IsNullOrEmpty(read.GetValue(23).ToString()))
                                    apx.ThdN.HighpassFilterType = (MeasurementHighpassFilterType)Enum.Parse(typeof(MeasurementHighpassFilterType), read.GetValue(23).ToString(), true);

                                string noiseWeight = string.Empty;
                                if (read.GetValue(24) != null && !string.IsNullOrEmpty(read.GetValue(24).ToString()))
                                    noiseWeight = read.GetValue(24).ToString();

                                if (noiseWeight == "Signal Path")
                                {
                                    noiseWeight = "SignalPath";
                                }
                                else if (noiseWeight == "A-wt.")
                                {
                                    noiseWeight = "wt_A";
                                }
                                else if (noiseWeight == "B-wt.")
                                {
                                    noiseWeight = "wt_B";
                                }
                                else if (noiseWeight == "C-wt.")
                                {
                                    noiseWeight = "wt_C";
                                }
                                else if (noiseWeight == "CCIR-1k")
                                {
                                    noiseWeight = "wt_Ccir";
                                }
                                else if (noiseWeight == "CCIR-2k")
                                {
                                    noiseWeight = "wt_Dolby2k";
                                }
                                else if (noiseWeight == "CCITT")
                                {
                                    noiseWeight = "wt_Ccitt";
                                }
                                else if (noiseWeight == "C-Message")
                                {
                                    noiseWeight = "wt_CMessage";
                                }
                                else if (noiseWeight == "50 us de-emph.")
                                {
                                    noiseWeight = "wt_Deemph50us";
                                }
                                else if (noiseWeight == "75 us de-emph.")
                                {
                                    noiseWeight = "wt_Deemph75us";
                                }
                                else if (noiseWeight == "50 us de-emph. + A-wt.")
                                {
                                    noiseWeight = "wt_Deemph50usA";
                                }
                                else if (noiseWeight == "75 us de-emph. + A-wt.")
                                {
                                    noiseWeight = "wt_Deemph75usA";
                                }

                                apx.ThdN.NoiseWeighting = (WeightingFilterType)Enum.Parse(typeof(WeightingFilterType), noiseWeight, true);

                                if (read.GetValue(25) != null && !string.IsNullOrEmpty(read.GetValue(25).ToString()))
                                    apx.ThdN.NotchTuningMode = (FilterTuningType)Enum.Parse(typeof(FilterTuningType), read.GetValue(25).ToString(), true);

                                if (read.GetValue(27) != null && !string.IsNullOrEmpty(read.GetValue(27).ToString()))
                                {
                                    apx.ThdN.LowpassFilterFrequency.Text = read.GetValue(27).ToString();
                                }

                                if (read.GetValue(28) != null && !string.IsNullOrEmpty(read.GetValue(28).ToString()))
                                {
                                    apx.ThdN.HighpassFilterFrequency.Text = read.GetValue(28).ToString();
                                }

                                if (read.GetValue(29) != null && !string.IsNullOrEmpty(read.GetValue(29).ToString()))
                                {
                                    apx.ThdN.NotchFilterFrequency.Text = read.GetValue(29).ToString();
                                }

                                if (read.GetValue(3) != null && !string.IsNullOrEmpty(read.GetValue(3).ToString()))
                                    apx.ThdN.Generator.On = Convert.ToBoolean(read.GetValue(3));

                                Thread.Sleep(5000);

                                //if (apx.ThdN.Generator.On == true)
                                //{
                                string localPath = LocalTempPath();

                                string refTextFileName = string.Empty;

                                if (read.GetValue(30) != null && !string.IsNullOrEmpty(read.GetValue(30).ToString()))
                                    refTextFileName = read.GetValue(30).ToString();

                                if (refTextFileName != string.Empty)
                                {
                                    bool hasResult = false;
                                    string refTxtFilePath = CreateVerficationTempPath(refTextFileName);
                                    if (refTxtFilePath != null && refTxtFilePath != string.Empty)
                                    {
                                        IMeasurement meas = apx.ActiveMeasurement;
                                        foreach (IGraph results in meas.Graphs)
                                        {
                                            MeasurementResultType resType = results.ViewType;
                                            if (resType == MeasurementResultType.ThdNLevelMeter)
                                            {
                                                hasResult = true;
                                                //string sheetName = results.Name;
                                                //int channelCount = apx.ThdN.ThdNLevel.ChannelCount;

                                                //if (channelCount == 1)
                                                //{
                                                IMeterGraph reading = apx.ThdN.ThdNLevel.Result.AsMeterGraph();
                                                var individualReading = reading.GetValues();
                                                runStatus.AddRange(CompareBarValueWithRefValues(individualReading, refTxtFilePath, starttime, exid, testsuitename, testplanname, testCasename, testActionname, "THD+N", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                                                //}
                                                //else
                                                //{
                                                //    bool isExported = ExportTHDNGraph(apx, localPath, results);

                                                //    if (isExported)
                                                //        runStatus.AddRange(ReadApxBarGraphExcelValues(apx, localPath, sheetName, refTxtFilePath, exid, testsuitename, testplanname, testCasename, testActionname, "APx Verification: THD+N", CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID));
                                                //    else
                                                //    {
                                                //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','ThdN','Error occured during exporting the graph informations','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                                //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                                //        runStatus.Add("Fail");
                                                //        return runStatus;
                                                //    }
                                                //}

                                                if (runStatus.Contains("Fail"))
                                                {
                                                    if (!File.Exists(apxGraphPath))
                                                    {
                                                        if (!Directory.Exists(apxGraphPath))
                                                        {
                                                            Directory.CreateDirectory(apxGraphPath);
                                                        }
                                                    }

                                                    string path = ApxGraphSavedPath(apxGraphPath, "THDN");
                                                    results.Save(path, GraphImageType.PNG);
                                                }
                                            }
                                        }

                                        if (hasResult == false)
                                        {
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + string.Empty + "','" + DateTime.Now.ToString() + "','APx Verification: ThdN','No results found in Apx project file','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN','Verification file is not available in server path','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                        runStatus.Add("Fail");
                                    }

                                    if (File.Exists(localPath))
                                    {
                                        File.SetAttributes(localPath, FileAttributes.Normal);
                                        File.Delete(localPath);
                                    }

                                    if (File.Exists(refTxtFilePath))
                                    {
                                        File.SetAttributes(refTxtFilePath, FileAttributes.Normal);
                                        File.Delete(refTxtFilePath);
                                    }
                                }
                                else
                                {
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN','Reference files are not available for this measurement','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                    runStatus.Add("Fail");
                                }
                                //}
                                //else
                                //{
                                //    runStatus.Add("Fail");
                                //    return runStatus;
                                //}
                            }
                        }

                        if (hasMeasurement == false)
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN','No Measurement available in APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            runStatus.Add("Fail");
                        }
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN','No Verification settings found','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    runStatus.Add("Fail");
                }

                return runStatus;
            }
            catch (APException ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN','Audio Precision exception occured','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
            catch (Exception ex)
            {
                string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: ThdN',@Exception,'Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, "@Exception", "Exception occured: " + ex.Message, string.Empty, string.Empty);

                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20011", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return runStatus;
            }
        }

        private List<string> CompareBarValueWithRefValues(double[] individualReading, string refTxtFilePath, string starttime, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname, string measurementName, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> runStatus = new List<string>();
            string query = string.Empty;

            try
            {
                if (individualReading != null && individualReading.Length > 0)
                {
                    for (int j = 0; j < individualReading.Length; j++)
                    {
                        //if (!Double.IsNaN(individualReading[j]))
                        //{
                        string ActionWithLoopValue = "APx Verification: " + measurementName + " channel " + (j + 1);

                        List<string> lines = System.IO.File.ReadAllLines(refTxtFilePath).Select(line => string.Join("", line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries))).Where(arg => !string.IsNullOrWhiteSpace(arg)).ToList();

                        if (lines.Count > 0)
                        {
                            Double[,] refLowerVal = new Double[0, 0];
                            Double[,] refUpperVal = new Double[0, 0];

                            foreach (string line in lines)
                            {
                                if (line.Contains("Ch" + (j + 1)) & line.Contains("Lower"))
                                {
                                    refLowerVal = new Double[0, 0];
                                    refLowerVal = ReturnBarReferenceValue(line, refLowerVal);
                                }

                                if (line.Contains("Ch" + (j + 1)) & line.Contains("Upper"))
                                {
                                    refUpperVal = new Double[0, 0];
                                    refUpperVal = ReturnBarReferenceValue(line, refLowerVal);
                                }
                            }

                            if (refLowerVal != null && refLowerVal.Length > 0 && refUpperVal != null && refUpperVal.Length > 0)
                            {
                                if (!Double.IsNaN(individualReading[j]))
                                {
                                    string ExpectedValue = refUpperVal[0, 0] + ">=" + individualReading[j] + ">=" + refLowerVal[0, 0];

                                    if (refLowerVal[0, 0] <= individualReading[j])
                                    {
                                        if (refUpperVal[0, 0] >= individualReading[j])
                                        {
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                            runStatus.Add("Pass");
                                        }
                                        else
                                        {
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Failed in Upper limit','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Failed in Lower limit','" + ExpectedValue + "','" + individualReading[j] + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                        runStatus.Add("Fail");
                                    }
                                }
                                else
                                {
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Value not received from APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    runStatus.Add("Fail");
                                }
                            }
                            else
                            {
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Reference not in the expected format for channel " + (j + 1) + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                runStatus.Add("Fail");
                            }
                        }
                        else
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Reference values are not available ','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            runStatus.Add("Fail");
                        }
                        //}
                        //else
                        //{
                        //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + measurementName + "','No value received for channel " + j + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                        //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                        //    runStatus.Add("Fail");
                        //}
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + DateTime.Now.ToString() + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: " +  measurementName + "','No value received from APx','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    runStatus.Add("Fail");
                }

                return runStatus;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBo"Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                runStatus.Add("Fail");
                return runStatus;
            }
        }

        private bool ExportTHDNGraph(APx500 ap, string localPath, IGraph results)
        {
            try
            {
                if (File.Exists(localPath))
                {
                    File.SetAttributes(localPath, FileAttributes.Normal);
                    File.Delete(localPath);
                }

                ap.ThdN.ThdNLevel.ExportData(localPath, results.Result.AsMeterGraph().Axis.Unit);
                return true;
            }
            catch (Exception ex)
            {
                if (ex.Message != "The object does not contain any data to export. Export operation aborted.")
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
        }

        public string LocalTempPath()
        {
            string path = string.Empty;
            try
            {
                string localdirectpath = string.Empty;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_"+ dupExecID+"\\Audio Precision\\Other Files";
                    localdirectpath = directorycreate;
                }
                else
                {
                    var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_"+ dupExecID +"\\Audio Precision\\Other Files");
                    localdirectpath = directorycreate.FullName;
                }

                if (!Directory.Exists(localdirectpath))
                {
                    Directory.CreateDirectory(localdirectpath);
                }

                int counter = 0;

                do
                {
                    if (counter == 0)
                    {
                        path = localdirectpath + @"\Graph" + ".xls";
                    }
                    else
                    {
                        path = localdirectpath + @"\Graph" + "_" + counter + ".xls";
                    }

                    counter++;

                } while (File.Exists(path));

                return path;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return path;
            }
        }

        public string CreateVerficationTempPath(string refTextFileName)
        {
            string path = string.Empty;

            try
            {
                if (refTextFileName != string.Empty)
                {
                    string PreferencesServerPath = QatConstants.QATServerPath;

                    string serverpathfile = System.IO.Path.Combine(PreferencesServerPath + "\\Audio Precision\\Verification Files", refTextFileName);
                    if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                    {
                        var directorycreate = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_"+ dupExecID+"\\Audio Precision\\Verification Files";
                        localdirectorypath = directorycreate;
                    }
                    else
                    {
                        var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_"+ dupExecID+"\\Audio Precision\\Verification Files");
                        localdirectorypath = directorycreate.FullName;
                    }

                    if (File.Exists(serverpathfile))
                    {
                        if (!Directory.Exists(localdirectorypath))
                        {
                            Directory.CreateDirectory(localdirectorypath);
                        }

                        path = System.IO.Path.Combine((localdirectorypath), refTextFileName);
                        if (!File.Exists(path))
                        {
                            File.Copy(serverpathfile, (path));
                            File.SetAttributes(path, FileAttributes.Normal);
                        }

                        DeviceDiscovery.WriteToLogFile("Verification file copied to local excution folder successfully: " + refTextFileName);
                        return path;
                    }
                    else
                    {
                        //ExecutionMessageBox("Verification file is not available in server path", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        hasdesign = true;
                        return path;
                    }
                }

                return path;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return path;
            }
        }

        private System.Data.DataTable ReadDataTableValuesFromExcel(string filePath, string sheetName)
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            try
            {
                using (System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection())
                {
                    //if (fileExtension == ".xls")
                    //conn.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath + ";" + "Extended Properties='Excel 8.0;HDR=YES;'";

                    if (System.IO.Path.GetExtension(filePath).ToLower().Trim() == ".xls" && Environment.Is64BitOperatingSystem == false)
                        conn.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    else
                        conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";

                    using (System.Data.OleDb.OleDbCommand comm = new System.Data.OleDb.OleDbCommand())
                    {
                        comm.CommandText = "Select * from [" + sheetName + "$]";

                        comm.Connection = conn;

                        using (System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter())
                        {
                            da.SelectCommand = comm;
                            da.Fill(dt);

                            da.Dispose();
                        }

                        comm.Dispose();
                    }

                    conn.Dispose();
                }

                return dt;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return dt;
            }
        }

        private Double[,] ReturnXYReferenceValue(string line, Double[,] refereneceVal)
        {
            try
            {
                Regex regex = new Regex(@"\(([^)]*)\)");
                MatchCollection matches = regex.Matches(line);

                refereneceVal = new Double[matches.Count, 2];
                for (int j = 0; j < matches.Count; j++)
                {
                    string replaceVal = matches[j].Value.Replace("(", string.Empty).Replace(")", string.Empty);
                    string[] splitVal = replaceVal.Split(',');

                    if (splitVal != null && splitVal.Count() > 0 && splitVal[0] != null && splitVal[0] != string.Empty)
                    {
                        refereneceVal[j, 0] = Convert.ToDouble(splitVal[0]);
                    }
                    else
                        return null;

                    if (splitVal != null && splitVal.Count() > 0 && splitVal[1] != null && splitVal[1] != string.Empty)
                    {
                        refereneceVal[j, 1] = Convert.ToDouble(splitVal[1]);
                    }
                    else
                        return null;
                }

                return refereneceVal;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC2000XXXXXXXX", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
ExecutionMessageBo"Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }

        private Double[,] ReturnBarReferenceValue(string line, Double[,] refereneceVal)
        {
            try
            {
                string[] respSplit = Regex.Split(line, ":");
                string[] individualVal = Regex.Split(respSplit[1], ",");
                refereneceVal = new Double[1, 1];

                for (int i = 0; i < individualVal.Count(); i++)
                {
                    double xAxisLowerVal = 0;
                    if (individualVal[i] != null && individualVal[i] != string.Empty && double.TryParse(individualVal[i], out xAxisLowerVal))
                    {
                        refereneceVal[0, 0] = xAxisLowerVal;
                        return refereneceVal;
                    }
                }

                return refereneceVal;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC2000XXXXXX", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return refereneceVal;
            }
        }

        private List<string> ReadApxXYGraphExcelValues(APx500 apx, string filePath, string sheetName, string refTxtFilePath ,Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname,string measurementname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            List<string> passFailStatus = new List<string>();
            string query = string.Empty;
            string starttime = DateTime.Now.ToString();
            try
            {
                System.Data.DataTable dt = ReadDataTableValuesFromExcel(filePath, sheetName);

                List<string> lines = System.IO.File.ReadAllLines(refTxtFilePath).Select(line => string.Join("", line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries))).Where(arg => !string.IsNullOrWhiteSpace(arg)).ToList();

                if (dt != null && dt.Rows.Count > 0)
                {
                    if (lines.Count > 0)
                    {
                        int rowCnt = dt.Rows.Count;
                        int colCnt = dt.Columns.Count;
                        int lineCnt = 1;

                        for (int i = 0; i < colCnt; i++)
                        {
                            Double[,] actualVal = new Double[rowCnt - 3, 2];

                            for (int j = 3; j < rowCnt; j++)
                            {
                                double xAxisVal = 0;
                                if (dt.Rows[j][i] != null && dt.Rows[j][i].ToString() != string.Empty && double.TryParse(dt.Rows[j][i].ToString(), out xAxisVal))
                                    actualVal[j - 3, 0] = xAxisVal;

                                double yAxisVal = 0;
                                if (dt.Rows[j][i + 1] != null && dt.Rows[j][i + 1].ToString() != string.Empty && double.TryParse(dt.Rows[j][i + 1].ToString(), out yAxisVal))
                                    actualVal[j - 3, 1] = yAxisVal;
                            }

                            Double[,] refLowerVal = new Double[0, 0];
                            Double[,] refUpperVal = new Double[0, 0];

                            foreach (string line in lines)
                            {
                                if (line.Contains("Ch" + lineCnt) & line.Contains("Lower"))
                                {
                                    refLowerVal = new Double[0, 0];
                                    refLowerVal = ReturnXYReferenceValue(line, refLowerVal);
                                }

                                if (line.Contains("Ch" + lineCnt) & line.Contains("Upper"))
                                {
                                    refUpperVal = new Double[0, 0];
                                    refUpperVal = ReturnXYReferenceValue(line, refLowerVal);
                                }
                            }

                            if (refLowerVal != null && refLowerVal.Length > 0 && refUpperVal != null && refUpperVal.Length > 0)
                            {
                                bool passFail = VerifyAPResults(actualVal, refLowerVal, refUpperVal, exid, testsuitename, testplanname, testCasename, testActionname, measurementname, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, lineCnt);

                                if (passFail)
                                {
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "APx Verification : " + measurementname + " Channel " + lineCnt + "','" + string.Empty + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    passFailStatus.Add("Pass");
                                }
                                else
                                {
                                    passFailStatus.Add("Fail");
                                }
                            }
                            else
                            {
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: " + measurementname + " Channel " + lineCnt + "','Reference not in the expected format for channel " + lineCnt + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                                passFailStatus.Add("Fail");
                            }

                            i++;
                            lineCnt++;
                        }

                        if (colCnt == 0)
                        {
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: " + measurementname + "','Excel value is not available','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                            passFailStatus.Add("Fail");
                        }
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: " + measurementname + "','Reference vaule is not available','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                        passFailStatus.Add("Fail");
                    }
                }
                else
                {
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification: " + measurementname + "','Failed to export Excel from APX','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);

                    passFailStatus.Add("Fail");
                }

                return passFailStatus;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception in AP\n " + ex.Message, "Error Code - EC20007", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                passFailStatus.Add("Fail");
                return passFailStatus;
            }
        }

        public Tuple<List<string>,string> Execute_Control_Action(int tcid, int tabnumber, string testcasename,int exid,string Testsuitename,string Testplanname,string Testactionname,Int32 CaseExecutionUniqueID,Int32 ActionTabCaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID)
        {
            List<string> set_status = new List<string>();
            string Background_Fail_remarks = string.Empty;
            //System.Data.DataTable cecverification_count = null;
            //CecSharpClient cecClient = null;

            try
            {
                List<string> action_command = new List<string>();
                List<string> componentname_list = new List<string>();
                List<string> action_value = new List<string>();
                List<string> ramp_value = new List<string>();
                List<string> Selection_Type = new List<string>();
                List<string> Loop_values = new List<string>();
                List<string> Loop_count = new List<string>();
                List<string> controlDataType = new List<string>();
                Int32[] TAID_array = TAID.ToArray();

                string query = "select componentname,Componentproperty,Componentvalue,RampValue,InputSelectionType,LoopStatus,LoopStartValue,LoopEndValue,LoopIncrValue,AllChannelControls,ControlDatatype from controlaction where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                List<string> controlName = new List<string>();

                
                //if (tble.Rows.Count > 0)
                //{
                    //cecClient = new CecSharpClient();
                    //if (cecClient.Connect(10000))
                    //{
                        //query = "select * from CECVerification where TCID = '" + tcid + "' and ActionID = '" + TAID_array[tabnumber] + "'";
                        //cecverification_count = QscDatabase.SendCommand_Toreceive(query);

                        //if(cecverification_count.Rows.Count > 0)
                        //{
                        //open_libcec.SetLogEnable(true,exid);
                        //}
                    //}
                //}

                while (read.Read())
                {
                    //componentName = read.GetString(0);
                    controlName.Add(read.GetString(1));
                    componentname_list.Add(read.GetString(0));
                    action_command.Add(read.GetString(0) + read.GetString(1));
                    action_value.Add(read.GetString(2).Trim());
                    if (read[3] != System.DBNull.Value)
                    {
                        ramp_value.Add(read.GetString(3));
                    }
                    else
                    {
                        ramp_value.Add(string.Empty);
                    }
                    if (read[4] != System.DBNull.Value)
                    {
                        Selection_Type.Add(read.GetString(4));
                    }
                    else
                    {
                        Selection_Type.Add(string.Empty);
                    }
                    if ((read[5] != System.DBNull.Value)&& (read[6] != System.DBNull.Value)&& (read[7] != System.DBNull.Value)&& (read[8] != System.DBNull.Value)&&(read[9] != System.DBNull.Value))
                    {
                        if (read.GetString(9) != string.Empty)
                        {
                            var loopCountandCommands = loopCommands(read.GetString(5), read.GetString(6), read.GetString(7), read.GetString(8), read.GetString(9));
                            Loop_values.Add(loopCountandCommands.Item1.Trim());
                            Loop_count.Add(loopCountandCommands.Item2.Trim());
                        }
                        else
                        {
                            Loop_values.Add(string.Empty);
                            Loop_count.Add(string.Empty);
                        }
                    }
                    else
                    {
                        Loop_values.Add(string.Empty);
                        Loop_count.Add(string.Empty);
                    }
                    if (read[10] != System.DBNull.Value)
                    {
                        controlDataType.Add(read.GetString(10));
                    }
                    else
                    {
                        controlDataType.Add(string.Empty);
                    }

                }

                string[] name_array = componentname_list.ToArray();
                string[] command_array = action_command.ToArray();
                string[] value_array = action_value.ToArray();
                string[] ramp_array = ramp_value.ToArray();
                string[] Selection_array = Selection_Type.ToArray();
                string[] Loop_controls = Loop_values.ToArray();
                string[] Loop_count_value = Loop_count.ToArray();
                string[] controls_DataType = controlDataType.ToArray();
                for (int j = 0; j < command_array.Length; j++)
                {
                    if(Loop_controls[j] == string.Empty)
                    {
                        string[] arr;
                        if (ramp_array[j] != string.Empty)
                        {
                            //if(Loop_controls[j]==string.Empty)
                            //{
                            arr = new string[5];
                            arr[0] = command_array[j];
                            arr[1] = value_array[j];
                            arr[2] = ramp_array[j];
                            arr[3] = Selection_array[j];
                            arr[4] = controls_DataType[j];
                            //}


                        }
                        else
                        {
                            arr = new string[4];
                            arr[0] = command_array[j];
                            arr[1] = value_array[j];
                            arr[2] = Selection_array[j];
                            arr[3] = controls_DataType[j];
                        }

                        if (arr[0] != string.Empty )
                        {
                            set_status.AddRange(RunSet(arr, testcasename,exid,Testsuitename,Testplanname,Testactionname,-1,j, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, controlName[j], componentname_list[j]));
                            arr[0] = string.Empty;
                            arr[1] = string.Empty;
                            if (arr.Length == 4)
                            {
                                arr[2] = string.Empty;
                                arr[3] = string.Empty;
                            }
                            else if ((arr.Length == 5))
                            {
                                arr[2] = string.Empty;
                                arr[3] = string.Empty;
                                arr[4] = string.Empty;
                            }
                        }
                        else
                        {
                            string status = string.Empty;
                            status = "Fail";
                            set_status.Add(status);
                        }
                    }
                    else
                    {
                        string[] channel_array;
                        if (ramp_array[j] != string.Empty)
                        {
                            string[] arrayofcommands = Loop_controls[j].Split('|');
                            string[] arrayofcounts = Loop_count_value[j].Split(',');
                            for (int i = 0; i < arrayofcommands.Length; i++)
                            {
                                int channelNumber = 0;
                                if (arrayofcommands.Length == arrayofcounts.Length)
                                {
                                    channelNumber = Convert.ToInt32(arrayofcounts[i]);
                                }
                                else
                                {
                                    channelNumber = i;
                                }
                                channel_array = new string[5];
                                channel_array[0] = name_array[j]+arrayofcommands[i];
                                channel_array[1] = value_array[j];
                                channel_array[2] = ramp_array[j];
                                channel_array[3] = Selection_array[j];
                                channel_array[4] = controls_DataType[j];

                                if (channel_array[0] != string.Empty && channel_array[1] != string.Empty)
                                {
                                    set_status.AddRange(RunSet(channel_array, testcasename,exid,Testsuitename,Testplanname,Testactionname, channelNumber, j, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, arrayofcommands[i], componentname_list[j]));
                                    channel_array[0] = string.Empty;
                                    channel_array[1] = string.Empty;
                                    if (channel_array.Length == 4)
                                    {
                                        channel_array[2] = string.Empty;
                                        channel_array[3] = string.Empty;
                                    }
                                    else if ((channel_array.Length == 5))
                                    {
                                        channel_array[2] = string.Empty;
                                        channel_array[3] = string.Empty;
                                        channel_array[4] = string.Empty;
                                    }
                                }
                                else
                                {
                                    string status = string.Empty;
                                    status = "Fail";
                                    set_status.Add(status);
                                }
                            }
                        }
                        else
                        {
                            string[] arrayofcommands = Loop_controls[j].Split('|');
                            string[] arrayofcounts = Loop_count_value[j].Split(',');
                            for (int i = 0; i < arrayofcommands.Length; i++)
                            {
                                int channelNumber = 0;
                                if (arrayofcommands.Length == arrayofcounts.Length)
                                {
                                    channelNumber = Convert.ToInt32(arrayofcounts[i]);
                                }
                                else
                                {
                                    channelNumber = i;
                                }
                                channel_array = new string[4];
                                channel_array[0] = name_array[j] + arrayofcommands[i];
                                channel_array[1] = value_array[j];
                                channel_array[2] = Selection_array[j];
                                channel_array[3] = controls_DataType[j];

                                if (channel_array[0] != string.Empty && channel_array[1] != string.Empty)
                                {
                                    set_status.AddRange(RunSet(channel_array, testcasename, exid, Testsuitename, Testplanname, Testactionname, channelNumber, j, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, arrayofcommands[i], componentname_list[j]));
                                    channel_array[0] = string.Empty;
                                    channel_array[1] = string.Empty;
                                    if (channel_array.Length == 4)
                                    {
                                        channel_array[2] = string.Empty;
                                        channel_array[3] = string.Empty;
                                    }
                                    else if ((channel_array.Length == 5))
                                    {
                                        channel_array[2] = string.Empty;
                                        channel_array[3] = string.Empty;
                                        channel_array[4] = string.Empty;
                                    }
                                }
                                else
                                {
                                    string status = string.Empty;
                                    status = "Fail";
                                    set_status.Add(status);
                                }
                            }
                        }                                                 
                    }                
                }
				
                action_command.Clear();
                action_value.Clear();
                ramp_value.Clear();
                Selection_Type.Clear();
                Loop_values.Clear();
                Loop_count.Clear();
                return new Tuple<List<string>,string>( set_status, Background_Fail_remarks);

            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15017", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                set_status.Add("Fail");
                return new Tuple<List<string>, string>(set_status, Background_Fail_remarks);
            }
        }

        public Tuple<string,string> loopCommands(string loopStatus, string loopStart, string loopEnd, string loopIncr, string loopcontrols)
        {
            List<string> finalcommands = new List<string>();
            List<string> channelCount = new List<string>();
            try
            {
                if((string.Equals("True", loopStatus, StringComparison.CurrentCultureIgnoreCase))&& (loopStatus != string.Empty)&& (loopStatus != string.Empty)&& (loopStatus != string.Empty)&& (loopStatus != string.Empty))
                {
                    string[] allchannelcontrols = loopcontrols.Split('|');
                    for (int i = Convert.ToInt32(loopStart); i <= Convert.ToInt32(loopEnd); i += Convert.ToInt32(loopIncr))
                    {
                        finalcommands.Add(allchannelcontrols[i - 1]);
                        channelCount.Add(i.ToString());
                    }
                }
               string countList= string.Join(",", channelCount.ToArray());
               string commandList = string.Join("|", finalcommands.ToArray());
                return  new Tuple<string,string>(commandList, countList);
            }
            catch(Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15017L", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<string, string>(string.Empty, string.Empty);
               
            }
        }

        public Tuple<List<string>, string> Execute_Telnet_Action(int tcid, int tabnumber, string testcasename, string BMtype, int exid, string Testsuitename, string Testplanname, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID,string BM_start_end,string BMdetail,Int32 TempPlanBackground_Pkey)
        {
            List<string> set_status = new List<string>();
            string Background_Fail_remarks = string.Empty;
            string starttime = DateTime.Now.ToString();
            try
            {
                List<string> selectedtelnetdevices = new List<string>();
                List<string> selectedtelnetcommands = new List<string>();
                List<string> selectedtelnetdeviceModel = new List<string>();

                Int32[] TAID_array = TAID.ToArray();
                string query = string.Empty;
                ////gets Telnetactiondevices from database
                if (BMtype == string.Empty)
                {
                    query = "select devicesname,telnetcommand,DeviceModel from TelnetAction where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                }
                else if (BMtype == "BM")
                {
                    query = "select Devicesname,Telenetcommand,DeviceModel from TelenetMonitor where BMID=('" + tcid + "')";
                }

                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                while (read.Read())
                {
                    selectedtelnetdevices.Add(read.GetString(0));
                    selectedtelnetcommands.Add(read.GetString(1).Trim());

                    if (read.GetValue(2) != null)
                        selectedtelnetdeviceModel.Add(read.GetValue(2).ToString());
                    else
                        selectedtelnetdeviceModel.Add(string.Empty);
                }

                if ((Properties.Settings.Default.TelnetUserName != string.Empty) && (Properties.Settings.Default.TelnetPassword != string.Empty))
                {
                    for (int actioncommands = 0; actioncommands < selectedtelnetcommands.Count; actioncommands++)
                    {
                        starttime = DateTime.Now.ToString();
                        string ActionWithLoopValue = "Ssh/Telnet Action: " + (actioncommands + 1);
                        string status = "Pass";
                        List<string> taFailedCommands = new List<string>();

                        string[] roots = Properties.Settings.Default.TelnetUserName.Split(',');
                        string[] declines = Properties.Settings.Default.TelnetPassword.Split(',');


                        //string root = Properties.Settings.Default.TelnetUserName;
                        //string decline = Properties.Settings.Default.TelnetPassword;
                        string commandtelnet = selectedtelnetcommands[actioncommands];
                        if (commandtelnet != string.Empty)
                        {
                            List<string> Telnet_Action_devices = new List<string>();
                            string tosplit = selectedtelnetdevices[actioncommands];
                                                        

                            string[] Splittedoutput = tosplit.Split(',');

                            List<string> Telnet_Action_devicesModel = new List<string>();
                            string tosplitmodel = selectedtelnetdeviceModel[actioncommands];
                            string[] Splittedoutputmdel = tosplitmodel.Split(',');
                            
                            for (int i = 0; i < Splittedoutput.Count(); i++)
                            {
                                if (Splittedoutput[i] != string.Empty)
                                {
                                    if (Splittedoutput.Count() == Splittedoutputmdel.Count())
                                    {
                                        Telnet_Action_devicesModel.Add(Splittedoutputmdel[i]);
                                    }
                                    else
                                    {
                                        Telnet_Action_devicesModel.Add(string.Empty);
                                    }

                                    Telnet_Action_devices.Add(Splittedoutput[i]);
                                }
                            }

                            if (Telnet_Action_devices.Count > 0)
                            {
                                List<string> currentdeviceiplist = GetAllIpForSelectedAction(Telnet_Action_devices, Telnet_Action_devicesModel);

                                if (Telnet_Action_devices.Count == currentdeviceiplist.Count)
                                {
                                    bool isAnyOneGetFail = false;

                                    for (int j = 0; j < Telnet_Action_devices.Count; j++)
                                    {
                                        if ((currentdeviceiplist[j] != null) && (currentdeviceiplist[j].Trim() != string.Empty))
                                        {
                                            string currentdeviceip = currentdeviceiplist[j].Trim();
                                            Telnet_Comm TPC = new Telnet_Comm();
                                       
                                            string[] strResponseArray = new string[0];

                                            //DeviceDiscovery.WriteToLogFile("sending telnet command: " + commandtelnet + " to ip address " + currentdeviceip);
                                            if (currentdeviceip != "Not Applicable")
                                            {
                                                string[] strMessageQue = new string[] { "", commandtelnet };
                                                bool isVideoGentrue = false;
                                                if (Telnet_Action_devices[j].StartsWith("Video Gen"))
                                                {
                                                    isVideoGentrue = true;
                                                }

                                                for (int i = 0; i < roots.Count(); i++)
                                                {
                                                    if (!isVideoGentrue)
                                                    {
                                                        strMessageQue = new string[] { "", roots[i], declines[i], commandtelnet };
                                                    }

                                                    bool isSSHFail = false;
                                                    if (!Properties.Settings.Default.TelnetPreference && !isVideoGentrue)
                                                    {
                                                        ////////SSH
                                                        DeviceDiscovery.WriteToLogFile("Sending Ssh command " + commandtelnet + " to ip address " + currentdeviceip);
                                                        ssh SSHClient = new ssh();
                                                        bool issshsuccess = SSHClient.session(currentdeviceip, commandtelnet, sshPrivatekeyFilePath, out strResponseArray);
                                                        if (strResponseArray[2] != null && strResponseArray[2] != string.Empty)
                                                            sshPrivatekeyFilePath = strResponseArray[2];

                                                        if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("QSC DEVICE CONNECTION REFUSED"))
                                                        {
                                                            isSSHFail = true;
                                                        }

                                                        if (!isSSHFail)
                                                        {
                                                            //if (issshsuccess && strResponseArray[0] != null && strResponseArray[0] != string.Empty && (strResponseArray[1] == null || strResponseArray[1] == string.Empty))
                                                            //{
                                                            //    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[0]));
                                                            //    set_status.Add("Pass");
                                                            //    break;
                                                            //}
                                                            if (issshsuccess)
                                                            {
                                                                if(strResponseArray[0] == null || strResponseArray[0] == string.Empty)
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, string.Empty));
                                                                else
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[0]));

                                                                set_status.Add("Pass");
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID SSH KEY FILE"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " Invalid ssh key file");

                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid ssh key file"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " Invalid ssh key file");
                                                                }
                                                                else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INCORRECT CREDENTIAL"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Incorrect ssh credential");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Incorrect ssh credential"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " Incorrect ssh credential");
                                                                }
                                                                else if (strResponseArray[1] != null && (strResponseArray[1].ToUpper().Contains("COMMAND NOT FOUND") || strResponseArray[1].ToUpper().Contains("SYNTAX ERROR") || strResponseArray[1].ToUpper().Contains("INVALID SSH COMMAND")))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Invalid ssh command");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid ssh command"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": Invalid ssh command");
                                                                }
                                                                else if(strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("COULD NOT CONNECT SSH"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Could not connect ssh");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Could not connect ssh"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": Could not connect ssh");
                                                                }
                                                                else
                                                                {
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": " + strResponseArray[1]);
                                                                }

                                                                //DeviceDiscovery.WriteToLogFile("Invalid Telnet username/password for telnet command:" + commandtelnet + "to ip address" + currentdeviceip);
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                break;
                                                            }
                                                        }
                                                    }

                                                    if (Properties.Settings.Default.TelnetPreference || isVideoGentrue || isSSHFail)
                                                    {
                                                        //////////Telnet
                                                        DeviceDiscovery.WriteToLogFile("Sending Telnet command " + commandtelnet + " to ip address " + currentdeviceip);
                                                        TPC.session(currentdeviceip, strMessageQue, actioncommands.ToString(), isVideoGentrue, out strResponseArray);
                                                        if (isVideoGentrue)
                                                        {
                                                            if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID COMMAND"))
                                                            {
                                                                DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " command is invalid");
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "command is invalid"));
                                                                taFailedCommands.Add(Telnet_Action_devices[j] + " Telnet command is Invalid");
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                //break;
                                                            }
                                                            else if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("Unable to read data from the transport connection"))
                                                            {
                                                                DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + strResponseArray[1] + ".Device is connected to another telnet client");
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                taFailedCommands.Add(Telnet_Action_devices[j] + strResponseArray[1] + ".Device is connected to another telnet client");
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1] + ".Device is connected to another telnet client"));
                                                                //break;
                                                            }
                                                            else if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("CONNECTION REFUSED"))
                                                            {
                                                                DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + strResponseArray[1]);
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                                taFailedCommands.Add(Telnet_Action_devices[j] + strResponseArray[1]);
                                                                //break;
                                                            }
                                                            else if (isVideoGentrue && strResponseArray[1] != null && !strResponseArray[1].ToUpper().Contains("INVALID COMMAND"))
                                                            {
                                                                set_status.Add("Pass");
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                                //break;
                                                            }
                                                            else
                                                            {
                                                                if (strResponseArray[0] == null && strResponseArray[1] == null)
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " device not available");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "device not available"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " device is not available");

                                                                }
                                                                else
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "Failed as " + Telnet_Action_devices[j]);
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": " + strResponseArray[1]);
                                                                }

                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                            }

                                                            break;
                                                        }
                                                        else if (Properties.Settings.Default.TelnetPreference && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("QSC DEVICE CONNECTION REFUSED"))
                                                        {
                                                            ///////Ssh followed by Telnet
                                                            ssh SSHClient = new ssh();
                                                            bool issshsuccess = SSHClient.session(currentdeviceip, commandtelnet, sshPrivatekeyFilePath,  out strResponseArray);
                                                            if (strResponseArray[2] != null && strResponseArray[2] != string.Empty)
                                                                sshPrivatekeyFilePath = strResponseArray[2];

                                                            //if (issshsuccess && strResponseArray[0] != null && strResponseArray[0] != string.Empty && (strResponseArray[1] == null || strResponseArray[1] == string.Empty))
                                                            //{
                                                            //    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[0]));
                                                            //    set_status.Add("Pass");
                                                            //    break;
                                                            //}
                                                            if (issshsuccess)
                                                            {
                                                                if (strResponseArray[0] == null || strResponseArray[0] == string.Empty)
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, string.Empty));
                                                                else
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[0]));

                                                                set_status.Add("Pass");
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID SSH KEY FILE"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " Invalid ssh key file");

                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid ssh key file"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " Invalid ssh key file");
                                                                }
                                                                else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INCORRECT CREDENTIAL"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Incorrect ssh credential");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Incorrect ssh credential"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " Incorrect ssh credential");
                                                                }
                                                                else if (strResponseArray[1] != null && (strResponseArray[1].ToUpper().Contains("COMMAND NOT FOUND") || strResponseArray[1].ToUpper().Contains("SYNTAX ERROR") || strResponseArray[1].ToUpper().Contains("INVALID SSH COMMAND")))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Invalid ssh command");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid ssh command"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": Invalid ssh command");
                                                                }
                                                                else if(strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("COULD NOT CONNECT SSH"))
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + "Could not connect ssh");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Could not connect ssh"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": Could not connect ssh");
                                                                }
                                                                else
                                                                {
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": " + strResponseArray[1]);
                                                                }

                                                                //DeviceDiscovery.WriteToLogFile("Invalid Telnet username/password for telnet command:" + commandtelnet + "to ip address" + currentdeviceip);
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (strResponseArray[2] != null && strResponseArray[2].ToUpper().Contains("LOGIN INCORRECT"))
                                                            {
                                                                if (roots.Count() == (i + 1))
                                                                {
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid Telnet username/password"));
                                                                    DeviceDiscovery.WriteToLogFile("Invalid Telnet username/password for telnet command:" + commandtelnet + "to ip address" + currentdeviceip);
                                                                    taFailedCommands.Add("Invalid Telnet username/ password");
                                                                    set_status.Add("Fail");
                                                                    status = "Fail";
                                                                    Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                    isAnyOneGetFail = true;
                                                                    break;
                                                                }
                                                            }
                                                            else if (strResponseArray[3] != null && strResponseArray[3].ToUpper().Contains("NOT FOUND"))
                                                            {
                                                                DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " command not found");
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "command not found"));
                                                                taFailedCommands.Add(Telnet_Action_devices[j] + " Telnet command is Invalid");
                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                break;
                                                            }
                                                            else if (strResponseArray[3] != null && !strResponseArray[3].ToUpper().Contains("NOT FOUND"))
                                                            {
                                                                set_status.Add("Pass");
                                                                telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[3]));
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (strResponseArray[0] == null && strResponseArray[1] == null && strResponseArray[2] == null && strResponseArray[3] == null)
                                                                {
                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " device not available");
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "device not available"));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + " device is not available");

                                                                }
                                                                else
                                                                {
                                                                    string command = string.Empty;
                                                                    if (strResponseArray[3] != null)
                                                                    {
                                                                        command = strResponseArray[3];
                                                                    }
                                                                    else if (strResponseArray[2] != null)
                                                                    {
                                                                        command = strResponseArray[2];
                                                                    }
                                                                    else if (strResponseArray[1] != null)
                                                                    {
                                                                        command = strResponseArray[1];
                                                                    }
                                                                    else if (strResponseArray[0] != null)
                                                                    {
                                                                        command = strResponseArray[0];
                                                                    }

                                                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "Failed as " + Telnet_Action_devices[j]);
                                                                    telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, command));
                                                                    taFailedCommands.Add(Telnet_Action_devices[j] + "_" + commandtelnet + ": " + command);
                                                                }

                                                                set_status.Add("Fail");
                                                                status = "Fail";
                                                                Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                                break;
                                                            }
                                                        }
                                                    }

                                                    //TPC.session(currentdeviceip, strMessageQue, actioncommands.ToString(), isVideoGentrue, out strResponseArray);
                                                    //if (!isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("QSC DEVICE CONNECTION REFUSED"))
                                                    //{
                                                    //    ssh SSHClient = new ssh();
                                                    //    bool issshsuccess = SSHClient.session(exid, currentdeviceip, commandtelnet, out strResponseArray);
                                                    //    if (issshsuccess && strResponseArray[0] != null && strResponseArray[0] != string.Empty && (strResponseArray[1] == null || strResponseArray[1] == string.Empty))
                                                    //    {
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[0]));
                                                    //        set_status.Add("Pass");
                                                    //        break;
                                                    //    }
                                                    //    else
                                                    //    {
                                                    //        if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID KEY FILE"))
                                                    //        {
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid ssh key file"));
                                                    //            taFailedCommands.Add("Invalid ssh key file");
                                                    //        }
                                                    //        else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INCORRECT CREDENTIAL"))
                                                    //        {
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Incorrect ssh credential"));
                                                    //            taFailedCommands.Add("Incorrect ssh credential");
                                                    //        }
                                                    //        else if (strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("COMMAND NOT FOUND"))
                                                    //        {
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "ssh command is invalid"));
                                                    //            taFailedCommands.Add("ssh command is invalid");
                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                    //            taFailedCommands.Add(strResponseArray[1]);
                                                    //        }

                                                    //        //DeviceDiscovery.WriteToLogFile("Invalid Telnet username/password for telnet command:" + commandtelnet + "to ip address" + currentdeviceip);
                                                    //        set_status.Add("Fail");
                                                    //        status = "Fail";
                                                    //        Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //        break;
                                                    //    }
                                                    //}

                                                    //if (isVideoGentrue)
                                                    //{
                                                    //    if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("INVALID COMMAND"))
                                                    //    {
                                                    //        DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " command is invalid");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "command is invalid"));
                                                    //        taFailedCommands.Add(Telnet_Action_devices[j] + " Telnet command is Invalid");
                                                    //        set_status.Add("Fail");
                                                    //        status = "Fail";
                                                    //        Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //        //break;
                                                    //    }
                                                    //    else if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("Unable to read data from the transport connection"))
                                                    //    {
                                                    //        set_status.Add("Fail");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1] + ".Device is connected to another telnet client"));
                                                    //        //break;
                                                    //    }
                                                    //    else if (isVideoGentrue && strResponseArray[1] != null && strResponseArray[1].ToUpper().Contains("CONNECTION REFUSED"))
                                                    //    {
                                                    //        set_status.Add("Fail");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                    //        //break;
                                                    //    }
                                                    //    else if (isVideoGentrue && strResponseArray[1] != null && !strResponseArray[1].ToUpper().Contains("INVALID COMMAND"))
                                                    //    {
                                                    //        set_status.Add("Pass");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                    //        //break;
                                                    //    }
                                                    //    else
                                                    //    {
                                                    //        if (strResponseArray[0] == null && strResponseArray[1] == null)
                                                    //        {
                                                    //            DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " device not available");
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "device not available"));
                                                    //            taFailedCommands.Add(Telnet_Action_devices[j] + "device is not available");

                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "Failed as " + Telnet_Action_devices[j]);
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[1]));
                                                    //        }

                                                    //        set_status.Add("Fail");
                                                    //        status = "Fail";
                                                    //        Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //    }

                                                    //    break;
                                                    //}
                                                    //else
                                                    //{
                                                    //    if (strResponseArray[2] != null && strResponseArray[2].ToUpper().Contains("LOGIN INCORRECT"))
                                                    //    {
                                                    //        if (roots.Count() == (i + 1))
                                                    //        {
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "Invalid Telnet username/password"));
                                                    //            DeviceDiscovery.WriteToLogFile("Invalid Telnet username/password for telnet command:" + commandtelnet + "to ip address" + currentdeviceip);
                                                    //            taFailedCommands.Add("Invalid Telnet username/ password");
                                                    //            set_status.Add("Fail");
                                                    //            status = "Fail";
                                                    //            Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //            isAnyOneGetFail = true;
                                                    //            break;
                                                    //        }
                                                    //    }
                                                    //    else if (strResponseArray[3] != null && strResponseArray[3].ToUpper().Contains("NOT FOUND"))
                                                    //    {
                                                    //        DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " command not found");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "command not found"));
                                                    //        taFailedCommands.Add(Telnet_Action_devices[j] + " Telnet command is Invalid");
                                                    //        set_status.Add("Fail");
                                                    //        status = "Fail";
                                                    //        Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //        break;
                                                    //    }
                                                    //    else if (strResponseArray[3] != null && !strResponseArray[3].ToUpper().Contains("NOT FOUND"))
                                                    //    {
                                                    //        set_status.Add("Pass");
                                                    //        telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[3]));
                                                    //        break;
                                                    //    }
                                                    //    else
                                                    //    {
                                                    //        if (strResponseArray[0] == null && strResponseArray[1] == null && strResponseArray[2] == null && strResponseArray[3] == null)
                                                    //        {
                                                    //            DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as " + Telnet_Action_devices[j] + " device not available");
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, "device not available"));
                                                    //            taFailedCommands.Add(Telnet_Action_devices[j] + "device is not available");

                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "Failed as " + Telnet_Action_devices[j]);
                                                    //            telnetresponses.Add(new Tuple<string, string>(Telnet_Action_devices[j] + "_" + commandtelnet, strResponseArray[3]));

                                                    //        }

                                                    //        set_status.Add("Fail");
                                                    //        status = "Fail";
                                                    //        Background_Fail_remarks = string.Join(",\n", taFailedCommands);
                                                    //    }
                                                    //}
                                                }

                                                if (isAnyOneGetFail == true)
                                                    break;
                                            }
                                            else
                                            {
                                                set_status.Add("Pass");
                                                //status = "Fail";
                                                Background_Fail_remarks = Telnet_Action_devices[j] + " is set as not available";
                                                taFailedCommands.Add(Telnet_Action_devices[j] + " is set as not available");
                                            }
                                        }
                                        else
                                        {
                                            set_status.Add("Fail");
                                            status = "Fail";
                                            taFailedCommands.Add(Telnet_Action_devices[j] + " IP address is not available");
                                            Background_Fail_remarks = Telnet_Action_devices[j] + " IP address is not available";
                                        }
                                    }
                                }
                                else
                                {

                                    set_status.Add("Fail");
                                    status = "Fail";
                                    DeviceDiscovery.WriteToLogFile("Telnet action for " + testcasename + "failed as devices count in Test Plan and in Test Case are not the same");
                                    Background_Fail_remarks = "Devices count in Test Plan and in Test Case are not the same";
                                    taFailedCommands.Add("Devices count in Test Plan and in Test Case are not the same");
                                }
                            }
                            else
                            {
                                set_status.Add("Fail");
                                status = "Fail";
                                taFailedCommands.Add("No devices are selected for this telnet command");
                                Background_Fail_remarks = "No devices are selected for this telnet command.";
                            }
                        }
                        else
                        {
                            status = "Fail";
                            set_status.Add("Fail");
                            Background_Fail_remarks = "No telnet commands";
                            taFailedCommands.Add("No telnet commands");
                        }

                        //// background write
                        if (BM_start_end != string.Empty && BMdetail.ToUpper() == "TESTSUITE" && status != string.Empty)
                        {

                            if (status == "Fail")
                            {

                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempPlanBackgroundTable values('" + TempPlanBackground_Pkey + "','" + exid + "','" + status + "','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + ActionWithLoopValue + "','Not Applicable','False',@taFailedCommands,'" + PlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + string.Empty + "')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@taFailedCommands", string.Join(",\n", taFailedCommands), string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            }
                            else
                            {
                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempPlanBackgroundTable values('" + TempPlanBackground_Pkey + "','" + exid + "','Pass','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + ActionWithLoopValue + "','Not Applicable','True','" + string.Empty + "','" + PlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + string.Empty + "')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                            }
                        }
                        else
                        //// Non background write
                        //if (BM_start_end == string.Empty && status != string.Empty)
                        {
                            if (BM_start_end != string.Empty)
                                Testactionname = BM_start_end.ToUpper();
                            if (status == "Fail")
                            {
                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@taFailedCommands,'Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, "@taFailedCommands", string.Join(",\n", taFailedCommands), string.Empty, string.Empty);
                            }
                            else
                            {
                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@taFailedCommands,'Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, "@taFailedCommands", string.Join(",\n", taFailedCommands), string.Empty, string.Empty);
                            }

                            //}
                            //if (BM_start_end != string.Empty && BMdetail.ToUpper() == "TESTPLAN" && status != string.Empty)
                            //{

                            //    if (status == "Fail")
                            //    {
                            //        //updating TempTestCaseActionTabTable Values
                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', '" + taFailedCommands + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                            //    }
                            //    else
                            //    {
                            //        //updating TempTestCaseActionTabTable Values
                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                            //    }

                            //}

                        }
                    }
                }

                return new Tuple<List<string>, string>(set_status, Background_Fail_remarks);


                ///check whether this tab has telnet verification if so proceed save options.

            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15017", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                set_status.Add("Fail");
                
                DeviceDiscovery.WriteToLogFile("Test case:" + testcasename + "Test Action tab: " + tabnumber + "failed");
               
                return new Tuple<List<string>, string>(set_status, Background_Fail_remarks);
            }
        }
        
        public List<string> Execute_Designer_Action(int tcid, int tabnumber, string testcasename, string BMtype, int exid, string Testsuitename, string Testplanname, string Testactionname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            //QSys_Designer_Comm QDCinvoke = new QSys_Designer_Comm();
            List<string> runstatus = new List<string>();
            string status = "Pass";
            string ActionWithLoopValue = "Designer Action: 1";
            string taFailedCommands = string.Empty;
            string starttime = DateTime.Now.ToString();
            string Expectedvalue = string.Empty;
            string Measuredvalue = string.Empty;
            string query = string.Empty;

            try
            {
                string strResponse = string.Empty;
                Int32[] TAID_array = TAID.ToArray();
                query = "select ConnectDesigner,DisconnectDesigner,EmulateDesigner,newdesign,DeployMonitoring,NumberOfTimesDeploy,Timeout,TimeoutUnit,Loadfromcore from DesignerAction where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                string qsysPath = string.Empty;
                while (read.Read())
                {
                    string ConnectDesigner = string.Empty;
                    string DisconnectDesigner = string.Empty;
                    string EmulateDesigner = string.Empty;
                    string checked_new = string.Empty;
                    string deployMonitoring = string.Empty;
                    string designerconnectionIteration = string.Empty;
                    string designerTimeoutValue = string.Empty;
                    string designerTimeoutUnit = string.Empty;
                    string loadFromCore = string.Empty;
                    int delay = 0;
                    bool isQREM = false;

                    if (read[0] != System.DBNull.Value)
                    {
                        ConnectDesigner = read.GetString(0);
                    }

                    if (read[1] != System.DBNull.Value)
                    {
                        DisconnectDesigner = read.GetString(1);
                    }

                    if (read[2] != System.DBNull.Value)
                    {
                        EmulateDesigner = read.GetString(2);
                    }

                    if (read[3] != System.DBNull.Value)
                    {
                        checked_new = read.GetString(3);
                    }

                    if (read[4] != System.DBNull.Value)
                    {
                        deployMonitoring = read.GetString(4);
                    }

                    if (read[5] != System.DBNull.Value)
                    {
                        designerconnectionIteration = read.GetString(5);
                    }

                    if (read[6] != System.DBNull.Value)
                    {
                        designerTimeoutValue = read.GetString(6);
                    }

                    if (read[7] != System.DBNull.Value)
                    {
                        designerTimeoutUnit = read.GetString(7);
                    }
                    if (read[8] != System.DBNull.Value)
                    {
                        loadFromCore = read.GetString(8);
                    }

                    if (!string.IsNullOrEmpty(designerTimeoutValue) && designerTimeoutUnit == "Sec")
                    {
                        delay = Convert.ToInt32(designerTimeoutValue) * 1000;
                    }
                    else if (!string.IsNullOrEmpty(designerTimeoutValue) && designerTimeoutUnit == "Min")
                    {
                        delay = Convert.ToInt32(designerTimeoutValue) * 60 * 1000;
                    }
                

                    if ((ConnectDesigner != null) && (ConnectDesigner != string.Empty) && (ConnectDesigner == "True"))
                    {
                        if (checked_new == "True")
                        {
                            Expectedvalue = "Connect Designer";
                            var Designerresult = connecttodesigner_truecheck(Testplanname, isQREM);
                            runstatus.Add(Designerresult.Item1.ToString());
                            status = Designerresult.Item2.ToString();
                            taFailedCommands = Designerresult.Item3.ToString();
                            if (Designerresult.Item1.ToString() == "Pass")
                            {
                                Measuredvalue = "Designer connected";
                                status = "Pass";
                            }
                            else
                            {
                                Measuredvalue = "Designer not connected";
                                status = "Fail";
                            }
                        }
                        else
                        {
                            Expectedvalue = "Connect Designer";

                            if(delay==0)
                              delay = 50000;    

                            Tuple<string, string> Designerresult = connecttodesigner(delay, isQREM);
                            runstatus.Add(Designerresult.Item1.ToString());
                            status = Designerresult.Item1.ToString();
                            taFailedCommands = Designerresult.Item2.ToString();

                            if (Designerresult.Item1.ToString() == "Pass")
                            {
                                Measuredvalue = "Designer connected";
                                status = "Pass";
                            }
                            else
                            {
                                Measuredvalue = "Designer not connected";
                                status = "Fail";
                            }
                        }
                    }
                    else if ((DisconnectDesigner != null) && (DisconnectDesigner != string.Empty) && ((DisconnectDesigner == "True")))
                    {
                        Expectedvalue = "Disconnect Designer";

                        if (delay == 0)
                            delay = 20000;
                      
                        if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                        {
                            ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                            SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                            System.Windows.Forms.SendKeys.SendWait("{F7}");
                            //Thread.Sleep(10000);
                            Thread.Sleep(delay);

                            if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                            {
                                runstatus.Add("Pass");
                                status = "Pass";
                                Measuredvalue = "Designer disconnected";
                            }
                            else
                            {
                                runstatus.Add("Fail");
                                status = "Fail";
                                taFailedCommands = "Qsys designer does not exists";
                                Measuredvalue = "Designer not Disconnected";
                            }
                        }
                        else
                        {
                            runstatus.Add("Fail");
                            status = "Fail";
                            taFailedCommands = "Qsys designer does not exists";
                            Measuredvalue = "Designer not Disconnected";
                        }
                    }
                    else if ((EmulateDesigner != null) && (EmulateDesigner != string.Empty) && (EmulateDesigner == "True"))
                    {
                        if (checked_new == "True")
                        {
                            Expectedvalue = "Emulate Designer";

                            if ((checkprocess(emulateprocess_designeraction)) && (!emulateprocess_designeraction.HasExited))
                            {
                                emulateprocess_designeraction.Kill();
                            }

                            ProcessStartInfo emulateprocessargs_designeraction = new ProcessStartInfo();
                            string gert = preferenceQSDInstalledpath;

                            if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                            {
                                var directorycreate1 = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + dupExecID + "\\" + desgnname;
                                qsysPath = directorycreate1;
                            }
                            else
                            {
                                var directorycreate1 = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + dupExecID + "\\" + desgnname);

                                qsysPath = directorycreate1.FullName;
                            }

                            Rpc hert_checkemulation = new Rpc();
                            var is_Already_emulated = hert_checkemulation.Send("127.0.0.1", "Inventory.Get", "", false, string.Empty);

                            if (is_Already_emulated.Item1 == false)
                            {
                                emulateprocessargs_designeraction.Arguments = @"" + "\"" + qsysPath + "\"" + " /emulate";
                                emulateprocessargs_designeraction.FileName = gert;

                                emulateprocess_designeraction = Process.Start(emulateprocessargs_designeraction);   //changed at Sean's recommendation to close open instances of app, 2/23/12 JG
                                DateTime emulatestart = DateTime.Now;
                                Thread.Sleep(30000);
                                Tuple<bool, string> get_value = emulationistrue_execution(desgnname, emulatestart);

                                if (get_value.Item1)
                                {
                                    if (!checkprocess(qsyDesignProcess))
                                    {
                                        status = "Fail";
                                        runstatus.Add(status);
                                        Measuredvalue = "Designer not Emulated";
                                        taFailedCommands = "Qsys designer does not exists";
                                    }
                                    else
                                    {
                                        status = "Pass";
                                        runstatus.Add(status);
                                        Measuredvalue = "Designer Emulated";
                                    }
                                }
                                else if (!get_value.Item1)
                                {
                                    status = "Fail";
                                    runstatus.Add(status);
                                    Measuredvalue = "Designer not Emulated";
                                    taFailedCommands = get_value.Item2;
                                }
                            }
                            else
                            {
                                status = "Fail";
                                runstatus.Add(status);
                                Measuredvalue = "Designer not Emulated";
                                taFailedCommands = "Another design is in emulation state. Only one design can be emulated at a time on a given computer";
                            }
                        }
                        else
                        {
                            Expectedvalue = "Emulate Designer";

                            if ((checkprocess(emulateprocess_designeraction)) && (!emulateprocess_designeraction.HasExited))
                            {
                                emulateprocess_designeraction.Kill();
                            }

                            if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                            {
                                Rpc hert_checkemulation = new Rpc();
                                var is_Already_emulated = hert_checkemulation.Send("127.0.0.1", "Inventory.Get", "", false, string.Empty);
                                if (is_Already_emulated.Item1 == false)
                                {
                                    ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                                    SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                                    System.Windows.Forms.SendKeys.SendWait("{F7}");
                                    Thread.Sleep(10000);

                                    ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                                    SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                                    System.Windows.Forms.SendKeys.SendWait("{F6}");
                                    DateTime emulatestart = DateTime.Now;
                                    Thread.Sleep(30000);
                                    Tuple<bool, string> get_value = emulationistrue_execution(desgnname, emulatestart);

                                    if (get_value.Item1)
                                    {
                                        if (!checkprocess(qsyDesignProcess))
                                        {
                                            status = "Fail";
                                            runstatus.Add(status);
                                            Measuredvalue = "Designer not Emulated";
                                            taFailedCommands = "Qsys designer does not exists";
                                        }
                                        else
                                        {
                                            status = "Pass";
                                            runstatus.Add(status);
                                            Measuredvalue = "Designer Emulated";
                                        }
                                    }
                                    else if (!get_value.Item1)
                                    {
                                        status = "Fail";
                                        runstatus.Add(status);
                                        Measuredvalue = "Designer not Emulated";
                                        taFailedCommands = get_value.Item2;
                                    }
                                }
                                else
                                {
                                    status = "Fail";
                                    runstatus.Add(status);
                                    Measuredvalue = "Designer not Emulated";
                                    taFailedCommands = "Another design is in emulation state. Only one design can be emulated at a time on a given computer";
                                }
                            }
                            else
                            {
                                runstatus.Add("Fail");
                                status = "Fail";
                                taFailedCommands = "Qsys designer does not exists";
                                Measuredvalue = "Designer not Emulated";
                            }
                        }
                    }
                    else if (deployMonitoring.ToLower() == "true" && !string.IsNullOrEmpty(designerconnectionIteration))
                    {
                        Expectedvalue = "Deploy monitoring success";

                        if (delay == 0)
                             delay = 20000;                      

                        Tuple<string, string> Designerresult = connecttodesignerWithMeasuredTime(exid, designerconnectionIteration, delay, isQREM);

                        runstatus.Add(Designerresult.Item1.ToString());
                        status = Designerresult.Item1.ToString();
                        taFailedCommands = Designerresult.Item2.ToString();

                        if (Designerresult.Item1.ToString() == "Pass")
                        {
                            Measuredvalue = "Deploy monitoring success";
                            status = "Pass";
                        }
                        else
                        {
                            Measuredvalue = "Deploy monitoring fail";
                            status = "Fail";
                        }
                    }
                    else if (loadFromCore.ToLower() == "true" && !string.IsNullOrEmpty(designerconnectionIteration))
                    {
                        Expectedvalue = "Load from core and connect success";
                        
                        Tuple<string, string> loadFromCoreResult = loadFromCoreMeasuredTime(exid, designerconnectionIteration, delay);

                        runstatus.Add(loadFromCoreResult.Item1.ToString());
                        status = loadFromCoreResult.Item1.ToString();
                        taFailedCommands = loadFromCoreResult.Item2.ToString();

                        if (loadFromCoreResult.Item1.ToString() == "Pass")
                        {
                            Measuredvalue = "Load from core and connect success";
                            status = "Pass";
                        }
                        else
                        {
                            Measuredvalue = "Load from core and connect fail";
                            status = "Fail";
                        }
                    }


                    if (status != string.Empty)
                    {
                        if (status == "Fail")
                        {
                            //updating TempTestCaseActionTabTable Values
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@remarks,'" + Expectedvalue + "','" + Measuredvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", taFailedCommands, string.Empty, string.Empty);
                        }
                        else
                        {
                            //updating TempTestCaseActionTabTable Values
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "','" + Expectedvalue + "','" + Measuredvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                        }
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + "Fail" + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@remarks,'" + Expectedvalue + "','" + Measuredvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", taFailedCommands, string.Empty, string.Empty);
                    }
                }

                return runstatus;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15017", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runstatus.Add("Fail");
                status = "Fail";
                string unknownfailure = Expectedvalue + " failed";
                if (string.IsNullOrEmpty(taFailedCommands))
                    taFailedCommands = "Error occurred while execute Designer action";

                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "',@remarks,'" + Expectedvalue + "','" + unknownfailure + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", testcasename, "@TAName", Testactionname, "@remarks", taFailedCommands, string.Empty, string.Empty);
                return runstatus;
            }
        }


        public Tuple<bool, string, string> check_coreis_paired(bool isQREM)
        {
            string getdevicename = string.Empty;
            string remarks = string.Empty;
            bool retrntrue = false;
            List<string> corename_designer = new List<string>();
            string designName = Original_desgnname;
            try
            {
                //// check whetehr core is dynamically paired
                if(isQREM)
                    getdevicename = selectedCoreSystemSiteID[0];
                else
                    getdevicename = XmlReadToGetDeviceName(selectedCoreIPAddress);

                string query = "select * from DesignInventory where DesignID in(select DesignID from designtable where Designname =(@designName))";
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@designName", designName);
                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    if ((read[1].ToString().Contains("Core")) | (read[1].ToString().Contains("core")))
                    {
                        if (!corename_designer.Contains(read[3].ToString()))
                            corename_designer.Add(read[3].ToString());
                    }
                }

                if ((corename_designer.Count != 0) && (getdevicename != string.Empty) && (corename_designer[0].ToString() != string.Empty))
                {
                    if (getdevicename.ToString().ToUpper() == corename_designer[0].ToString().ToUpper())
                    {
                        retrntrue = true;
                    }
                    else
                    {
                        retrntrue = false;
                        remarks = "Core is dynamically Paired";
                    }
                }
                else
                {
                    if (getdevicename == string.Empty)
                        remarks = "Not able to get core name for dynamic paring check";
                    if (corename_designer[0].ToString() == string.Empty)
                        remarks = "Not able to get design core name from database";
                    else
                        remarks = "";
                    retrntrue = false;
                }

                return new Tuple<bool, string, string>(retrntrue, remarks, getdevicename);
            }
            catch (Exception ex)
            {
                return new Tuple<bool, string, string>(retrntrue, remarks, getdevicename);
            }
        }        

        public Tuple<bool, string> check_coreversion()
        {
            string exepath = preferenceQSDInstalledpath;
            string designerversion = string.Empty;
            string coreversion = string.Empty;
            string remarks = string.Empty;
            bool retrntrue = false;

            try
            {
                System.IO.FileInfo fileinfo = new FileInfo(exepath);

                string buildInfoFilePath = System.IO.Path.Combine(fileinfo.DirectoryName, "build.info");

                if (System.IO.File.Exists(buildInfoFilePath))
                {
                   
                    using (StreamReader exeBuildVersions = new StreamReader(buildInfoFilePath))
                    {
                        designerversion = exeBuildVersions.ReadToEnd().Replace("\n", string.Empty);
                    }
                }
                else
                {
                    var versInfo = FileVersionInfo.GetVersionInfo(exepath);
                    designerversion = versInfo.FileVersion.Trim();
                }

                //var versInfo = FileVersionInfo.GetVersionInfo(exepath);
                //designerversion = versInfo.FileVersion.Trim();


                 coreversion = XmlReadToGetDesignversion(selectedCoreIPAddress).Trim();
                if((!(string.IsNullOrEmpty(designerversion)))&& (!(string.IsNullOrEmpty(coreversion))))
                {
                    if(String.Equals(designerversion,coreversion,StringComparison.CurrentCultureIgnoreCase))
                    {
                        retrntrue = true;
                    }
                }
                if (((string.IsNullOrEmpty(designerversion))) && ((string.IsNullOrEmpty(coreversion)) && (!retrntrue)))
                    remarks = "Unable to get PC Qsys version and Core Not available";
                else if (((string.IsNullOrEmpty(designerversion))) && (!retrntrue))

                    remarks = "Unable to get PC Qsys version ";

                else if (((string.IsNullOrEmpty(coreversion))) && (!retrntrue))

                    remarks = " Core Not available";

                else if (!retrntrue)

                    remarks = " Core version and Designer version not matched";
                //if (!retrntrue)
                //    remarks = " Core version and Designer version not matched";
                return new Tuple<bool, string>(retrntrue, remarks);
            }
            catch (Exception ex)
            {
                if (!retrntrue)
                    remarks = " Core version and Designer version not matched";
                return new Tuple<bool, string>(retrntrue, remarks);

            }
        }

        public Tuple<string, string> connecttodesigner(int delay, bool isQREM)
        {
            string strResponse = string.Empty;
            List<string> restoreIP = new List<string>();
            string status = string.Empty;
            string remarks = string.Empty;

            try
            {
                string runstatusduplicate = string.Empty;
                string remarksduplicate = string.Empty;

                if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                {
                    var checkversion = check_coreversion();
                    if (checkversion.Item1)
                    {
                        var Dynamicallypaired = check_coreis_paired(isQREM);

                        if (Dynamicallypaired.Item1)
                        {
                            ///// to disconnect design
                            ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                            SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                            System.Windows.Forms.SendKeys.SendWait("{F7}");
                            //Thread.Sleep(10000);
                            Thread.Sleep(delay);

                            var blankOut = SetBlankPsswordDesignerAction();
                            restoreIP = blankOut.Item1;

                            if (blankOut.Item2 != "Fail")
                            {
                                //// Connecting designer
                                ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                                SetForegroundWindow(qsyDesignProcess.MainWindowHandle);

                                System.Windows.Forms.SendKeys.SendWait("{F5}");
                                Thread.Sleep(delay);
                                DateTime checktime = DateTime.Now.AddMinutes(2);
                                while (!checkrunningdesign())
                                {
                                    Thread.Sleep(20000);
                                    if (checktime < DateTime.Now)
                                        break;
                                }
                                
                                if (checkrunningdesign() && (checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                                { status = "Pass"; remarks = ""; }
                                else if (!checkrunningdesign())
                                { status = "Fail"; remarks = "core is running different design"; }
                                else
                                { status = "Fail"; remarks = "Qsys designer does not exists"; }
                            }
                            else
                            {
                                status = "Fail";
                                remarks = blankOut.Item3;
                            }
                        }
                        else
                        {
                            runstatusduplicate = "Fail";
                            remarksduplicate = Dynamicallypaired.Item2.ToString();
                            return new Tuple<string, string>(runstatusduplicate, remarksduplicate);
                        }
                    }
                    else
                    {
                        runstatusduplicate = "Fail";
                        remarksduplicate = checkversion.Item2.ToString();
                        return new Tuple<string, string>(runstatusduplicate, remarksduplicate);
                    }
                }
                else
                {
                    runstatusduplicate = "Fail";
                    remarksduplicate = "Qsys designer does not exists";
                    return new Tuple<string, string>(runstatusduplicate, remarksduplicate);
                }
            }
            catch (Exception ex)
            {
                status = "Fail";
                if (ex.Message == "Access is denied")
                    remarks = "Error during designer connect - PC window is not active during key press";
                else
                    remarks = "Error during designer connect";
            }
            finally
            {
                if (restoreIP.Count > 0)
                {
                    var restoreremark = RestorePasswordDesignerAction(restoreIP);

                    if (!restoreremark.Item1)
                    {
                        if (remarks != string.Empty && restoreremark.Item2 != string.Empty)
                        {
                            status = "Fail"; remarks += "<br/>" + restoreremark.Item2;
                        }
                        else if (restoreremark.Item2 != string.Empty)
                        {
                            status = "Fail"; remarks = restoreremark.Item2;
                        }
                    }
                }
            }

            return new Tuple<string, string>(status, remarks);
        }

        public Tuple<string, string> connecttodesignerWithMeasuredTime(int Exid, string totaliteration, int disconnectDelay, bool isQREM)
        {
            string strResponse = string.Empty;
            List<string> restoreIP = new List<string>();
            int itration = 0;
            string status = string.Empty;
            string remarks = string.Empty;

            try
            {
                if (checkprocess(qsyDesignProcess))
                {
                    var checkversion = check_coreversion();
                    if (checkversion.Item1)
                    {
                        var Dynamicallypaired = check_coreis_paired(isQREM);

                        if (Dynamicallypaired.Item1)
                        {
                            var blankOut = SetBlankPsswordDesignerAction();
                            restoreIP = blankOut.Item1;

                            if (blankOut.Item2 != "Fail")
                            {
                                string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(selectedCoreIPAddress, selectedDutDeviceItemList);
                                int itr = Convert.ToInt32(totaliteration);


                                string logPath = string.Empty;
                                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                                {
                                    logPath = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + Exid.ToString() + @"\Designer";
                                }
                                else
                                {
                                    logPath = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + Exid.ToString() + @"\Designer";
                                }

                                try
                                {
                                    if (!Directory.Exists(logPath))
                                    {
                                        Directory.CreateDirectory(logPath);
                                    }
                                    else
                                    {
                                        DirectoryInfo info = new DirectoryInfo(logPath);
                                        foreach (var file in info.GetFiles())
                                        {
                                            file.Delete();
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    DeviceDiscovery.WriteToLogFile("Error occured during deploy monitoring file creation");
                                    return new Tuple<string, string>("Fail", "Error occured during deploy monitoring file creation");
                                }

                                List<string> runstatus = new List<string>();
                                Dictionary<string, List<int>> remarksList = new Dictionary<string, List<int>>();
                                double? minVal = null;
                                double? maxVal = null;
                                double? AvgVal = null;
                                string loopstartTime = DateTime.Now.ToString();
                                
                                for (int i = 0; i < itr; i++)
                                {
                                    DeviceDiscovery.WriteToLogFile("Executing designer action of " + (i + 1) + " iteration");
                                    itration++;

                                    if (i > 0)
                                        Thread.Sleep(Properties.Settings.Default.Delay_after_connect);

                                    ///// to disconnect design
                                    ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                                    SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                                    System.Windows.Forms.SendKeys.SendWait("{F7}");
                                    Thread.Sleep(disconnectDelay);

                                    //// Connecting designer
                                    DateTime starttime = DateTime.Now.AddSeconds(-5);
                                    ShowWindow(qsyDesignProcess.MainWindowHandle, 3);
                                    SetForegroundWindow(qsyDesignProcess.MainWindowHandle);
                                    System.Windows.Forms.SendKeys.SendWait("{F5}");

                                    var returnstatus = CheckDesignerAction(starttime, i + 1, logPath, deviceName, itr, loopstartTime);
                                    runstatus.Add(returnstatus.Item1);
                                

                                    if (returnstatus.Item1 == "Fail")
                                    {
                                        if (!remarksList.Keys.Contains(returnstatus.Item2))
                                            remarksList.Add(returnstatus.Item2, new List<int> { i + 1 });
                                        else
                                        {
                                            List<int> val = remarksList[returnstatus.Item2];
                                            val.Add(i + 1);
                                            remarksList[returnstatus.Item2] = val;
                                        }
                                    }
                                }

                                ////////Save Avg value in core
                                //HttpPost("http://" + selectedCoreIPAddress + "/media/Audio/CPU0_log111.txt", AvgVal.ToString(), string.Empty, string.Empty);

                                //string remark = RestorePasswordDesignerAction(ipList);
                                //if (!string.IsNullOrEmpty(remark) && runstatus.Contains("Fail") && remarksList.Count > 0)
                                //    remark += "<br/>";
                                //else if (!string.IsNullOrEmpty(remark))
                                //    return new Tuple<string, string>("Fail", remark);

                                if (runstatus.Contains("Fail"))
                                {
                                    string remark = string.Empty;
                                    foreach (var val in remarksList)
                                    {
                                        remark = val.Key + " at iteration " + string.Join(",", val.Value);
                                    }

                                    status = "Fail";
                                    remarks = remark;
                                    //return new Tuple<string, string>("Fail", remark);
                                }
                                else if (checkprocess(qsyDesignProcess))
                                {
                                    status = "Pass";
                                    remarks = string.Empty;
                                    //return new Tuple<string, string>("Pass", "");
                                }
                                else
                                {
                                    status = "Fail";
                                    remarks = "Qsys designer does not exists";
                                    //return new Tuple<string, string>("Fail", "Qsys designer does not exists");
                                }
                            }
                            else
                            {
                                status = blankOut.Item2;
                                remarks = blankOut.Item3;
                            }
                        }
                        else
                        {
                            return new Tuple<string, string>("Fail", Dynamicallypaired.Item2.ToString());
                        }
                    }
                    else
                    {
                        return new Tuple<string, string>("Fail", checkversion.Item2.ToString());
                    }
                }
                else
                {
                    return new Tuple<string, string>("Fail", "Qsys designer does not exists");
                }
            }
            catch (Exception ex)
            {
                status = "Fail";
                if (ex.Message == "Access is denied")
                    remarks = "Error during designer connect - PC window is not active during key press at iteration " + itration;
                else
                    remarks = "Error during designer connect";
            }
            finally
            {
                if (restoreIP.Count > 0)
                {
                    var restoreremark = RestorePasswordDesignerAction(restoreIP);
                    if (!restoreremark.Item1)
                    {
                        if (remarks != string.Empty && restoreremark.Item2 != string.Empty)
                        {
                            status = "Fail"; remarks += "<br/>" + restoreremark.Item2;
                        }
                        else if (restoreremark.Item2 != string.Empty)
                        {
                            status = "Fail"; remarks = restoreremark.Item2;
                        }
                    }
                }
            }

            return new Tuple<string, string>(status, remarks);
        }
		
        public Tuple<string, string> loadFromCoreMeasuredTime(int Exid, string totaliteration, int disconnectDelay)
        {
            int count = 0;
            string status = string.Empty;            
            string remarks = string.Empty;                    
            Dictionary<string, string> tempStrData = new Dictionary<string, string>();   
            DirectoryInfo directorytoread = null;
            List<string> runstatus = new List<string>();
            Dictionary<string, List<int>> remarksList = new Dictionary<string, List<int>>();
        
            try
            {
                ///Reads all necessary info from status xml
                var code_status= XmlReadToGetAllStatus();
                code_status.Add("qsysLogPath", "Not Found");
                code_status.Add("timeOut", disconnectDelay.ToString());

                ///log file path creation and validation . Qsyslog path file -->Get
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    code_status.Add("logPath", Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + Exid.ToString() + @"\LFC");
                    directorytoread = new DirectoryInfo(Properties.Settings.Default.Qsystemppath.ToString());
                    code_status["qsysLogPath"] = directorytoread.FullName + "\\QSysLog.txt";
                }
                else
                {
                    code_status.Add("logPath", @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + Exid.ToString() + @"\LFC");
                    directorytoread = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\");
                    code_status["qsysLogPath"] = directorytoread.FullName + "\\QSysLog.txt";
                }

                try
                {
                    if (!Directory.Exists(code_status["logPath"]))
                    {
                        Directory.CreateDirectory(code_status["logPath"]);
                    }
                    else
                    {
                        DirectoryInfo info = new DirectoryInfo(code_status["logPath"]);
                        foreach (var file in info.GetFiles())
                        {
                            file.Delete();
                        }
                    }
                }
                catch (Exception ex)
                {
                    DeviceDiscovery.WriteToLogFile("Error occured during Load from core monitoring file creation");
                    return new Tuple<string, string>("Fail", "Error occured during Load from core monitoring file creation");
                }

                /// Actual Iteration logic starts here for load from core and connect
                if (!string.IsNullOrEmpty(code_status["Designcode"]) && !string.IsNullOrEmpty(code_status["Status"])&& code_status["Status"] == "Running" && !string.IsNullOrEmpty(code_status["qsysLogPath"]) && code_status["qsysLogPath"] != "Not Found")
                {
                    code_status.Add("loopStartTime", DateTime.Now.ToString());

                    for (int i = 0; i < Convert.ToInt32(totaliteration); i++)
                    {
                        DeviceDiscovery.WriteToLogFile("Executing Load from core action of " + (i + 1) + " iteration");
                        count++;

                        ///function to do Load from core and read time taken and store in log file
                        var returnstatus = Measure_Loadtime(i + 1, Convert.ToInt32(totaliteration), code_status);
                        
                        ///Result collection for each Failed Iteration
                        runstatus.Add(returnstatus.Item1);
                        if (returnstatus.Item1 == "Fail")
                        {
                            if (!remarksList.Keys.Contains(returnstatus.Item2))
                                remarksList.Add(returnstatus.Item2, new List<int> { i + 1 });
                            else
                            {
                                List<int> val = remarksList[returnstatus.Item2];
                                val.Add(i + 1);
                                remarksList[returnstatus.Item2] = val;
                            }
                        }
                    }

                    ///// Consolidated result after Iteration completion
                    if (runstatus.Contains("Fail"))
                    {
                        string remark = string.Empty;
                        foreach (var val in remarksList)
                        {
                            remark = val.Key + " at iteration " + string.Join(",", val.Value);
                        }

                        status = "Fail";
                        remarks = remark;

                    }
                    else 
                    {
                        status = "Pass";
                        remarks = string.Empty;
                    }                    
                }
                else
                {
                    status = "Fail";
                    remarks ="Design code= "+ code_status["Designcode"] 
                        +"</br>Design Running status= " + code_status["Status"]
                        + "</br>Qsyslog path= " + code_status["qsysLogPath"];                    
                }
            }
            catch (Exception ex)
            {
                status = "Fail";                
                remarks = "Error during load from core and connect ";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
          
            return new Tuple<string, string>(status, remarks);
        }

        private Tuple<List<string>, string, string> SetBlankPsswordDesignerAction()
        {
            List<string> ipList = new List<string>();
            List<string> passwordapplieddevices = new List<string>();
            string strResponse = string.Empty;

            try
            {
                ipList.Add(selectedCoreIPAddress);

                if (isBackupCoreAvailable)
                {
                    if ((backup_selectedCoreIPAddress != string.Empty) && (backup_selectedCoreIPAddress != null) && (backup_selectedCoreIPAddress != "Not Applicable"))
                    {
                        ipList.Add(backup_selectedCoreIPAddress);
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile("Backup Core IP Not Available");
                        return new Tuple<List<string>, string, string>(passwordapplieddevices, "Fail", "Backup Core IP Not Available");
                    }
                }

                foreach (string coreIp in ipList)
                {
                    string actualdeviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(coreIp, selectedDutDeviceItemList);

                    if (core_New_FirmwareVersion.Item1 == false)
                    {
                        //// update core password to blank
                        var chkdeviceStatus = HttpGet("http://" + coreIp + "/cgi-bin/password_set?password1=&password2=", applicationPassword, "EC15015", coreIp, string.Empty, out strResponse);
                        if (chkdeviceStatus.Item2 || !chkdeviceStatus.Item1)
                        {
                            DeviceDiscovery.WriteToLogFile(actualdeviceName + " Device is not available in network while setting blank password for core");
                            return new Tuple<List<string>, string, string>(passwordapplieddevices, "Fail", actualdeviceName + " Device is not available in network while setting blank password for core");
                        }

                        passwordapplieddevices.Add(coreIp);
                    }
                    else
                    {
                        string resp = string.Empty;
                        var accessOpenState = AccessOpen(coreIp, "", out resp);
                        if (!accessOpenState.Item1)
                        {
                            var isSuccess = DisableAccessControl(coreIp, out resp);
                            if (!isSuccess.Item1)
                            {
                                DeviceDiscovery.WriteToLogFile(actualdeviceName + " Device is not available in network while setting blank password for core");
                                return new Tuple<List<string>, string, string>(passwordapplieddevices, "Fail", actualdeviceName + " Device is not available in network while setting blank password for core");
                            }

                            passwordapplieddevices.Add(coreIp);
                        }
                    }
                }

                return new Tuple<List<string>, string, string>(passwordapplieddevices, string.Empty, string.Empty);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return new Tuple<List<string>, string, string>(passwordapplieddevices, "Fail", "Error occured while setting blank password for core");
            }
        }

        private Tuple<bool, string> RestorePasswordDesignerAction(List<string> ipList)
        {
            bool isSuccess = false;
            string remarks = string.Empty;
            List<string> passwordrestoreremarks = new List<string>();
            string strResponse = string.Empty;
            try
            {
                foreach (string coreIp in ipList)
                {
                    string actualdeviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(coreIp, selectedDutDeviceItemList);

                    if (core_New_FirmwareVersion.Item1 == false)
                    {
                        var chkStatus = HttpGet("http://" + coreIp + "/cgi-bin/password_set?password1=" + applicationPassword + "&password2=" + applicationPassword + "", "", "EC15032", coreIp, string.Empty, out strResponse);
                        if (chkStatus.Item2 || !chkStatus.Item1)
                        {
                            DeviceDiscovery.WriteToLogFile(actualdeviceName + " Device is not available in network while restoring from blank password for core");
                            passwordrestoreremarks.Add(actualdeviceName);
                        }
                    }
                    else
                    {
                        ///check access mode is open 
                        string resp = string.Empty;
                        var is_user_created = CreateUserforBlank(coreIp, out resp);

                        if (is_user_created.Item1 == false || resp == "404")
                        {
                            DeviceDiscovery.WriteToLogFile(actualdeviceName + " Device is not available in network while restoring from blank password for core");
                            passwordrestoreremarks.Add(actualdeviceName);
                        }
                    }
                }

                if (passwordrestoreremarks.Count > 0)
                    remarks = string.Join(",", passwordrestoreremarks) + " Devices not available in network while restoring from blank password for core";
                else
                    isSuccess = true;
            }
            catch (Exception ex)
            {
                isSuccess = false;
                remarks = "Error occured while restoring from blank password for core";

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return new Tuple<bool, string>(isSuccess, remarks);
        }

        private Tuple<string, string, string> CheckDesignerAction(DateTime starttime, int iteration, string logPath, string deviceName, int totalIteration, string startTime)
        {
            try
            {
                DateTime compilestart = DateTime.UtcNow;
                DateTime? compileend = null;
                DateTime? designUploadStart = null;
                DateTime? designUploadEnd = null;
                DateTime? designStart = null;
                DateTime? designEnd = null;
                string remarks = string.Empty;

                DirectoryInfo directory = null;
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    directory = new DirectoryInfo(Properties.Settings.Default.Qsystemppath.ToString());
                }
                else
                {
                    directory = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\");
                }

                bool isCompilePass = false;
                DateTime maxExecuTime = DateTime.Now.AddSeconds(Properties.Settings.Default.Deploy_time_upperlimit);
                bool allowRunning = false;

                while (true)
                {
                    if (maxExecuTime >= DateTime.Now)
                    {
                        if (!isCompilePass)
                        {
                            if (directory != null)
                            {
                                int directoryCnt = directory.GetDirectories().Count();
                                DirectoryInfo myFile = null;

                                if (directoryCnt > 0)
                                {
                                    myFile = directory.GetDirectories().OrderByDescending(f => f.LastWriteTime).First();
                                }

                                Thread.Sleep(1000);

                                if (myFile != null && myFile.CreationTime > starttime)
                                {
                                    string Infofilecheck = directory + "//" + myFile.ToString() + "//info.xml";

                                    if (File.Exists(Infofilecheck))
                                    {
                                        isCompilePass = true;
                                        compileend = designUploadStart = DateTime.UtcNow;
                                    }
                                }
                            }
                        }

                        string state_pretty = string.Empty;
                        if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                        {
                            Thread.Sleep(2000);

                            XmlDocument xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignlaunch");

                            if (xml != null)
                            {
                                //XmlNode node_pretty_name = xml.SelectSingleNode("status/design/pretty_name");

                                XmlNode node_state_pretty = xml.SelectSingleNode("status/design/state_pretty");
                                state_pretty = node_state_pretty.InnerText;

                                if (designUploadEnd == null && state_pretty == "Starting")
                                {
                                    designUploadEnd = designStart = DateTime.UtcNow;
                                }

                                if (state_pretty == "Stopping" || state_pretty == "Idle" || state_pretty == "Starting")
                                    allowRunning = true;

                                if (allowRunning && state_pretty == "Running")
                                {
                                    designEnd = DateTime.UtcNow;
                                    
                                    XmlNode node_uptime = xml.SelectSingleNode("status/design/uptime_seconds");
                                    if (node_uptime != null && !string.IsNullOrEmpty(node_uptime.InnerText))
                                    {
                                        if (Convert.ToInt32(node_uptime.InnerText) > 0)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                DeviceDiscovery.WriteToLogFile("Could not able to fetch deploy core status at iteration " + iteration);
                                remarks = "Could not able to fetch deploy status of core";
                                break;
                            }
                        }
                        else
                        {
                            DeviceDiscovery.WriteToLogFile("Could not able to fetch IP address of core at iteration " + iteration);
                            remarks = "Could not able to fetch IP address of core";
                            break;
                        }
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile("Deploy time execeeds at iteration " + iteration);
                        remarks = "Deploy time execeeds";
                        break;
                    }
                }

                if (!isCompilePass)
                {
                    CreateDatapoints(logPath, deviceName, null, null, null, null, iteration, totalIteration, startTime);
                    DeviceDiscovery.WriteToLogFile("Compilation error occured at iteration " + iteration);
                    return new Tuple<string, string, string>("Fail", "Compilation error occured", string.Empty);
                }

                TimeSpan? compileTime = null;
                TimeSpan? designUploadTime = null;
                TimeSpan? designOkTime = null;
                TimeSpan? totalTime = null;

                if (!Properties.Settings.Default.DeployMonitor_TotaltimeOnly)
                {
                    if (compileend != null && compilestart != null)
                        compileTime = compileend - compilestart;

                    if (designUploadEnd != null && designUploadStart != null)
                        designUploadTime = designUploadEnd - designUploadStart;

                    if (designEnd != null && designStart != null)
                        designOkTime = designEnd - designStart;
                }

                if (designEnd != null && compilestart != null)
                    totalTime = designEnd - compilestart;

                var output = CreateDatapoints(logPath, deviceName, compileTime, designUploadTime, designOkTime, totalTime, iteration, totalIteration, startTime);

                if (remarks == string.Empty && output.Item1)
                    return new Tuple<string, string, string>("Pass", string.Empty, output.Item2);
                else if (remarks != string.Empty)
                    return new Tuple<string, string, string>("Fail", remarks, output.Item2);
                else
                    return new Tuple<string, string, string>("Fail", "Error ocurred during deploy monitoring output file creation", output.Item2);
            }
            catch (Exception ex)
            {
                if (ex.Message == "Access is denied")
                    return new Tuple<string, string, string>("Fail", "Error during designer connect - PC window is not active during key press at iteration " + iteration, string.Empty);
                else
                    return new Tuple<string, string, string>("Fail", "Error during designer connect", string.Empty);
            }
        }

        private Tuple<string, string> Measure_Loadtime(int iteration, int totalIteration, Dictionary<string, string> process_Data)
        {
            Process proc_loadFromCore = new Process();

            try
            {
                string status = "Fail";
                string remarks = string.Empty;
                int totaltime = 0;
                ////whats this time
                DateTime maxExecuTime = DateTime.Now.AddMilliseconds(Convert.ToInt32(process_Data["timeOut"]));
                ProcessStartInfo loadfromcore = new ProcessStartInfo();
                loadfromcore.FileName = preferenceQSDInstalledpath;

                if (core_New_FirmwareVersion.Item1)
                    loadfromcore.Arguments = "/compileId:" + process_Data["Designcode"] + " /username:" + Properties.Settings.Default.DeviceUsername.ToString() + " /password:" + applicationPassword;
                else
                    loadfromcore.Arguments = "/compileId:" + process_Data["Designcode"];

                proc_loadFromCore = Process.Start(loadfromcore);
                DateTime startTime = DateTime.Now;
                string validator = "[RemoteConnection Thread] INFO   Connecting to core " + selectedCoreIPAddress + ":";
                string temp = string.Empty;
                bool reached = false;

                while (maxExecuTime >= DateTime.Now && !reached)
                {
                    Thread.Sleep(10000);
                    using (StreamReader read = new StreamReader(process_Data["qsysLogPath"]))
                    {
                        while (!read.EndOfStream)
                        {
                            temp = read.ReadLine();

                            if ((!reached) && (temp != string.Empty) && temp.Contains(validator) && (temp.Contains(',')))
                            {
                                String[] spl = temp.Split(',');
                                DateTime date = DateTime.ParseExact(spl[0].Trim(), "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                if (date > startTime)
                                {
                                    totaltime = Convert.ToInt16((date - startTime).TotalSeconds);
                                    reached = true;
                                    status = "Pass";
                                }
                            }
                            else if ((reached) && (temp != string.Empty) && (temp.ToUpper().Contains("ERROR") | temp.ToUpper().Contains("SYSTEM.")))
                            {
                                status = "Fail";
                                remarks = "Error after connecting to core--" + temp.ToString();
                                DeviceDiscovery.WriteToLogFile("Error after connecting to core-- " + temp.ToString() + " at iteration " + iteration);
                                break;
                            }
                            else if (reached)
                            {
                                break;
                            }
                        }
                    }
                }

                if (maxExecuTime <= DateTime.Now && !reached)
                {
                    status = "Fail";
                    remarks = "Deploy time execeeds: load from cores takes more than '" + (Convert.ToInt32(process_Data["timeOut"]) / 1000) + " seconds'";
                    DeviceDiscovery.WriteToLogFile(remarks + " at iteration " + iteration);
                }

                if (!Write_LogFile(process_Data["logPath"], process_Data["Device_name"], totaltime, iteration, totalIteration, startTime.ToString()))
                {
                    status = "Fail";
                    remarks += "Error ocurred while writing measure time";
                    DeviceDiscovery.WriteToLogFile(remarks + " at iteration " + iteration);
                }
                
                return new Tuple<string, string>(status, remarks);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return new Tuple<string, string>("Fail", "Error during Load from core and connect");
            }
            finally
            {
                if (proc_loadFromCore != null && checkprocess(proc_loadFromCore))
                {
                    proc_loadFromCore.Kill();
                }
            }
        }

        private bool Write_LogFile(string logPath, string deviceName, int totalTime, int iteration, int totalIteration, string startTime)
        {
            try
            {
                string totalTim = string.Empty;
                if (totalTime != 0)
                {
                    totalTim = totalTime.ToString();
                }

                using (StreamWriter compileWrt = new StreamWriter(logPath + @"\" + deviceName + "LoadFromCore.txt", true))
                {
                    if (iteration == 1)
                    {
                        compileWrt.WriteLine("Start Time:" + startTime);
                        compileWrt.WriteLine("Unit:Sec");
                    }

                    if (!string.IsNullOrEmpty(totalTim))
                        compileWrt.WriteLine(totalTim);
                    else
                        compileWrt.WriteLine("0");

                    if (iteration == totalIteration)
                        compileWrt.WriteLine("End Time:" + DateTime.Now.ToString());
                }

                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Error ocurred during Writing log files");
                return false;
            }
        }

        private Tuple<bool, string> CreateDatapoints(string logPath, string deviceName, TimeSpan? compileTime, TimeSpan? designUploadTime, TimeSpan? designOkTime, TimeSpan? totalTime, int iteration, int totalIteration, string startTime)
        {
            try
            {
                if (!Properties.Settings.Default.DeployMonitor_TotaltimeOnly)
                {
                    string designcompileTim = string.Empty;
                    if (compileTime != null && compileTime.Value != null)
                    {
                        designcompileTim = compileTime.Value.TotalSeconds.ToString();
                    }

                    string designuploadTim = string.Empty;
                    if (designUploadTime != null && designUploadTime.Value != null)
                    {
                        designuploadTim = designUploadTime.Value.TotalSeconds.ToString();
                    }

                    string designokTim = string.Empty;
                    if (designOkTime != null && designOkTime.Value != null)
                    {
                        designokTim = designOkTime.Value.TotalSeconds.ToString();
                    }

                    using (StreamWriter compileWrt = new StreamWriter(logPath + @"\" + deviceName + "DesignCompile.txt", true))
                    {
                        if (iteration == 1)
                        {
                            compileWrt.WriteLine("Start Time:" + startTime);
                            compileWrt.WriteLine("Unit:Sec");
                        }

                        if (!string.IsNullOrEmpty(designcompileTim))
                            compileWrt.WriteLine(designcompileTim);
                        else
                            compileWrt.WriteLine("0");

                        if (iteration == totalIteration)
                            compileWrt.WriteLine("End Time:" + DateTime.Now.ToString());
                    }

                    using (StreamWriter uploadWrt = new StreamWriter(logPath + @"\" + deviceName + "DesignUpload.txt", true))
                    {
                        if (iteration == 1)
                        {
                            uploadWrt.WriteLine("Start Time:" + startTime);
                            uploadWrt.WriteLine("Unit:Sec");
                        }

                        if (!string.IsNullOrEmpty(designuploadTim))
                            uploadWrt.WriteLine(designuploadTim);
                        else
                            uploadWrt.WriteLine("0");

                        if (iteration == totalIteration)
                            uploadWrt.WriteLine("End Time:" + DateTime.Now.ToString());
                    }

                    using (StreamWriter upWrt = new StreamWriter(logPath + @"\" + deviceName + "DesignOk.txt", true))
                    {
                        if (iteration == 1)
                        {
                            upWrt.WriteLine("Start Time:" + startTime);
                            upWrt.WriteLine("Unit:Sec");
                        }

                        if (!string.IsNullOrEmpty(designokTim))
                            upWrt.WriteLine(designokTim);
                        else
                            upWrt.WriteLine("0");

                        if (iteration == totalIteration)
                            upWrt.WriteLine("End Time:" + DateTime.Now.ToString());
                    }
                }

                string totalTim = string.Empty;
                if (totalTime != null && totalTime.Value != null)
                {
                    totalTim = totalTime.Value.TotalSeconds.ToString();
                }                

                using (StreamWriter totalWrt = new StreamWriter(logPath + @"\" + deviceName + "DesignTotal.txt", true))
                {
                    if (iteration == 1)
                    {
                        totalWrt.WriteLine("Start Time:" + startTime);
                        totalWrt.WriteLine("Unit:Sec");
                    }

                    if (!string.IsNullOrEmpty(totalTim))
                        totalWrt.WriteLine(totalTim);
                    else
                        totalWrt.WriteLine("0");

                    if (iteration == totalIteration)
                        totalWrt.WriteLine("End Time:" + DateTime.Now.ToString());
                }

                return new Tuple<bool, string>(true, totalTim);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Error ocurred during deploy monitoring output file creation");
                return new Tuple<bool, string>(false, string.Empty);
            }
        }

        public Tuple<string, string, string> connecttodesigner_truecheck(string testplanName, bool isQREM)
        {
            string strResponse = string.Empty;
            string FailureReason = string.Empty;
            //bool passwordchange = false;

            try
            {
                string runstatusduplicate = string.Empty;
                string statusduplicate = string.Empty;
                string remarksduplicate = string.Empty;

                if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                {
                    qsyDesignProcess.Kill();
                }
				
                string username = string.Empty;
                if (core_New_FirmwareVersion.Item1)
                    username = Properties.Settings.Default.DeviceUsername.ToString();
                else
                    username = "admin";

                string Backup_username = string.Empty;
                if (Backup_core_New_FirmwareVersion.Item1)
                    Backup_username = Properties.Settings.Default.DeviceUsername.ToString();
                else
                    Backup_username = "admin";

                if (DeployXmlToCore(selectedCoreIPAddress, username, Backup_username, applicationPassword, desgnname, preferenceQSDInstalledpath, isQREM, out FailureReason))
                {
                    DUTConfiguration(testplanName);

                    if ((checkprocess(qsyDesignProcess)) && (!qsyDesignProcess.HasExited))
                    	return new Tuple<string, string, string>("Pass", "Pass", "");
                     else
                        return new Tuple<string, string, string>("Fail", "Fail", "Qsys designer does not exists");
                }
                else
                {
                  return new Tuple<string, string, string>("Fail", "Fail", "Error during designer connect \n" + FailureReason);
                }

                //return new Tuple<string, string, string>(runstatusduplicate, statusduplicate, remarksduplicate);
            }

            catch (Exception ex)
            {
                return new Tuple<string, string, string>("Fail", "Fail", "Error during designer connect");
            }

        }

        public bool chekfileopen(string localFile)
        {
            bool getreturn = false;
            try
            {
                using (FileStream inStream = new FileStream(localFile, FileMode.Open, FileAccess.Read)) ;
                {
                    getreturn = true;
                }


                //wc.UploadFile(uri.Uri, "PUT", localFile);

                return getreturn;
            }
            catch (Exception ex)
            {
                //if(ex.HResult==)
                //{
                Thread.Sleep(10000);

                //}
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }


        public Tuple<bool, string> emulationistrue_execution(string Design_name, DateTime starttime)
        {
            bool PassFailRunMode = false;
            string Remarks = string.Empty;
            int CountEmulate = 0;

            try
            {

                //removed due to check 2 times 
                int countloop = 0;
                DirectoryInfo directory = null;
                XmlDocument xmlDoc = new XmlDocument();
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    directory = new DirectoryInfo(Properties.Settings.Default.Qsystemppath.ToString());
                }
                else
                {
                    directory = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\");
                }
                //check directory created or not
                int directoryCnt = 0;
                DirectoryInfo myFile = null;
                while (countloop < 12 && (myFile == null || myFile.CreationTime < starttime))
                {
                    Thread.Sleep(5000);
                    directoryCnt = directory.GetDirectories().Count();
                    if (directoryCnt > 0)
                    {
                        myFile = directory.GetDirectories().OrderByDescending(f => f.LastWriteTime).Where(d => !d.Name.Contains("Temp")).First();
                    }
                    countloop++;
                }


                if (myFile != null && myFile.CreationTime > starttime)
                {
                 
                    Emulation_continue_info:
                    DateTime checktime = DateTime.Now.AddSeconds(30);
                    string Infofilecheck = directory + "//" + myFile.ToString() + "//info.xml";

                    while (!File.Exists(Infofilecheck) || !chekfileopen(Infofilecheck))
                    {
                        if (checktime < DateTime.Now)
                        {
                            CountEmulate++;
                            if (CountEmulate == 5)
                            {
                                return new Tuple<bool, string>(PassFailRunMode, "Info file is not exists/accessible ");
                            }
                            else
                            {
                                goto Emulation_continue_info;
                            }
                        }
                    }

                    if (File.Exists(directory + "//" + myFile.ToString() + "//compile_id") && (chekfileopen(directory + "//" + myFile.ToString() + "//compile_id")))
                    {

                       string designcode = File.ReadAllText(directory + "//" + myFile.ToString() + "//compile_id");
                       Rpc hert_checkemulation = new Rpc();
                       var result = hert_checkemulation.Send_Emulation_check("127.0.0.1", "Inventory.Get", Design_name, designcode);
                       return new Tuple<bool, string>(result.Item1, result.Item2);                     
                    }
                    else
                    {
                        PassFailRunMode = false;
                        return new Tuple<bool, string>(PassFailRunMode, "Design compile_id file not exists/accessible");
                    }
                }
                else
                {
                    PassFailRunMode = false;
                    return new Tuple<bool, string>(PassFailRunMode, "Emulation Directory is not created");
                }
                //}   
                return new Tuple<bool, string>(PassFailRunMode, "Design Emulation is unsuccessful");

            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, string>(PassFailRunMode, "Design Emulation is unsuccessful");
            }
        }

        public string GetFileWithCredentials(string userName, string password, string url, string ipAddr)
        {
            string checkTelnetActive = string.Empty;
            try
            {               
                using (WebClient wc = new WebClient())
                {
                    wc.Credentials = new NetworkCredential(userName, password);
                    checkTelnetActive = wc.DownloadString(url);
                }

                return checkTelnetActive;
            }
            catch (WebException ex)
            {
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);

                    if (ex.Message != "Thread was being aborted." && ex.Message != "Unable to connect to the remote server")
                        //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                        DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                    if (ex.Message == "Unable to connect to the remote server")
                    {
                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ipAddr, selectedDutDeviceItemList);
                        MessageBox.Show("Exception\n " + deviceName + " Device is not available", "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                if (ex.Message.Contains("The remote server returned an error: (400) Bad Request") && ex.Status.ToString() == "ProtocolError")
                {                 
                     HttpGetDigestMethod(url, password, out checkTelnetActive);
                }

                return checkTelnetActive;
            }
            catch (Exception ex)
            {
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);

                    if (ex.Message != "Thread was being aborted." && ex.Message != "Unable to connect to the remote server")
                        //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                        DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                    if (ex.Message == "Unable to connect to the remote server")
                    {
                        string deviceName = DeviceDiscovery.GetAlldeviceNameForSelectedIP(ipAddr, selectedDutDeviceItemList);
                        MessageBox.Show("Exception\n " + deviceName + " Device is not available", "Error Code - EC15025", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                return checkTelnetActive;
            }
        }

        private List<string> GetAllIpForSelectedAction(List<string> devices, List<string> devicesModel)
        {            
            try
            {
                List<string> temp = new List<string>();
                for (int i = 0; i < devices.Count; i++)
                {
                    bool notavailable = false;

                    if (devices[i].StartsWith("Video Gen"))
                    {
                        foreach (DUT_DeviceItem item in selectedExternalDeviceItemList)
                        {
                            if (item.VideoGen != null && item.GenModel != null && (item.VideoGen + "-" + item.GenModel).Equals(devices[i]))
                            {
                                temp.Add(item.Gen_IP_address);
                                notavailable = true;
                            }
                        }
                    }
                    else
                    {
                        foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                        {
                            //string finddeviceip1= "iOFrame-26bd";
                            if (item.ItemDeviceName.Equals(devices[i]) && (devicesModel[i] == null || devicesModel[i] == string.Empty || item.ItemDeviceModel.Equals(devicesModel[i])))
                            {
                                if ((item.ItemPrimaryIPSelected != null) && (item.ItemPrimaryIPSelected != string.Empty))
                                {
                                    //if (!temp.Contains(item.ItemPrimaryIPSelected))
                                    temp.Add(item.ItemPrimaryIPSelected);
                                    notavailable = true;

                                }
                                else if ((item.ItemSecondaryIPSelected != null) && (item.ItemSecondaryIPSelected != string.Empty))
                                {
                                    //if (!temp.Contains(item.ItemSecondaryIPSelected))
                                    temp.Add(item.ItemSecondaryIPSelected);
                                    notavailable = true;
                                }
                            }

                        }
                    }

                    if (!notavailable)
                    {
                        temp.Add("Not Applicable");
                    }
                }

                return temp;
            }
            catch (Exception ex)
            {
                if (ex.Message != "Thread was being aborted.")
                    //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }
		
        public void SuiteExecuteDelay(string DelayTime, string type_delay)
        {
            try
            {
                ExecutionLoopCount("Testsuite execution delay is in progress");

                //ExecutionMessage = "Testsuite execution delay is in progress";
                //ExecutionLoopCount(ExecutionMessage);
                Int32 _delay = 0;              
                if (type_delay == "Hour")
                {
                    _delay = Convert.ToInt32(DelayTime) * 60 * 60 * 1000;
                    Thread.Sleep(_delay);
                }

                else if (type_delay == "Min")
                {
                    _delay = Convert.ToInt32(DelayTime) * 60 * 1000;
                    Thread.Sleep(_delay);
                }

                else if (type_delay == "Sec")
                {
                    _delay = Convert.ToInt32(DelayTime) * 1000;
                    Thread.Sleep(_delay);
                }

                ExecutionLoopCount(string.Empty);
                //ExecutionMessage = string.Empty;
                //ExecutionLoopCount(ExecutionMessage);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15018", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public void Execute_Delay(int q, List<string> tc_delay, List<string> tc_delay_type)
        {
            try
            {
                string[] delay = tc_delay.ToArray();
                string[] delay_type = tc_delay_type.ToArray();
                string type_delay = delay_type[q];
                Int32 _delay = 0;

                if (delay[q] != string.Empty)
                {
                    if (type_delay == "Hour")
                    {
                        _delay = Convert.ToInt32(delay[q]) * 60 * 60 * 1000;
                        Thread.Sleep(_delay);
                    }

                    else if (type_delay == "Min")
                    {
                        _delay = Convert.ToInt32(delay[q]) * 60 * 1000;
                        Thread.Sleep(_delay);
                    }

                    else if (type_delay == "Sec")
                    {
                        _delay = Convert.ToInt32(delay[q]) * 1000;
                        Thread.Sleep(_delay);
                    }

                    else if (type_delay == "msec")
                    {
                        _delay = Convert.ToInt32(delay[q]);
                        Thread.Sleep(_delay);
                    }
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15018", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public Tuple<List<string>, string> Execute_Control_Verification(int tcid, int tabnumber, string testcasename, string BMtype,TreeViewExplorer PlanExecution,int exid,string Testsuitename,string Testplanname,string Testactionname,Int32 CaseExecutionUniqueID,Int32 ActionTabCaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID, string BM_start_end)
        {
            List<string> runstatus = new List<string>();
            string Background_Fail_remarks = string.Empty;
            try
            {
                List<string> componentname_list = new List<string>();
                List<string> verify_command = new List<string>();
                List<string> verify_value = new List<string>();
                Int32[] TAID_array = TAID.ToArray();
                List<string> selection_Type = new List<string>();
                List<string> Max_limit = new List<string>();
                List<string> Min_limit = new List<string>();
                List<string> Loop_values = new List<string>();
                List<string> Loop_count = new List<string>();
                List<string> controlDataType = new List<string>();
                string query = string.Empty;
                if (BMtype == string.Empty)
                {
                    query = "select GetParamComponentName,GetParamComponentProperty,GetParamComponentValue,InputSelectionType,MaximumLimit,MinimumLimit,LoopStatus,LoopStartValue,LoopEndValue,LoopIncrValue,AllChannelControls,ControlDatatype from controlverification where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                }
                else if ((BMtype == "BM"))
                {
                    query = "select ComponentName,ComponentProperty,ComponentValue,ValueType,MaximumLimit,MinimumLimit,LoopCheckedStatus,Loop_start,Loop_End,Loop_Increament,AllChannels,ControlDatatype from ControlMonitor where BMID=('" + tcid + "') ";
                    //query = "select * from ControlMonitor where BMID=('" + tcid + "') ";
                }

                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                List<string> controlName = new List<string>();
                //string componentName = string.Empty;

                while (read.Read())
                {
                    //componentName = read.GetString(0);
                    controlName.Add(read.GetString(1));
                    componentname_list.Add(read.GetString(0));
                    verify_command.Add(read.GetString(0) + read.GetString(1));
                    verify_value.Add(read.GetString(2).Trim());
                    if (read[3] != System.DBNull.Value)
                    {
                        selection_Type.Add(read.GetString(3));
                    }
                    else
                    {
                        selection_Type.Add(string.Empty);
                    }
                    if (read[4] != System.DBNull.Value)
                    {
                        Max_limit.Add(read.GetString(4));
                    }
                    else
                    {
                        Max_limit.Add(string.Empty);
                    }
                    if (read[5] != System.DBNull.Value)
                    {
                        Min_limit.Add(read.GetString(5));
                    }
                    else
                    {
                        Min_limit.Add(string.Empty);
                    }
                    if(tble.Columns.Count>6)
                    {
                        if ((read[6] != System.DBNull.Value) && (read[7] != System.DBNull.Value) && (read[8] != System.DBNull.Value) && (read[9] != System.DBNull.Value) && (read[10] != System.DBNull.Value))
                        {
                            if (read.GetString(10) != string.Empty)
                            {
                                var loopCountandCommands = loopCommands(read.GetString(6), read.GetString(7), read.GetString(8), read.GetString(9), read.GetString(10));
                                Loop_values.Add(loopCountandCommands.Item1.Trim());
                                Loop_count.Add(loopCountandCommands.Item2.Trim());
                            }
                            else
                            {
                                Loop_values.Add(string.Empty);
                                Loop_count.Add(string.Empty);
                            }
                        }
                        else
                        {
                            Loop_values.Add(string.Empty);
                            Loop_count.Add(string.Empty);
                        }
                    }
                    else
                    {
                        Loop_values.Add(string.Empty);
                        Loop_count.Add(string.Empty);
                    }
                    if (read[11] != System.DBNull.Value)
                    {
                        controlDataType.Add(read.GetString(11));
                    }
                    else
                    {
                        controlDataType.Add(string.Empty);
                    }
                }

                string[] name_array = componentname_list.ToArray();
                string[] vcommand_array = verify_command.ToArray();
                string[] vvalue_array = verify_value.ToArray();
                string[] selection_array = selection_Type.ToArray();
                string[] max_array = Max_limit.ToArray();
                string[] min_array = Min_limit.ToArray();
                string[] Loop_controls = Loop_values.ToArray();
                string[] Loop_count_value = Loop_count.ToArray();
                string[] controls_DataType = controlDataType.ToArray();
                for (int j = 0; j < vcommand_array.Length; j++)
                {
                    if (Loop_controls[j] == string.Empty)
                    {
                        string[] arr;
                        arr = new string[6];
                        arr[0] = vcommand_array[j];
                        arr[1] = vvalue_array[j];
                        arr[2] = selection_array[j];
                        arr[3] = max_array[j];
                        arr[4] = min_array[j];
                        arr[5] = controls_DataType[j];
                        if ((arr[0] != string.Empty)  && (arr[2] != string.Empty))
                        {
                            List<string> runStatusToCopy = RunGet(arr, testcasename, BMtype, PlanExecution,exid,Testsuitename,Testplanname,Testactionname,-1,j, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, BM_start_end, controlName[j], name_array[j]);
                            runstatus.AddRange(runStatusToCopy);
                            arr[0] = string.Empty;
                            arr[1] = string.Empty;
                            arr[2] = string.Empty;
                            arr[3] = string.Empty;
                            arr[4] = string.Empty;
                            arr[5] = string.Empty;
                        }
                        else
                        {
                            string status = string.Empty;
                            status = "Fail";
                            if (BMtype == string.Empty)
                            {
                                //get_status.Add(status);
                                PlanExecution.ExecutionStatus = "Fail";
                            }
                            runstatus.Add(status);
                        }
                    }
                    else
                    {
                        string[] channel_array;
                        string[] arrayofcounts = Loop_count_value[j].Split(',');
                        string[] arrayofcommands = Loop_controls[j].Split('|');
                        for (int i = 0; i < arrayofcommands.Length; i++)
                        {
                            int channelNumber = 0;
                            if (arrayofcommands.Length == arrayofcounts.Length)
                            {
                                channelNumber = Convert.ToInt32(arrayofcounts[i]);
                            }
                            else
                            {
                                channelNumber = i;
                            }
                            channel_array = new string[6];
                            channel_array[0] = name_array[j] + arrayofcommands[i];
                            channel_array[1] = vvalue_array[j];
                            channel_array[2] = selection_array[j];
                            channel_array[3] = max_array[j];
                            channel_array[4] = min_array[j];
                            channel_array[5] = controls_DataType[j];

                            if (channel_array[0] != string.Empty && channel_array[1] != string.Empty && channel_array[2] != string.Empty)
                            {
                                List<string> runStatusToCopy = RunGet(channel_array, testcasename, BMtype, PlanExecution, exid, Testsuitename, Testplanname, Testactionname, channelNumber, j, CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID, BM_start_end, arrayofcommands[i], name_array[j]);
                                runstatus.AddRange(runStatusToCopy);
                                channel_array[0] = string.Empty;
                                channel_array[1] = string.Empty;
                                channel_array[2] = string.Empty;
                                channel_array[3] = string.Empty;
                                channel_array[4] = string.Empty;
                                channel_array[5] = string.Empty;
                            }
                            else
                            {
                                string status = string.Empty;
                                status = "Fail";
                                runstatus.Add(status);
                            }
                        }
                    }
                        
                }
                componentname_list.Clear();
                verify_command.Clear();
                verify_value.Clear();
                selection_Type.Clear();
                Max_limit.Clear();
                Min_limit.Clear();
                Loop_values.Clear();
                Loop_count.Clear();
                controlDataType.Clear();
                
                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15019", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
        }

        public Tuple<List<string>, string> Execute_Log_Verification(int tcid, int tabnumber, string testcasename, string actionname, string BMtype, List<logitems> coreitems, List<logitems> otheritems, string testplanname, string testsuitename, Int32 exid,string Date_time_Suite,string Qsys_firmware,string rerun, Int32 Exid, string Testsuitename, string Testplanname, string Testcasename, string Testactionname, Int32 CaseExecutionUniqueID,Int32 ActionTabCaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID)
        {
            List<string> runstatus = new List<string>();
            string Background_Fail_remarks = string.Empty;
            string path = string.Empty;

            try
            {
                Int32[] TAID_array = TAID.ToArray();
                string query = string.Empty;
                string query1 = string.Empty;
                string ilog_ischecked = string.Empty;
                string ilog_combobox = string.Empty;
                string ilog_textbox = string.Empty;
                string Kernellog_ischecked = string.Empty;
                string Kernellog_combobox = string.Empty;
                string Kernellog_textbox = string.Empty;
                string eventlog_ischecked = string.Empty;
                string eventlog_textbox = string.Empty;
                string configuratorlog_ischecked = string.Empty;
                string configuratorlog_textbox = string.Empty;
                string siplog_ischecked = string.Empty;
                string siplog_textbox = string.Empty;
                string Qsysapplog_ischecked = string.Empty;
                string Qsysapplog_textbox = string.Empty;
                string UCIlog_ischecked = string.Empty;
                string UCIlog_textbox = string.Empty;
                string Softphonelog_ischecked = string.Empty;
                string Softphonelog_textbox = string.Empty;
                string Windows_event_log_ischecked = string.Empty;
                string Windows_event_log_textbox = string.Empty;
                List<string> All_devices_for_log = new List<string>();
                List<string> currentdeviceiplist = new List<string>();
                List<logitems> core_log_verifications_list = new List<logitems>();
                List<logitems> Pheripherals_log_verifications_list = new List<logitems>();

                //string Testaction_time= date

                string Verifytype = string.Empty;
                string Comparestring = string.Empty;
                string Tlogfile = string.Empty;
                int i = 0;
                if ((BMtype == "BM_start")||(BMtype == "BM_end"))
                {
                    query = "select * from LogMonitor1 where BMID='" + tcid + "' ";
                    i = i + 1;
                }
                else 
                {
                    query = "select * from logVerification where (tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')) ";
                }

                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                while (read.Read())
                {
                    ilog_ischecked = read.GetString(3+i);
                    ilog_combobox = read.GetString(4+i);
                    ilog_textbox = read.GetString(5+i).Trim();
                    Kernellog_ischecked = read.GetString(6+i);
                    Kernellog_combobox = read.GetString(7+i);
                    Kernellog_textbox = read.GetString(8+i).Trim();
                    eventlog_ischecked = read.GetString(9+i);
                    eventlog_textbox = read.GetString(10+i).Trim();
                    configuratorlog_ischecked = read.GetString(11+i);
                    configuratorlog_textbox = read.GetString(12+i).Trim();
                    siplog_ischecked = read.GetString(13+i);
                    siplog_textbox = read.GetString(14+i).Trim();
                    Qsysapplog_ischecked = read.GetString(15+i);
                    Qsysapplog_textbox = read.GetString(16+i).Trim();
                    UCIlog_ischecked = read.GetString(17+i);
                    UCIlog_textbox = read.GetString(18+i).Trim();
                    Softphonelog_ischecked = read.GetString(19+i);
                    Softphonelog_textbox = read.GetString(20+i).Trim();
                    Windows_event_log_ischecked = read.GetString(21+i);
                    Windows_event_log_textbox = read.GetString(22+i).Trim();
                }

                //query1 = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TPID from testcase where tcid=('" + tcid + "') ))";
                //tble = QscDatabase.SendCommand_Toreceive(query1);
                //read = tble.CreateDataReader();
                //while (read.Read())
                //{
                //    All_devices_for_log.Add(read.GetString(3));
                   
                //}
                //if((All_devices_for_log!=null)&(All_devices_for_log.Count>0))
                //{
                //     currentdeviceiplist = GetAllIpForLogverification(All_devices_for_log);
                //}
               
                //// ilog verification

                if ((ilog_ischecked != null)&(ilog_ischecked!=string.Empty)&(ilog_ischecked == "True"))
                {
                    if ((ilog_combobox != null) & (ilog_combobox != string.Empty) & (ilog_textbox != null) & (ilog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        if (ilog_combobox == "All devices")
                        {
                            foreach (logitems ilogitem in coreitems)
                            {
                                if (ilogitem.Logtype == "ilog")
                                {
                                    var core_log_verifications = log_object.Logverification(ilogitem, applicationPassword, this);
                                    if (core_log_verifications != null)
                                    {
                                        if (core_log_verifications.Count >= 0)
                                        {
                                            stat = verifylog(core_log_verifications, ilog_textbox, ilogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, ilogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                            runstatus.Add(stat);
                                            if (core_log_verifications.Count != 0)
                                            {
                                                core_log_verifications[0].status = stat.ToUpper();
                                                core_log_verifications_list.Add(core_log_verifications[0]);
                                            }
                                        }

                                    }
                                }
                            }

                            foreach (logitems ilogitem in otheritems)
                            {
                                if (ilogitem.Logtype == "ilog")
                                {
                                    var Pheripherals_log_verifications = log_object.Logverification(ilogitem, applicationPassword, this);
                                    if (Pheripherals_log_verifications != null)
                                    {
                                        if (Pheripherals_log_verifications.Count >= 0)
                                        {
                                            stat = verifylog(Pheripherals_log_verifications, ilog_textbox, ilogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, ilogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                            runstatus.Add(stat);
                                            if (Pheripherals_log_verifications.Count != 0)
                                            {
                                                Pheripherals_log_verifications[0].status = stat.ToUpper();
                                                Pheripherals_log_verifications_list.Add(Pheripherals_log_verifications[0]);
                                            }
                                        }

                                    }
                                }
                            }

                            //var TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(otheritems, applicationPassword, "TC_End");
                            //TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, actionname, exid, "test_case");

                        }
                        else
                        {
                            foreach (logitems ilogitem in coreitems)
                            {
                                if (ilogitem.Logtype == "ilog")
                                {
                                    if (String.Equals(ilogitem.devicenameinDesign, ilog_combobox, StringComparison.CurrentCulture))
                                    {
                                        var core_log_verifications = log_object.Logverification(ilogitem, applicationPassword, this);
                                        if (core_log_verifications != null)
                                        {
                                            if(core_log_verifications.Count >= 0)
                                            {
                                                stat = verifylog(core_log_verifications, ilog_textbox, ilogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, ilogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                                runstatus.Add(stat);
                                                if (core_log_verifications.Count != 0)
                                                {
                                                    core_log_verifications[0].status = stat.ToUpper();
                                                    core_log_verifications_list.Add(core_log_verifications[0]);
                                                }
                                            }
                                            
                                        }                                         
                                    }
                                }
                            }
                            foreach (logitems ilogitem in otheritems)
                            {
                                if (ilogitem.Logtype == "ilog")
                                {
                                    if (String.Equals(ilogitem.devicenameinDesign, ilog_combobox, StringComparison.CurrentCulture))
                                    {
                                        var Pheripherals_log_verifications = log_object.Logverification(ilogitem, applicationPassword, this);
                                        if (Pheripherals_log_verifications != null)
                                        {
                                            if (Pheripherals_log_verifications.Count >= 0)
                                            {
                                                stat = verifylog(Pheripherals_log_verifications, ilog_textbox, ilogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, ilogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                                runstatus.Add(stat);
                                                if (Pheripherals_log_verifications.Count != 0)
                                                {
                                                    Pheripherals_log_verifications[0].status = stat.ToUpper();
                                                    Pheripherals_log_verifications_list.Add(Pheripherals_log_verifications[0]);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "ilog is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "ilog" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }

                //// kernel verification

                if ((Kernellog_ischecked != null) & (Kernellog_ischecked != string.Empty) & (Kernellog_ischecked == "True"))
                {
                    if ((Kernellog_combobox != null) & (Kernellog_combobox != string.Empty) & (Kernellog_textbox != null) & (Kernellog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        if (Kernellog_combobox == "All devices")
                        {
                            foreach (logitems kernallogitem in coreitems)
                            {
                                if (kernallogitem.Logtype == "kernallog")
                                {
                                    var core_log_verifications = log_object.Logverification(kernallogitem, applicationPassword, this);
                                    if (core_log_verifications != null)
                                    {
                                        if (core_log_verifications.Count >= 0)
                                        {
                                            stat = verifylog(core_log_verifications, Kernellog_textbox, kernallogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, kernallogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                            runstatus.Add(stat);
                                            if (core_log_verifications.Count != 0)
                                            {
                                                core_log_verifications[0].status = stat.ToUpper();
                                                core_log_verifications_list.Add(core_log_verifications[0]);
                                            }
                                        }

                                    }
                                }
                            }

                            foreach (logitems kernallogitem in otheritems)
                            {
                                if (kernallogitem.Logtype == "kernallog")
                                {
                                    var Pheripherals_log_verifications = log_object.Logverification(kernallogitem, applicationPassword, this);
                                    if (Pheripherals_log_verifications != null)
                                    {
                                        if (Pheripherals_log_verifications.Count >= 0)
                                        {
                                            stat = verifylog(Pheripherals_log_verifications, Kernellog_textbox, kernallogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, kernallogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                            runstatus.Add(stat);
                                            if (Pheripherals_log_verifications.Count != 0)
                                            {
                                                Pheripherals_log_verifications[0].status = stat.ToUpper();
                                                Pheripherals_log_verifications_list.Add(Pheripherals_log_verifications[0]);
                                            }
                                        }

                                    }
                                }
                            }

                            //var TC_log_end_lines2 = log_object.Tplog_getcurrentline_other(otheritems, applicationPassword, "TC_End");
                            //TP_Write_logs(TC_log_end_lines1, TC_log_end_lines2, testsuitename, testplanname, testcasename, actionname, exid, "test_case");

                        }
                        else
                        {
                            foreach (logitems kernallogitem in coreitems)
                            {
                                if (kernallogitem.Logtype == "kernallog")
                                {

                                    if (String.Equals(kernallogitem.devicenameinDesign, Kernellog_combobox, StringComparison.CurrentCulture))
                                    {
                                        var core_log_verifications = log_object.Logverification(kernallogitem, applicationPassword, this);
                                        if (core_log_verifications != null)
                                        {
                                            if (core_log_verifications.Count >= 0)
                                            {
                                                stat = verifylog(core_log_verifications, Kernellog_textbox, kernallogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, kernallogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                                runstatus.Add(stat);
                                                if (core_log_verifications.Count != 0)
                                                {
                                                    core_log_verifications[0].status = stat.ToUpper();
                                                    core_log_verifications_list.Add(core_log_verifications[0]);
                                                }
                                            }

                                        }
                                    }
                                }

                            }
                            foreach (logitems kernallogitem in otheritems)
                            {
                                if (kernallogitem.Logtype == "kernallog")
                                {

                                    if (String.Equals(kernallogitem.devicenameinDesign, Kernellog_combobox, StringComparison.CurrentCulture))
                                    {
                                        var Pheripherals_log_verifications = log_object.Logverification(kernallogitem, applicationPassword, this);
                                        if (Pheripherals_log_verifications != null)
                                        {
                                            if (Pheripherals_log_verifications.Count >= 0)
                                            {
                                                stat = verifylog(Pheripherals_log_verifications, Kernellog_textbox, kernallogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, kernallogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                                runstatus.Add(stat);
                                                if (Pheripherals_log_verifications.Count != 0)
                                                {
                                                    Pheripherals_log_verifications[0].status = stat.ToUpper();
                                                    Pheripherals_log_verifications_list.Add(Pheripherals_log_verifications[0]);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "Kernallog is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "kernallog" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }

                //// event verification
                if ((eventlog_ischecked != null) & (eventlog_ischecked != string.Empty) & (eventlog_ischecked == "True"))
                {
                    if ((eventlog_textbox != null) & (eventlog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        foreach (logitems eventlogitem in coreitems)
                        {
                            if (eventlogitem.Logtype == "eventlog")
                            {
                                var core_log_verifications = log_object.Logverification(eventlogitem, applicationPassword, this);
                                if (core_log_verifications != null)
                                {
                                    if (core_log_verifications.Count >= 0)
                                    {
                                        stat = verifylog(core_log_verifications, eventlog_textbox, eventlogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, eventlogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                        runstatus.Add(stat);
                                        if (core_log_verifications.Count != 0)
                                        {
                                            core_log_verifications[0].status = stat.ToUpper();
                                            core_log_verifications_list.Add(core_log_verifications[0]);
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "Eventlog is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "eventlog" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }
                      
                if ((siplog_ischecked != null) & (siplog_ischecked != string.Empty) & (siplog_ischecked == "True"))
                {
                    if ((siplog_textbox != null) & (siplog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        foreach (logitems siplogitem in coreitems)
                        {
                        	if (siplogitem.Logtype == "siplog")
                            {
                                var core_log_verifications = log_object.Logverification(siplogitem, applicationPassword, this);
                                if (core_log_verifications != null)
                                {
                                    if (core_log_verifications.Count >= 0)
                                    {
                                        stat = verifylog(core_log_verifications, siplog_textbox, siplogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, siplogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                        runstatus.Add(stat);
                                        if (core_log_verifications.Count != 0)
                                        {
                                            core_log_verifications[0].status = stat.ToUpper();
                                            core_log_verifications_list.Add(core_log_verifications[0]);
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "Siplog is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "siplog" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }
                if ((Qsysapplog_ischecked != null) & (Qsysapplog_ischecked != string.Empty) & (Qsysapplog_ischecked == "True"))
                {
                    if ((Qsysapplog_textbox != null) & (Qsysapplog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        foreach (logitems Qsysapplogitem in coreitems)
                        {
                        	if (Qsysapplogitem.Logtype == "Qsyslog")
                            {
                                var core_log_verifications = log_object.Logverification(Qsysapplogitem, applicationPassword, this);
                                if (core_log_verifications != null)
                                {
                                    if (core_log_verifications.Count >= 0)
                                    {
                                        stat = verifylog(core_log_verifications, Qsysapplog_textbox, Qsysapplogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, Qsysapplogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                        runstatus.Add(stat);
                                        if (core_log_verifications.Count != 0)
                                        {
                                            core_log_verifications[0].status = stat.ToUpper();
                                            core_log_verifications_list.Add(core_log_verifications[0]);
                                        }
                                    }

                                }
                            }
                        }
                        
                        if (stat == string.Empty)
                        {
                            string remarks = "Qsyslog is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "Qsyslog" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }
                if ((UCIlog_ischecked != null) & (UCIlog_ischecked != string.Empty) & (UCIlog_ischecked == "True"))
                {
                    if ((UCIlog_textbox != null) & (UCIlog_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        foreach (logitems UCIlogitem in coreitems)
                        {
                        	if (UCIlogitem.Logtype == "Qsys_UCI")
                            {
                                var core_log_verifications = log_object.Logverification(UCIlogitem, applicationPassword, this);
                                if (core_log_verifications != null)
                                {
                                    if (core_log_verifications.Count >= 0)
                                    {
                                        stat = verifylog(core_log_verifications, UCIlog_textbox, UCIlogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, UCIlogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                        runstatus.Add(stat);
                                        if (core_log_verifications.Count != 0)
                                        {
                                            core_log_verifications[0].status = stat.ToUpper();
                                            core_log_verifications_list.Add(core_log_verifications[0]);
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "Qsys_UCI is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "Qsys_UCI" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }

                ////////win event

                if ((Windows_event_log_ischecked != null) & (Windows_event_log_ischecked != string.Empty) & (Windows_event_log_ischecked == "True"))
                {
                    if ((Windows_event_log_textbox != null) & (Windows_event_log_textbox != string.Empty))
                    {
                        string stat = string.Empty;
                        string start_time = DateTime.Now.ToString();
                        foreach (logitems Winlogitem in coreitems)
                        {
                            if (Winlogitem.Logtype == "Windows_event_log")
                            {
                                var core_log_verifications = log_object.Logverification(Winlogitem, applicationPassword, this);
                                if (core_log_verifications != null)
                                {
                                    if (core_log_verifications.Count >=0)
                                    {
                                        stat = verifylog(core_log_verifications, Windows_event_log_textbox, Winlogitem.Logtype, exid, testsuitename, testplanname, Testcasename, Testactionname, CaseExecutionUniqueID, Winlogitem.devicenameinDesign, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                                        runstatus.Add(stat);
                                        if (core_log_verifications.Count != 0)
                                        {
                                            core_log_verifications[0].status = stat.ToUpper();
                                            core_log_verifications_list.Add(core_log_verifications[0]);
                                        }
                                    }
                                }
                            }
                        }

                        if (stat == string.Empty)
                        {
                            string remarks = "Windows_event_log is not available";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + start_time + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "Windows_event_log" + "', '" + remarks + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Pass");
                        }
                    }
                }


                //////////Pcap Log
                if (BMtype != "BM_start" && BMtype != "BM_end")
                {
                    string pcaplog_ProtocolName = string.Empty;
                    string selectedLAN_value = "LAN-A";
                    string selectedFiltervalue = "ALL";
                    string filterip = string.Empty;
                    string not_FilterByIp = "false";

                    query = "select * from PcapVerification where tcid='" + tcid + "' and ActionID='" + TAID_array[tabnumber] + "'";
                    tble = QscDatabase.SendCommand_Toreceive(query);
                    read = tble.CreateDataReader();

                    if(read.HasRows)
                    {
                        int totalRows = tble.Rows.Count;
                        read.Read();

                        string pcaplog_CaptureTime = string.Empty;
                        string pcaplog_CaptureUnit = string.Empty;

                        if (!string.IsNullOrEmpty(read.GetValue(3).ToString()))
                            pcaplog_CaptureTime = read.GetValue(3).ToString();

                        if (!string.IsNullOrEmpty(read.GetString(4)))
                            pcaplog_CaptureUnit = read.GetString(4);

                       
                        string pcaplog_ProtocolNameTextbx_value = read.GetString(5).Trim();                     
                        string pcaplog_FieldText = read.GetString(6).Trim();

                        string[] splitvalues = pcaplog_ProtocolNameTextbx_value.Split(';');
                        pcaplog_ProtocolName = splitvalues[0];

                        if(splitvalues.Count() > 1)
                        {
                            selectedLAN_value = splitvalues[1];
                            selectedFiltervalue = splitvalues[2];
                            filterip = splitvalues[3];
                            not_FilterByIp = splitvalues[4];
                        }                                    

                        string resp = string.Empty;
                        string starttime = DateTime.Now.ToString();

                     
                        string username = string.Empty;
                        if (core_New_FirmwareVersion.Item1)
                            username = Properties.Settings.Default.DeviceUsername.ToString();
                        else
                            username = "admin";

                        HttpGetForPcap("http://" + selectedCoreIPAddress + "/cgi-bin/tcpdump_execute?action=start&lan="+ selectedLAN_value + "&filter="+ selectedFiltervalue + "&ip="+ filterip + "&notip=" + not_FilterByIp + "&"+ Properties.Settings.Default.PcapFilter, applicationPassword, username, out resp);

                        if (resp.ToUpper().Contains("STARTING PCAP CAPTURE"))
                        {
                            if (Convert.ToInt32(pcaplog_CaptureTime) != 0)
                                SetDelay(pcaplog_CaptureTime, pcaplog_CaptureUnit);

                            HttpGetForPcap("http://" + selectedCoreIPAddress + "/cgi-bin/tcpdump_execute?action=stop&lan=" + selectedLAN_value + "&filter=" + selectedFiltervalue + "&ip=" + filterip + "&notip=" + not_FilterByIp + "&" + Properties.Settings.Default.PcapFilter, applicationPassword, username, out resp);

                            if (resp.ToUpper().Contains("STOPPING PCAP CAPTURE"))
                            {
                                //////Download
                                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                                {
                                    path = Properties.Settings.Default.Qsystemppath.ToString() + @"\Temp_" + exid;
                                }
                                else
                                {
                                    path = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid).ToString();
                                }

                                //path = @"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\Temp_" + exid.ToString();

                                Thread.Sleep(3000);

                                //try
                                //{
                                //    if (File.Exists(path + @"\qsys.pcap"))
                                //        File.Delete(path + @"\qsys.pcap");
                                //}
                                //catch (Exception ex) { }

                                bool isDownloadSuccess = DownLoadPcapFileFromURL(path + @"\qsys.pcap", "http://" + selectedCoreIPAddress + "/pcaps/qsys.pcap");
                                FileInfo fileInfo = new FileInfo(path + @"\qsys.pcap");
                                if (isDownloadSuccess && File.Exists(path + @"\qsys.pcap"))
                                {
                                    if (fileInfo.Length > 0)
                                    {
                                        //////Wireshark Installation Path:
                                        string installationPath = GetApplicationInstallPath("wireshark");

                                        if (installationPath != null && installationPath != string.Empty)
                                        {
                                            if (File.Exists(System.IO.Path.Combine(installationPath, "tshark.exe")))
                                            {
                                                long length = ConvertPcapToPdml(installationPath, path);

                                                if (File.Exists(path + @"\qsys.pdml") && length > 0)
                                                {
                                                    int cnt = 1;
                                                    string logName = "Pcap_log";

                                                Loop2:

                                                    if (totalRows > 1)
                                                    {
                                                        logName = "Pcap_log : " + cnt;
                                                    }

                                                    //Thread.Sleep(10000);
                                                    var isPass = ReadXMLdata(path, pcaplog_ProtocolName, pcaplog_FieldText);

                                                    if (isPass.Item1)
                                                    {
                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + logName + "', '" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        runstatus.Add("Pass");
                                                    }
                                                    else if (isPass.Item2 != string.Empty)
                                                    {
                                                        string remarks = System.Web.HttpUtility.HtmlEncode(isPass.Item2);
                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + logName + "', @Remarks,'Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, "@Remarks", remarks, string.Empty, string.Empty);
                                                        runstatus.Add("Fail");
                                                    }
                                                    else
                                                    {
                                                        //////Comparision Failed
                                                        string remarks = string.Empty;
                                                        remarks = "Error during Pcap xml file read";

                                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + logName + "', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                        runstatus.Add("Fail");
                                                    }

                                                    while (read.Read())
                                                    {
                                                        pcaplog_ProtocolName = read.GetString(5).Trim();
                                                        pcaplog_FieldText = read.GetString(6).Trim();
                                                        cnt++;

                                                        goto Loop2;
                                                    }
                                                }
                                                else
                                                {
                                                    //////////Convert failed
                                                    string remarks = "Failed to parse Pcap file";
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                    runstatus.Add("Fail");
                                                }

                                                string logpath = getpathforPcapLog(coreitems, exid, testsuitename, Date_time_Suite, testplanname, testcasename, Qsys_firmware, actionname, rerun, "LogVerification");
                                                if (logpath != null && logpath != string.Empty)
                                                {
                                                    try
                                                    {
                                                        if (File.Exists(path + @"\qsys.pcap"))
                                                            File.Move(path + @"\qsys.pcap", logpath + @"\qsys.pcap");

                                                        if (File.Exists(path + @"\qsys.pdml"))
                                                            File.Move(path + @"\qsys.pdml", logpath + @"\qsys.pdml");
                                                    }
                                                    catch (Exception ex) { }
                                                }
                                            }
                                            else
                                            {
                                                /////Install tshark
                                                string remarks = "Tshark not installed in local pc";
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                                runstatus.Add("Fail");
                                            }
                                        }
                                        else
                                        {
                                            //////////Give message: Install Wireshark
                                            string remarks = "Wireshark not installed in local pc";
                                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                            runstatus.Add("Fail");
                                        }
                                    }
                                    else
                                    {
                                        string remarks = "Downloaded Pcap file size is zero";
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                        runstatus.Add("Fail");
                                    }
                                }
                                else
                                {
                                    //////////Download pcap file Unsuccessful
                                    string remarks = "Pcap file download unsuccessful";
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    runstatus.Add("Fail");
                                }
                            }
                            else
                            {
                                ////Error while stop the pcap capture
                                string remarks = "Could not stop Pcap file capture";
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                runstatus.Add("Fail");
                            }
                        }
                        else
                        {
                            //////Error while start the pcap capture
                            string remarks = "Could not start Pcap file capture";
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Pcap_log', '" + remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                            runstatus.Add("Fail");
                        }

                    }
                }                    

                string Date_time = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);



                if (BMtype == "BM_start")
                {
                    //if (rerun == string.Empty)
                        TP_Write_logs(core_log_verifications_list, Pheripherals_log_verifications_list, testsuitename, testplanname, testcasename, actionname, exid, "Background_LogVerification_start", Date_time_Suite, Qsys_firmware, rerun, true, false);
                    //else
                    //    TP_Write_logs(core_log_verifications_list, Pheripherals_log_verifications_list, testsuitename, testplanname, testcasename, actionname, exid, "Background_LogVerification_start", Date_time_Suite, Qsys_firmware, string.Empty);
                }
                else if (BMtype == "BM_end")
                {
                    TP_Write_logs(core_log_verifications_list, Pheripherals_log_verifications_list, testsuitename, testplanname, testcasename, actionname, exid, "Background_LogVerification_end", Date_time_Suite, Qsys_firmware, rerun, true, false);
                }
                else
                {
                    TP_Write_logs(core_log_verifications_list, Pheripherals_log_verifications_list, testsuitename, testplanname, testcasename, actionname, exid, "LogVerification", Date_time_Suite, Qsys_firmware,rerun, true, false);
                }

                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECLog_verification", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runstatus.Add("Fail");

                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
            finally
            {
                try
                {
                    if (Directory.Exists(path) && File.Exists(path + @"\qsys.pcap"))
                        File.Delete(path + @"\qsys.pcap");
                }
                catch (Exception ex) { }
            }
        }

        public string getpathforScriptLog(string logPath, string subFolderName)
        {
            try
            {
                string path = System.IO.Path.Combine(logPath, subFolderName);                

                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                return path;
            }
            catch(Exception ex)
            {
                return "";
            }
        }

        public string getpathforPcapLog(List<logitems> core_logwrite, Int32 EXid, string TestsuiteName, string Date_time_Suite, string TestplanName, string TestcaseName, string Qsys_firmware, string actionname, string rerun, string subFolderName)
        {
            try
            {
                string path = string.Empty;
                List<string> temp_list_devices = new List<string>();
                string testplan_datetime = string.Empty;
                string testcase_datetime = string.Empty;

                if ((core_logwrite != null) && (core_logwrite.Count > 0))
                {
                    foreach (logitems item in core_logwrite)
                    {
                        if (!temp_list_devices.Contains(item.devicenameinDesign))
                        {
                            temp_list_devices.Add(item.devicenameinDesign);
                            testcase_datetime = item.TC_timestamp;
                            testplan_datetime = item.TP_timestamp;
                        }
                    }
                }

                if (!Directory.Exists(QatConstants.QATServerPath + "\\Logs"))
                {
                    Directory.CreateDirectory(QatConstants.QATServerPath + "\\Logs");
                }

                path = QatConstants.QATServerPath + "\\Logs" + "\\" + EXid.ToString();

                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                TestsuiteName = filtername(TestsuiteName);
                path = path + "\\" + TestsuiteName + "_" + Date_time_Suite;
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                TestplanName = filtername(TestplanName);
                if (Qsys_firmware != string.Empty)
                {
                    path = path + "\\" + TestplanName + "_" + testplan_datetime + "_" + Qsys_firmware;
                }
                else
                {
                    path = path + "\\" + TestplanName + "_" + testplan_datetime;
                }
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                TestcaseName = filtername(TestcaseName);
                path = path + "\\" + TestcaseName + "_" + testcase_datetime;
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                actionname = filtername(actionname);
                path = path + "\\" + rerun + actionname;
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                path = path + "\\" + subFolderName;
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                return path;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        private long ConvertPcapToPdml(string installationPath, string path)
        {
            Process qDesignProcess = new Process();
            long length = 0;

            try
            {
                qDesignProcess.StartInfo.FileName = "cmd.exe";
                qDesignProcess.StartInfo.CreateNoWindow = true;
                qDesignProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                qDesignProcess.StartInfo.UseShellExecute = false;
                qDesignProcess.StartInfo.RedirectStandardOutput = true;
                qDesignProcess.StartInfo.RedirectStandardInput = true;

                qDesignProcess.StartInfo.WorkingDirectory = installationPath;
                qDesignProcess.Start();
                string pcapPath = @"""" + path + @"\\qsys.pcap""";
                string pdmlPath = @"""" + path + @"\\qsys.pdml""";
                qDesignProcess.StandardInput.WriteLine(@"tshark -2 -r " + pcapPath + " -T pdml >" + pdmlPath);
                //Thread.Sleep(10000);

                DateTime checktime = DateTime.Now.AddMinutes(2);

                while (checktime > DateTime.Now)
                {
                    if (File.Exists(path + @"\qsys.pdml"))
                    {
                        System.IO.FileInfo info = new System.IO.FileInfo(path + @"\qsys.pdml");

                        if (info != null && info.Length > 0)
                        {
                            length = info.Length;
                            bool isFileUse = IsFileInUse(info);

                            if(!isFileUse)
                                break;
                        }
                    }
                }

                return length;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return length;
            }
            finally
            {
                try
                {
                    qDesignProcess.StandardInput.Close();
                    qDesignProcess.StandardOutput.Close();
                    qDesignProcess.Close();
                }
                catch (Exception ex) { }
            }
        }

        private bool IsFileInUse(FileInfo file)
        {
            FileStream stream = null;

            try
            {
                stream = file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None);
            }
            catch (Exception ex)
            {
                return true;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }
            return false;
        }

        private Tuple<bool, string> ReadXMLdata(string path, string pcaplog_ProtocolName, string pcaplog_FieldText)
        {
            bool isPass = false;
            bool isTextAvailable = false;
            bool isProtocolNameAvailable = false;
            bool isFieldTextAvailable = false;
            string Remarks =string.Empty;
            try
            {
                XmlReaderSettings settings = new XmlReaderSettings
                {
                    ConformanceLevel = ConformanceLevel.Auto,
                    CheckCharacters = false,
                    IgnoreWhitespace = true
                };

                using (XmlReader reader = XmlReader.Create(path + @"\qsys.pdml", settings))
                {

                Loop1:
                    while (reader.Read())
                    {
                        if (isPass)
                            break;

                        if ((reader.NodeType == XmlNodeType.Element) && (reader.Name == "proto") && reader.HasAttributes)
                        {
                            isTextAvailable = true;
                            for (int attId = 0; attId < reader.AttributeCount; attId++)
                            {
                                reader.MoveToAttribute(attId);

                                if (reader.Name == "showname" && reader.Value != null && string.Equals(reader.Value.Trim(), pcaplog_ProtocolName.Trim(), StringComparison.CurrentCultureIgnoreCase))
                                {                                    
                                    isProtocolNameAvailable = true;
                                    while (reader.Read())
                                    {
                                        if ((reader.NodeType == XmlNodeType.Element) && (reader.Name == "field") && reader.HasAttributes)
                                        {
                                            for (int attId1 = 0; attId1 < reader.AttributeCount; attId1++)
                                            {
                                                reader.MoveToAttribute(attId1);

                                                if (reader.Name == "showname" && reader.Value != null && string.Equals(reader.Value.Trim(), pcaplog_FieldText.Trim(), StringComparison.CurrentCultureIgnoreCase))
                                                {
                                                    isFieldTextAvailable = true;
                                                    isPass = true;
                                                    break;
                                                }
                                            }
                                        }
                                        else if ((reader.NodeType == XmlNodeType.EndElement) && (reader.Name == "proto"))
                                        {
                                            goto Loop1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (isPass)
                {
                    Remarks = string.Empty;
                }
                else if(!isTextAvailable)
                {
                    Remarks = "No pcap text available";
                }
                else if(!isProtocolNameAvailable)
                {
                    Remarks = "Protocol name text: " + pcaplog_ProtocolName + " not available in Pcap log.";
                }
                else if(!isFieldTextAvailable)
                {
                    Remarks = "Field Text: " + pcaplog_FieldText + " not available in pcap log.";
                }
				
                return new Tuple<bool,string>(isPass, Remarks);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool,string>(isPass, Remarks);
            }
        }

        private void SetDelay(string DelayTime, string type_delay)
        {
            try
            {
                Int32 _delay = 0;
                if (string.Equals(type_delay, "Hour", StringComparison.CurrentCultureIgnoreCase))
                {
                    _delay = Convert.ToInt32(DelayTime) * 60 * 60 * 1000;
                    Thread.Sleep(_delay);
                }

                else if (string.Equals(type_delay, "Min", StringComparison.CurrentCultureIgnoreCase))
                {
                    _delay = Convert.ToInt32(DelayTime) * 60 * 1000;
                    Thread.Sleep(_delay);
                }

                else if (string.Equals(type_delay, "Sec", StringComparison.CurrentCultureIgnoreCase))
                {
                    _delay = Convert.ToInt32(DelayTime) * 1000;
                    Thread.Sleep(_delay);
                }

                else if (string.Equals(type_delay, "msec", StringComparison.CurrentCultureIgnoreCase))
                {
                    _delay = Convert.ToInt32(DelayTime);
                    Thread.Sleep(_delay);
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECLog_verification", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private bool DownLoadPcapFileFromURL(string path, string urlAddress)
        {
            System.IO.FileStream saveFileStream = null;

            try
            {
                long iFileSize = 0;
                int iBufferSize = 1024;
                iBufferSize *= 1000;
                bool isskipped = false;

                saveFileStream = new System.IO.FileStream(path, System.IO.FileMode.Create, System.IO.FileAccess.Write, System.IO.FileShare.ReadWrite);

                HttpWebRequest hwRq = (HttpWebRequest)System.Net.HttpWebRequest.Create(urlAddress);

                SetBasicAuthHeader(ref hwRq, Properties.Settings.Default.DeviceUsername.ToString(), applicationPassword);

                using (HttpWebResponse hwRes = (System.Net.HttpWebResponse)hwRq.GetResponse())
                {
                    using (System.IO.Stream smRespStream = hwRes.GetResponseStream())
                    {
                        smRespStream.ReadTimeout = 60000;

                        iFileSize = hwRes.ContentLength;

                        int iByteSize;
                        byte[] downBuffer = new byte[iBufferSize];

                        while ((iByteSize = smRespStream.Read(downBuffer, 0, downBuffer.Length)) > 0)
                        {
                            if (isskipped == false)
                            {
                                saveFileStream.Write(downBuffer, 0, iByteSize);
                            }
                        }

                        //saveFileStream.Close();
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                if(saveFileStream != null)
                    saveFileStream.Close();
            }
        }

        public string GetApplicationInstallPath(string NameOfAppToFind)
        {
            string installedPath;
            string keyName;
            try
            {
                // search in: CurrentUser
                keyName = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
                installedPath = ExistsInSubKey(Registry.CurrentUser, keyName, "DisplayName", NameOfAppToFind);
                if (!string.IsNullOrEmpty(installedPath))
                {
                    DeviceDiscovery.WriteToLogFile("Wireshark exe installed path is: " + installedPath + "");
                    return installedPath;
                }

                // search in: LocalMachine_32
                keyName = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
                installedPath = ExistsInSubKey(Registry.LocalMachine, keyName, "DisplayName", NameOfAppToFind);
                if (!string.IsNullOrEmpty(installedPath))
                {
                    DeviceDiscovery.WriteToLogFile("Wireshark exe installed path is: " + installedPath + "");
                    return installedPath;
                }

                // search in: LocalMachine_64
                keyName = @"SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall";
                installedPath = ExistsInSubKey(Registry.LocalMachine, keyName, "DisplayName", NameOfAppToFind);
                if (!string.IsNullOrEmpty(installedPath))
                {
                    DeviceDiscovery.WriteToLogFile("Wireshark exe installed path is: " + installedPath + "");
                    return installedPath;
                }

                //Search in: for accessing 64bit registry
                RegistryKey localKey64 = RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive.LocalMachine, RegistryView.Registry64);
                keyName = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
                installedPath = ExistsInSubKey(localKey64, keyName, "DisplayName", NameOfAppToFind);
                if (!string.IsNullOrEmpty(installedPath))
                {
                    DeviceDiscovery.WriteToLogFile("Wireshark exe installed path is: " + installedPath + "");
                    return installedPath;
                }

                //Search in: for accessing 32bit registry
                RegistryKey localKey32 = RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive.LocalMachine, RegistryView.Registry32);
                keyName = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
                installedPath = ExistsInSubKey(localKey32, keyName, "DisplayName", NameOfAppToFind);
                if (!string.IsNullOrEmpty(installedPath))
                {
                    DeviceDiscovery.WriteToLogFile("Wireshark exe installed path is: " + installedPath + "");
                    return installedPath;
                }

                DeviceDiscovery.WriteToLogFile("Wireshark exe installed path not found ");
                return string.Empty;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                DeviceDiscovery.WriteToLogFile("Wireshark exe installed path not found ");
                return string.Empty;
            }
        }

        public static string ExistsInSubKey(RegistryKey root, string subKeyName, string attributeName, string versionOfAppToFind)
        {
            try
            {
                RegistryKey subkey;
                string displayName;

                using (RegistryKey key = root.OpenSubKey(subKeyName))
                {
                    if (key != null)
                    {
                        foreach (string kn in key.GetSubKeyNames())
                        {
                            using (subkey = key.OpenSubKey(kn))
                            {
                                displayName = subkey.GetValue(attributeName) as string;
                                if (displayName != null && versionOfAppToFind != null && displayName != string.Empty)
                                {
                                    if (displayName.ToUpper().StartsWith(versionOfAppToFind.ToUpper()))
                                    {
                                        DeviceDiscovery.WriteToLogFile("Wireshark installed path found ");
                                        return subkey.GetValue("InstallLocation") as string;
                                    }
                                }
                            }
                        }
                    }
                }

                DeviceDiscovery.WriteToLogFile("Wireshark software installed path not found");
                return string.Empty;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Wireshark exe installed path not found ");
                return string.Empty;
            }
        }

        public List<string> Execute_Responsalyzer_Verification(int tcid, int tabnumber, string testcasename,string BMtype, TreeViewExplorer PlanExecution, int exid, string Testsuitename, string Testplanname, string Testactionname,string Write_Output_data_Path, Int32 CaseExecutionUniqueID,Int32 ActionTabCaseAlogPlanExecutionUniqueID,Int32 SuiteExecutionUniqueID)
        {
            List<string> runstatus = new List<string>();
            try
            {
                List<string> responsalyzerNamelist = new List<string>();
                List<string> responsalyzerGraphTypeList = new List<string>();
                List<string> responsalyzerVerifyFileList = new List<string>();
                Int32[] TAID_array = TAID.ToArray();
                string query = string.Empty;
                string xyPlotsValues = string.Empty;
                if (BMtype == string.Empty)
                {
                    query = "select ResponsalyzerName,GraphType,VerificationFileLocation from Responsalyzer where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                }
                 tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                while (read.Read())
                {
                    if (read[0] != System.DBNull.Value)
                        responsalyzerNamelist.Add(read.GetString(0));
                    else
                        responsalyzerNamelist.Add(string.Empty);
                    if (read[1] != System.DBNull.Value)
                        responsalyzerGraphTypeList.Add(read.GetString(1));
                    else
                        responsalyzerGraphTypeList.Add(string.Empty);
                    if (read[2] != System.DBNull.Value)
                        responsalyzerVerifyFileList.Add(read.GetString(2));
                    else
                        responsalyzerVerifyFileList.Add(string.Empty);
                }
                string[] nameArray = responsalyzerNamelist.ToArray();
                string[] graphArray = responsalyzerGraphTypeList.ToArray();
                string[] fileArray = responsalyzerVerifyFileList.ToArray();

                for (int j = 0; j < graphArray.Length; j++)
                {
                    string filepath = System.IO.Path.Combine(QatConstants.QATServerPath, "Responsalyzer", "Reference Files", fileArray[j]);
                    var status = ResponsalyzerAction.ExecuteResponsalyzer(nameArray[j], graphArray[j], selectedCoreIPAddress, filepath, j, exid, Testsuitename, Testplanname, testcasename,Testactionname,CaseExecutionUniqueID, ActionTabCaseAlogPlanExecutionUniqueID, SuiteExecutionUniqueID);
                    runstatus.Add(status.Item1.Trim());
                    xyPlotsValues = status.Item2.Trim();
                    string filename = "Responsalyzer" + (j + 1);
                  
                        if (!Directory.Exists(Write_Output_data_Path))
                        {
                            Directory.CreateDirectory(Write_Output_data_Path);
                        }
                        write_logs(Write_Output_data_Path, filename + ".txt", xyPlotsValues, string.Empty);
                   
                    
                }
                responsalyzerNamelist.Clear();
                responsalyzerGraphTypeList.Clear();
                responsalyzerVerifyFileList.Clear();

            }
            catch(Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECxxxxRes", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
            return runstatus;
        }
        public string verifylog(List<logitems> validatelogitem, string text,string log_type,Int32 exid,string testsuitename, string testplanname, string Testcasename, string Testactionname, Int32 CaseExecutionUniqueID,string devicename, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID)
        {
            string starttime = DateTime.Now.ToString();
            string query = string.Empty;
            try
            {
                if (text != null & text != string.Empty)
                {
                    if (text.Contains(','))
                    {
                        string[] logs = text.Split(',');
                        foreach (string s in logs)
                        {
                            foreach (logitems templist in validatelogitem)
                            {
                                if (templist.Fullresponse.Contains(s))
                                {
                                    string Remarks = s + " text is available in " + devicename+ " , "+log_type;
                                    //updating TempTestCaseActionTabTable Values
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + log_type + "', '"+Remarks+"','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                    return "Fail";
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (logitems templist in validatelogitem)
                        {
                            CultureInfo culture = CultureInfo.InvariantCulture;
                            if (culture.CompareInfo.IndexOf(templist.Fullresponse, text, CompareOptions.IgnoreCase) >= 0)
                            {
                                string Remarks = text + " text is available in " + devicename + " , " + log_type;
                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + log_type + "', '" + Remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                return "Fail";
                            }
                        }
                    }

                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + log_type + "', '" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    return "Pass";
                }
                else
                {
                    string Remarks = "No text entered in testcase";
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + log_type + "', '" + Remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    return "Fail";
                }
              
            }

            catch (Exception ex)
            {
                string Remarks = "Exception occurred";
                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + log_type + "', '" + Remarks + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", Testcasename, "@TAName", Testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                                     
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return "Fail";
            }
        }
        private static string NeatFileName(string fileName)
        {
            return System.IO.Path.GetInvalidFileNameChars().Aggregate(fileName, (current, c) => current.Replace(c.ToString(), string.Empty));
        }

        public Tuple<List<string>, string> Execute_Telnet_Verification(int tcid, int tabnumber, string testcasename, string actionname, string BMtype, string name,TreeViewExplorer PlanExecution,string TC_log_Pathtowrite,string reruncount,int exid,string Testsuitename,string TestPlanName, Int32 CaseExecutionUniqueID,string TabactionnameforReport,Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID,string BM_start_end, string BMdetail, Int32 TempPlanBackground_Pkey)
        {
            List<string> runstatus = new List<string>();
            string Background_Fail_remarks = string.Empty;
            try
            {
                string starttime = DateTime.Now.ToString();            
                string Verifytype = string.Empty;
                string Comparestring = string.Empty;
                string keywordCompareType = string.Empty;
                string Tlogfile = string.Empty;
                string returnfilename = string.Empty;
                string status = "Pass";
                string query = string.Empty;
                string ActionWithLoopValue = "Ssh/Telnet Verification : 1";
                string taFailedCommands = string.Empty;

                //if (BMtype == string.Empty)
                //testcasename = filtername(testcasename);
                //actionname = filtername(actionname);
                ////{
                //Tlogfile = testcasename + "_" + actionname + "_" + DateTime.Now.ToString("yyyy-dd-M--HH-mm-ss") + ".txt";
                //}
                if (!Directory.Exists(TC_log_Pathtowrite))
                {
                    Directory.CreateDirectory(TC_log_Pathtowrite);

                }

                List<string> verify_value = new List<string>();
                Int32[] TAID_array = TAID.ToArray();
                if (telnetresponses.Count != 0)
                {
                  
                    if (BMtype == string.Empty)
                    {
                        query = "select TelnetVerificationType,comparetext,keywordType from TelnetVerify where (tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')) ";
                    }
                    else if (BMtype == "BM")
                    {
                        query = "select VerifyType,Comparetext,keywordType from TelenetMonitor where (BMID=('" + tcid + "') ) ";
                    }

                    tble = QscDatabase.SendCommand_Toreceive(query);
                    read = tble.CreateDataReader();
                    while (read.Read())
                    {
                        Verifytype = read.GetString(0);
                        Comparestring = read.GetString(1).Trim();
                        if (read[2]!= System.DBNull.Value)
                            keywordCompareType = read.GetString(2);
                    }

                    if (Verifytype == "Store Current Result")
                    {
                        foreach (Tuple<string, string> s in telnetresponses)
                        {
                            //if (BMtype == string.Empty)
                            //{
                            returnfilename = NeatFileName(s.Item1);
                            write_logs(TC_log_Pathtowrite, returnfilename + "_" + Convert.ToString(DateTime.Now.Ticks) + ".txt", s.Item2, string.Empty);
                            //}

                        }

                        runstatus.Add("Pass");
                    }
                    else if (Verifytype == "Compare Values")
                    {
                        if (Comparestring != string.Empty)
                        {
                            List<string> devicelist = new List<string>();
                            List<string> devicecommandlist = new List<string>();
                            string[] splitchar = { "_" };

                            if (keywordCompareType == "Keyword exist")
                            {                            
                                foreach (Tuple<string, string> s in telnetresponses)
                                {
                                    if (s.Item2.Contains(Comparestring))
                                    {
                                        runstatus.Add("Pass");
                                    }
                                    else
                                    {
                                        runstatus.Add("Fail");                                       
                                        string[] splitarray = s.Item1.Split(splitchar, 2, StringSplitOptions.None);
                                        devicelist.Add(System.Web.HttpUtility.HtmlEncode(splitarray[0]));
                                        devicecommandlist.Add(System.Web.HttpUtility.HtmlEncode(splitarray[1]));                                                                     
                                    }                                 
                                    returnfilename = NeatFileName(s.Item1);
                                    write_logs(TC_log_Pathtowrite, returnfilename + "_" + Convert.ToString(DateTime.Now.Ticks) + ".txt", s.Item2, string.Empty);
                                }
                                if ((runstatus.Count > 0) && (!runstatus.Contains("Pass")))                                
                                    status = "Fail";

                                if (status == "Fail")
                                {
                                    taFailedCommands = System.Web.HttpUtility.HtmlEncode(Comparestring)+ " is not available in telnet response";
                                    for (int i = 0; i < devicelist.Count; i++)
                                    {
                                        taFailedCommands = taFailedCommands + "<br />" + devicelist[i] + "  -  " + devicecommandlist[i];
                                    }
                                    Background_Fail_remarks = taFailedCommands;
                                }
                            }
                            else if (keywordCompareType == "Keyword not exist" || keywordCompareType == string.Empty)
                            {                            
                                foreach (Tuple<string, string> s in telnetresponses)
                                {
                                    if (s.Item2.Contains(Comparestring))
                                    {
                                        runstatus.Add("Fail");
                                        status = "Fail";                                        
                                        string[] splitarray = s.Item1.Split(splitchar, 2, StringSplitOptions.None);
                                        devicelist.Add(System.Web.HttpUtility.HtmlEncode(splitarray[0]));
                                        devicecommandlist.Add(System.Web.HttpUtility.HtmlEncode(splitarray[1]));
                                    }
                                    else
                                    {
                                        runstatus.Add("Pass");
                                    }                                 
                                    returnfilename = NeatFileName(s.Item1);
                                    write_logs(TC_log_Pathtowrite, returnfilename + "_" + Convert.ToString(DateTime.Now.Ticks) + ".txt", s.Item2, string.Empty);                                   
                                }
                                if (status == "Fail")
                                {
                                    taFailedCommands = System.Web.HttpUtility.HtmlEncode(Comparestring) + " is available in telnet response";
                                    for (int i = 0; i < devicelist.Count; i++)
                                    {
                                        taFailedCommands = taFailedCommands + "<br />" + devicelist[i] + "  -  " + devicecommandlist[i];
                                    }
                                    Background_Fail_remarks = taFailedCommands;
                                }
                            }
                        }
                        else
                        {
                            foreach (Tuple<string, string> s in telnetresponses)
                            {
                                runstatus.Add("Pass");

                                //if (BMtype == string.Empty)
                                //{
                                returnfilename = NeatFileName(s.Item1);
                                write_logs(TC_log_Pathtowrite, returnfilename + "_" + Convert.ToString(DateTime.Now.Ticks) + ".txt", "Compare string is empty so treated as pass", string.Empty);
                            }
                        }
                    }
                    else if (Verifytype == "Continue Without Doing Anything")
                    {
                        runstatus.Add("Pass");
                    }
                }
                else
                {
                    write_logs(TC_log_Pathtowrite, "No_Response" + Convert.ToString(DateTime.Now.Ticks) + ".txt", "Telnet response not received from action", string.Empty);
                    //writeinfile("Telnet response not received from action", Tlogfile, testcasename);
                    runstatus.Add("Fail");
                    status = "Fail";
                    taFailedCommands = "Telnet response not received from action";
                    Background_Fail_remarks = taFailedCommands;
                }


              
                if (BM_start_end != string.Empty && BMdetail.ToUpper() == "TESTSUITE" && status != string.Empty)
                {

                    if (status == "Fail")
                    {
                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempPlanBackgroundTable values('" + TempPlanBackground_Pkey + "','" + exid + "','" + status + "','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + "Ssh/Telnet Verification" + "','Not Applicable','False',@Background_Fail_remarks,'" + PlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + string.Empty + "')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@Background_Fail_remarks", Background_Fail_remarks, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                    else
                    {
                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempPlanBackgroundTable values('" + TempPlanBackground_Pkey + "','" + exid + "','Pass','" + BM_start_end.ToUpper() + "',@TSName, @TPName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + "Ssh/Telnet Verification" + "','Not Applicable','True',@Background_Fail_remarks,'" + PlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','" + string.Empty +"')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@Background_Fail_remarks", Background_Fail_remarks, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }
                else 
                {
                    if (BM_start_end != string.Empty)
                        TabactionnameforReport = BM_start_end.ToUpper();
                    if (status == "Fail")
                    {
                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "', @taFailedCommands,'Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@TCName", testcasename, "@TAName", TabactionnameforReport, "@taFailedCommands", taFailedCommands, string.Empty, string.Empty);
                    }
                    else
                    {
                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@TCName", testcasename, "@TAName", TabactionnameforReport, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }

                //if (BM_start_end != string.Empty && BMdetail.ToUpper() == "TESTPLAN" && status != string.Empty)
                //{

                //    if (status == "Fail")
                //    {
                //        //updating TempTestCaseActionTabTable Values
                //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "Telnet_Verification" + "', '" + taFailedCommands + "','Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@TCName", testcasename, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                //    }
                //    else
                //    {
                //        //updating TempTestCaseActionTabTable Values
                //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + "Telnet_Verification" + "','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", TestPlanName, "@TCName", testcasename, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                //    }

                //}
                telnetresponses.Clear();

                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15017", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runstatus.Add("Fail");
                telnetresponses.Clear();
              
                return new Tuple<List<string>, string>(runstatus, Background_Fail_remarks);
            }
        }

        public Tuple<List<string>, string> Execute_Firmware_Action(int tcid, int tabnumber,TreeViewExplorer TestExecution, string testplanName,int exid,string testsuitename,string testcasename,string testactionname,string TSpath,string TPname_ID, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string logPath)
        {
            List<string> runStatus = new List<string>();
            string remarksForDevices = string.Empty;
            string status = "Pass";
            string starttime = DateTime.Now.ToString();
            try
            {
                string FirmwareActionType = string.Empty;
                string FirmwareLocation = string.Empty;
                string Firmwareupdatedate = string.Empty;
                string InstallationType = string.Empty;
                string FirmwareupdateTime = string.Empty;
                bool isTimeCal = false;

                Int32[] TAID_array = TAID.ToArray();
                string query = "select FirmwareActionType,FirmwareLocation,Firmwareupdatedate,InstallationType,FirmwareTime, MeasureFirmUpgradeTime from Firmwareaction where tcid=('" + tcid + "') and ActionID=('" + TAID_array[tabnumber] + "')";
                tble = QscDatabase.SendCommand_Toreceive(query);
                read = tble.CreateDataReader();
                while (read.Read())
                {
                    FirmwareActionType = read.GetString(0);
                    FirmwareLocation = read.GetString(1);
                    Firmwareupdatedate = read.GetString(2);

                    if(read[3]!=System.DBNull.Value)
                    {
                        InstallationType = read.GetString(3);
                    }

                    if (read[4] != System.DBNull.Value)
                    {
                        FirmwareupdateTime = read.GetString(4);
                    }

                    if (read[5] != System.DBNull.Value && read[5].ToString() != string.Empty)
                    {
                        isTimeCal = Convert.ToBoolean(read.GetString(5));
                    }
                }

                bool isDeployEnable = false;
                string deployCount = string.Empty;
                query = "select IsDeployEnable,DeployCount from Testplan where Testplanname = @TPName";
                System.Data.DataTable tble1 = QscDatabase.SelectDTWithParameter(query, "@TPName", testplanName);
                DataTableReader read1 = tble1.CreateDataReader();
                while (read1.Read())
                {
                    if (read1[0] != System.DBNull.Value)
                        isDeployEnable = Convert.ToBoolean(read1[0]);
                    if (read1[1] != System.DBNull.Value)
                        deployCount = read1[1].ToString();
                }
                
                if ((FirmwareLocation != string.Empty))
                {
                    FirmwareAction.testExecutionInstanceCreation(runnerWindowInstance);

                    if ((FirmwareActionType == "AutoUpdateSoftware") || (FirmwareActionType == "UpdateSoftwareAt"))
                    {                        
                        if (FirmwareActionType == "UpdateSoftwareAt")
                        {
                            string today = DateTime.Now.ToString("dd-MM-yyyy");
                            string time = DateTime.Now.ToString("HH:mm");

                            //today = today.Replace('-', '/');
                            DateTime todaydate = DateTime.ParseExact(today, "dd-MM-yyyy", null);
                            if(Firmwareupdatedate==string.Empty)
                            {
                                Firmwareupdatedate = DateTime.Today.ToString();
                            }
                            if (Firmwareupdatedate != string.Empty && FirmwareupdateTime!=string .Empty)
                            {
                                DateTime loadedDate = DateTime.Parse(Firmwareupdatedate);//, new CultureInfo("en-CA")
                                while(loadedDate > todaydate)
                                {
                                    today = DateTime.Now.ToString("dd-MM-yyyy");
                                    todaydate = DateTime.ParseExact(today, "dd-MM-yyyy", null);
                                    double daysUntilupdate = loadedDate.Subtract(todaydate).TotalDays;
                                    if(daysUntilupdate==1)
                                    {
                                        ExecutionLoopCount("(" + daysUntilupdate + ")Day remaining for new Designer version to update");

                                        //ExecutionMessage = ("(" + daysUntilupdate + ")Day remaining for new Designer version to update");
                                        //ExecutionLoopCount(ExecutionMessage);
                                    }
                                    else
                                    {
                                        ExecutionLoopCount("(" + daysUntilupdate + ")Days remaining for new Designer version to update");

                                        //ExecutionMessage = ("(" + daysUntilupdate + ")Days remaining for new Designer version to update");
                                        //ExecutionLoopCount(ExecutionMessage);
                                    }
                                }
                                if (todaydate > loadedDate)
                                {
                                    DeviceDiscovery.WriteToLogFile("Designer installation started for UpdateSoftwareAt ");

                                    ExecutionLoopCount("Firmware Installation Started...");

                                    //ExecutionMessage = ("Firmware Installation Started...");
                                    //ExecutionLoopCount(ExecutionMessage);
                                    var designerUpdateStatus = designerInstall(FirmwareLocation, InstallationType, selectedCoreIPAddress, TestExecution, isDeployEnable, deployCount, testplanName, TSpath, TPname_ID, isTimeCal, logPath);
                                    runStatus = designerUpdateStatus.Item1;
                                    remarksForDevices = designerUpdateStatus.Item2.Trim();
                                    if (!designerUpdateStatus.Item1.Contains("Fail"))
                                    {
                                        ExecutionLoopCount("Firmware Installation Completed Successfully.");
                                        //ExecutionMessage = ("Firmware Installation Completed Successfully.");
                                        //ExecutionLoopCount(ExecutionMessage);
                                    }
                                    else
                                    {
                                        status = "Fail";
                                        ExecutionLoopCount("Firmware Installation Failed.");
                                        //ExecutionMessage = ("Firmware Installation Failed.");
                                        //ExecutionLoopCount(ExecutionMessage);
                                    }
                                    DeviceDiscovery.WriteToLogFile("Designer installation ended for UpdateSoftwareAt ");
                                }
                                else if (todaydate == loadedDate)
                                {
                                    string[] timesplit = FirmwareupdateTime.Split(':');
                                    if(timesplit.Length==1)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Entered Time is Wrong:"+ FirmwareupdateTime + " ");
                                    }

                                    string updateHour = timesplit[0];
                                    string updatemin = timesplit[1].Substring(0, 2);
                                    if (FirmwareupdateTime.Contains("PM"))
                                    {
                                        int hour = Convert.ToInt16(updateHour);
                                        if (hour > 0 & hour < 12)
                                        {
                                            hour = hour + 12;
                                        }

                                        if(updatemin!="0")
                                            FirmwareupdateTime = Convert.ToString(hour) + ":" + updatemin;
                                        if (updatemin == "0")
                                            FirmwareupdateTime = Convert.ToString(hour) + ":" + updatemin;
                                    }

                                    if (FirmwareupdateTime.Contains("AM"))
                                    {
                                        int hour = Convert.ToInt16(updateHour);
                                        if (hour == 12)
                                        {
                                            hour = 0;
                                        }
                                        if (hour == 0)
                                            FirmwareupdateTime = "0" + Convert.ToString(hour) + ":" ;
                                        if (hour != 0)
                                            FirmwareupdateTime = Convert.ToString(hour) + ":";
                                        if (updatemin != "0")
                                            FirmwareupdateTime = FirmwareupdateTime + updatemin;
                                        if (updatemin == "0")
                                            FirmwareupdateTime = FirmwareupdateTime + updatemin ;
                                        
                                    }

                                    DateTime updateTime = DateTime.Parse(FirmwareupdateTime);
                                    while(updateTime> DateTime.Now)
                                    {
                                        double daysUntilupdate = updateTime.Subtract(DateTime.Now).TotalMinutes;
                                        if(daysUntilupdate<=1)
                                        {
                                            ExecutionLoopCount("New Designer version update will start in a minute...");

                                            //ExecutionMessage = ("New Designer version update will start in a minute...");
                                            //ExecutionLoopCount(ExecutionMessage);
                                        }
                                        else
                                        {
                                            ExecutionLoopCount("(" + Math.Round(daysUntilupdate, MidpointRounding.AwayFromZero) + ")minutes remaining for new Designer version to update");

                                            //ExecutionMessage = ("(" + Math.Round(daysUntilupdate, MidpointRounding.AwayFromZero) + ")minutes remaining for new Designer version to update");
                                            //ExecutionLoopCount(ExecutionMessage);
                                        }
                                    }

                                    if(DateTime.Now>= updateTime)
                                    {
                                        DeviceDiscovery.WriteToLogFile("Designer installation started for UpdateSoftwareAt ");
                                        ExecutionLoopCount("Firmware Installation Started...");
                                        //ExecutionMessage = ("Firmware Installation Started...");
                                        //ExecutionLoopCount(ExecutionMessage);
                                        var designerUpdateStatus = designerInstall(FirmwareLocation, InstallationType, selectedCoreIPAddress, TestExecution, isDeployEnable, deployCount, testplanName, TSpath, TPname_ID, isTimeCal, logPath);
                                        runStatus = designerUpdateStatus.Item1;
                                        remarksForDevices = designerUpdateStatus.Item2.Trim();
                                        if (!designerUpdateStatus.Item1.Contains("Fail"))
                                        {
                                            ExecutionLoopCount("Firmware Installation Completed Successfully.");

                                            //ExecutionMessage = ("Firmware Installation Completed Successfully.");
                                            //ExecutionLoopCount(ExecutionMessage);
                                        }
                                        else
                                        {
                                            status = "Fail";
                                            ExecutionLoopCount("Firmware Installation Failed.");
                                            //ExecutionMessage = ("Firmware Installation Failed.");
                                            //ExecutionLoopCount(ExecutionMessage);
                                        }

                                        DeviceDiscovery.WriteToLogFile("Designer installation ended for UpdateSoftwareAt ");
                                    }
                                    //else
                                    //{
                                    //    double daysUntilupdate = updateTime.Subtract(DateTime.Now).TotalMinutes;
                                    //    DeviceDiscovery.WriteToLogFile("(" + daysUntilupdate + ")minutes remaining for new Designer version to update");
                                    //    set_status.Add("Pass");
                                    //    get_status.Add("Pass");
                                    //    runStatus.Add("Pass");
                                    //}
                                    
                                }
                                //else if(todaydate>loadedDate)
                                //{
                                //    DeviceDiscovery.WriteToLogFile("Designer installation started for UpdateSoftwareAt ");
                                //    runStatus = designerInstall(FirmwareLocation, InstallationType, selectedCoreIPAddress);
                                //    DeviceDiscovery.WriteToLogFile("Designer installation ended for UpdateSoftwareAt ");
                                //}
                                //else
                                //{
                                //    double daysUntilupdate = loadedDate.Subtract(todaydate).TotalDays;
                                //    DeviceDiscovery.WriteToLogFile("(" + daysUntilupdate + ")Days remaining for new Designer version");
                                //    set_status.Add("Pass");
                                //    get_status.Add("Pass");
                                //    runStatus.Add("Pass");
                                //}
                            }
                            else
                            {
                                DeviceDiscovery.WriteToLogFile("Automatic Updation Date is not Available");
                                //set_status.Add("Fail");
                                //get_status.Add("Fail");
                               // TestExecution.ExecutionStatus = "Fail";
                                runStatus.Add("Fail");
                                status = "Fail";
                                remarksForDevices = "Automatic Updation Date is not Available";
                            }
                        }
                        else
                        {
                            DeviceDiscovery.WriteToLogFile("Designer installation started for AutoUpdateSoftware ");
                            var designerUpdateStatus = designerInstall(FirmwareLocation, InstallationType, selectedCoreIPAddress, TestExecution, isDeployEnable, deployCount, testplanName,TSpath, TPname_ID, isTimeCal, logPath);
                            runStatus = designerUpdateStatus.Item1;
                            remarksForDevices = designerUpdateStatus.Item2.Trim();
                            DeviceDiscovery.WriteToLogFile("Designer installation ended for AutoUpdateSoftware ");
                            if(designerUpdateStatus.Item1.Contains("Fail"))
                            {
                                status = "Fail";                             
                            }

                        }
                    }
                    else if ((FirmwareActionType == "FirmwareByInstall") || (FirmwareActionType == "FirmwareByLaunch"))
                    {
                        if (FirmwareActionType == "FirmwareByInstall")
                        {
                            
                            DeviceDiscovery.WriteToLogFile("Firmware upgradation/downgradation started for " + FirmwareActionType + " ");
                            var designerUpdateStatus = firmwareUpgradebyinstall(FirmwareLocation, selectedCoreIPAddress,string.Empty,string.Empty, TestExecution, selectedDutDeviceItemList, isDeployEnable, deployCount,string.Empty, testplanName,  TSpath,  TPname_ID, isTimeCal, logPath);
                            runStatus = designerUpdateStatus.Item1;
                            remarksForDevices = designerUpdateStatus.Item2.Trim();
                            DeviceDiscovery.WriteToLogFile("Firmware upgradation/downgradation ended for " + FirmwareActionType + " ");
                            if (designerUpdateStatus.Item1.Contains("Fail"))
                            {
                                status = "Fail";
                            }

                        }

                        if (FirmwareActionType == "FirmwareByLaunch")
                        {
                            DeviceDiscovery.WriteToLogFile("Firmware upgradation/downgradation started for " + FirmwareActionType + " ");
                            var designerUpdateStatus = firmwareUpgradebylaunch(FirmwareLocation, selectedCoreIPAddress, TestExecution,string.Empty, isDeployEnable, deployCount, testplanName,  TSpath,  TPname_ID, isTimeCal, logPath);
                            runStatus = designerUpdateStatus.Item1;
                            remarksForDevices = designerUpdateStatus.Item2.Trim();
                            DeviceDiscovery.WriteToLogFile("Firmware upgradation/downgradation ended for " + FirmwareActionType + " ");
                            if (designerUpdateStatus.Item1.Contains("Fail"))
                            {
                                status = "Fail";
                            }
                        }
                    }
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Server location is not available to get Newer Designer Version");
                   // set_status.Add("Fail");
                    //get_status.Add("Fail");
                   // TestExecution.ExecutionStatus = "Fail";
                    runStatus.Add("Fail");
                    status = "Fail";
                    remarksForDevices = "Server location is not available to get Newer Designer Version";
                }


                if (status == "Fail")
                {
                    //updating TempTestCaseActionTabTable Values
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Firmware Action : 1',@remarks,'Not Applicable','False','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanName, "@TCName", testcasename, "@TAName", testactionname, "@remarks", remarksForDevices, string.Empty, string.Empty);
                }
                else
                {
                    //updating TempTestCaseActionTabTable Values

                    if (isTimeCal)
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Firmware Action : 1',@remarks,'Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanName, "@TCName", testcasename, "@TAName", testactionname, "@remarks", remarksForDevices, string.Empty, string.Empty);
                    }
                    else
                    {
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','Firmware Action : 1','" + string.Empty + "','Not Applicable','True','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanName, "@TCName", testcasename, "@TAName", testactionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    }
                }

                return new Tuple<List<string>, string>(runStatus, remarksForDevices);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //   set_status.Add("Fail");
                //get_status.Add("Fail");
                //  TestExecution.ExecutionStatus = "Fail";
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                runStatus.Add("Fail");
                return new Tuple<List<string>, string>(runStatus, remarksForDevices);
            }
        }

        private Tuple<List<string>, string> designerInstall(string DesignerLocation,string InstallationType,string coreIP,TreeViewExplorer TestExecution, bool isDeployEnable, string deployCount,string testplanName, string TSpath, string TPname_ID, bool isTimeCal, string logPath)
        {
            List<string> runStatus = new List<string>();
            string applicationpath = string.Empty;
            string remarksForDevices = string.Empty;

            try
            {
                //bool isNewver = firmwareVersioncheck(coreIP);
                //string username = string.Empty;
                //if (isNewver)
                //    username = Properties.Settings.Default.DeviceUsername.ToString();
                //else
                //    username = "admin";

                var installStatus = FirmwareAction.designersoftwareInstall(DesignerLocation, InstallationType, coreIP, applicationPassword, selectedDutDeviceItemList,dupExecID);

                if (installStatus != null && installStatus.Item1 != string.Empty && installStatus.Item2 != string.Empty)
                {
                    applicationpath = installStatus.Item1.Trim();
                    string exeversion = installStatus.Item2.Trim();
                    var upgradeStatus = firmwareUpgradebyinstall(string.Empty, coreIP, applicationpath, exeversion, TestExecution, selectedDutDeviceItemList, isDeployEnable, deployCount, "designerinstall", testplanName, TSpath, TPname_ID, isTimeCal, logPath);
                    runStatus = upgradeStatus.Item1;
                    remarksForDevices = upgradeStatus.Item2.Trim();
                    //set_status.Add("Pass");
                    //get_status.Add("Pass");
                    //runStatus.Add("Pass");
                }
                else
                {
                    //  set_status.Add("Fail");
                    //get_status.Add("Fail");
                    //  TestExecution.ExecutionStatus = "Fail";
                    if (installStatus != null && installStatus.Item3 != null && installStatus.Item3 != string.Empty)
                    {
                        remarksForDevices = installStatus.Item3;
                    }
                    else
                    {
                        remarksForDevices = "Error occured during installation of Q-Sys Designer software";
                    }

                    runStatus.Add("Fail");
                }

                return new Tuple<List<string>, string>(runStatus, remarksForDevices);
            }
            catch (Exception ex)
            {

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15021", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                remarksForDevices = "Error occured during installation of Q-Sys Designer software";
                return new Tuple<List<string>, string>(runStatus, remarksForDevices);
            }
        }

        private Tuple<List<string>, string> firmwareUpgradebyinstall(string FirmwareLocation, string coreIP, string applicationpath, string exeversion, TreeViewExplorer TestExecution, List<DUT_DeviceItem> selectedDeviceItem, bool isDeployEnable, string deployCount, string fromDesigner, string testplanName, string TSpath, string TPname_ID, bool isTimeCal, string logpath)
        {
            List<string> runStatus = new List<string>();
            List<string> notUpdatedDevices = new List<string>();
            string backupCoreIP = string.Empty;
            //List<string> remarksForDevices = new List<string>();
            string remarksForDevices = string.Empty;
            string backupCoreName = string.Empty;

            try
            {
                int xmlResponseCount = 0;
                bool whilebreak = false;


                string username = string.Empty;
                if (core_New_FirmwareVersion.Item1)
                    username = Properties.Settings.Default.DeviceUsername.ToString();
                else
                    username = "admin";

                AllowLegacyInstall(core_New_FirmwareVersion.Item2, coreIP, CoreLogonToken);

                string coreName = XmlReadToGetDeviceName(coreIP);
                var upgradeStatus = FirmwareAction.firmwareUpgrade(FirmwareLocation, coreIP, applicationpath, exeversion, username, applicationPassword, selectedDeviceItem, fromDesigner, dupExecID, isTimeCal, logpath,CoreLogonToken);
                CoreLogonToken = FirmwareAction.coreLogonToken;

                core_New_FirmwareVersion = firmwareVersioncheck(coreIP);
                string primaryUploadTime = string.Empty;
                string backupUploadTime = string.Empty;
                string loadLaunchRemarks = string.Empty;

                if (upgradeStatus.Item1 && isTimeCal)
                    primaryUploadTime = upgradeStatus.Item3;

                if (upgradeStatus.Item3 == string.Empty || upgradeStatus.Item3 == null || (upgradeStatus.Item1 && isTimeCal))
                {
                    if (upgradeStatus.Item2.Trim() != string.Empty)
                    {
                        if (upgradeStatus.Item1)
                        {
                            var backUpCoreDetails = getBackupCoreIP();
                            if (backUpCoreDetails != null)
                            {
                                if (backUpCoreDetails.Item1)
                                {
                                    if (backUpCoreDetails.Item2.Trim() != string.Empty && backUpCoreDetails.Item2.Trim() != "Not Applicable")
                                    {
                                        if (applicationpath == string.Empty && exeversion == string.Empty && upgradeStatus.Item4 != string.Empty && upgradeStatus.Item5 != string.Empty)
                                        {
                                            applicationpath = upgradeStatus.Item4;
                                            exeversion = upgradeStatus.Item5;
                                            FirmwareLocation = string.Empty;
                                        }

                                        string usernameBackup = string.Empty;
                                        if (Backup_core_New_FirmwareVersion.Item1)
                                            usernameBackup = Properties.Settings.Default.DeviceUsername.ToString();
                                        else
                                            usernameBackup = "admin";

                                        backupCoreIP = backUpCoreDetails.Item2.Trim();
                                        AllowLegacyInstall(Backup_core_New_FirmwareVersion.Item2, backupCoreIP, CoreLogonToken_Backup);

                                        var backUPCoreUpgradeStatus = FirmwareAction.firmwareUpgrade(FirmwareLocation, backupCoreIP, applicationpath, exeversion, usernameBackup, applicationPassword, selectedDeviceItem, fromDesigner, dupExecID, isTimeCal, logpath,CoreLogonToken_Backup);
                                        CoreLogonToken_Backup = FirmwareAction.coreLogonToken;
                                        Backup_core_New_FirmwareVersion = firmwareVersioncheck(backupCoreIP);
                                        backupCoreName = XmlReadToGetDeviceName(backupCoreIP);

                                        if (backUPCoreUpgradeStatus.Item1 && isTimeCal)
                                            backupUploadTime = backUPCoreUpgradeStatus.Item3;

                                        if (backUPCoreUpgradeStatus.Item1)
                                        {
                                            DeviceDiscovery.WriteToLogFile("Backup Core is updated successfully.... ");
                                            string primaryCoreVersion = XmlReadToGetDesignversion(coreIP);
                                            string backUpCoreVersion = XmlReadToGetDesignversion(backupCoreIP);
                                            if (primaryCoreVersion.Trim() == backUpCoreVersion.Trim())
                                            {
                                                runStatus.Add("Pass");
                                            }
                                            else
                                            {
                                                remarksForDevices = "Primary core and backup core version mismatched";
                                                runStatus.Add("Fail");
                                            }
                                        }
                                        else
                                        {
                                            if (backUPCoreUpgradeStatus.Item3 != string.Empty)
                                                remarksForDevices = backUPCoreUpgradeStatus.Item3;

                                            if (!notUpdatedDevices.Contains(backupCoreName))
                                                notUpdatedDevices.Add(backupCoreName);
                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else if (backUpCoreDetails.Item2.Trim() == string.Empty)
                                    {
                                        remarksForDevices = "Backup core IP not retrieved";
                                        runStatus.Add("Fail");
                                    }
                                    else if (backUpCoreDetails.Item2.Trim() == "Not Applicable")
                                    {
                                        remarksForDevices = "Not Applicable is selected in DUT Configuration for Backup Core";
                                        //runStatus.Add("Fail");
                                    }
                                }
                                else
                                {
                                    remarksForDevices = backUpCoreDetails.Item3.Trim();
                                }
                            }

                            string designPath = localdirectorypath + "/" + desgnname;
                            DeviceDiscovery.WriteToLogFile("Design load & launch started.... ");
                            preferenceQSDInstalledpath = upgradeStatus.Item2.Trim();
                            //DUTConfiguration(testplanName);
                            var loadSuccess = Load_and_Launch_ToExecute(designPath, "Firmware", preferenceQSDInstalledpath, desgnname, isDeployEnable, deployCount, TSpath, TPname_ID, string.Empty, false);
                            Thread.Sleep(30000);
                            DeviceDiscovery.WriteToLogFile("Design load & launch Completed.... ");

                            if (loadSuccess.Item1)
                            {
                                DUTConfiguration(testplanName);
                                List<string> devicesip = GetAllIpForFirmwareVerification(Original_desgnname);
                                List<string> devicesversion = new List<string>();
                                string coreVersion = XmlReadToGetDesignversion(coreIP);
                                List<string> devicesstatus = new List<string>();

                                string firmwareversion = string.Empty;

                                if (devicesip.Count > 0)
                                {
                                    foreach (string strIP in devicesip)
                                    {
                                        string firmwarestatus = string.Empty;
                                        whilebreak = false;
                                        while ((firmwarestatus != "idle") && (!whilebreak))
                                        {
                                            firmwarestatus = get_FirmwareLoadState(strIP);
                                            if (firmwarestatus == "idle")
                                            {
                                                firmwareversion = XmlReadToGetDesignversion(strIP);
                                                if (firmwareversion != coreVersion)
                                                {
                                                    xmlResponseCount++;
                                                    if (xmlResponseCount > 50)
                                                    {

                                                        DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                                        string devName = XmlReadToGetDeviceName(strIP);
                                                        if (devName != string.Empty)
                                                        {
                                                            if (!notUpdatedDevices.Contains(devName))
                                                                notUpdatedDevices.Add(devName);
                                                        }
                                                        else
                                                        {
                                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                                notUpdatedDevices.Add("not applicable");
                                                        }

                                                        xmlResponseCount = 0;
                                                        whilebreak = true;
                                                        break;
                                                    }
                                                    //DeviceDiscovery.WriteToLogFile("No response received for an IP:" + strIP + " ");
                                                    firmwarestatus = string.Empty;
                                                }
                                                else if (firmwareversion == coreVersion)
                                                {
                                                    DeviceDiscovery.WriteToLogFile("Firmware Upgradation completed for IP:" + strIP + " with firmware version:" + firmwareversion + "");
                                                    devicesversion.Add(firmwareversion);
                                                }
                                                else if (firmwareversion == string.Empty)
                                                {
                                                    xmlResponseCount++;
                                                    if (xmlResponseCount > 50)
                                                    {
                                                        DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                                        string devName = XmlReadToGetDeviceName(strIP);

                                                        if (devName != string.Empty)
                                                        {
                                                            if (!notUpdatedDevices.Contains(devName))
                                                                notUpdatedDevices.Add(devName);
                                                        }
                                                        else
                                                        {
                                                            if (!notUpdatedDevices.Contains("not applicable"))
                                                                notUpdatedDevices.Add("not applicable");
                                                        }

                                                        xmlResponseCount = 0;
                                                        whilebreak = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            else if ((firmwarestatus == string.Empty) || (firmwarestatus == "complete"))
                                            {
                                                xmlResponseCount++;
                                                if (xmlResponseCount > 50)
                                                {
                                                    DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                                    string devName = XmlReadToGetDeviceName(strIP);

                                                    if (devName != string.Empty)
                                                    {
                                                        if (!notUpdatedDevices.Contains(devName))
                                                            notUpdatedDevices.Add(devName);
                                                    }
                                                    else
                                                    {
                                                        if (!notUpdatedDevices.Contains("not applicable"))
                                                            notUpdatedDevices.Add("not applicable");
                                                    }

                                                    xmlResponseCount = 0;
                                                    whilebreak = true;
                                                    break;
                                                }
                                            }


                                        }
                                    }

                                    foreach (string strver in devicesversion)
                                    {
                                        if (strver == coreVersion)
                                        {
                                            devicesstatus.Add("Pass");
                                        }
                                        else
                                        {
                                            devicesstatus.Add("Fail");
                                        }
                                    }

                                    if (devicesstatus.Count > 0 && !devicesstatus.Contains("Fail"))
                                    {
                                        //set_status.Add("Pass");
                                        //get_status.Add("Pass");
                                        //TestExecution.ExecutionStatus = "Pass";
                                        runStatus.Add("Pass");
                                    }
                                    else
                                    {
                                        // set_status.Add("Fail");
                                        //get_status.Add("Fail");
                                        //   TestExecution.ExecutionStatus = "Fail";
                                        //if(notUpdatedDevices.Count == 0)
                                        //    loadLaunchRemarks = "Peripherals firmware upgradation failed";

                                        runStatus.Add("Fail");
                                    }
                                }
                                else
                                {
                                    // set_status.Add("Pass");
                                    //get_status.Add("Pass");
                                    //TestExecution.ExecutionStatus = "Pass";
                                    runStatus.Add("Pass");
                                }
                            }
                            else
                            {
                                loadLaunchRemarks = "Design load & launch failed";
                                runStatus.Add("Fail");
                            }
                        }
                        else
                        {
                            //  set_status.Add("Fail");
                            //get_status.Add("Fail");
                            // TestExecution.ExecutionStatus = "Fail";                            
                            runStatus.Add("Fail");
                        }
                    }
                    else
                    {
                        DeviceDiscovery.WriteToLogFile("Q-sys designer installed path not found");
                        // set_status.Add("Fail");
                        //get_status.Add("Fail");
                        //   TestExecution.ExecutionStatus = "Fail";
                        runStatus.Add("Fail");
                    }
                }

                string remarks = string.Empty;

                if (upgradeStatus.Item3 != string.Empty && upgradeStatus.Item3 != null && !(upgradeStatus.Item1 && isTimeCal))
                {
                    DeviceDiscovery.WriteToLogFile(upgradeStatus.Item3);
                    runStatus.Add("Fail");
                    remarks = coreName + ":<br/>" + upgradeStatus.Item3;
                }
                else
                {
                    if (!string.IsNullOrEmpty(primaryUploadTime))
                        remarks = coreName + ":<br/>" + primaryUploadTime;

                    if (!string.IsNullOrEmpty(backupUploadTime))
                    {
                        remarks += "<br/>" + backupCoreName + ":<br/>" + backupUploadTime;

                        if (!string.IsNullOrEmpty(remarksForDevices))
                            remarks += "<br/>" + remarksForDevices;
                    }
                    else if (!string.IsNullOrEmpty(remarksForDevices))
                    {
                        remarks += "<br/>" + backupCoreName + ":<br/>" + remarksForDevices;
                    }

                    if (notUpdatedDevices.Count > 0 && (!string.IsNullOrEmpty(primaryUploadTime) || !string.IsNullOrEmpty(backupUploadTime) || !string.IsNullOrEmpty(remarksForDevices)))
                        remarks += "<br/>Firmware is not upgrade/downgrade to following devices:" + string.Join(",", notUpdatedDevices);
                    else if (notUpdatedDevices.Count > 0)
                        remarks += "Firmware is not upgrade/downgrade to following devices:" + string.Join(",", notUpdatedDevices);
                }

                if (!string.IsNullOrEmpty(loadLaunchRemarks))
                {
                    if (remarks == null || remarks == string.Empty)
                        remarks = loadLaunchRemarks;
                    else
                        remarks += "<br/>" + loadLaunchRemarks;
                }

                return new Tuple<List<string>, string>(runStatus, remarks);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15021", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<List<string>, string>(runStatus, "Error occured during the upgradation/downgradation of Firmware");
            }
        }

        public Tuple<bool, string> firmwareVersioncheck(string ipaddress)
        {
            bool isnewversion = true;
            string getFirmwareVersion = string.Empty;
            Version firmwarever = null;

            try
            {
                getFirmwareVersion = XmlReadToGetDesignversion(ipaddress);
                string regex = Regex.Match(getFirmwareVersion, @"\d.*").Value;
                firmwarever = new Version(regex);
                if (firmwarever < new Version(Properties.Settings.Default.CompareFirmwareVersion))
                    isnewversion = false;

            }
            catch (Exception ex)
            {
                isnewversion = true;
            }

            return new Tuple<bool, string>(isnewversion, getFirmwareVersion);
        }

        public bool AllowLegacyInstall(string currentFirmwareIncore, string ipaddress, string token)
        {
            bool success = false;
            try
            {
                bool versnew = firmwareVersioncheckGeneral(currentFirmwareIncore, "fromAllowLegacyFirmware");
                if (versnew)
                {
                    string response = string.Empty;
                    string newToken = string.Empty;
                    string strInput = "{\"allowLegacyInstall\": true}";

                   var value = HttpPut_json("http://" + ipaddress + "/api/v0/cores/self/firmware/install_legacy", strInput, token, ipaddress, applicationPassword, out response, out newToken);                   
                                     
                    if ((value.Item1) && (response != string.Empty))
                    {
                        var obj = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<dynamic>(response);
                        if (obj.Count > 0)
                        {
                            foreach (var res in obj)
                            {
                                if ((res.Key == "allowLegacyInstall") && (res.Value == true))
                                {
                                    success = true;
                                }

                            }
                        }
                    }

                }
                else
                    success = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
            return success;
        }



        private Tuple<List<string>, string> firmwareUpgradebylaunch(string FirmwareLocation, string coreIP, TreeViewExplorer TestExecution, string comparestring, bool isDeployEnable, string deployCount, string testplanName, string TSpath, string TPname_ID, bool isTimeCal, string logPath)
        {
            List<string> runStatus = new List<string>();
            List<string> designermatchStatus = new List<string>();
            List<string> notUpdatedDevices = new List<string>();
            //List<string> remarksForDevices = new List<string>();
            string remarksForDevices = string.Empty;
            string backupCoreName = string.Empty;

            try
            {
                int xmlResponseCount = 0;
                bool whilebreak = false;

                string username = string.Empty;
                if (core_New_FirmwareVersion.Item1)
                    username = Properties.Settings.Default.DeviceUsername.ToString();
                else
                    username = "admin";

                AllowLegacyInstall(core_New_FirmwareVersion.Item2, coreIP, CoreLogonToken);

                string coreName = XmlReadToGetDeviceName(coreIP);
                var upgradeStatus = FirmwareAction.firmwareUpgradebylaunch(FirmwareLocation, coreIP, username, applicationPassword, selectedDutDeviceItemList, dupExecID, isTimeCal, logPath, CoreLogonToken);
                CoreLogonToken = FirmwareAction.coreLogonToken;
                core_New_FirmwareVersion = firmwareVersioncheck(coreIP);

                string primaryUploadTime = string.Empty;
                string backupUploadTime = string.Empty;
                string loadLaunchRemarks = string.Empty;

                if (upgradeStatus.Item1 && isTimeCal)
                    primaryUploadTime = upgradeStatus.Item3;

                if (upgradeStatus.Item1)
                {
                    var backUpCoreDetails = getBackupCoreIP();
                    if (backUpCoreDetails != null)
                    {
                        if (backUpCoreDetails.Item1)
                        {
                            if (backUpCoreDetails.Item2.Trim() != string.Empty && backUpCoreDetails.Item2.Trim() != "Not Applicable")
                            {
                                string backupCoreIP = backUpCoreDetails.Item2.Trim();

                                string usernameBackup = string.Empty;
                                if (Backup_core_New_FirmwareVersion.Item1)
                                    usernameBackup = Properties.Settings.Default.DeviceUsername.ToString();
                                else
                                    usernameBackup = "admin";

                                AllowLegacyInstall(Backup_core_New_FirmwareVersion.Item2, backupCoreIP, CoreLogonToken_Backup);

                                var backUPCoreUpgradeStatus = FirmwareAction.firmwareUpgradebylaunch(FirmwareLocation, backupCoreIP, usernameBackup, applicationPassword, selectedDutDeviceItemList, dupExecID, isTimeCal, logPath,CoreLogonToken_Backup);
								CoreLogonToken_Backup =FirmwareAction.coreLogonToken;
                                Backup_core_New_FirmwareVersion = firmwareVersioncheck(coreIP);
                                backupCoreName = XmlReadToGetDeviceName(backupCoreIP);

                                if (backUPCoreUpgradeStatus.Item1 && isTimeCal)
                                    backupUploadTime = backUPCoreUpgradeStatus.Item3;

                                if (backUPCoreUpgradeStatus.Item1)
                                {
                                    DeviceDiscovery.WriteToLogFile("Backup Core is updated successfully.... ");
                                    if (comparestring != "designermatch")
                                    {
                                        string primaryCoreVersion = XmlReadToGetDesignversion(coreIP);
                                        string backUpCoreVersion = XmlReadToGetDesignversion(backupCoreIP);
                                        if (primaryCoreVersion.Trim() == backUpCoreVersion.Trim())
                                        {
                                            runStatus.Add("Pass");
                                        }
                                        else
                                        {
                                            remarksForDevices = "Primary core and backup core version mismatched";
                                            runStatus.Add("Fail");
                                        }
                                    }
                                    else if (comparestring == "designermatch")
                                    {
                                        string primaryCoreVersion = XmlReadToGetDesignversion(coreIP);
                                        string backUpCoreVersion = XmlReadToGetDesignversion(backupCoreIP);
                                        if (primaryCoreVersion.Trim() == backUpCoreVersion.Trim())
                                            designermatchStatus.Add("Pass");
                                        else
                                            designermatchStatus.Add("Fail");
                                    }
                                }
                                else
                                {
                                    if (backUPCoreUpgradeStatus.Item3 != string.Empty)
                                        remarksForDevices = backUPCoreUpgradeStatus.Item3;

                                    string devName = XmlReadToGetDeviceName(backupCoreIP);
                                    if (!notUpdatedDevices.Contains(devName))
                                        notUpdatedDevices.Add(devName);

                                    if (comparestring != "designermatch")
                                    {
                                        runStatus.Add("Fail");
                                    }
                                    else if (comparestring == "designermatch")
                                    {
                                        designermatchStatus.Add("Fail");
                                    }
                                }
                            }
                            else if (backUpCoreDetails.Item2.Trim() == string.Empty)
                            {
                                remarksForDevices = "Backup core IP not retrieved";

                                if (comparestring != "designermatch")
                                {
                                    runStatus.Add("Fail");
                                }
                                else if (comparestring == "designermatch")
                                {
                                    designermatchStatus.Add("Fail");
                                }
                            }
                            else if (backUpCoreDetails.Item2.Trim() == "Not Applicable")
                            {
                                remarksForDevices = "Not Applicable is selected in DUT Configuration for Backup Core";
                                //if (comparestring != "designermatch")
                                //{
                                //    runStatus.Add("Fail");
                                //}
                                //else if (comparestring == "designermatch")
                                //{
                                //    designermatchStatus.Add("Fail");
                                //}
                            }
                        }
                        else
                        {
                            remarksForDevices = backUpCoreDetails.Item3.Trim();
                        }
                    }


                    string designPath = localdirectorypath + "/" + desgnname;
                    DeviceDiscovery.WriteToLogFile("Design load & launch started.... ");
                    preferenceQSDInstalledpath = upgradeStatus.Item2.Trim();
                    //DUTConfiguration(testplanName);
                    var loadSucces = Load_and_Launch_ToExecute(designPath, "Firmware", preferenceQSDInstalledpath, desgnname, isDeployEnable, deployCount, TSpath, TPname_ID, string.Empty, false);
                    Thread.Sleep(30000);
                    DeviceDiscovery.WriteToLogFile("Design load & launch Completed.... ");
                    if (loadSucces.Item1)
                    {
                        DUTConfiguration(testplanName);
                        List<string> devicesip = GetAllIpForFirmwareVerification(Original_desgnname);
                        List<string> devicesversion = new List<string>();
                        string coreVersion = XmlReadToGetDesignversion(coreIP);
                        List<string> devicesstatus = new List<string>();

                        string firmwareversion = string.Empty;
                        if (devicesip.Count > 0)
                        {
                            foreach (string strIP in devicesip)
                            {
                                string firmwarestatus = string.Empty;
                                whilebreak = false;
                                while ((firmwarestatus != "idle") && (!whilebreak))
                                {
                                    firmwarestatus = get_FirmwareLoadState(strIP);
                                    if (firmwarestatus == "idle")
                                    {
                                        firmwareversion = XmlReadToGetDesignversion(strIP);
                                        if (firmwareversion != coreVersion)
                                        {
                                            xmlResponseCount++;
                                            if (xmlResponseCount > 50)
                                            {
                                                DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                                string devName = XmlReadToGetDeviceName(strIP);

                                                if (devName != string.Empty)
                                                {
                                                    if (!notUpdatedDevices.Contains(devName))
                                                        notUpdatedDevices.Add(devName);
                                                }
                                                else
                                                {
                                                    if (!notUpdatedDevices.Contains("not applicable"))
                                                        notUpdatedDevices.Add("not applicable");
                                                }

                                                xmlResponseCount = 0;
                                                whilebreak = true;
                                                break;
                                            }
                                            //DeviceDiscovery.WriteToLogFile("No response received for an IP:" + strIP + " ");
                                            firmwarestatus = string.Empty;
                                        }
                                        else if (firmwareversion == coreVersion)
                                        {
                                            DeviceDiscovery.WriteToLogFile("Firmware Upgradation completed for IP:" + strIP + " with firmware version:" + firmwareversion + "");
                                            devicesversion.Add(firmwareversion);
                                        }
                                        else if (firmwareversion == string.Empty)
                                        {
                                            xmlResponseCount++;
                                            if (xmlResponseCount > 50)
                                            {
                                                DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                                string devName = XmlReadToGetDeviceName(strIP);

                                                if (devName != string.Empty)
                                                {
                                                    if (!notUpdatedDevices.Contains(devName))
                                                        notUpdatedDevices.Add(devName);
                                                }
                                                else
                                                {
                                                    if (!notUpdatedDevices.Contains("not applicable"))
                                                        notUpdatedDevices.Add("not applicable");
                                                }

                                                xmlResponseCount = 0;
                                                whilebreak = true;
                                                break;
                                            }
                                        }
                                    }
                                    else if ((firmwarestatus == string.Empty) || (firmwarestatus == "complete"))
                                    {
                                        xmlResponseCount++;
                                        if (xmlResponseCount > 50)
                                        {
                                            DeviceDiscovery.WriteToLogFile("Firmware Upgradation status not responding from IP:" + strIP);

                                            string devName = XmlReadToGetDeviceName(strIP);

                                            if (devName != string.Empty)
                                            {
                                                if (!notUpdatedDevices.Contains(devName))
                                                    notUpdatedDevices.Add(devName);
                                            }
                                            else
                                            {
                                                if (!notUpdatedDevices.Contains("not applicable"))
                                                    notUpdatedDevices.Add(strIP + "not applicable");
                                            }

                                            xmlResponseCount = 0;
                                            whilebreak = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            foreach (string strver in devicesversion)
                            {
                                if (strver == coreVersion)
                                {
                                    devicesstatus.Add("Pass");
                                }
                                else
                                {
                                    devicesstatus.Add("Fail");
                                }
                            }

                            if (devicesstatus.Count > 0 && !devicesstatus.Contains("Fail"))
                            {
                                if (comparestring != "designermatch")
                                {
                                    // set_status.Add("Pass");
                                    runStatus.Add("Pass");
                                }
                                else if (comparestring == "designermatch")
                                {
                                    designermatchStatus.Add("Pass");
                                }

                            }
                            else
                            {
                                if (TestExecution != null)
                                    runStatus.Add("Fail");
                                if (comparestring != "designermatch")
                                {
                                    // set_status.Add("Fail");
                                    runStatus.Add("Fail");
                                }
                                else if (comparestring == "designermatch")
                                {
                                    designermatchStatus.Add("Fail");
                                }

                                //if (notUpdatedDevices.Count == 0)
                                //    loadLaunchRemarks = "Peripherals firmware upgradation failed";
                            }
                        }
                        else
                        {
                            if (comparestring != "designermatch")
                            {
                                //set_status.Add("Pass");
                                runStatus.Add("Pass");
                            }
                            else if (comparestring == "designermatch")
                            {
                                designermatchStatus.Add("Pass");
                            }
                        }
                    }
                    else
                    {
                        if (comparestring != "designermatch")
                        {
                            // set_status.Add("Fail");
                            runStatus.Add("Fail");
                        }
                        else if (comparestring == "designermatch")
                        {
                            designermatchStatus.Add("Fail");
                        }

                        loadLaunchRemarks = "Design load & launch failed";
                    }
                }
                else
                {
                    if (TestExecution != null)
                        runStatus.Add("Fail");
                    if (comparestring != "designermatch")
                    {
                        //set_status.Add("Fail");
                        runStatus.Add("Fail");
                    }
                    else if (comparestring == "designermatch")
                    {
                        designermatchStatus.Add("Fail");
                    }
                }

                string remarks = string.Empty;

                if (upgradeStatus.Item3 != string.Empty && upgradeStatus.Item3 != null && !(upgradeStatus.Item1 && isTimeCal))
                {
                    DeviceDiscovery.WriteToLogFile(upgradeStatus.Item3);
                    runStatus.Add("Fail");
                    remarks = coreName + ":<br/>" + upgradeStatus.Item3;
                }
                else
                {
                    if (!string.IsNullOrEmpty(primaryUploadTime))
                        remarks = coreName + ":<br/>" + primaryUploadTime;

                    if (!string.IsNullOrEmpty(backupUploadTime))
                    {
                        remarks += "<br/>" + backupCoreName + ":<br/>" + backupUploadTime;

                        if (!string.IsNullOrEmpty(remarksForDevices))
                            remarks += "<br/>" + remarksForDevices;
                    }
                    else if (!string.IsNullOrEmpty(remarksForDevices))
                    {
                        remarks += "<br/>" + backupCoreName + ":<br/>" + remarksForDevices;
                    }

                    if (notUpdatedDevices.Count > 0 && (!string.IsNullOrEmpty(primaryUploadTime) || !string.IsNullOrEmpty(backupUploadTime) || !string.IsNullOrEmpty(remarksForDevices)))
                        remarks += "<br/>Firmware is not upgrade/downgrade to following devices:" + string.Join(",", notUpdatedDevices);
                    else if (notUpdatedDevices.Count > 0)
                        remarks += "Firmware is not upgrade/downgrade to following devices:" + string.Join(",", notUpdatedDevices);
                }

                if (!string.IsNullOrEmpty(loadLaunchRemarks))
                {
                    if (remarks == null || remarks == string.Empty)
                        remarks = loadLaunchRemarks;
                    else
                        remarks += "<br/>" + loadLaunchRemarks;
                }

                if (comparestring == "designermatch")
                {
                    return new Tuple<List<string>, string>(designermatchStatus, string.Join("<br/>", remarks));
                }
                else
                {
                    return new Tuple<List<string>, string>(runStatus, string.Join("<br/>", remarks));
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15021", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (comparestring == "designermatch")
                    return new Tuple<List<string>, string>(designermatchStatus, "Error occured during upgradation/downgradation of Firmware");
                else
                    return new Tuple<List<string>, string>(runStatus, "Error occured during upgradation/downgradation of Firmware");
            }
        }

        private Tuple<bool,string,string> getBackupCoreIP()
        {
            string backUpCoreIP = string.Empty;
            string remarksForBackUpCore = string.Empty;
            bool backUpCorePresent = false;
            try
            {                
                if(isBackupCoreAvailable)
                {
                    backUpCorePresent = true;
                    if ((backup_selectedCoreIPAddress != string.Empty) && (backup_selectedCoreIPAddress != null) && (backup_selectedCoreIPAddress != "Not Applicable"))
                    {
                        backUpCoreIP = backup_selectedCoreIPAddress;
                        DeviceDiscovery.WriteToLogFile("BackUpCore IP retrieved successfully .... ");
                    }
                    else
                    {
                        remarksForBackUpCore = "Backup Core IP Not Available";
                    }
                }
                
                return new Tuple< bool,string,string>(backUpCorePresent, backUpCoreIP, remarksForBackUpCore);
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                DeviceDiscovery.WriteToLogFile("BackUpCore IP not retrieved successfully .... ");
                remarksForBackUpCore = "Error occured while retrieving Backup CoreIP";
                return new Tuple<bool, string, string>(backUpCorePresent, backUpCoreIP, remarksForBackUpCore);
            }
        }

        public List<string> RunSet(string[] args, string tc, int exid, string Testsuitename, string Testplanname, string Testactionname,int LoopValue,int ActionvalueCount, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string controlName, string componentName)
        {
            List<string> set_status = new List<string>();
            string starttime = DateTime.Now.ToString();
            string query = string.Empty;
            string ActionWithLoopValue = string.Empty;
            string actualvalue = string.Empty;
            string expectedvalue = string.Empty;
            string joinstring;
            string settingtype = string.Empty;
            string datatype = string.Empty;
            try
            {
                getoup = string.Empty; getouptype = string.Empty; getoupvalue = string.Empty; getoupposition = string.Empty;
                joinstring = "Testcase Name:" + tc + "Value to set-->" + "Control Name:" + args[0] + "," + "Controlvalue:" + args[1];
                object arg = null;
                //object[] triggerArray = null;
                if (args.Length == 5)
                {
                    settingtype = args[3];
                    datatype = args[4];
                }
                else if (args.Length == 4)
                {
                    settingtype = args[2];
                    datatype = args[3];
                }
                //if ((datatype == string.Empty) || (!String.Equals("Trigger", datatype, StringComparison.CurrentCulture)))
                //{

                if (args[1].Trim() != string.Empty)
                {
                    if (String.Equals("Set by value", settingtype, StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (args.Length == 5)
                        {

                            arg = new
                            {
                                Name = args[0],
                                Value = double.Parse(args[1]),
                                Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                            };
                        }
                        else if (args.Length == 4)
                        {

                            arg = new
                            {
                                Name = args[0],
                                Value = double.Parse(args[1]),
                                Ramp = 0.0
                            };
                        }

                    }
                    else if (String.Equals("Set by string", settingtype, StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (args.Length == 5)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = (args[1]),
                                Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                            };
                        }
                        else if (args.Length == 4)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = (args[1]),
                                Ramp = 0.0
                            };
                        }
                    }
                    else if (String.Equals("Set by position", settingtype, StringComparison.CurrentCultureIgnoreCase))
                    {
                        if (args.Length == 5)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = double.Parse(args[1]),
                                Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                            };
                        }
                        else if (args.Length == 4)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = double.Parse(args[1]),
                                Ramp = 0.0
                            };
                        }
                    }
                }
                else 
                {
                    
                        if (args.Length == 5)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = (args[1]),
                                Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                            };
                        }
                        else if (args.Length == 4)
                        {
                            arg = new
                            {
                                Name = args[0],
                                Value = (args[1]),
                                Ramp = 0.0
                            };
                        }
                    

                }
                //}
                //else if(String.Equals("Trigger",datatype,StringComparison.CurrentCulture))
                //{
                //     triggerArray = triggerDatatypeValues(args, datatype, args.Length, settingtype);
                //}
                Thread.Sleep(2000);
                if (arg != null)//|| triggerArray!=null
                {
                    //if(!String.Equals("Trigger",datatype,StringComparison.CurrentCulture))
                    bool returnRPC = false;
                    if(checkBackUpCoreavailability(backup_selectedCoreIPAddress))
                    {
                        Thread.Sleep(5000);
                    }                  
                    Tuple<bool, string> responseFromRPC = new Tuple<bool, string>(false,string.Empty);

                    if (current_CoreBackup == null || current_CoreBackup == false)
                    {
                        responseFromRPC = rpc.Send(selectedCoreIPAddress, "Control.Set", arg, false, string.Empty);
                        returnRPC = responseFromRPC.Item1;
                    }
                    //else if(String.Equals("Trigger", datatype, StringComparison.CurrentCulture))
                    //{
                    //    for(int trigger=0;trigger<triggerArray.Length;trigger++)
                    //    {
                    //        rpc.Send(selectedCoreIPAddress, "Control.Set", triggerArray[trigger]);
                    //        Thread.Sleep(1000);
                    //    }
                    //}
                    if(!returnRPC)
                    {
                        bool backupRPCResponse = false;

                        backupRPCResponse = checkBackUpCoreavailability(backup_selectedCoreIPAddress);
                            if (backupRPCResponse)
                        {
                            returnRPC = backupRPCResponse;
                            //Thread.Sleep(6000);
                        }
                    }
                    if (returnRPC)
                    {
                        string rte = responseFromRPC.Item2.Trim();
                        if (rte != null)
                        {                           
                            Tuple<bool, string> backupCoreResponse = new Tuple<bool, string>(false, string.Empty);
                            if (current_CoreBackup == true || rte.Contains("Core is on Standby"))
                            {
                                backupCoreResponse = checkBackUpCoreResponse("fromRunSet", backup_selectedCoreIPAddress, arg);
                                if (backupCoreResponse.Item1)
                                    current_CoreBackup = true;
                                else
                                    current_CoreBackup = false;
                            }
                            else if (String.IsNullOrEmpty(rte) || rte.Contains("does not exist"))
                            {
                                backupCoreResponse = checkBackUpCoreResponse("fromRunSet", backup_selectedCoreIPAddress, arg);                                                            
                            }

                            if (backupCoreResponse.Item1)
                            {
                                rte = backupCoreResponse.Item2;
                            }

                            if (!rte.Contains("does not exist"))
                            {
                                if (!String.Equals("Trigger", datatype, StringComparison.CurrentCulture))
                                {
                                    //string[] splitString = rte.Split('[', ']');
                                    //string test = splitString[0].Remove(0, 27);
                                    //string[] splitstring1 = Regex.Split(test, ",");
                                    //for (int i = 0; i < splitstring1.Length - 1; i++)
                                    //{ showMatch1(splitstring1[i]); }
                                    if (rte != string.Empty)
                                    {
                                        var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadControls>(rte);

                                        if (resultValue.result != null)
                                        {
                                            getoup = resultValue.result.Name;
                                            getouptype = resultValue.result.String;
                                            getoupvalue = resultValue.result.Value;
                                            getoupposition = resultValue.result.Position;
                                        }

                                        //var resultValue = new JavaScriptSerializer().Deserialize<jsonRead>(rte);

                                        //if (resultValue.result != null)
                                        //{
                                        //    getoup = resultValue.result.Name;
                                        //    getouptype = resultValue.result.String;
                                        //    getoupvalue = resultValue.result.Value;
                                        //    getoupposition = resultValue.result.Position;

                                        //    //foreach (var result in resultValue.result)
                                        //    //{
                                        //    //    if (result.Key.ToString() == "Name")
                                        //    //    {
                                        //    //        getoup = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "String")
                                        //    //    {
                                        //    //        getouptype = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "Value")
                                        //    //    {
                                        //    //        getoupvalue = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "Position")
                                        //    //    {
                                        //    //        getoupposition = result.Value;
                                        //    //    }
                                        //    //}
                                        //}

                                        //string[] splitString = rte.Split('[', ']');
                                        //string test = splitString[0].Remove(0, 27);
                                        //string[] newtest = test.Split(new string[] { ",\"" }, StringSplitOptions.None);
                                        //for (int i = 0; i < newtest.Length; i++)
                                        //{ testshowMatch(newtest[i]); }

                                        joinstring = "Testcase Name:" + tc + "value after set-->" + "Control Name:" + getoup + "," + "Controlvalue:" + getouptype;
                                        string status = string.Empty;
                                        if (String.Equals("Set by value", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();
                                            double actual = 0;
                                            if (getoupvalue != string.Empty)
                                            {
                                                actual = Convert.ToDouble(getoupvalue);
                                            }
                                            double reference = 0;
                                            //// ToleranceType of 0.1% is applied
                                            double refrencelower = 0;
                                            double refrenceupper = 0;
                                            if (args[1] != string.Empty)
                                            {
                                                reference = Convert.ToDouble(args[1]);
                                                if (reference >= 0)
                                                {
                                                    refrencelower = reference - (0.001 * reference);
                                                    refrenceupper = reference + (0.001 * reference);
                                                }
                                                else
                                                {
                                                    refrencelower = reference + (0.001 * reference);
                                                    refrenceupper = reference - (0.001 * reference);

                                                }
                                            }
                                            if (actual >= refrencelower & actual <= refrenceupper)
                                            {
                                                status = "Pass";
                                                set_status.Add(status);
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                set_status.Add(status);
                                            }
                                            if (LoopValue != -1)
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();
                                            if (args[1] == string.Empty)
                                            { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                                            if (getoupvalue == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { expectedvalue = componentName + "_" + controlName + " : " + getoupvalue; }

                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }
                                            else
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }

                                        }
                                        else if (String.Equals("Set by string", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();
                                            if (String.Equals(args[1], getouptype, StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                status = "Pass";
                                                set_status.Add(status);
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                set_status.Add(status);
                                            }
                                            if (LoopValue != -1)
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();
                                            if (args[1] == string.Empty)
                                            { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }
                                            //actualvalue = "Expected Control Value: " + args[1];
                                            if (getouptype == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { expectedvalue = componentName + "_" + controlName + " : " + getouptype; }

                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }
                                            else
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }

                                        }
                                        else if (String.Equals("Set by position", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();
                                            double actual = 0;
                                            if (getoupposition != string.Empty)
                                            {
                                                actual = Convert.ToDouble(getoupposition);
                                            }
                                            double reference = 0;
                                            //// ToleranceType of 0.1% is applied
                                            double refrencelower = 0;
                                            double refrenceupper = 0;
                                            if (args[1] != string.Empty)
                                            {
                                                reference = Convert.ToDouble(args[1]);
                                                if (reference >= 0)
                                                {
                                                    refrencelower = reference - (0.001 * reference);
                                                    refrenceupper = reference + (0.001 * reference);
                                                }
                                                else
                                                {
                                                    refrencelower = reference + (0.001 * reference);
                                                    refrenceupper = reference - (0.001 * reference);

                                                }

                                            }
                                            if (actual >= refrencelower & actual <= refrenceupper)
                                            {
                                                status = "Pass";
                                                set_status.Add(status);
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                set_status.Add(status);
                                            }
                                            if (LoopValue != -1)
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                                            if (args[1] == string.Empty)
                                            { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                                            if (getoupposition == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { expectedvalue = componentName + "_" + controlName + " : " + getoupposition; }

                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }
                                            else
                                            {
                                                //updating TempTestCaseActionTabTable Values
                                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (LoopValue != -1)
                                            ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                        else
                                            ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                                        if (args[1] == string.Empty)
                                        { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                        else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                                        starttime = DateTime.Now.ToString();
                                        string status = string.Empty;
                                        status = "Fail";
                                        set_status.Add(status);

                                        if (starttime == DateTime.Now.ToString())
                                            Thread.Sleep(1000);

                                        //updating TempTestCaseActionTabTable Values
                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','No response received',@actualvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@actualvalue", actualvalue, string.Empty, string.Empty);
                                    }

                                }
                                else if (String.Equals("Trigger", datatype, StringComparison.CurrentCulture))
                                {
                                    starttime = DateTime.Now.ToString();
                                    string status = string.Empty;
                                    status = "Pass";
                                    set_status.Add(status);
                                    if (LoopValue != -1)
                                        ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                    else
                                        ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                                    if (args[1] == string.Empty)
                                    { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                    else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }
                                    expectedvalue = componentName + "_" + controlName + " : Verification skipped for Trigger Controls";

                                    if (starttime == DateTime.Now.ToString())
                                        Thread.Sleep(1000);

                                    //updating TempTestCaseActionTabTable Values
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                                }

                            }
                            else if (rte.Contains("does not exist"))
                            {
                                string remarksString = "Control does not exist";
                                if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                                {
                                    remarksString = "Control does not exist in both Primary and Secondary Core";
                                }
                                if (LoopValue != -1)
                                    ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                else
                                    ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                                if (args[1] == string.Empty)
                                { actualvalue = componentName + "_" + controlName + " : Empty "; }
                                else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                                starttime = DateTime.Now.ToString();
                                string status = string.Empty;
                                status = "Fail";
                                set_status.Add(status);

                                if (starttime == DateTime.Now.ToString())
                                    Thread.Sleep(1000);

                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + remarksString + "',@actualvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@actualvalue", actualvalue, string.Empty, string.Empty);
                            }
                        }
                        else
                        {
                            if (LoopValue != -1)
                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                            else
                                ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                            if (args[1] == string.Empty)
                            { actualvalue = componentName + "_" + controlName + " : Empty "; }
                            else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                            starttime = DateTime.Now.ToString();
                            string status = string.Empty;
                            status = "Fail";
                            set_status.Add(status);
                            if (starttime == DateTime.Now.ToString())
                                Thread.Sleep(1000);

                            //updating TempTestCaseActionTabTable Values
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','Response not received',@actualvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@actualvalue", actualvalue, string.Empty, string.Empty);
                        }
                    }
                    else
                    {
                        string remarksString = responseFromRPC.Item2;
                        if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                        {
                            remarksString = "Command not send to both Primary and Secondary Core";
                        }
                        if (LoopValue != -1)
                            ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                        else
                            ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                        if (args[1] == string.Empty)
                        { actualvalue = componentName + "_" + controlName + " : Empty "; }
                        else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                        starttime = DateTime.Now.ToString();
                        string status = string.Empty;
                        status = "Fail";
                        set_status.Add(status);

                        if (starttime == DateTime.Now.ToString())
                            Thread.Sleep(1000);

                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','" + remarksString + "',@actualvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@actualvalue", actualvalue, string.Empty, string.Empty);
                    }

                }
                else
                {
                    if (LoopValue != -1)
                        ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                    else
                        ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                    if (args[1] == string.Empty)
                    { actualvalue = componentName + "_" + controlName + " : Empty "; }
                    else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                    starttime = DateTime.Now.ToString();
                    string status = string.Empty;
                    status = "Fail";
                    set_status.Add(status);

                    if (starttime == DateTime.Now.ToString())
                        Thread.Sleep(1000);

                    //updating TempTestCaseActionTabTable Values
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','failed Due to no Input selection Type',@actualvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@actualvalue", actualvalue, string.Empty, string.Empty);
                    DeviceDiscovery.WriteToLogFile("Testcase Name:" + tc + "Value to set-->" + "Control Name:" + args[0] + "," + "Controlvalue:" + args[1] + "failed Due to no Input selection Type");
                }

                return set_status;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Testcase Name:" + tc + "Value to set-->" + "Control Name:" + args[0] + "," + "Controlvalue:" + args[1] + "failed");

                string Remarks = string.Empty;

                //if (ex.Message.Contains("Input string was not in a correct format"))
                //{
                //    Remarks = "control action not set,Invalid input";
                //}
                //else
                //{
                    Remarks = "Control action value is invalid";
                //}

                if (LoopValue != -1)
                    ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString() + "_Loop: " + (LoopValue).ToString();
                else
                    ActionWithLoopValue = "Control Action: " + (++ActionvalueCount).ToString();

                if (args[1] == string.Empty)
                { actualvalue = componentName + "_" + controlName + " : Empty "; }
                else { actualvalue = componentName + "_" + controlName + " : " + args[1]; }

                expectedvalue = "Not Applicable";

                if (starttime == DateTime.Now.ToString())
                    Thread.Sleep(1000);

                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + "Fail" + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + ActionWithLoopValue + "','"+Remarks+"',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", actualvalue, "@Expected", expectedvalue);
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15020", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                set_status.Add("Fail");
                return set_status;
            }
        }

        public List<string> RunGet(string[] args, string tc, string BMtype,TreeViewExplorer PlanExecution,int exid,string Testsuitename,string Testplanname,string Testactionname,int LoopValue, int VerificationValuesCount, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, string BM_start_end, string controlName, string componentName)
        {
            string starttime = DateTime.Now.ToString();
            string VerificationWithLoopValue = string.Empty;
            string expectedvalue = string.Empty;
            string actualvalue = string.Empty;
            string query = string.Empty;
            List<string> runStatus = new List<string>();
            string upperlimit = string.Empty;
            string lowerlimit = string.Empty;

            try
            {
                getoup = string.Empty; getouptype = string.Empty; getoupvalue = string.Empty; getoupposition = string.Empty;
                string joinstring;
                joinstring = "Testcase Name:" + tc + "Value to verify-->" + "Control Name:" + args[0] + "," + "Controlvalue:" + args[1];
                string settingtype = string.Empty;                
                string datatype = string.Empty;
                settingtype = args[2];
                upperlimit = args[3];
                lowerlimit = args[4];
                datatype = args[5];
                if (!string.IsNullOrEmpty(settingtype))
                {
                    string[] arg1 = { args[0] };
                    Thread.Sleep(1000);
                    bool returnRPC = false;

                    Tuple<bool, string> responseFromRPC = new Tuple<bool, string>(false, string.Empty);

                    if (current_CoreBackup == null || current_CoreBackup == false)
                    {
                        responseFromRPC = rpc.Send(selectedCoreIPAddress, "Control.Get", arg1, false, string.Empty);
                        returnRPC = responseFromRPC.Item1;
                    }


                    if (!returnRPC)
                    {
                        bool backupRPCResponse = false;

                        backupRPCResponse = checkBackUpCoreavailability(backup_selectedCoreIPAddress);
                        if (backupRPCResponse)
                        {
                            returnRPC = backupRPCResponse;
                            //Thread.Sleep(6000);
                        }
                    }
                    if (returnRPC)
                    {
                        string rte = responseFromRPC.Item2.Trim();
                        if (rte != null)
                        {
                            Tuple<bool, string> backupCoreResponse = new Tuple<bool, string>(false, string.Empty);

                            if (current_CoreBackup == true || rte.Contains("Core is on Standby"))
                            {
                                backupCoreResponse = checkBackUpCoreResponse("fromRunGet", backup_selectedCoreIPAddress, arg1);
                                if (backupCoreResponse.Item1)
                                    current_CoreBackup = true;
                                else
                                    current_CoreBackup = false;
                            }
                            else if (String.IsNullOrEmpty(rte)|| rte.Contains("does not exist"))
                            { 
                                backupCoreResponse = checkBackUpCoreResponse("fromRunGet", backup_selectedCoreIPAddress, arg1); 
                            }

                            if (backupCoreResponse.Item1)
                            {
                                rte = backupCoreResponse.Item2;
                            }


                            if (!rte.Contains("does not exist"))
                            {
                                if (!String.Equals("Trigger", datatype, StringComparison.CurrentCulture))
                                {
                                    //string[] splitString = rte.Split('[', ']');
                                    //string test = splitString[1];
                                    //string[] splitstring1 = Regex.Split(test, ",");
                                    //for (int i = 0; i < splitstring1.Length; i++)
                                    //{ showMatch1(splitstring1[i]); }

                                    if (rte != string.Empty)
                                    {

                                        var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadControlList>(rte);

                                        if (resultValue.result != null && resultValue.result.Count > 0)
                                        {
                                            foreach (var res in resultValue.result)
                                            {
                                                getoup = res.Name;
                                                getouptype = res.String;
                                                getoupvalue = res.Value;
                                                getoupposition = res.Position;
                                            }
                                        }

                                        //var resultValue = new JavaScriptSerializer().Deserialize<jsonRead>(rte);

                                        //if (resultValue.result != null)
                                        //{

                                        //    getoup = resultValue.result.Name;
                                        //    getouptype = resultValue.result.String;
                                        //    getoupvalue = resultValue.result.Value;
                                        //    getoupposition = resultValue.result.Position;

                                        //    //foreach (var result in resultValue.result)
                                        //    //{
                                        //    //    if (result.Key.ToString() == "Name")
                                        //    //    {
                                        //    //        getoup = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "String")
                                        //    //    {
                                        //    //        getouptype = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "Value")
                                        //    //    {
                                        //    //        getoupvalue = result.Value;
                                        //    //    }
                                        //    //    else if (result.Key.ToString() == "Position")
                                        //    //    {
                                        //    //        getoupposition = result.Value;
                                        //    //    }
                                        //    //}
                                        //}

                                        //string[] splitString = rte.Split('[', ']');
                                        //string test = splitString[1];
                                        //string[] newtest = test.Split(new string[] { ",\"" }, StringSplitOptions.None);
                                        //for (int i = 0; i < newtest.Length; i++)
                                        //{ testshowMatch(newtest[i]); }

                                        joinstring = "Testcase Name:" + tc + "Value After verify-->" + "Control Name:" + getoup + "," + "Controlvalue:" + getouptype;

                                        string status = string.Empty;
                                        if (String.Equals("Set by value", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();
                                            double actual = 0;
                                            if (getoupvalue != string.Empty)
                                            {
                                                actual = Convert.ToDouble(getoupvalue);
                                            }
                                            double reference = 0;
                                            if (args[1] != string.Empty)
                                            {
                                                reference = Convert.ToDouble(args[1]);
                                            }

                                            if (getoupvalue != string.Empty)
                                            {
                                            double upper = 0;
                                            double lower = 0;


                                            if (upperlimit != string.Empty)
                                            {
                                                upper = Convert.ToDouble(args[3]);
                                            }

                                            if (lowerlimit != string.Empty)
                                            {
                                                lower = Convert.ToDouble(args[4]);
                                            }

                                            ////start of validation

                                            //if ((upperlimit == string.Empty) && (lowerlimit == string.Empty))
                                            //{
                                                if ((actual == reference))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                //else
                                                //{
                                                //    status = "Fail";
                                                //    if (BMtype == string.Empty)
                                                //    {
                                                //        //get_status.Add(status);
                                                //        PlanExecution.ExecutionStatus = "Fail";
                                                //    }

                                                //    runStatus.Add(status);
                                                //}
                                            //}

                                            else if ((upperlimit == string.Empty) && (lowerlimit != string.Empty))
                                            {
                                                if ((actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else if ((upperlimit != string.Empty) && (lowerlimit == string.Empty))
                                            {
                                                if ((actual <= upper))//if ((actual == reference) || (actual <= upper) || (actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else if ((upperlimit != string.Empty) && (lowerlimit != string.Empty))
                                            {
                                                if ((actual <= upper) && (actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                        }

                                                        runStatus.Add(status);
                                                    }
                                                    else
                                                    {
                                                        status = "Fail";
                                                        if (BMtype == string.Empty)
                                                        {
                                                            //get_status.Add(status);
                                                            PlanExecution.ExecutionStatus = "Fail";
                                                        }

                                                        runStatus.Add(status);
                                                    }
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                if (BMtype == string.Empty)
                                                {
                                                    //get_status.Add(status);
                                                    PlanExecution.ExecutionStatus = "Fail";
                                                }

                                                runStatus.Add(status);
                                            }

                                            /////end of validation


                                            //Updating VerificationValue
                                            if (LoopValue != -1)
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();
                                            
                                            if (args[1] == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { expectedvalue = componentName + "_" + controlName + " : " + reference; }

                                            if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                            {
                                                if (upperlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                                else if (lowerlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                                else
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                            }


                                            //actualvalue = "Expected Control Value: " + reference;
                                            if (getoupvalue == string.Empty && actual == 0.0)
                                            { actualvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { actualvalue = componentName + "_" + controlName + " : " + actual; }


                                            //if (BMtype == string.Empty)
                                            //{
                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                                {
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }
                                                else
                                                {
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }

                                            //}
                                            
                                            //if (BM_start_end != string.Empty && status != string.Empty)
                                            //{
                                            //    if (status == "Fail")
                                            //    {
                                            //        //updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "', 'Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //    else
                                            //    {
                                            //        //updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //}
                                        }
                                        else if (String.Equals("Set by string", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();

                                            if (String.Equals(args[1].Trim(), getouptype.Trim(), StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                status = "Pass";
                                                if (BMtype == string.Empty)
                                                {
                                                    //get_status.Add(status);
                                                    //PlanExecution.ExecutionStatus = "Pass";
                                                }

                                                runStatus.Add(status);
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                if (BMtype == string.Empty)
                                                {
                                                    //get_status.Add(status);
                                                    PlanExecution.ExecutionStatus = "Fail";
                                                }

                                                runStatus.Add(status);
                                            }

                                            //Updating VerificationValue
                                            if (LoopValue != -1)
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                                            if (args[1] == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                                            if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                            {
                                                if (upperlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                                else if (lowerlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                                else
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                            }

                                            //actualvalue = "Expected Control Value: " + args[1];
                                            if (getouptype == string.Empty)
                                            { actualvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { actualvalue = componentName + "_" + controlName + " : " + getouptype.Trim(); }


                                            //if (BMtype == string.Empty)
                                            //{
                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                                {
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }
                                                else
                                                {
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }
                                            //}

                                            //if (BM_start_end != string.Empty && status != string.Empty)
                                            //{

                                            //    if (status == "Fail")
                                            //    {
                                            //        //updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "', 'Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //    else
                                            //    {
                                            //        //updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //}

                                        }
                                        else if (String.Equals("Set by position", settingtype, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            starttime = DateTime.Now.ToString();

                                            double actual = 0;
                                            double reference = 0;

                                            if (getoupposition != string.Empty)
                                            {
                                                actual = Convert.ToDouble(getoupposition);
                                                reference = Convert.ToDouble(args[1]);
                                            double upper = 0;
                                            double lower = 0;

                                            if (upperlimit != string.Empty)
                                            {
                                                upper = Convert.ToDouble(args[3]);
                                            }

                                            if (lowerlimit != string.Empty)
                                            {
                                                lower = Convert.ToDouble(args[4]);
                                            }

                                           //if ((upperlimit == string.Empty) && (lowerlimit == string.Empty))
                                           // {
                                                if ((actual == reference))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                //else
                                                //{
                                                //    status = "Fail";
                                                //    if (BMtype == string.Empty)
                                                //    {
                                                //        //get_status.Add(status);
                                                //        PlanExecution.ExecutionStatus = "Fail";
                                                //    }

                                                //    runStatus.Add(status);
                                                //}
                                            //}




                                            else if ((upperlimit == string.Empty) && (lowerlimit != string.Empty))
                                            {
                                                if ((actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else if ((upperlimit != string.Empty) && (lowerlimit == string.Empty))
                                            {
                                                if ((actual <= upper))//if ((actual == reference) || (actual <= upper) || (actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else if ((upperlimit != string.Empty) && (lowerlimit != string.Empty))
                                            {
                                                if ((actual <= upper) && (actual >= lower))
                                                {
                                                    status = "Pass";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        //PlanExecution.ExecutionStatus = "Pass";
                                                    }

                                                    runStatus.Add(status);
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                            //get_status.Add(status);
                                                            PlanExecution.ExecutionStatus = "Fail";

                                                        }

                                                        runStatus.Add(status);
                                                    }
                                                }
                                                else
                                                {
                                                    status = "Fail";
                                                    if (BMtype == string.Empty)
                                                    {
                                                        //get_status.Add(status);
                                                        PlanExecution.ExecutionStatus = "Fail";

                                                    }

                                                    runStatus.Add(status);
                                                }
                                            }
                                            else
                                            {
                                                status = "Fail";
                                                if (BMtype == string.Empty)
                                                {
                                                    //get_status.Add(status);
                                                    PlanExecution.ExecutionStatus = "Fail";
                                                }

                                                runStatus.Add(status);
                                            }

                                            //Updating VerificationValue
                                            if (LoopValue != -1)
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                            else
                                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();
                                            if (args[1] == string.Empty)
                                            { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                            else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                                            if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                            {
                                                if (upperlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                                else if (lowerlimit == string.Empty)
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                                else
                                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                            }

                                            //actualvalue = "Expected Control Value: " + args[1];
                                            if (getoupposition == string.Empty)
                                            { actualvalue = componentName + "_" + controlName + " : Response is empty"; }
                                            else
                                            { actualvalue = componentName + "_" + controlName + " : " + getoupposition; }


                                            //if (BMtype == string.Empty)
                                            //{           
                                            if (starttime == DateTime.Now.ToString())
                                                Thread.Sleep(1000);

                                            if (status == "Fail")
                                                {
                                                    //updating TempTestCaseActionTabTable Values
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }
                                                else
                                                {
                                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                                }

                                            //}

                                            //if (BM_start_end != string.Empty && status != string.Empty)
                                            //{
                                            //    if (status == "Fail")
                                            //    {
                                            //        updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "', 'Expected and Measured values are different',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //    else
                                            //    {
                                            //        updating TempTestCaseActionTabTable Values
                                            //        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Pass',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                            //        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                            //    }
                                            //}
                                        }
                                    }
                                    else
                                    {
                                        string status = string.Empty;
                                        status = "Fail";
                                        if (BMtype == string.Empty)
                                        {
                                            //get_status.Add(status);
                                            PlanExecution.ExecutionStatus = "Fail";
                                        }

                                        starttime = DateTime.Now.ToString();
                                        if (LoopValue != -1)
                                            VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                        else
                                            VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                                        if (args[1] == string.Empty)
                                        { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                        else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                                        if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                        {
                                            if (upperlimit == string.Empty)
                                                expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                            else if (lowerlimit == string.Empty)
                                                expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                            else
                                                expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                        }

                                        //if (BMtype == string.Empty)
                                        //{
                                        //updating TempTestCaseActionTabTable Values
                                        if (starttime == DateTime.Now.ToString())
                                            Thread.Sleep(1000);

                                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Response not received',@expectedvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@expectedvalue", expectedvalue, string.Empty, string.Empty);
                                        //}

                                        //if (BM_start_end != string.Empty && status != string.Empty)
                                        //{
                                        //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Response not received','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                        //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                                        //}

                                        runStatus.Add(status);
                                    }
                                }
                                else if (String.Equals("Trigger", datatype, StringComparison.CurrentCulture))
                                {
                                    starttime = DateTime.Now.ToString();
                                    string status = string.Empty;
                                    status = "Pass";
                                    runStatus.Add(status);

                                    if (LoopValue != -1)
                                        VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                    else
                                        VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();
                                    if (args[1] == string.Empty)
                                    { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                    else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                                    if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                    {
                                        if (upperlimit == string.Empty)
                                            expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                        else if (lowerlimit == string.Empty)
                                            expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                        else
                                            expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                    }

                                    //actualvalue = "Expected Control Value: " + args[1];
                                    actualvalue = componentName + "_" + controlName + " : Verification skipped for Trigger Controls";

                                    //if (BMtype == string.Empty)
                                    //{
                                    if (starttime == DateTime.Now.ToString())
                                        Thread.Sleep(1000);

                                    //updating TempTestCaseActionTabTable Values
                                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                                    //}

                                    //if (BM_start_end != string.Empty && status != string.Empty)
                                    //{
                                    //    //updating TempTestCaseActionTabTable Values
                                    //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + string.Empty + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                    //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), "@Actual", actualvalue, "@Expected", expectedvalue);
                                    //}

                                }
                            }
                            else if (rte.Contains("does not exist"))
                            {
                                string remarksString = "Control does not exist";
                                if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                                {
                                    remarksString = "Control does not exist in both Primary and Secondary Core";
                                }
                                string status = string.Empty;
                                status = "Fail";
                                if (BMtype == string.Empty)
                                {
                                    //get_status.Add(status);
                                    PlanExecution.ExecutionStatus = "Fail";
                                }
                                starttime = DateTime.Now.ToString();
                                if (LoopValue != -1)
                                    VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                                else
                                    VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                                if (args[1] == string.Empty)
                                { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                                else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                                if (upperlimit != string.Empty || lowerlimit != string.Empty)
                                {
                                    if (upperlimit == string.Empty)
                                        expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                    else if (lowerlimit == string.Empty)
                                        expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                    else
                                        expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                                }

                                //if (BMtype == string.Empty)
                                //{
                                if (starttime == DateTime.Now.ToString())
                                    Thread.Sleep(1000);

                                //updating TempTestCaseActionTabTable Values
                                query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + remarksString + "',@expectedvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                                tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@expectedvalue", expectedvalue, string.Empty, string.Empty);
                                //}

                                //if (BM_start_end != string.Empty && status != string.Empty)
                                //{
                                //    updating TempTestCaseActionTabTable Values
                                //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + remarksString + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                                //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                                //}

                                runStatus.Add(status);
                            }
                        }
                        else
                        {
                            string status = string.Empty;
                            status = "Fail";
                            if (BMtype == string.Empty)
                            {
                                //get_status.Add(status);
                                PlanExecution.ExecutionStatus = "Fail";
                            }

                            starttime = DateTime.Now.ToString();
                            if (LoopValue != -1)
                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                            else
                                VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                            if (args[1] == string.Empty)
                            { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                            else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                            if (upperlimit != string.Empty || lowerlimit != string.Empty)
                            {
                                if (upperlimit == string.Empty)
                                    expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                                else if (lowerlimit == string.Empty)
                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                                else
                                    expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                            }

                            //if (BMtype == string.Empty)
                            //{
                            if (starttime == DateTime.Now.ToString())
                                Thread.Sleep(1000);

                            //updating TempTestCaseActionTabTable Values
                            query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Response not received',@expectedvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                            tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@expectedvalue", expectedvalue, string.Empty, string.Empty);
                            //}

                            //if (BM_start_end != string.Empty && status != string.Empty)
                            //{
                            //    //updating TempTestCaseActionTabTable Values
                            //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','Response not received','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                            //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                            //}

                            runStatus.Add(status);
                        }
                    }
                    else
                    {
                        string remarksString = responseFromRPC.Item2;
                        if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                        {
                            remarksString = "Command not send to both Primary and Secondary Core";
                        }
                        string status = string.Empty;
                        status = "Fail";
                        if (BMtype == string.Empty)
                        {
                            //get_status.Add(status);
                            PlanExecution.ExecutionStatus = "Fail";
                        }

                        starttime = DateTime.Now.ToString();
                        if (LoopValue != -1)
                            VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                        else
                            VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                        if (args[1] == string.Empty)
                        { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                        else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                        if (upperlimit != string.Empty || lowerlimit != string.Empty)
                        {
                            if (upperlimit == string.Empty)
                                expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                            else if (lowerlimit == string.Empty)
                                expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                            else
                                expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                        }

                        //if (BMtype == string.Empty)
                        //{
                        if (starttime == DateTime.Now.ToString())
                            Thread.Sleep(1000);

                        //updating TempTestCaseActionTabTable Values
                        query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + remarksString + "',@expectedvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                        tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@expectedvalue", expectedvalue, string.Empty, string.Empty);
                        
                        //}

                        //if (BM_start_end != string.Empty && status != string.Empty)
                        //{
                        //    //updating TempTestCaseActionTabTable Values
                        //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + remarksString + "','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                        //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                        //}

                        runStatus.Add(status);
                    }
                }
                else
                {
                    string status = string.Empty;
                    status = "Fail";
                    if (BMtype == string.Empty)
                    {
                        //get_status.Add(status);
                        PlanExecution.ExecutionStatus = "Fail";
                    }

                    starttime = DateTime.Now.ToString();
                    if (LoopValue != -1)
                        VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                    else
                        VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                  

                    if (args[1] == string.Empty)
                    { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                    else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                    if (upperlimit != string.Empty || lowerlimit != string.Empty)
                    {
                        if (upperlimit == string.Empty)
                            expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                        else if (lowerlimit == string.Empty)
                            expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                        else
                            expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                    }

                    //if (BMtype == string.Empty)
                    //{
                    if (starttime == DateTime.Now.ToString())
                        Thread.Sleep(1000);

                    //updating TempTestCaseActionTabTable Values
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','failed Due to no Input selection Type',@expectedvalue,'Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@expectedvalue", expectedvalue, string.Empty, string.Empty);
                    //}

                    //if (BM_start_end != string.Empty && status != string.Empty)
                    //{
                    //    //updating TempTestCaseActionTabTable Values
                    //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','failed Due to no Input selection Type','Not Applicable','Not Applicable','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                    //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                    //}
                    runStatus.Add(status);
                }

                return runStatus;
            }
            catch (Exception ex)
            {
                string Remarks = string.Empty;

                //if (ex.Message.Contains("Input string was not in a correct format"))
                //{
                //    Remarks = "control verification not set,Invalid input";
                //}
                //else
                //{
                    Remarks = "Control verification value is invalid";
                //}

                DeviceDiscovery.WriteToLogFile("Testcase Name:" + tc + "Value to verify-->" + "Control Name:" + args[0] + "," + "Controlvalue:" + args[1] + "failed");
                if (LoopValue != -1)
                    VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString() + "_Loop: " + (LoopValue).ToString();
                else
                    VerificationWithLoopValue = "Control Verification: " + (++VerificationValuesCount).ToString();

                if (args[1] == string.Empty)
                { expectedvalue = componentName + "_" + controlName + " : Empty "; }
                else { expectedvalue = componentName + "_" + controlName + " : " + args[1]; }

                if (upperlimit != string.Empty || lowerlimit != string.Empty)
                {
                    if (upperlimit == string.Empty)
                        expectedvalue += "<br />Upper Limit: Empty, Lower Limit: " + lowerlimit;
                    else if (lowerlimit == string.Empty)
                        expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: Empty";
                    else
                        expectedvalue += "<br />Upper Limit: " + upperlimit + ", Lower Limit: " + lowerlimit;
                }

                actualvalue = "Not Applicable";

                string status = string.Empty;
                status = "Fail";
                runStatus.Add(status);

				if (starttime == DateTime.Now.ToString())
                	Thread.Sleep(1000);
					
                //if (BMtype == string.Empty)
                //{
                    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + Remarks + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", Testactionname, "@Actual", expectedvalue, "@Expected", actualvalue);
                //}

                //if (BM_start_end != string.Empty && status != string.Empty)
                //{
                //    //updating TempTestCaseActionTabTable Values
                //    query = "Insert into TempTestCaseActionTabTable values('" + exid + "','" + status + "',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','" + VerificationWithLoopValue + "','" + Remarks + "',@Actual,@Expected,'" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "')";
                //    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", Testsuitename, "@TPName", Testplanname, "@TCName", tc, "@TAName", BM_start_end.ToUpper(), string.Empty, string.Empty, string.Empty, string.Empty);
                //}

                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15021", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return runStatus;
            }
        }

        public bool checkBackUpCoreavailability(string backup_selectedCoreIPAddress)
        {
            bool responseStatus = false;
            string responseString = string.Empty;
            string rpcMethod = string.Empty;
            try
            {
                if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                {
                    responseStatus= true;
                }
                else
                {
                    responseStatus = false;
                }
                return responseStatus;
            }
            catch (Exception ex)
            {
                return responseStatus;
            }
        }

        public Tuple<bool,string> checkBackUpCoreResponse(string incomingMethod,string backup_selectedCoreIPAddress, object arg)
        {
            bool responseStatus = false;
            string responseString = string.Empty;
            string rpcMethod = string.Empty;
            try
            {
                if (!(String.IsNullOrEmpty(backup_selectedCoreIPAddress)))
                {
                    Thread.Sleep(2000);
                    if (arg != null)//|| triggerArray!=null
                    {
                        if(incomingMethod=="fromRunSet")
                        {
                            rpcMethod = "Control.Set";
                        }
                        else if(incomingMethod == "fromRunGet")
                        {
                            rpcMethod = "Control.Get";
                        }
                        //if(!String.Equals("Trigger",datatype,StringComparison.CurrentCulture))
                        Thread.Sleep(5000);
                        var responseFromRPC = rpc.Send(backup_selectedCoreIPAddress, rpcMethod, arg, false, string.Empty);
                        if(responseFromRPC!=null)
                        {
                            responseStatus = responseFromRPC.Item1;
                            responseString= responseFromRPC.Item2;
                        }                       
                    }
                    return new Tuple<bool, string>(responseStatus, responseString);
                }
                else
                {
                    return new Tuple<bool, string>(responseStatus, responseString);
                }
            }
            catch(Exception ex)
            {
                return new Tuple<bool, string>(responseStatus, responseString);
            }
        }

        public object[] triggerDatatypeValues(string[] args, string tc,Int32 length,string settingtype)
        {
            try
            {
                object[] trigger = null;
                trigger = new object[2];
                if ((String.Equals("Set by value", settingtype, StringComparison.CurrentCultureIgnoreCase))|| (String.Equals("Set by position", settingtype, StringComparison.CurrentCultureIgnoreCase)))
                {
                    if (args.Length == 5)
                    {

                        trigger[0] = new
                        {
                            Name = args[0],
                            Value = double.Parse(args[1]),
                            Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                        };
                        trigger[1] = new
                        {
                            Name = args[0],
                            Value = double.Parse(args[1]),
                            Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                        };
                    }
                    else if (args.Length == 4)
                    {

                        trigger[0] = new
                        {
                            Name = args[0],
                            Value = double.Parse(args[1]),
                            Ramp = 0.0
                        };
                        trigger[1] = new
                        {
                            Name = args[0],
                            Value = double.Parse(args[1]),
                            Ramp = 0.0
                        };
                    }

                }
                else if (String.Equals("Set by string", settingtype, StringComparison.CurrentCultureIgnoreCase)) 
                {
                    if (args.Length == 5)
                    {

                        trigger[0] = new
                        {
                            Name = args[0],
                            Value =(args[1]),
                            Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                        };
                        trigger[1] = new
                        {
                            Name = args[0],
                            Value =(args[1]),
                            Ramp = args.Length > 2 ? double.Parse(args[2]) : 0.0
                        };
                    }
                    else if (args.Length == 4)
                    {

                        trigger[0] = new
                        {
                            Name = args[0],
                            Value =(args[1]),
                            Ramp = 0.0
                        };
                        trigger[1] = new
                        {
                            Name = args[0],
                            Value = (args[1]),
                            Ramp = 0.0
                        };
                    }

                }

                return trigger;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception occurs at triggerDatatypeValues");
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15020T", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
            
        }

        public void writeinfile(string text, string Tlogfile, string testcasename)
        {
            try
            {
                string Telnetlogpath = QatConstants.QATServerPath + "\\Telnet_logs" + "\\" + testcasename + "";
                if (!Directory.Exists(Telnetlogpath))
                {
                    Directory.CreateDirectory(Telnetlogpath);
                }
                string TFullpath = System.IO.Path.Combine((Telnetlogpath), Tlogfile);
                using (FileStream fs = new FileStream(TFullpath, FileMode.Append, FileAccess.Write))
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    sw.WriteLine(text);
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public void BM_writeinfile(string text, string Tlogfile, string testcasename, string MonitorType)
        {
            try
            {
                string BMlogpath = QatConstants.QATServerPath + "\\Background_Monitoring" + "\\" + MonitorType + "" + "\\" + testcasename + "";
                if (!Directory.Exists(BMlogpath))
                {
                    Directory.CreateDirectory(BMlogpath);
                }
                string BMFullpath = System.IO.Path.Combine((BMlogpath), Tlogfile);
                using (FileStream fs = new FileStream(BMFullpath, FileMode.Append, FileAccess.Write))
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    sw.WriteLine(text);
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public void writeinqsysfile(string text)
        {
            try
            {
                using (FileStream fs = new FileStream(localpathfile_txt, FileMode.Append, FileAccess.Write))
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    sw.WriteLine(text);
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15022", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void showMatch1(string text)
        {
            try
            {
                string expr = "\"Name\":\".*?\"";
                string expr1 = "\"String\":\".*?\"";
                string expr2 = "\"Value\":[-+]?[0-9]*.?[0-9]*";
                string expr3 = "\"Position\":[-+]?[0-9]*.?[0-9]*";
                string gettype = string.Empty;
                MatchCollection mc = Regex.Matches(text, expr);
                MatchCollection mc1 = Regex.Matches(text, expr1);
                MatchCollection mc2 = Regex.Matches(text, expr2);
                MatchCollection mc3 = Regex.Matches(text, expr3);

                foreach (Match m in mc)
                {
                    string getr = m.ToString();
                    string fer = getr.Replace("\"", "");
                    string[] final = fer.Split(new char[] { ':' }, 2);
                    getoup = final[1];
                }

                foreach (Match e in mc1)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getouptype = finaltype[1].Trim();
                }

                foreach (Match e in mc2)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getoupvalue = finaltype[1].Trim();//getoupposition
                }
                foreach (Match e in mc3)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getoupposition = finaltype[1].Trim();//getoupposition
                    int index = getoupposition.IndexOf("}");
                    if (index > 0)
                        getoupposition = getoupposition.Substring(0, 1);

                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15023", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void testshowMatch(string text)
        {
            try
            {
                string expr = "\"Name\":\".*?\"";
                string expr1 = "String\":\".*?\"";
                string expr2 = "Value\":[-+]?[0-9]*.?[0-9]*";
                string expr3 = "Position\":[-+]?[0-9]*.?[0-9]*";
                string gettype = string.Empty;
                MatchCollection mc = Regex.Matches(text, expr);
                MatchCollection mc1 = Regex.Matches(text, expr1);
                MatchCollection mc2 = Regex.Matches(text, expr2);
                MatchCollection mc3 = Regex.Matches(text, expr3);

                foreach (Match m in mc)
                {
                    string getr = m.ToString();
                    string fer = getr.Replace("\"", "");
                    string[] final = fer.Split(new char[] { ':' }, 2);
                    getoup = final[1].Trim();
                }

                foreach (Match e in mc1)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getouptype = finaltype[1].Trim();
                }

                foreach (Match e in mc2)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getoupvalue = finaltype[1].Trim();//getoupposition
                }
                foreach (Match e in mc3)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(new char[] { ':' }, 2);
                    getoupposition = finaltype[1].Trim();//getoupposition
                    int index = getoupposition.IndexOf("}");
                    if (index > 0)
                        getoupposition = getoupposition.Substring(0, 1);

                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15023", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public Tuple<bool, bool> HttpGet(string strURI, string m_password, string errorCode, string deviceIP, string firmwareVersion, out string strResponse)
        {
            Tuple<bool, bool> Check = new Tuple<bool, bool>(false, false);
            Int32 RetryCount = 0;
            strResponse = "";
            bool isDigest = false;

            try
            {
                bool isNewVersionDigest = true;
                if (!string.IsNullOrEmpty(firmwareVersion))
                {
                    isNewVersionDigest = FirmwareDigestCheck(firmwareVersion, false,false);
                }

                while (RetryCount < 5)
                {
                    if (isNewVersionDigest && !string.IsNullOrEmpty(firmwareVersion))
                    {
                        bool success = HttpGetDigestMethod(strURI, m_password, out strResponse);
                        Check = new Tuple<bool, bool>(success, false);

                        if (success || strResponse == "401")
                            break;
                    }
                    else
                    {
                        if (isDigest)
                        {
                            goto DigestLoop;
                        }
                        else
                        {
                            Check = HttpGetactual(strURI, m_password, errorCode, deviceIP, out strResponse, out isDigest);
                            if (Check.Item1 || strResponse == "401")
                                break;
                        }

                    DigestLoop:
                        if (isDigest)
                        {
                            bool success = HttpGetDigestMethod(strURI, m_password, out strResponse);
                            Check = new Tuple<bool, bool>(success, false);

                            if (success || strResponse == "401")
                                break;
                        }
                    }
                    RetryCount++;
                    //Thread.Sleep(2000);
                };
                return Check;
            }


            catch (Exception ex)
            {
                return Check;
            }              
        }

        private bool FirmwareDigestCheck(string firmwareVersion, bool isNewDeployScheme, bool isRemote)
        {
            bool isNewVersionDigest = true;

            try
            {
                if (!firmwareVersion.ToLower().StartsWith("dev"))
                {
                    string regex = Regex.Match(firmwareVersion, @"\d.*").Value;   
                    Version firmwarever = new Version(regex);
                    if (isNewDeployScheme)
                    {
                        
                        if ((isRemote == false && firmwarever < new Version(Properties.Settings.Default.NewDepolySchemeFirmwareVersion)) || 
                            (isRemote == true && firmwarever < new Version("9.0")))
                            isNewVersionDigest = false;
                    }
                    else
                    {
                        if (firmwarever <= new Version(Properties.Settings.Default.DigestFirmwareVersion))
                            isNewVersionDigest = false;
                    }
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return isNewVersionDigest;
        }

        public Tuple<bool, bool> HttpGet_json(string strURI, string token, string ipaddress, string password, string accept, out string strResponse)
        {
            Tuple<bool, bool> Check = new Tuple<bool, bool>(false, false);
            Int32 RetryCount = 0;
            strResponse = "";
            try
            {
                while (RetryCount < 5)
                {
                    Check = HttpGetactual_json(strURI, token, accept, out strResponse);
                    if ((RetryCount == 0) && (strResponse == "401"))
                    {
                        string newtoken = string.Empty;
                        var isLogonSuccess = Corelogon(ipaddress, password, out newtoken);
						/////If primary core, assign new token in CoreLogonToken else if backup core, assign new token CoreLogonToken_Backup
                        if (ipaddress == selectedCoreIPAddress)
                            CoreLogonToken = newtoken;
                        else if (ipaddress == backup_selectedCoreIPAddress)
                            CoreLogonToken_Backup = newtoken;

                        Check = HttpGetactual_json(strURI,  newtoken, accept, out strResponse);
                    }

                    if ((Check.Item1)||(strResponse=="401") || (strResponse == "404") || (strResponse=="503"))
                    {
                        break;
                    }

                    RetryCount++;
                    //Thread.Sleep(2000);
                };
                return Check;
            }


            catch (Exception ex)
            {
                return Check;
            }

        }
        public Tuple<bool, bool> HttpGetactual_json(string strURI, string token,string accept, out string strResponse)
        {
            bool msg = false;
            strResponse = string.Empty;
            bool success = false;
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);

            try
            {
                req.ContentType = "application/json";
                req.Accept = accept;
                req.Method = "GET";
                req.Timeout = 15000;
                req.ReadWriteTimeout = 15000;
                if (token != string.Empty)
                    req.Headers["Authorization"] = "Bearer " + token;

                using (HttpWebResponse resp = (HttpWebResponse)req.GetResponse())
                {
                    success = HttpStatusCodeCheck(resp, "GET", out strResponse);
                }

                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                
                strResponse = "";
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    strResponse = "401";
                }
                else if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                {
                    msg = true;
                }
                else if(ex.Message.Contains("The remote server returned an error: (404) Not Found"))
                {
                    strResponse = "404";
                }
                else if(ex.Message.Contains("The remote server returned an error: (503) Server Unavailable."))
                {
                    strResponse = "503";
                }

                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
        }

        public Tuple<bool, bool> HttpGetactual(string strURI, string m_password, string errorCode, string deviceIP, out string strResponse, out bool isDigest)
        {
            isDigest = false;
            bool msg = false;
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            try
            {
                req.ContentType = "application/x-www-form-urlencoded";
                req.Method = "Get";
                req.Timeout = 15000;
                req.ReadWriteTimeout = 15000;
                // Need to setup Authentication Header.
                SetBasicAuthHeader(ref req, username_default, m_password);

                using (System.Net.WebResponse resp = req.GetResponse())
                {
                    strResponse = "";
                    if (resp == null)
                    {
                        strResponse = "";
                        return new Tuple<bool, bool>(false, msg);
                    }
                    else if (errorCode == "Readlog")
                    {
                        using (System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream()))
                        {
                            strResponse = sr.ReadToEnd().Trim();
                            //sr.Close();
                            //resp.Close();
                            req.Abort();
                            return new Tuple<bool, bool>(true, msg);
                        }
                    }
                    else if (((HttpWebResponse)resp).StatusCode.ToString().ToUpper() == "OK")
                    {
					   req.Abort();
                        return new Tuple<bool, bool>(true, msg);
                    }
                    
                    else
                    {
					   req.Abort();
                        return new Tuple<bool, bool>(false, msg);
                    }
                }
            }
            catch(WebException ex)
            {
                bool success = false;
                strResponse = "";
                req.Abort();

                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                    strResponse = "401";

                if (ex.Message.Contains("The remote server returned an error: (400) Bad Request") && ex.Status.ToString().ToUpper() == "PROTOCOLERROR")
                {
                    //success = HttpGetDigestMethod(strURI, m_password, out strResponse);
                    isDigest = true;
                }

                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                    {
                        msg = true;
                    }
                }
                              
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, bool>(success, msg);

            }

            catch (Exception ex)
            {                
                strResponse = "";
                 req.Abort();
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))                
                    strResponse = "401";
                
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                    {
                        msg = true;                    
                    }
                }
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, bool>(false, msg);
            }
           
        }



        public bool HttpGetDigestMethod(string strURI, string devicepassword, out string strResponse)
        {
            strResponse = string.Empty;
            try
            {
                string cnonce = string.Empty;
                string user = username_default;
                string password = devicepassword;
                string realm = string.Empty;
                string nonce = string.Empty;
                string qop = string.Empty;
                string requestMethod = "Get";                
                int nc = 0;
                Uri uri = new Uri(strURI);               
                string dir = uri.PathAndQuery;
                var request = (HttpWebRequest)WebRequest.Create(uri);
                HttpWebResponse response;

                try
                {
                    response = (HttpWebResponse)request.GetResponse();
                    if (((HttpWebResponse)response).StatusCode.ToString().ToUpper() == "OK")
                    {
                        return true;
                    }
                }
                catch (WebException ex)
                {                  
                    if (ex.Response == null)
                        return false;

                    var wwwAuthenticateHeader = ex.Response.Headers["WWW-Authenticate"];
                    if (wwwAuthenticateHeader != null && wwwAuthenticateHeader.Contains("Digest"))
                    {
                        realm = GrabHeaderVar("realm", wwwAuthenticateHeader);
                        nonce = GrabHeaderVar("nonce", wwwAuthenticateHeader);
                        qop = GrabHeaderVar("qop", wwwAuthenticateHeader);
                        nc = 0;
                        cnonce = new Random().Next(123400, 9999999).ToString();                      

                        var request2 = (HttpWebRequest)WebRequest.Create(uri);
                        request2.AllowAutoRedirect = true;
                        request2.PreAuthenticate = true;
                        request2.Method = requestMethod;
                        request2.Headers.Add("Authorization", GetDigestHeader(dir, nc, user, realm, password, nonce, cnonce, qop, requestMethod));
                        HttpWebResponse response2 = (HttpWebResponse)request2.GetResponse();
                        var reader = new StreamReader(response2.GetResponseStream());
                        strResponse = reader.ReadToEnd();

                        if (((HttpWebResponse)response2).StatusCode.ToString().ToUpper() == "OK")
                        {
                            return true;
                        }
                    }                    
                }              
                return false;
            }
            catch(WebException ex)
            {
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    strResponse = "401";
                }
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }


        private string CalculateMd5Hash( string input)
        {
            try
            {
                var inputBytes = Encoding.ASCII.GetBytes(input);
                var hash = MD5.Create().ComputeHash(inputBytes);
                var sb = new StringBuilder();
                foreach (var b in hash)
                    sb.Append(b.ToString("x2"));
                return sb.ToString();
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }         
        }

        private string GrabHeaderVar(string varName, string header)
        {
            try
            {
                var regHeader = new Regex(string.Format(@"{0}=""([^""]*)""", varName));
                var matchHeader = regHeader.Match(header);
                if (matchHeader.Success)
                    return matchHeader.Groups[1].Value;
                throw new ApplicationException(string.Format("Header {0} not found", varName));
            }
            catch (Exception ex)
            {                
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }
        }

        public string GetDigestHeader(string dir, int nc, string user, string realm, string password, string nonce, string cnonce, string qop, string requestmethod)
        {
            try
            {
                nc = nc + 1;
                var ha1 = CalculateMd5Hash(string.Format("{0}:{1}:{2}", user, realm, password));
                var ha2 = CalculateMd5Hash(string.Format("{0}:{1}", "GET", dir));
                var digestResponse = CalculateMd5Hash(string.Format("{0}:{1}:{2:00000000}:{3}:{4}:{5}", ha1, nonce, nc, cnonce, qop, ha2));

                return string.Format("Digest username=\"{0}\", realm=\"{1}\", nonce=\"{2}\", uri=\"{3}\", " +
                    " response=\"{4}\", qop={5}, nc={6:00000000}, cnonce=\"{7}\"",
                    user, realm, nonce, dir, digestResponse, qop, nc, cnonce);
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }
        }
        
        public Tuple<bool, bool> HttpGetForPcap(string strURI, string m_password, string username, out string strResponse)
        {
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            bool msg = false;

            try
            {
                req.ContentType = "application/x-www-form-urlencoded";
                req.Method = "Get";
                req.Timeout = 15000;
                req.ReadWriteTimeout = 15000;
                // Need to setup Authentication Header.
                SetBasicAuthHeader(ref req, username, m_password);

                using (System.Net.WebResponse resp = req.GetResponse())
                {
                    strResponse = "";
                    if (resp == null)
                    {
                        strResponse = "";
                        return new Tuple<bool, bool>(false, msg);
                    }
                    else
                    {
                        using (System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream()))
                        {
                            strResponse = sr.ReadToEnd().Trim();
                            //sr.Close();
                            //resp.Close();
                            req.Abort();
                            return new Tuple<bool, bool>(true, msg);
                        }
                    }
                }
            }
            catch (WebException ex)
            {
                bool success = false;
                strResponse = "";
                req.Abort();
                
                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                    {
                        msg = true;
                    }
                }

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, bool>(success, msg);

            }

            catch (Exception ex)
            {
                strResponse = "";
                req.Abort();

                if (!ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                    {
                        msg = true;
                    }
                }

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return new Tuple<bool, bool>(false, msg);
            }
        }

        private void DUTConfiguration(string planExection)
        {
            try
            {
                List<string> deviceName = new List<string>();
                string query = "select * from DesignInventory where DesignID in(select DesignID from TPDesignLinkTable where TPID in(select TestPlanID from Testplan where Testplanname in (@TPName)))";
                //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@TPName", planExection);
                //this.connect.CloseConnection();

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    deviceName.Add(read[3].ToString());
                }

                List<string> deviceNameIndesignChk = new List<string>();
                List<string> deviceNameToNetPair = new List<string>();

                foreach (string component in deviceName)
                {
                    foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                    {
                        if (String.Equals(item.ItemDeviceName, component, StringComparison.CurrentCultureIgnoreCase) &&
                            !item.ItemDeviceType.Contains("Core"))
                        {
                            if (item.ItemNetPairingSelected != string.Empty && item.ItemNetPairingSelected != "Not Applicable")
                            {
                                deviceNameIndesignChk.Add(item.ItemDeviceName);
                                deviceNameToNetPair.Add(item.ItemNetPairingSelected);
                            }
                        }
                    }
                }

                if (deviceNameIndesignChk.Count > 0)
                {                   
                    if (core_New_FirmwareVersion.Item1)
                        Set_Dynamic_Pairing_new(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);
                    else
                        Set_Dynamic_Pairing(selectedCoreIPAddress, deviceNameIndesignChk, deviceNameToNetPair);

                    DeviceDiscovery.WriteToLogFile("Dynamic paring successfully applied");
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15026", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public bool Set_Dynamic_Pairing(string lanA_ip, List<string> primaryName, List<string> netPairingDeviceName)
        {
            try
            {
                QPD = new QsysPairingData();
                XmlReadToGetDesignCode();
                get_PairingConfig(lanA_ip, ref QPD);

                StringBuilder sb = new StringBuilder();

                sb.Append("<inventory>" +
                "<device pairing=\"" + QPD.CorePairingData.Pairing + "\"" +
                " primary=\"" + QPD.CorePairingData.Primary + "\"" +
                " backup=\"" + QPD.CorePairingData.Backup + "\" />");

                if (QPD.PeriphPairingData != null)
                {
                    for (int i = 0; i < QPD.PeriphPairingData.Length; i++)
                    {
                        if (primaryName.Contains(QPD.PeriphPairingData[i].Primary) && QPD.PeriphPairingData[i].Pairing == "dynamic")
                        {
                            int matchIndex = primaryName.IndexOf(QPD.PeriphPairingData[i].Primary);
                            //QPD.PeriphPairingData[i].Pairing = "dynamic";
                            QPD.PeriphPairingData[i].Dynamic_Mode = eQsysPairingMode.name;
                            QPD.PeriphPairingData[i].Dynamic_Primary = netPairingDeviceName[matchIndex];
                        }

                        sb.Append(" <device part_number=\"" + QPD.PeriphPairingData[i].Part_Number + "\"" +
                    " pairing=\"" + QPD.PeriphPairingData[i].Pairing + "\"" +
                    " primary=\"" + QPD.PeriphPairingData[i].Primary + "\"" +
                    " backup=\"" + QPD.PeriphPairingData[i].Backup + "\"" +
                    " type=\"" + QPD.PeriphPairingData[i].Device_Type + "\"" +
                    " dynamic_mode=\"" + QPD.PeriphPairingData[i].Dynamic_Mode + "\"" +
                    " dynamic_primary=\"" + QPD.PeriphPairingData[i].Dynamic_Primary + "\"" +
                    " dynamic_backup=\"" + QPD.PeriphPairingData[i].Dynamic_Backup + "\" />");
                    }
                }

                sb.Append("</inventory>");

                string strNetworkConfig = sb.ToString();

                string strXMLData = "";

                if (lanA_ip != string.Empty & HttpPut("http://" + lanA_ip + "/cgi-bin/settings_put?m_password=" + "" + "&design_code=" + designCode_UsingIP
                    + "&file=settings/device_pairing.xml", strNetworkConfig, out strXMLData))
                {
                }

                return true;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15027", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                DeviceDiscovery.WriteToLogFile("Dynamic paring failed");
                return false;
            }
        }

        public bool get_PairingConfig(string strIP, ref QsysPairingData QPD)
        {
            try
            {
                string[] strChildElement = new string[] { "device" };

                string[] strAttributeFields = new string[] { "part_number", "pairing", "primary", "backup", "type", "dynamic_mode", "dynamic_backup", "dynamic_primary" };

                string[][] strDeviceData;

                if (strIP != string.Empty & parse_XML_attribute("http://" + strIP + "/designs/current_design/settings/device_pairing.xml", strChildElement, strAttributeFields, out strDeviceData))
                {
                    QPD = new QsysPairingData();

                    QPD.CorePairingData.Primary = strDeviceData[0][Array.IndexOf(strAttributeFields, "primary")];
                    QPD.CorePairingData.Backup = strDeviceData[0][Array.IndexOf(strAttributeFields, "backup")];
                    QPD.CorePairingData.Pairing = strDeviceData[0][Array.IndexOf(strAttributeFields, "pairing")];

                    QPD.PeriphPairingData = new PairingData[strDeviceData.Length - 1];

                    for (int i = 1; i < strDeviceData.Length; i++)
                    {
                        QPD.PeriphPairingData[i - 1].Device_Type = strDeviceData[i][Array.IndexOf(strAttributeFields, "type")];
                        QPD.PeriphPairingData[i - 1].Part_Number = strDeviceData[i][Array.IndexOf(strAttributeFields, "part_number")];
                        QPD.PeriphPairingData[i - 1].Primary = strDeviceData[i][Array.IndexOf(strAttributeFields, "primary")];
                        QPD.PeriphPairingData[i - 1].Backup = strDeviceData[i][Array.IndexOf(strAttributeFields, "backup")];
                        QPD.PeriphPairingData[i - 1].Pairing = strDeviceData[i][Array.IndexOf(strAttributeFields, "pairing")];
                        QPD.PeriphPairingData[i - 1].Dynamic_Mode = assign_QsysPairingMode(strDeviceData[i][Array.IndexOf(strAttributeFields, "dynamic_mode")]);
                        QPD.PeriphPairingData[i - 1].Dynamic_Backup = strDeviceData[i][Array.IndexOf(strAttributeFields, "dynamic_backup")];
                        QPD.PeriphPairingData[i - 1].Dynamic_Primary = strDeviceData[i][Array.IndexOf(strAttributeFields, "dynamic_primary")];
                    }

                    return true;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15030", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return false;
        }
		
        public bool Set_Dynamic_Pairing_new(string strIP, List<string> primaryName, List<string> netPairingDeviceName)
        {
            try
            {
                // read response for devicepairing
                string token = CoreLogonToken;
                string response = string.Empty;
                var result = HttpGet_json("http://" + strIP + "/api/v0/systems/1/device_pairing", CoreLogonToken, strIP, applicationPassword, string.Empty, out response);

                if(result.Item1 == false && response == "503" && isBackupCoreAvailable == true && backup_selectedCoreIPAddress!= null && backup_selectedCoreIPAddress!= string.Empty)
                {
                  string redundancy_state =  XmlReadToGetRedundancyState();                    
                  if(redundancy_state == "Standby")
                     result = HttpGet_json("http://" + backup_selectedCoreIPAddress + "/api/v0/systems/1/device_pairing", CoreLogonToken_Backup, backup_selectedCoreIPAddress, applicationPassword,string.Empty, out response);

                    if (result.Item1 == true)
                    {
                        strIP = backup_selectedCoreIPAddress;
						/////If backup core response available, assign CoreLogonToken_Backup in token for further use
                        token = CoreLogonToken_Backup;
                    }
                }

                if (response == string.Empty)
                    return false;

                //change devices name to pair
                dynamic array = new JavaScriptSerializer().DeserializeObject(response);
                if (array.Length > 0)
                {
                    List<object> updatestring = new List<object>();
                    foreach (var item in array)
                    {
                        foreach (string devicename in primaryName)
                        {
                            if (String.Equals(devicename, item["name"], StringComparison.CurrentCultureIgnoreCase))
                            {
                                int index = primaryName.IndexOf(devicename);
                                if (netPairingDeviceName[index] == "None")
                                {                                   
                                    item["devicePairing"]["mode"] = "none";
                                }
                                else
                                {
                                    item["devicePairing"]["primary"] = netPairingDeviceName[index];
                                    item["devicePairing"]["mode"] = "name";
                                }
                            }
                        }
                        object devicepairdetails = item["devicePairing"];
                        updatestring.Add(devicepairdetails);
                    }
                    //converts to json string
                    string strParameters = new JavaScriptSerializer().Serialize(updatestring);

                    // put json string 
                    string strresponse = string.Empty;
                    string newToken = string.Empty;
                    var putresult = HttpPut_json(@"http://" + strIP + "/api/v0/systems/1/device_pairing", strParameters, token, strIP, applicationPassword, out strresponse, out newToken);
                  
                    if (putresult.Item1)
                        return true;
                }                
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15027", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                DeviceDiscovery.WriteToLogFile("Dynamic paring failed");
              
            }
            return false;
        }

        public void XmlReadToGetDesignCode()
        {
            try
            {
                XmlDocument xml = new XmlDocument();
                if(selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignCode");
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignCode");
                    }

                    if (xml == null)
                        return;

                    XmlNode node = xml.SelectSingleNode("status/design/code_name");
                    designCode_UsingIP = node.InnerText;
                }
                   
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15028", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public string XmlReadToGetRedundancyState()
        {
            try
            {
                string redundancy_state = string.Empty;
                XmlDocument xml = new XmlDocument();
                if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetRedundancyState");
                    if (xml == null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetRedundancyState");
                    }

                    if (xml == null)
                        return string.Empty;

                    XmlNode node = xml.SelectSingleNode("status/design/redundancy_state");
                    redundancy_state = node.InnerText;
                }
                return redundancy_state;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }
        }

        public bool HttpPut(string strURI, string strParameters, out string strResponse)
        {
            bool Check = false;
            Int32 RetryCount = 0;
            strResponse = "";
            try
            {
                while (RetryCount < 5)
                {

                    Check = HttpPutactual(strURI, strParameters, out strResponse);
                    if (Check)
                    {
                        break;
                    }
                    RetryCount++;
                    //Thread.Sleep(2000);
                };
                return Check;
            }


            catch (Exception ex)
            {
                return Check;
            }
        }
        public Tuple<bool, bool, string> HttpPost_json(string strURI, string strParameters, out string strResponse)
        {
            Tuple<bool, bool,string> Check = new Tuple<bool, bool,string>(false, false,string.Empty);
            Int32 RetryCount = 0;
            strResponse = "";

            try
            {
                while (RetryCount < 5)
                {
                    Check = HttpPostactual_json(strURI, strParameters, string.Empty, "POST", out strResponse);                                     

                    if (Check.Item1 || Check.Item3=="404" || Check.Item3 == "403")
                    {
                        break;
                    }

                    RetryCount++;             
                };
                return Check;
            }

            catch (Exception ex)
            {
                return Check;
            }


        }
        public Tuple<bool, bool,string> HttpPostactual_json(string strURI, string strParameters, string coreLogonTokenKey, string methodName, out string strResponse)
        {
            bool msg = false;
            strResponse = string.Empty;
            bool success = false;
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            try
            {                      
                req.Timeout = 15000;
                req.ReadWriteTimeout = 15000;
                req.ContentType = "application/json";
                req.Method = methodName;
                if (coreLogonTokenKey != string.Empty)
                    req.Headers["Authorization"] = "Bearer " + coreLogonTokenKey;

                Byte[] retBytes = System.Text.Encoding.ASCII.GetBytes(strParameters);
                req.ContentLength = retBytes.Length;              

                using (System.IO.Stream outStream = req.GetRequestStream())
                {
                    outStream.Write(retBytes, 0, retBytes.Length);
                    outStream.Close();
                }
                using (HttpWebResponse resp =(HttpWebResponse)req.GetResponse())
                {
                    success = HttpStatusCodeCheck(resp, "POST", out strResponse);                    
                }
				
                req.Abort();
                return new Tuple<bool, bool,string>(success,msg,string.Empty);            
            }
            catch (Exception ex)
            {             
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strResponse = "";

              
                string errorMsg = string.Empty;
                if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                {
                    msg = true;
                }

                if(ex.Message== "The remote server returned an error: (404) Not Found.")
                {
                    errorMsg = "404";
                }
              
                if (ex.Message == "The remote server returned an error: (403) Forbidden.")
                {
                    msg = true;
                    errorMsg = "403";
                }
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    errorMsg = "401";
                }
                req.Abort();
                return new Tuple<bool, bool,string>(success, msg, errorMsg);
            }
        }

        public Tuple<bool, bool> HttpPut_json(string strURI, string strParameters, string token, string ipaddress, string password, out string strResponse, out string newToken)
        {
            Tuple<bool, bool> Check = new Tuple<bool, bool>(false, false);
            Int32 RetryCount = 0;
            strResponse = "";
            newToken = string.Empty;

            try
            {
                while (RetryCount < 5)
                {
                    Check = HttpPutactual_json(strURI, strParameters, token, out strResponse);
                    ////if unathourized received in response, Retry with new CoreLogonToken for the first time  
                    if ((RetryCount == 0) && (strResponse == "401"))
                    {
                        var isLogonSuccess = Corelogon(ipaddress, password, out newToken);
                        //////If logon success ip new token assigned to global variables based on ipaddress
                        if (ipaddress == selectedCoreIPAddress)
                            CoreLogonToken = newToken;
                        else if (ipaddress == backup_selectedCoreIPAddress)
                            CoreLogonToken_Backup = newToken;


                        Check = HttpPutactual_json(strURI, strParameters, newToken, out strResponse);
                    }

                    if ((Check.Item1) || (strResponse == "401"))
                    {
                        break;
                    }

                    RetryCount++;                    
                };

                return Check;
            }
            catch (Exception ex)
            {
                return Check;
            }
        }

        public Tuple<bool, bool> HttpPutactual_json(string strURI, string strParameters, string token, out string strResponse)
        {
            bool msg = false;
            strResponse = string.Empty;
            bool success = false;
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            try
            {
                req.ContentType = "application/json";
                req.Method = "PUT";
                req.Timeout = 15000;
                req.ReadWriteTimeout = 15000;
                req.Accept = "application/json";

                Byte[] retBytes = System.Text.Encoding.ASCII.GetBytes(strParameters);
                req.ContentLength = retBytes.Length;
                if (token != string.Empty)
                    req.Headers["Authorization"] = "Bearer " + token;

                using (System.IO.Stream outStream = req.GetRequestStream())
                {
                    outStream.Write(retBytes, 0, retBytes.Length);
                }
                using (HttpWebResponse resp = (HttpWebResponse)req.GetResponse())
                {
                    success = HttpStatusCodeCheck(resp, "PUT", out strResponse);                   
                }
                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strResponse = "";               
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    strResponse = "401";
                }
                else if (ex.Message == "Unable to connect to the remote server" || ex.Message == "The operation has timed out")
                {
                    msg = true;
                }
                req.Abort();
                return new Tuple<bool, bool>(success, msg);
            }
        }
        public bool HttpPutactual(string strURI, string strParameters, out string strResponse)
        {
            System.Net.HttpWebRequest req = (HttpWebRequest)System.Net.WebRequest.Create(strURI);
            try
            {
                req.ContentType = "application/x-www-form-urlencoded";
                req.Method = "PUT";
                req.Timeout = 15000;
                req.ReadWriteTimeout = 5000;

                Byte[] retBytes = System.Text.Encoding.ASCII.GetBytes(strParameters);
                req.ContentLength = retBytes.Length;

                // Need to setup Authentication Header.
                SetBasicAuthHeader(ref req, "Guest", "");

                using (System.IO.Stream outStream = req.GetRequestStream())
                {
                    outStream.Write(retBytes, 0, retBytes.Length);
                    //outStream.Close();
                }

                using (System.Net.WebResponse resp = req.GetResponse())
                {
                    if (resp == null)
                    {
                        strResponse = "";
                        return false;
                    }

                    using (System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream()))
                    {
                        strResponse = sr.ReadToEnd().Trim();
                        //sr.Close();
                        //resp.Close();
                        req.Abort();
                        return true;
                    }
                }
            }
            //catch (WebException e)
            //{
            //    if (e.Status == WebExceptionStatus.Timeout)
            //    {
            //        DeviceDiscovery.WriteToLogFile("No Response from core Due to Timeout in HTTP Put " + e.ToString());

            //    }
            //    else
            //    {
            //        DeviceDiscovery.WriteToLogFile("No Response from core Due to WebException in HTTP Put" + e.ToString());
            //    }
            //    strResponse = "";
            //    return false;

            //}
            catch (Exception ex)
            {
                //Debug.WriteLine("Error in Web_RW.HttpPut: no response from " + strURI.ToString() + "\n\r" + ex.ToString());
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strResponse = "";
                req.Abort();
                return false;
            }
        }
        private void SetBasicAuthHeader(ref HttpWebRequest req, string username, string password)
        {
            // Want to check for null arguments.
            if (username == null)
            {
                username = String.Empty;
            }

            if (password == null)
            {
                password = String.Empty;
            }

            if (req == null)
            {
                // Nothing to do here...    ** LOG THIS LATER **
                //Debug.WriteLine("Web_RW.SetBasicAuthHeader: HttpWebRequest parameter object is null!");
            }

            string strAuth = username + ":" + password;

            try
            {
                strAuth = Convert.ToBase64String(Encoding.Default.GetBytes(strAuth));
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15029", MessageBoxButton.OK, MessageBoxImage.Error);
                // Output to debug, but then do nothing.  ** LOG THIS LATER **
                //Debug.WriteLine("Web_RW.SetBasicAuthHeader: " + ex.Message);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            req.Headers["Authorization"] = "Basic " + strAuth;
        }



        public eQsysPairingMode assign_QsysPairingMode(string strAssign)
        {
            eQsysPairingMode eQPM = eQsysPairingMode.none;

            try
            {
                switch (strAssign)
                {
                    case "name":
                        eQPM = eQsysPairingMode.name;
                        break;
                    case "port":
                        eQPM = eQsysPairingMode.port;
                        break;
                    default:
                        eQPM = eQsysPairingMode.none;
                        break;
                }
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    ExecutionMessageBox("Exception\n " + ex.Message, "Error Code - EC15031", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

            return eQPM;
        }

      

        public bool parse_XML_attribute(string strXML, string[] strSearchElements, string[] strSearchAttributes, out string[][] strParsed)
        {
            try
            {
                XmlDocument xDoc = new XmlDocument();
                xDoc = DeviceDiscovery.XmlLoadUsingHttp(strXML, "parse_XML_attribute");

                if (xDoc == null)
                {
                    strParsed = null;
                    return false;
                }

                XmlNodeList[] xNodList = new XmlNodeList[strSearchElements.Length];
                for (int i = 0; i < strSearchElements.Length; i++)
                {
                    if (xDoc.GetElementsByTagName(strSearchElements[i]) != null)
                    {
                        xNodList[i] = xDoc.GetElementsByTagName(strSearchElements[i]);
                    }
                }

                strParsed = new string[xNodList[0].Count][];
                for (int i = 0; i < xNodList[0].Count; i++)
                {
                    string[] strAttrItem = new string[strSearchAttributes.Length];
                    for (int j = 0; j < strSearchAttributes.Length; j++)
                    {
                        if (xNodList[0].Item(i) != null && xNodList[0].Item(i).Attributes[strSearchAttributes[j]] != null)
                        {
                            strAttrItem[j] = xNodList[0].Item(i).Attributes[strSearchAttributes[j]].Value.ToString();
                        }
                        else
                        {
                            strAttrItem[j] = "";
                        }
                        strParsed[i] = strAttrItem;
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                //Debug.WriteLine("Error gathering attributes from " + strXML + "\n\r" + e.ToString());
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                strParsed = null;
                return false;
            }
        }

        private List<string> GetAllIpForFirmwareVerification(string designName)
        {
            try
            {
                List<string> temp = new List<string>();
                List<string> deviceName = new List<string>();
                string query = "select * from DesignInventory where DesignID in(select DesignID from designtable where Designname =(@designName))";
                //DataTable tble = QscDatabase.SendCommand_Toreceive(query);
                //this.connect.OpenConnection();
                System.Data.DataTable tble = QscDatabase.SelectDTWithParameter(query, "@designName", designName);
                //this.connect.CloseConnection();

                DataTableReader read = tble.CreateDataReader();
                while (read.Read())
                {
                    deviceName.Add(read[3].ToString());
                }

                foreach (string finddeviceip in deviceName)
                {
                    foreach (DUT_DeviceItem item in selectedDutDeviceItemList)
                    {
                        if (String.Equals(item.ItemDeviceName, finddeviceip, StringComparison.CurrentCultureIgnoreCase))
                        {
                            if ((!item.ItemDeviceType.Contains("Core")) && (!item.ItemDeviceType.ToUpper().Contains("CAMERA")))
                            { 
                                if (item.ItemDeviceName.Equals(finddeviceip))
                                    {
                                     if ((item.ItemPrimaryIPSelected != null) && (item.ItemPrimaryIPSelected != string.Empty) && (item.ItemPrimaryIPSelected != "Not Applicable"))
                                        {
                                                 //if (!temp.Contains(item.ItemPrimaryIPSelected))
                                            temp.Add(item.ItemPrimaryIPSelected);

                                          }
                                     else if ((item.ItemSecondaryIPSelected != null) && (item.ItemSecondaryIPSelected != string.Empty) && (item.ItemSecondaryIPSelected != "Not Applicable"))
                                        {
                                         //if (!temp.Contains(item.ItemSecondaryIPSelected))
                                          temp.Add(item.ItemSecondaryIPSelected);
                                         }

                                    }
                             }
                        }
                    }
                }

                DeviceDiscovery.WriteToLogFile("All devices IP retrieved successfully .... ");
                return temp;
            }
            catch (Exception ex)
            {
                //if (ex.Message != "Thread was being aborted.")
                //    MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                DeviceDiscovery.WriteToLogFile("All devices IP not retrieved successfully .... ");
                return null;
            }

        }
       
        public string get_FirmwareLoadState(string strIP)
        {
            string strReponse = string.Empty;
            try
            {
                XmlDocument xml = new XmlDocument();
                if(strIP != string.Empty & strIP != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + strIP + "/fw_status.xml", "get_FirmwareLoadState");
                    Thread.Sleep(5000);
                    if (xml == null)
                        return string.Empty;

                    XmlNode node = xml.SelectSingleNode("status/state");
                    strReponse = node.InnerText;
                }
                    
                return strReponse;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Invalid Username or Password");
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Exception during Firmware status fetching");
                }
                return string.Empty;
            }
        }

        public string XmlReadToGetDesignversion(string strIP)
        {
            string currentVersion = string.Empty;
            try
            {
                XmlDocument xml = new XmlDocument();
                if(strIP != string.Empty & strIP != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + strIP + "//cgi-bin/status_xml", "XmlReadToGetDesignversion");
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + strIP + "/cgi-bin/status_xml", "XmlReadToGetDesignversion");
                    }
					
                    if (xml == null)
                        return string.Empty;

                    XmlNode node = xml.SelectSingleNode("status/firmware_version");
                    currentVersion = node.InnerText;
                    DeviceDiscovery.WriteToLogFile("device IP:" + strIP + ",version:" + currentVersion + " ");
                }
                return currentVersion;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Invalid Username or Password");
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Exception during Firmware Version fetching");
                }
                DeviceDiscovery.WriteToLogFile("device version not retrieved ");
                return string.Empty;
            }
        }

        public string XmlReadToGetDeviceName(string strIP)
        {
            string deviceName = string.Empty;
            try
            {
                XmlDocument xml = new XmlDocument();
                if (strIP != string.Empty & strIP != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + strIP + "//cgi-bin/status_xml", "XmlReadToGetDesignversion");//device_name
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + strIP + "/cgi-bin/status_xml", "XmlReadToGetDesignversion");//device_name
                    }

                    if (xml == null)
                        return string.Empty;

                    XmlNode node = xml.SelectSingleNode("status/device_name");
                    deviceName = node.InnerText;
                    DeviceDiscovery.WriteToLogFile("device IP:" + strIP + ",DeviceName:" + deviceName + " ");
                }
                  
                return deviceName;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Invalid Username or Password");
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Exception during device_name fetching");
                }
                DeviceDiscovery.WriteToLogFile("device_name not retrieved ");
                return string.Empty;
            }
        }

        public void XmlReadToGetDesignNameandDesignStatus()
        {
            //Check for Redeployement status
            try
            {
                XmlDocument xml = new XmlDocument();
                if(selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");
                    }
					
                    if (xml != null)
                    {
                        XmlNode node = xml.SelectSingleNode("status/design/pretty_name");
                        if (node != null)
                            mstrDesignName = node.InnerText;
                        DeviceDiscovery.WriteToLogFile("device IP:" + selectedCoreIPAddress + ",Design Name:" + mstrDesignName + " ");
                        node = xml.SelectSingleNode("status/design/state_pretty");
                        if (node != null)
                            mstrDesignStatus = node.InnerText;
                        DeviceDiscovery.WriteToLogFile("device IP:" + selectedCoreIPAddress + ",Design Status:" + mstrDesignStatus + " ");
                    }
                    
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Invalid Username or Password");
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Exception during Firmware Version fetching");
                }

                DeviceDiscovery.WriteToLogFile("device version not retrieved ");
            }
        }
		
        public Dictionary<string, string> XmlReadToGetAllStatus()
        {
            Dictionary<string, string> collect_status = new Dictionary<string, string>();
            //Check for Redeployement status
            try
            {
                XmlDocument xml = null;
                if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");

                    if (xml == null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");
                    }

                    if (xml != null)
                    {
                        XmlNode node = xml.SelectSingleNode("status/design/pretty_name");
                        if (node != null)
                            collect_status.Add("Design_Name",node.InnerText);
                        //DeviceDiscovery.WriteToLogFile("device IP:" + selectedCoreIPAddress + ",Design Name:" + mstrDesignName + " ");
                        node = xml.SelectSingleNode("status/design/state_pretty");
                        if (node != null)
                            collect_status.Add("Status", node.InnerText);
                        node = xml.SelectSingleNode("status/firmware_version");
                        if (node != null)
                            collect_status.Add("Version", node.InnerText);
                        node = xml.SelectSingleNode("status/design/code_name");
                        if (node != null)
                            collect_status.Add("Designcode", node.InnerText);
                        node = xml.SelectSingleNode("status/device_name");
                        if (node != null)
                            collect_status.Add("Device_name", node.InnerText);
                        node = xml.SelectSingleNode("status/design/redundancy_state");
                        if (node != null)
                            collect_status.Add("Redundant_status", node.InnerText);
                        //DeviceDiscovery.WriteToLogFile("device IP:" + selectedCoreIPAddress + ",Design Status:" + mstrDesignStatus + " ");
                    }
                }

                return collect_status;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                return collect_status = null;
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }
		
        public string XmlReadToGetDesignName()
        {
            string designName = string.Empty;
            //Check for Redeployement status
            try
            {
                XmlDocument xml = new XmlDocument();
                if (selectedCoreIPAddress != string.Empty & selectedCoreIPAddress != "Not Applicable")
                {
                    xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "//cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");
                    if(xml==null)
                    {
                        xml = DeviceDiscovery.XmlLoadUsingHttp("http://" + selectedCoreIPAddress + "/cgi-bin/status_xml", "XmlReadToGetDesignNameandDesignStatus");
                    }
					
                    if (xml != null)
                    {
                        XmlNode node = xml.SelectSingleNode("status/design/pretty_name");
                        if (node != null)
                            designName = node.InnerText;
                        DeviceDiscovery.WriteToLogFile("device IP:" + selectedCoreIPAddress + ",Design Name:" + designName + " ");
                    }

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                if (ex.Message.Contains("The remote server returned an error: (401) Unauthorized"))
                {
                    DeviceDiscovery.WriteToLogFile("Invalid Username or Password");
                }
                else
                {
                    DeviceDiscovery.WriteToLogFile("Exception during Firmware Version fetching");
                }

                DeviceDiscovery.WriteToLogFile("device version not retrieved ");

                
            }
            return designName;
        }

        private Double LinearInterploation(Double start_x, Double start_y, Double end_x, Double end_y, Double input_x)
        {
            Double input_y = 0.0;

            try
            {

                input_y = start_y + (end_y - start_y) * (input_x - start_x) / (end_x - start_x);

                return input_y;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return input_y;
            }
        }

        private double[,] CalculateExpectedValues(double[,] actual, double[,] reference)
        {
            Double[,] expectedValues = new double[actual.Length / 2, 2];

            try
            {
                if (reference.Length / 2 < 2)
                    return expectedValues;

                for (int i = 0; i < actual.Length / 2; i++)
                {
                    Double start_x = reference[0, 0];
                    Double end_x = reference[0, 1];
                    Double start_y = reference[1, 0];
                    Double end_y = reference[1, 1];

                    for (int j = 1; j < reference.Length / 2; j++)
                    {
                        start_x = reference[j - 1, 0];
                        start_y = reference[j - 1, 1];
                        end_x = reference[j, 0];
                        end_y = reference[j, 1];
                        if (actual[i, 0] < reference[j, 0])
                            break;
                    }

                    expectedValues[i, 0] = actual[i, 0];
                    expectedValues[i, 1] = LinearInterploation(start_x, start_y, end_x, end_y, actual[i, 0]);
                }

                return expectedValues;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

                return expectedValues;
            }

        }
        public bool VerifyAPResults(Double[,] actValue, Double[,] refLowerValue, Double[,] refUpperValue, Int32 exid, string testsuitename, string testplanname, string testCasename, string testActionname, string measurementname, Int32 CaseExecutionUniqueID, Int32 ActionTabCaseAlogPlanExecutionUniqueID, Int32 SuiteExecutionUniqueID, int ChCnt)
        {
            try
            {
                string starttime = DateTime.Now.ToString();
                Double[,] actualList = actValue;
                Double[,] referenceLowerList = refLowerValue;
                Double[,] referenceUpperList = refUpperValue;

                Double[,] expectedLowerList = CalculateExpectedValues(actualList, referenceLowerList);
                Double[,] expectedUpperList = CalculateExpectedValues(actualList, referenceUpperList);

                bool compareLowerResult = true;
                bool compareUpperResult = true;
                Double[,] compareFaildActualValue = new Double[1, 2];
                Double[,] compareFaildExpectedValue = new Double[1, 2];

                for (int i = 0; i < actualList.Length / 2; i++)
                {
                    if (actualList[i, 1] < expectedLowerList[i, 1])
                    {
                        compareLowerResult = false;

                        compareFaildActualValue[0, 0] = actualList[i, 0];
                        compareFaildActualValue[0, 1] = actualList[i, 1];

                        compareFaildExpectedValue[0, 0] = expectedLowerList[i, 0];
                        compareFaildExpectedValue[0, 1] = expectedLowerList[i, 1];
                        break;
                    }

                    if (actualList[i, 1] > expectedUpperList[i, 1])
                    {
                        compareUpperResult = false;

                        compareFaildActualValue[0, 0] = actualList[i, 0];
                        compareFaildActualValue[0, 1] = actualList[i, 1];

                        compareFaildExpectedValue[0, 0] = expectedUpperList[i, 0];
                        compareFaildExpectedValue[0, 1] = expectedUpperList[i, 1];
                        break;
                    }
                }

                if (!compareLowerResult)
                {
                    Console.Write("Failed Lower Limit. Actual Value: {0}, {1}. Expected Value: {2}, {3}.", compareFaildActualValue[0, 0], compareFaildActualValue[0, 1], compareFaildExpectedValue[0, 0], compareFaildExpectedValue[0, 1]);

                    string actualvalue ="X= "+ compareFaildActualValue[0, 0]+", Y= "+ compareFaildActualValue[0, 1];
                    string expectedvalue = "X= " + compareFaildExpectedValue[0, 0] + ", Y= " + compareFaildExpectedValue[0, 1];

                    string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification : " + measurementname + " Channel " + ChCnt + "','Failed in lower limit','" + expectedvalue + "','" + actualvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    return false;
                }
                if (!compareUpperResult)
                {
                    Console.Write("Failed Upper Limit. Actual Value: {0}, {1}. Expected Value: {2}, {3}.", compareFaildActualValue[0, 0], compareFaildActualValue[0, 1], compareFaildExpectedValue[0, 0], compareFaildExpectedValue[0, 1]);

                    string actualvalue = "X= " + compareFaildActualValue[0, 0] + ", Y= " + compareFaildActualValue[0, 1];
                    string expectedvalue = "X= " + compareFaildExpectedValue[0, 0] + ", Y= " + compareFaildExpectedValue[0, 1];

                    string query = "Insert into TempTestCaseActionTabTable values('" + exid + "','Fail',@TSName, @TPName, @TCName,@TAName,'" + starttime + "','" + DateTime.Now.ToString() + "','" + string.Empty + "','APx Verification : " + measurementname + " Channel " + ChCnt + "','Failed in upper limit','" + expectedvalue + "','" + actualvalue + "','" + CaseExecutionUniqueID + "','" + ActionTabCaseAlogPlanExecutionUniqueID + "','" + SuiteExecutionUniqueID + "','')";
                    tble = report_connection.Report_SendCommand_Toreceive(query, "@TSName", testsuitename, "@TPName", testplanname, "@TCName", testCasename, "@TAName", testActionname, string.Empty, string.Empty, string.Empty, string.Empty);
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15001", MessageBoxButton.OK, MessageBoxImage.Error);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool checkprocess(Process example)
        {
            try
            {
                if (!example.HasExited)
                    return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
            return false;
        }
    }

    class FastWebClient : WebClient
    {
        // default to 1.5 seconds
        public static readonly int DefaultTimeout = 15000;
        public FastWebClient()
        {
            Timeout = DefaultTimeout;
        }
        public int Timeout { get; set; }
        protected override WebRequest GetWebRequest(Uri address)
        {
            try
            {
                HttpWebRequest request = (HttpWebRequest)base.GetWebRequest(address);
                request.PreAuthenticate = true;
                request.AllowWriteStreamBuffering = false;
                HttpWebRequest httpRequest = request as HttpWebRequest;
                if (httpRequest != null)
                {
                    httpRequest.Timeout = Timeout;
                }

                return request;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return null;
            }
        }
    }

    public class jsonReadControls
    {
        public jsonReadControlValue result { get; set; }
    }

    public class jsonReadControlList
    {
        public List<jsonReadControlValue> result { get; set; }
        public object error { get; set; }
    }

    public class jsonReadControlValue
    {
        public string Name { get; set; }
        public string String { get; set; }
        public string Value { get; set; }
        public string Position { get; set; }
    }

    public class jsonReadInventoryList
    {
        public List<jsonReadInventoryValue> result { get; set; }
    }

    public class jsonReadInventoryValue
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public string Model { get; set; }
        public string Location { get; set; }
        public StatusCheck Status { get; set; }
        public RedundancyValue Redundancy { get; set; }
    }

    public class StatusCheck
    {
        public string Message { get; set; }
        public string Code { get; set; }
    }

    public class RedundancyValue
    {
        public string PrimaryName { get; set; }
        public string BackupName { get; set; }
    }
}
