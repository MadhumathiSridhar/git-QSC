namespace QSC_Test_Automation
{
    using Microsoft.Win32;
    using QRAPI;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Data;
    using System.Windows.Documents;
    using System.Windows.Input;
    using System.Windows.Media;
    using System.Xml;
    using System.Net;
    using DUT_QSys;
    using System.Windows.Media.Imaging;
    using AudioPrecision.API;
    //using QSC_Test_Automation.AP;
    using System.Media;
    using System.Windows.Interop;
    using System.ComponentModel;
    using System.Windows.Controls.Primitives;
    using System.Runtime.InteropServices;
    using System.Collections.ObjectModel;
    using System.Web;
    using System.IO.Compression;
    using System.Windows.Threading;
    using System.Web.Script.Serialization;
    using System.Xml.Linq;

    /// <summary>
    /// Interaction logic for Test_Action.xaml
    /// </summary>
    public partial class Test_Designer : Window, INotifyPropertyChanged
    {
        DBConnection QscDatabase = new DBConnection();

        ObservableCollection<TreeViewExplorer> treeViewExplorerDesignerList = new ObservableCollection<TreeViewExplorer>();
        ObservableCollection<TreeViewExplorer> treeViewExplorerSearchList = new ObservableCollection<TreeViewExplorer>();
        ObservableCollection<TreeViewExplorer> treeViewExplorerFilterList = new ObservableCollection<TreeViewExplorer>();
        ObservableCollection<TreeViewExplorer> treeViewExplorerCategoryList = new ObservableCollection<TreeViewExplorer>();
        ObservableCollection<TreeViewExplorer> treeViewExplorerCategorySearchList = new ObservableCollection<TreeViewExplorer>();
        ObservableCollection<TreeViewExplorer> treeViewExplorerCategoryFilterList = new ObservableCollection<TreeViewExplorer>();


       
        Dictionary<string,int> categoryList = new Dictionary<string, int>(StringComparer.CurrentCultureIgnoreCase);
        Dictionary<string, int> createdByList = new Dictionary<string, int>(StringComparer.CurrentCultureIgnoreCase) ;
        Dictionary<string, int> modifiedByList = new Dictionary<string, int>(StringComparer.CurrentCultureIgnoreCase);

        List<TreeViewExplorer> selectedItemsDesigner = new List<TreeViewExplorer>();
        public List<TreeViewExplorer> copiedItemsDesigner = new List<TreeViewExplorer>();


        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool GetCursorPos(ref Win32Point pt);

        [StructLayout(LayoutKind.Sequential)]
        internal struct Win32Point
        {
            public Int32 X;
            public Int32 Y;
        };


        string copiedItemType = null;
        bool isDesignerSearchListSelected = false;
        bool isDesignerFilterListSelected = false;
        public bool isRenameModeEnabled = false;

        bool skipMouseReleaseButton = false;

        string IsScrolltoEnd = string.Empty;

        Process qDesignProcess;
        ProcessStartInfo qDesignArgs = new ProcessStartInfo();

        public string getoup;
        public string getouptype;
        public bool send_status = false;
        public bool msgbox_status = false;
        public string mstrOrders = string.Empty;

        public string mstrOrders_originalList = string.Empty;
        public string mstrOrders_filter = string.Empty;
       
        int ListviewTSCount = 0;
        int ListviewTPCount = 0;

        public ContinousBackgroundMonitoring Action_Window = null;

        public DateTime time;

        public event PropertyChangedEventHandler PropertyChanged;

        ObservableCollection<Object> DesignerTabList = new ObservableCollection<Object>();
        TreeViewExplorer designerTreeContextMenuSource = null;

        QatMessageBox QMessageBox = null;

        public bool isGroupByCategory = false;

        public void OnPropertyChanged(string property)
        {
            try
            {
                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs(property));
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC18001", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public Test_Designer()
        {
                            
            this.InitializeComponent();
            this.DataContext = this;
            DeviceDiscovery.Update_QRCMVersionList();
            //MessageBox.Show(Properties.Settings.Default.QRCMServerName);
            // use a timer to periodically update the memory usage
#if DEBUG
            DispatcherTimer timer = new DispatcherTimer();
            timer.Interval = new TimeSpan(0, 0, 1);
            timer.Tick += timer_Tick;
            timer.Start();
#endif
        }
#if DEBUG
        private void timer_Tick(object sender, EventArgs e)
        {
            MemoryValueSelection = string.Format("MemoryUsage:{0:0.00} MB", GC.GetTotalMemory(true) / 1024.0 / 1024.0);
        }
        private string memorySelectionValue = "Initial";
        public string MemoryValueSelection
        {
            get { return memorySelectionValue; }
            set { memorySelectionValue = value; OnPropertyChanged("MemoryValueSelection"); }
        }
#endif

        //private bool designerTreeContentValue = false;
        //public bool designerTreeContent
        //{
        //    get { return designerTreeContentValue; }
        //    set { designerTreeContentValue = value; OnPropertyChanged("designerTreeContent"); }
        //}

        //private bool designerTreeDeferredValue = false;
        //public bool designerTreeDeferred
        //{
        //    get { return designerTreeDeferredValue; }
        //    set { designerTreeDeferredValue = value; OnPropertyChanged("designerTreeDeferred"); }
        //}

        //private bool designerTreeVirtualizationValue = true;
        //public bool designerTreeVirtualization
        //{
        //    get { return designerTreeVirtualizationValue; }
        //    set { designerTreeVirtualizationValue = value; OnPropertyChanged("designerTreeVirtualization"); }
        //}
        /// <summary>
        /// Initialy loaded the treeview
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TestAction_WindowLoaded(object sender, RoutedEventArgs e)
        {
            try
            {
                this.Title = this.Title + " ----->Connected Server :" + QatConstants.SelectedServer;
                //DeleteUnwantedTCInit();
                TCwithnoActioncount();
                TPwithnoActioncount();
                TSwithnoActioncount();

                SetupTreeViewDesignerFromDB(true, "Date Created Ascending");
                mstrOrders_originalList = mstrOrders;

                MenuAscending1.IsChecked = MenuAscending2.IsChecked = true;
                MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = true;

                MenuDecending1.IsChecked = MenuDecending2.IsChecked = false;
                MenudecendingName.IsChecked = descendingName.IsChecked = false;
                MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;


                SetupTreeViewSearch();
                SetupTreeViewFilter();

                tabControl.DataContext = DesignerTabList;
                if (DesignerTabList.Count == 0)
                {
                    TestBlankItem newBlankItem = new TestBlankItem();
                    AddTabToDesigner(newBlankItem, true);
                }

                if (txt_Search.Text == string.Empty)
                {
                    Cancelbutton.Visibility = Visibility.Hidden;
                }
                else
                {
                    Cancelbutton.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12001", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DeleteUnwantedTCInit()
        {
            try
            {
                string query = "Delete from TCInitialization where DesignID not in (select DesignID from TPDesignLinkTable)";
                SqlCommand cmd1 = new SqlCommand(query, QscDatabase.CreateConnection());
                SqlDataAdapter dataAdapt = new SqlDataAdapter(cmd1);
                DataTable tbl = new DataTable();
                dataAdapt.Fill(tbl);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void txt_Search_TextChanged(object sender, TextChangedEventArgs e)
        {
            string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
            try
            {
                if (txt_Search.Text == string.Empty)
                {
                    if (selectedItem == string.Empty || selectedItem == "Clear Filter" || (fromDatePicker.SelectedDate == null && toDatePicker.SelectedDate == null && (summaryTextBox.Text == null || summaryTextBox.Text == string.Empty) && comboSortValueSelection1.SelectedItem == null))
                    {
                        if (isGroupByCategory == false)
                        {
                           
                            sortinginDesignerList(treeViewExplorerDesignerList,true, mstrOrders);
                        }
                        else
                        {
                            
                            sortinginCategoryList(treeViewExplorerCategoryList, true, mstrOrders,"CategoryList");
                        }

                        copiedItemsDesigner.Clear();
                        isDesignerSearchListSelected = false;
                        mstrOrders_originalList = mstrOrders;
                    }
                    else
                    {
              
                        RefreshFilterItemCategory(true);

                      

                        isDesignerSearchListSelected = false;
                        copiedItemsDesigner.Clear();
                    }

                    Cancelbutton.Visibility = Visibility.Hidden;
                }
                else
                {
                    copiedItemsDesigner.Clear();
                    SearchTreeViewItem(true);
                    Cancelbutton.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12002", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Lv_ExecutionInventory_Drop(object sender, DragEventArgs e)
        {
            try
            {
                IsScrolltoEnd = "Bottom";
                QMessageBox = new QatMessageBox(this); 
                if (_dragdropWindow != null)
                {
                    _dragdropWindow.Close();
                    _dragdropWindow = null;
                }

                string RHS_TS = string.Empty;
                List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
                int targetIndex = 0;
                int sourceIndex = 0;

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestSuiteItem sourceTestSuite = sourceElement.DataContext as TestSuiteItem;
                if (sourceTestSuite == null)
                    return;

                sourceElement = e.OriginalSource as FrameworkElement;
                if (sourceElement == null)
                    return;

                TreeViewExplorer targetTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;
                if (targetTreeViewExplorer == null)
                {
                    if (sourceElement as Border != null)
                    {
                        Border sourceBorder = sourceElement as Border;
                        if (sourceBorder.Child as ScrollViewer != null && sourceTestSuite.TestPlanList.Count > 0)
                            targetTreeViewExplorer = sourceTestSuite.TestPlanList.First();
                    }
                    else if (sourceElement as ScrollViewer != null && sourceTestSuite.TestPlanList.Count > 0)
                        targetTreeViewExplorer = sourceTestSuite.TestPlanList.Last();
                }


                if (e.Data == null)
                    return;

                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;

                testPlanList = dragData.SelectedItems;

                if (dragData.DragSourceType == "TreeView")
                {
                    foreach (TreeViewExplorer nitems in sourceTestSuite.TestPlanList)
                    {
                        foreach (TreeViewExplorer item in testPlanList)
                        {
                            if (nitems.ItemName == item.ItemName && !RHS_TS.Contains(nitems.ItemName))
                            {
                                RHS_TS += item.ItemName + "\n";
                            }
                        }
                    }

                    if (RHS_TS != string.Empty && RHS_TS != null)
                    {
                        MessageBoxResult result = QMessageBox.Show("TestPlans :\n" + RHS_TS + "\n Already exists,are you sure you want to add duplicates?", "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);
                        if (result.ToString() == "OK")
                        {
                            sourceTestSuite.TestPlanListAddList(testPlanList);
                        }
						 else
                            return;

                    }
                    else
                    {
                        sourceTestSuite.TestPlanListAddList(testPlanList);
                    }

                }
                else if (dragData.DragSourceType == "TestSuiteListView" && targetTreeViewExplorer != null)
                {
                    targetIndex = sourceTestSuite.TestPlanList.IndexOf(targetTreeViewExplorer);

                    sourceIndex = sourceTestSuite.TestPlanList.IndexOf(testPlanList[0]);

                    if (sourceIndex < targetIndex && targetIndex < sourceTestSuite.TestPlanList.Count)
                        targetIndex += 1;

                    if (targetIndex < 0 || sourceIndex < 0 || sourceIndex == targetIndex)
                        return;

                    sourceTestSuite.TestPlanListMoveList(targetIndex, testPlanList);
                }
            }
            catch (Exception ex)
            {
                if (sender.GetType().ToString() == "System.Windows.Controls.ListView")
                    MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12011", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Lv_TestPlan_Drop(object sender, DragEventArgs e)
        {
            try
            {
                IsScrolltoEnd = "Bottom";
                QMessageBox = new QatMessageBox(this);
                if (_dragdropWindow != null)
                {
                    _dragdropWindow.Close();
                    _dragdropWindow = null;
                }

                string RHS_TP = string.Empty;
                List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();
                int targetIndex = 0;
                int sourceIndex = 0;

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestPlanItem sourceTestPlan = sourceElement.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceElement = e.OriginalSource as FrameworkElement;
                if (sourceElement == null)
                    return;

                TreeViewExplorer targetTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;
                if (targetTreeViewExplorer == null)
                {
                    if (sourceElement as Border != null)
                    {
                        Border sourceBorder = sourceElement as Border;
                        if (sourceBorder.Child as ScrollViewer != null && sourceTestPlan.TestCaseList.Count > 0)
                            targetTreeViewExplorer = sourceTestPlan.TestCaseList.First();
                    }
                    else if (sourceElement as ScrollViewer != null && sourceTestPlan.TestCaseList.Count > 0)
                        targetTreeViewExplorer = sourceTestPlan.TestCaseList.Last();
                }

                if (e.Data == null)
                    return;

                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;

                testCaseList = dragData.SelectedItems;

                if (dragData.DragSourceType == "TreeView")
                {
                    foreach (TreeViewExplorer nitems in sourceTestPlan.TestCaseList)
                    {
                        foreach (TreeViewExplorer item in testCaseList)
                        {
                            if (nitems.ItemName == item.ItemName && !RHS_TP.Contains(nitems.ItemName))
                            {
                                RHS_TP += item.ItemName + "\n";
                            }
                        }
                    }

                    if (RHS_TP != string.Empty && RHS_TP != null)
                    {
                        MessageBoxResult result = QMessageBox.Show("TestCases :\n" + RHS_TP + "\nAlready exists, are you sure you want to add duplicates?", "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);
                        if (result.ToString() == "OK")
                        {
                            sourceTestPlan.TestCaseListAddList(testCaseList);
                        }
                        else
                            return;

                    }
                    else
                    {
                        sourceTestPlan.TestCaseListAddList(testCaseList);
                    }

                }
                else if (dragData.DragSourceType == "TestPlanListView" && targetTreeViewExplorer != null)
                {
                    targetIndex = sourceTestPlan.TestCaseList.IndexOf(targetTreeViewExplorer);

                    sourceIndex = sourceTestPlan.TestCaseList.IndexOf(testCaseList[0]);

                    if (sourceIndex < targetIndex && targetIndex < sourceTestPlan.TestCaseList.Count)
                        targetIndex += 1;

                    if (targetIndex < 0 || sourceIndex < 0 || sourceIndex == targetIndex)
                        return;

                    sourceTestPlan.TestCaseListMoveList(targetIndex, testCaseList);
                }
            }
            catch (Exception ex)
            {
                if (sender.GetType().ToString() == "System.Windows.Controls.ListView")
                    MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12011", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Lv_TestSuite_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.LeftButton == MouseButtonState.Pressed)
                {
                    ListView sourceListView = sender as ListView;
                    if (sourceListView == null)
                        return;

                    TestSuiteItem sourceTestSuite = sourceListView.DataContext as TestSuiteItem;
                    if (sourceTestSuite == null)
                        return;

                    FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                    if (sourceElement == null)
                        return;

                    TreeViewExplorer sourceTestPlan = sourceElement.DataContext as TreeViewExplorer;
                    if (sourceTestPlan == null)
                        return;

                    List<TreeViewExplorer> selectedTestPlans = new List<TreeViewExplorer>();

                    foreach (TreeViewExplorer item in sourceListView.SelectedItems)
                    {
                        selectedTestPlans.Add(item);
                    }

                    if (!selectedTestPlans.Contains(sourceTestPlan))
                        return;

                    if (selectedTestPlans.Count > 0)
                    {
                        DragDropItem dragData = new DragDropItem();
                        dragData.DragSourceType = "TestSuiteListView";
                        dragData.SelectedItems = selectedTestPlans;
                        dragData.SourceTestSuiteItem = sourceTestSuite;

                        CreateDragDropWindow(selectedTestPlans);
                        DragDrop.DoDragDrop(sender as DependencyObject, new DataObject(typeof(DragDropItem), dragData), DragDropEffects.Copy);
                        if (_dragdropWindow != null)
                        {
                            _dragdropWindow.Close();
                            _dragdropWindow = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12014", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void lst_TestPlan_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.LeftButton == MouseButtonState.Pressed)
                {
                    ListView sourceListView = sender as ListView;
                    if (sourceListView == null)
                        return;

                    TestPlanItem sourceTestPlan = sourceListView.DataContext as TestPlanItem;
                    if (sourceTestPlan == null)
                        return;

                    FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                    if (sourceElement == null)
                        return;

                    TreeViewExplorer sourceTestCase = sourceElement.DataContext as TreeViewExplorer;
                    if (sourceTestCase == null)
                        return;

                    List<TreeViewExplorer> selectedTestCases = new List<TreeViewExplorer>();

                    foreach (TreeViewExplorer item in sourceListView.SelectedItems)
                    {
                        selectedTestCases.Add(item);
                    }

                    if (!selectedTestCases.Contains(sourceTestCase))
                        return;

                    if (selectedTestCases.Count > 0)
                    {
                        DragDropItem dragData = new DragDropItem();
                        dragData.DragSourceType = "TestPlanListView";
                        dragData.SelectedItems = selectedTestCases;
                        dragData.SourceTestPlanItem = sourceTestPlan;

                        CreateDragDropWindow(selectedTestCases);
                        DragDrop.DoDragDrop(sender as DependencyObject, new DataObject(typeof(DragDropItem), dragData), DragDropEffects.Copy);
                        if (_dragdropWindow != null)
                        {
                            _dragdropWindow.Close();
                            _dragdropWindow = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12014", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ListView_TestPlan_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceListView = sender as ListView;
                if (sourceListView == null)
                    return;

                TestPlanItem sourceTestPlan = sourceListView.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseSelectedList.Clear();
                foreach (TreeViewExplorer item in sourceListView.SelectedItems)
                {
                    sourceTestPlan.TestCaseSelectedList.Add(item);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12015", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Txt_Delay_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                e.Handled = !IsTextAllowed(e.Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12018", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Txt_Gain_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                e.Handled = !IsTextAllowedWithMinus(e.Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12018", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Txt_APx_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                e.Handled = !IsTextDontAllowedSplChar(e.Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12018", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Txt_GainChannel_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                e.Handled = !IsTextAllowedForChannel(e.Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12018", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private static bool IsTextAllowedForDecimal(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex(@"^-?[0-9]*(?:\.[0-9]*)?$");///regex that matches disallowed text

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return regex.IsMatch(text);

        }

        private static bool IsTextAllowed(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex("[^0-9]+"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }

        private static bool IsTextAllowedWithMinus(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex("[^0-9-.]+"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }

        private static bool IsTextDontAllowedSplChar(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex(@"[^a-zA-Z0-9\s]"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }

        private static bool IsLoopTextAllowed(string text)
        {
            Regex regex = null;

            try
            {

                regex = new Regex("[^1-9]"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }

        private static bool IsboolAllowed(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex("^[0-1]"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }


        private static bool IsTextAllowedForChannel(string text)
        {
            Regex regex = null;

            try
            {
                regex = new Regex("[^0-9.-]+"); ////regex that matches disallowed text
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12019", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return !regex.IsMatch(text);
        }
        private static bool IsPositionAllowed(string text)
        {
            Regex regex = null;

            try
            {
                //regex = new Regex(@"^-?(0(\.\d+)?|1(\.0+)?)$"); ////regex that matches disallowed text
                regex = new Regex(@"^-?[0-9]*(?:\.[0-9]*)?$");
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12052", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            bool status = regex.IsMatch(text);
            return regex.IsMatch(text);
        }

        private void MenuItemTS_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestSuiteItem sourceTestSuite = sourceMenuItem.DataContext as TestSuiteItem;
                if (sourceTestSuite == null)
                    return;

                sourceTestSuite.TestPlanListRemoveList(new List<TreeViewExplorer>(sourceTestSuite.TestPlanSelectedList));
                sourceTestSuite.TestPlanSelectedList.Clear();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12020", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void MenuItemTP_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestPlanItem sourceTestPlan = sourceMenuItem.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseListRemoveList(new List<TreeViewExplorer>(sourceTestPlan.TestCaseSelectedList));
                sourceTestPlan.TestCaseSelectedList.Clear();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12020", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_browseDesign1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                QMessageBox = new QatMessageBox(this);
                Button sourceButton = sender as Button;
                if (sourceButton == null)
                    return;

                TestPlanItem sourceTestPlanItem = sourceButton.DataContext as TestPlanItem;
                if (sourceTestPlanItem == null)
                    return;

                if (sourceTestPlanItem.TestItemName == null)
                {
                    MessageBox.Show("Name is empty\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (Regex.IsMatch(sourceTestPlanItem.TestItemName, @"[\\/:*?<>|""[\]&]"))
                {
                    MessageBox.Show("The TestPlan name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (IsItemNameExist(sourceTestPlanItem.TestItemName, sourceTestPlanItem.TestItemNameCopy))
                    return;

                if (!sourceTestPlanItem.IsNewTestPlan)
                {
                    List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>(sourceTestPlanItem.TestCaseList);
                    if (testCaseList.Count > 0)
                    {
                        List<string> testCaseStringList = new List<string>();
                        testCaseList.ForEach(item => testCaseStringList.Add(item.ItemName));
                        string TC_list = string.Join("\n", testCaseStringList.ToArray());

                        MessageBoxResult result = QMessageBox.Show("No of Test Cases associated: " + testCaseList.Count.ToString() + "\n\nName of Test Cases associated:\n" + TC_list + "\n\nDo you want to continue Changing the Design for Test Plan : " + sourceTestPlanItem.TestItemName + " ?", "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);

                        if ((result == MessageBoxResult.Cancel)|| (result == MessageBoxResult.None))
                            return;
                    }
                }

                if (Properties.Settings.Default.Designversion.ToString() != string.Empty)
                {

                    LoadDesignStatus.Text = "Loading Design. . .";

                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Design files (*.qsys)|*.qsys";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        Mouse.OverrideCursor = Cursors.Wait;
                        sourceTestPlanItem.DesignFilePath = openFileDialog.FileName;
                        sourceTestPlanItem.DesignFileName = openFileDialog.SafeFileName;

                        string newDesignName = "QAT_" + sourceTestPlanItem.TestItemName.Trim() + "_V" + (sourceTestPlanItem.DesignNameList.Count + 1).ToString() + "_" + sourceTestPlanItem.DesignFileName;

                        string PreferencesServerPath = QatConstants.QATServerPath + "\\Designs";
                        if (PreferencesServerPath == string.Empty)
                        {
                            MessageBox.Show("Please enter server path in preferences menu to load the design file to server", "Message", MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                        if (!Directory.Exists(PreferencesServerPath))
                        {
                            Directory.CreateDirectory(PreferencesServerPath);
                        }
                        if (Directory.Exists(PreferencesServerPath))
                        {

                            string filepath2 = Path.Combine(PreferencesServerPath, newDesignName);

                            bool exists = false;
                            DataTable tble = new DataTable();

                            string query = "select * from [designtable] where Designname = @designName";
                            SqlCommand cmd = new SqlCommand(query, QscDatabase.CreateConnection());
                            cmd.Parameters.AddWithValue("@designName", newDesignName);
                            SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                            dataAdapter.Fill(tble);
                            if (tble.Rows.Count > 0)
                            {
                                exists = true;
                            }
                            else
                            {
                                exists = false;
                            }

                            if ((!exists) && (!File.Exists(filepath2)))
                            {
                                if (Run(sourceTestPlanItem))
                                {
                                    sourceTestPlanItem.DesignName = newDesignName;
                                    sourceTestPlanItem.CreateNewTestCaseIsEnabled = false;
                                    sourceTestPlanItem.BackgroundVerfificationButtonIsEnabled = false;
                                }
                            }
                            else if ((exists) && (File.Exists(filepath2)))
                            {
                                MessageBoxResult btnresult = MessageBox.Show("Design Inventory exists in database and design file available in server path, Please delete the Test Plan associated with the design or rename the design ", string.Empty, MessageBoxButton.OK, MessageBoxImage.Question);
                                LoadDesignStatus.Text = "";
                                Mouse.OverrideCursor = null;
                                return;
                            }
                            else if ((!exists) && (File.Exists(filepath2)))
                            {
                                MessageBoxResult btnresult = MessageBox.Show("Design already available in server path, Please delete the Test Plan associated with the design or rename the design ", string.Empty, MessageBoxButton.OK, MessageBoxImage.Question);
                                LoadDesignStatus.Text = "";
                                Mouse.OverrideCursor = null;
                                return;
                            }
                            else
                            {
                                MessageBoxResult btnresult = MessageBox.Show("Design inventory exists in db, Please delete the Test Plan associated with the design or rename the design ", string.Empty, MessageBoxButton.OK, MessageBoxImage.Question);
                                LoadDesignStatus.Text = "";
                                Mouse.OverrideCursor = null;
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Incorrect Serrver Path", "", MessageBoxButton.OK, MessageBoxImage.Warning);
                            LoadDesignStatus.Text = "";
                            Mouse.OverrideCursor = null;
                            return;
                        }
                    }
                    else
                    {
                        LoadDesignStatus.Text = "";
                        Mouse.OverrideCursor = null;
                        return;
                    }

                }
                else
                {
                    MessageBox.Show("Please select designer version in preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Information);
                }

            }
            catch (Exception ex)
            {
                LoadDesignStatus.Text = "";
                if (Mouse.OverrideCursor != null)
                    Mouse.OverrideCursor = null;
                        DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12059", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private string GetcompileID(string path)
        {
            string id = string.Empty;
            try
            {
                StreamReader readcompileid = new StreamReader(path + "//compile_id");
                 id = readcompileid.ReadToEnd();
                //XmlDocument xmlDoc_compileid = new XmlDocument();
                //xmlDoc_compileid.Load(path + "//compile_id");
                return id;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return id;
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private bool TCInitialization(TestPlanItem sourceTestPlan, string backup_model,string myFile)
        {
            bool IsTcintializationComplete = false;
            try
            {
               
                List<Tuple<string, string>> FirstLevelItems = new List<Tuple<string, string>>();
                List<Tuple<string, string>> ControlLevelItems = new List<Tuple<string, string>>();
                DataTable tblForFill = sourceTestPlan.DesignComponent;
                tblForFill.Clear();
                tblForFill.Columns.Clear();

                tblForFill.Columns.Add("DesignID", typeof(System.Int32));
                tblForFill.Columns.Add("ComponentType", typeof(System.String));
                tblForFill.Columns.Add("ComponentName", typeof(System.String));
                tblForFill.Columns.Add("Control", typeof(System.String));
                tblForFill.Columns.Add("SpecControlID", typeof(System.String));
                tblForFill.Columns.Add("Type", typeof(System.String));
                tblForFill.Columns.Add("MinValue", typeof(System.String));
                tblForFill.Columns.Add("MaxValue", typeof(System.String));
                tblForFill.Columns.Add("DefaultValue", typeof(System.String));
                tblForFill.Columns.Add("DefaultPosition", typeof(System.String));
                tblForFill.Columns.Add("DefaultString", typeof(System.String));
                tblForFill.Columns.Add("InitialValue", typeof(System.String));
                tblForFill.Columns.Add("InitialString", typeof(System.String));
                tblForFill.Columns.Add("InitialPosition", typeof(System.String));
                tblForFill.Columns.Add("PrettyName", typeof(System.String));
                tblForFill.Columns.Add("Subtype", typeof(System.String));
                tblForFill.Columns.Add("ArraySize", typeof(System.String));
                tblForFill.Columns.Add("ControlDirection", typeof(System.String));
                tblForFill.Columns.Add("ClassName", typeof(System.String));
                tblForFill.Columns.Add("ComponentPrettyName", typeof(System.String));
                tblForFill.Columns.Add("NetworkName", typeof(System.String));

                backupcore(sourceTestPlan, myFile,backup_model);
                
                List<string> arrayForRPC = new List<string>();
                string USBClassName = string.Empty;
                string USBPrettyName = string.Empty;
                string USBNetworkName = string.Empty;
                using (XmlTextReader reader = new XmlTextReader(myFile + "//design_components.txt"))
                {
                    while (reader.Read())
                    {
                        if (reader.Name == "Component" && reader.IsStartElement())
                        {
                            FirstLevelItems = GetFirstLevelItems(reader);

                            // change string empty
                            if (FirstLevelItems.Find(x => x.Item1.Equals("Prefix")) != null && FirstLevelItems.Find(x => x.Item1.Equals("Prefix")).Item2.Trim() != string.Empty)
                            {
                                while (reader.Read())
                                {
                                    if (reader.Name == "Control" && reader.IsStartElement())
                                    {
                                        ControlLevelItems = GetControlLevelItems(reader);



                                        string compType = FirstLevelItems.Find(x => x.Item1 == "PrettyName").Item2;
                                        string GetClassName = FirstLevelItems.Find(x => x.Item1 == "ClassName").Item2;
                                        string GetComponentPrettyName = FirstLevelItems.Find(x => x.Item1 == "PrettyName").Item2;
                                        string NetworkName = FirstLevelItems.Find(x => x.Item1 == "NetworkName").Item2;
                                        if (GetClassName.StartsWith("usb_transmitter") || GetClassName.StartsWith("usb_receiver"))
                                        {
                                            USBClassName = GetClassName;
                                            USBPrettyName = GetComponentPrettyName;
                                            USBNetworkName = NetworkName;
                                        }


                                        string compName = FirstLevelItems.Find(x => x.Item1 == "Prefix").Item2;
                                        string deviceid = FirstLevelItems.Find(x => x.Item1 == "DeviceID").Item2;


                                        string controlValue = ControlLevelItems.Find(x => x.Item1 == "ControlID").Item2;
                                        string type = ControlLevelItems.Find(x => x.Item1 == "Type").Item2;
                                        string minValue = ControlLevelItems.Find(x => x.Item1 == "MinValue").Item2;
                                        string maxValue = ControlLevelItems.Find(x => x.Item1 == "MaxValue").Item2;
                                        string defaultValue = ControlLevelItems.Find(x => x.Item1 == "DefaultValue").Item2;
                                        string defaultPosition = ControlLevelItems.Find(x => x.Item1 == "DefaultPosition").Item2;
                                        string defaultString = ControlLevelItems.Find(x => x.Item1 == "DefaultString").Item2;
                                        string prettyname = ControlLevelItems.Find(x => x.Item1 == "PrettyName").Item2;
                                        string Subtype = ControlLevelItems.Find(x => x.Item1 == "Subtype").Item2;
                                        string ArraySize = ControlLevelItems.Find(x => x.Item1 == "ArraySize").Item2;
                                        string ControlDirection = ControlLevelItems.Find(x => x.Item1 == "ControlDirection").Item2;
                                        string initialSpecID = ControlLevelItems.Find(x => x.Item1 == "SpecControlID").Item2;
                                        string specControlID = string.Empty;
                                        if (initialSpecID.Contains(deviceid))
                                        {
                                            specControlID = WebUtility.HtmlDecode(initialSpecID);
                                        }


                                        if ((controlValue != string.Empty) && (specControlID != string.Empty) && ControlDirection != string.Empty)
                                        {
                                            DataRow dRow = tblForFill.NewRow();
                                            //dRow[0] = designid;
                                            dRow[1] = compType;
                                            dRow[2] = compName;
                                            dRow[3] = controlValue;
                                            dRow[4] = specControlID;
                                            dRow[5] = type;
                                            dRow[6] = minValue;
                                            dRow[7] = maxValue;
                                            dRow[8] = defaultValue;
                                            dRow[9] = defaultPosition;
                                            dRow[10] = defaultString;
                                            dRow[14] = prettyname;
                                            dRow[15] = Subtype;
                                            dRow[16] = ArraySize;
                                            dRow[17] = ControlDirection;
                                            dRow[18] = USBClassName;
                                            dRow[19] = USBPrettyName;
                                            dRow[20] = USBNetworkName;
                                            arrayForRPC.Add(specControlID);
                                            tblForFill.Rows.Add(dRow);
                                        }

                                        USBClassName = string.Empty;
                                        USBPrettyName = string.Empty;
                                        USBNetworkName = string.Empty;
                                        //FirstLevelItems.Clear();
                                        ControlLevelItems.Clear();
                                    }
                                    if (reader.Name == "ControlList" && reader.NodeType == XmlNodeType.EndElement)
                                    {
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                FirstLevelItems.Clear();
                            }
                        }
                        if (reader.Name == "DesignComponents" && reader.NodeType == XmlNodeType.EndElement)
                        {
                            Rpc rpcClass = new Rpc();

                            var RPCresponse = rpcClass.Send("127.0.0.1", "Control.Get", arrayForRPC, false, "TCInitialization");
                            string responseFromRPC = RPCresponse.Item2.Trim();

                            if ((!responseFromRPC.Contains("does not exist")) & (!responseFromRPC.Contains("Invalid params")))
                            {

                                var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadControlList>(responseFromRPC);
                                int j = 0;

                                if (resultValue.result != null && resultValue.result.Count() > 0)
                                {
                                    foreach (var results in resultValue.result)
                                    {
                                        tblForFill.Rows[j][12] = results.String;
                                        tblForFill.Rows[j][11] = results.Value;
                                        tblForFill.Rows[j][13] = results.Position;

                                        j++;
                                    }
                                }
                            }

                            IsTcintializationComplete = true;
                            break;
                        }
                    }
                }
				
                //reader.Close();
                return IsTcintializationComplete;
                
               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12060", MessageBoxButton.OK, MessageBoxImage.Error);
               return IsTcintializationComplete;
            }
            finally
            {
                try
                {
                    if (File.Exists(myFile + "//design_components.txt"))
                        File.Delete(myFile + "//design_components.txt");
                }
                catch(Exception ex)
                {
                    DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                }
            }
        }

        private List<Tuple<string, string>> GetControlLevelItems(XmlTextReader reader)
        {
            List<Tuple<string, string>> ControlLevelItems = new List<Tuple<string, string>>();
            try
            {
                while (reader.Read())
                {
                    if (reader.Name == "Control" && reader.NodeType == XmlNodeType.EndElement)
                    {
                        break;
                    }
                    else if(reader.IsStartElement())
                    {
                        XElement ElementCheck = XElement.ReadFrom(reader) as XElement;
                        if (ElementCheck != null)
                        {
                            ControlLevelItems.Add(new Tuple<string, string>(ElementCheck.Name.ToString(), ElementCheck.Value));
                        }
                    }
                   
                }
                return ControlLevelItems;
            }
            catch (Exception ex)
            {
                return ControlLevelItems;

            }
        }

      

        private List<Tuple<string, string>> GetFirstLevelItems(XmlTextReader reader)
        {
            List<Tuple<string, string>> _FirstLevelItems = new List<Tuple<string, string>>();
            try
            {
                while(reader.Read())
                {
                    if (reader.Name != "ControlList"  && reader.NodeType == XmlNodeType.Element)
                    {
                        XElement ElementCheck = XElement.ReadFrom(reader) as XElement;
                        if (ElementCheck != null)
                        {
                            _FirstLevelItems.Add(new Tuple<string, string>(ElementCheck.Name.ToString(), ElementCheck.Value));
                        }
                    }
                    if (reader.Name == "ControlList")
                    {
                        break;
                    }
                }
                return _FirstLevelItems;
            }
            catch (Exception ex)
            {
                return _FirstLevelItems;

            }
        }

        private void backupcore(TestPlanItem sourceTestPlan, string path,string backup_model)
        {
            try
            {
                string typevalue = string.Empty;
                string backupispresent = string.Empty;
                string backupdevice = string.Empty;
                string Modelno = string.Empty;
                string primaryname = string.Empty;
                XmlDocument xmlDoc_inventory = new XmlDocument();
                xmlDoc_inventory.Load(path + "//inventory.xml");
                XmlNodeList nodeList = xmlDoc_inventory.DocumentElement.SelectNodes("device");
                if (nodeList != null)
                {
                    foreach (XmlNode getnodetypr in nodeList)
                    {
                        if (getnodetypr.Attributes != null && getnodetypr.Attributes["type"] != null)
                        {
                            //if (String.Equals(typevalue, "core", StringComparison.CurrentCultureIgnoreCase))
                            //{

                            if (getnodetypr.Attributes["has_backup"] != null)
                            {
                                backupispresent = getnodetypr.Attributes["has_backup"].Value.ToString();
                                if (String.Equals(backupispresent, "true", StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if (getnodetypr.Attributes["backup"] != null)
                                    {
                                        backupdevice = getnodetypr.Attributes["backup"].Value.ToString();
                                        Modelno = getnodetypr.Attributes["part_number"].Value.ToString();
                                        typevalue = getnodetypr.Attributes["type"].Value.ToString();
                                        primaryname= getnodetypr.Attributes["primary"].Value.ToString();
                                        if (string.Equals(Modelno, "core", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            Modelno = backup_model;
                                            typevalue = "Core";
                                        }
                                        if (string.Equals(typevalue, "peripheral", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            //Modelno = backup_model;
                                            typevalue = "Peripheral";
                                        }
                                                                            
                                        if(sourceTestPlan.DesignInventory.Contains("'" + typevalue + "'" + "," + "'" + Modelno + "'" + "," + "'" + primaryname + "'" + "," + "'" + "primary" + "'" + "," + "'"+string.Empty+ "')"))
                                        {

                                            Int32 elemetindex= sourceTestPlan.DesignInventory.IndexOf("'" + typevalue + "'" + "," + "'" + Modelno + "'" + "," + "'" + primaryname + "'" + "," + "'" + "primary" + "'" + "," + "'" + string.Empty + "')");
                                            sourceTestPlan.DesignInventory.RemoveAt(elemetindex);
                                        }
                                        sourceTestPlan.DesignInventory.Add("'" + typevalue + "'" + "," + "'" + Modelno + "'" + "," + "'" + primaryname + "'" + "," + "'" + "primary" + "'" + "," + "'" + backupdevice + "')");

                                        if ((backupdevice != null) & (backupdevice != string.Empty) & (typevalue != null) & (typevalue != string.Empty) & (Modelno != null) & (Modelno != string.Empty))
                                        {
                                            sourceTestPlan.DesignInventory.Add("'" + typevalue + "'" + "," + "'" + Modelno + "'" + "," + "'" + backupdevice + "'" + "," + "'" + "backup" + "'" + "," + "'" + primaryname + "')");
                                        }
                                    }
                                }
                            }
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void emulationistrue(string Design_name)
        {
            send_status = false;
            msgbox_status = false;
            bool IsVerified = false;
  
            int countloop = 0;
            try
            {
                DirectoryInfo directory = null;
                XmlDocument xmlDoc = new XmlDocument();
                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                {
                    directory = new DirectoryInfo(Properties.Settings.Default.Qsystemppath.ToString());
                }
                else
                {
                    directory = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\");
                }

                int directoryCnt = 0;
                DirectoryInfo myFile = null;
                Emulation_continue:
                while (countloop < 12 && (myFile == null || myFile.CreationTime < time))
                {
                    Thread.Sleep(5000);
                    directoryCnt = directory.GetDirectories().Count();
                    if (directoryCnt > 0)
                    {
                        myFile = directory.GetDirectories().OrderByDescending(f => f.LastWriteTime).Where(d => !d.Name.Contains("Temp")).First();
                    }
                    countloop++;
                }

                // check info file created or not
                if (myFile!=null && myFile.CreationTime > time)
                    {
                   Emulation_continue_info:
                    DateTime checktime = DateTime.Now.AddSeconds(30);
                        string Infofilecheck = directory + "//" + myFile.ToString() + "//info.xml";

                    while (!File.Exists(Infofilecheck) || !chekfileopen(Infofilecheck))
                    {
                        if (checktime < DateTime.Now)
                        {
                            MessageBoxResult result = MessageBox.Show("Emulation is taking longer than expected. Click Ok to continue or cancel to stop ", "Emulation Information", MessageBoxButton.OKCancel, MessageBoxImage.Information);
                            if (result == MessageBoxResult.OK)
                                goto Emulation_continue_info;
                            else
                                return;
                        }
                    }

                    while (myFile != null && myFile.CreationTime > time)
                    {
                        if (File.Exists(directory + "//" + myFile.ToString() + "//design_components.xml") && chekfileopen(directory + "//" + myFile.ToString() + "//design_components.xml"))
                        {
                            string DesignName = string.Empty;
                            string IsEmulated = string.Empty;
                            string Checklines = "";
                            using (FileStream fs = new FileStream(directory + "//" + myFile.ToString() + "//design_components.txt", FileMode.Append, FileAccess.Write))
                            {
                                using (StreamWriter sw = new StreamWriter(fs))
                                {
                                    using (StreamReader sr = new StreamReader(directory + "//" + myFile.ToString() + "//design_components.xml"))
                                    {
                                        while ((Checklines = sr.ReadLine()) != null)
                                        {
                                            if (Checklines.Trim().Contains("&#x1D;"))
                                            {
                                                Checklines = Checklines.Replace("&#x1D;", "");
                                            }
                                            if (Regex.IsMatch(Checklines, @"[\u001d]"))
                                            {
                                                Checklines = Regex.Replace(Checklines, @"[\u001d]", "");
                                            }
                                            sw.WriteLine(Checklines);
                                            if (!IsVerified)
                                            {
                                                string pattern1 = "<DesignName>(.*?)</DesignName>";
                                                string pattern2 = "<Emulating>(.*?)</Emulating>";

                                                if (Regex.IsMatch(Checklines, pattern1))
                                                {
                                                    Match m = Regex.Match(Checklines, pattern1);
                                                    DesignName = WebUtility.HtmlDecode(m.Groups[1].Value) + ".qsys";
                                                }
                                                if (Regex.IsMatch(Checklines, pattern2))
                                                {
                                                    Match m = Regex.Match(Checklines, pattern2);
                                                    IsEmulated = m.Groups[1].Value;
                                                }

                                                if (Checklines.Trim().Equals("<Component>"))
                                                {


                                                    if (IsEmulated == "Yes" && DesignName == Design_name)
                                                    {
                                                        send_status = true;
                                                        msgbox_status = false;
                                                        IsVerified = true;

                                                    }
                                                    else
                                                    {
                                                        send_status = false;
                                                        msgbox_status = false;
                                                       
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                        else
                        {
                            send_status = false;
                            msgbox_status = false;
                        }

                        break;
                    }
                }
                else
                {
                    MessageBoxResult result = MessageBox.Show("Check whether Qsys designer file under emulation is waiting for a user input/Emulation directory creation taking longer than expected. Click Ok to continue or cancel to stop ", "Emulation Information", MessageBoxButton.OKCancel, MessageBoxImage.Information);
                    if (result == MessageBoxResult.OK)
                        goto Emulation_continue;
                    else
                        return;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public bool chekfileopen(string localFile)
        {
            bool getreturn = false;
            try
            {
                using (FileStream inStream = new FileStream(localFile, FileMode.Open, FileAccess.Read)) ;
                {
                    getreturn = true;
                }

                return getreturn;
            }
            catch (Exception ex)
            {
                Thread.Sleep(10000);
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return false;
            }
        }

        public bool Run(TestPlanItem sourceTestPlanItem)
        {
            QSys_Designer_Comm QDCinvoke = new QSys_Designer_Comm();
            bool returnStatus = false;
            Rpc hert_checkemulation = new Rpc();
            var isAvailable = hert_checkemulation.Send("127.0.0.1", "Inventory.Get", "", true, string.Empty);
            bool tryemulate = false;
            try
            {
                //if()
                //{


                if (Properties.Settings.Default.Designversion != string.Empty)
                {
                    if (!isAvailable.Item1)
                    {

                        //inventory.Clear();
                        sourceTestPlanItem.DesignInventory.Clear();
                        qDesignProcess = new Process();
                        string gert = Properties.Settings.Default.Designversion.ToString();
                        qDesignProcess.StartInfo.Arguments = @"" + "\"" + sourceTestPlanItem.DesignFilePath + "\"" + " /dev /emulate";
                        qDesignProcess.StartInfo.FileName = gert;

                        QDCinvoke.Emulate(qDesignProcess.StartInfo.Arguments, qDesignProcess.StartInfo.FileName);
                        time = DateTime.Now;
                        Thread.Sleep(30000);
                        emulationistrue(sourceTestPlanItem.DesignFileName);
                        qDesignProcess.Close();
                        //DesignName.Text = filename;
                        string Backup_Model_no = string.Empty;
                        if (send_status)
                        {
                            QDCinvoke.Hide();
                            Rpc hert = new Rpc();
                            //Tuple<string, string> inventory;
                            var responseFromRPC = hert.Send("127.0.0.1", "Inventory.Get", "", true, string.Empty);
                            if (!responseFromRPC.Item1)
                            {
                                Thread.Sleep(30000);
                                responseFromRPC = hert.Send("127.0.0.1", "Inventory.Get", "", true, string.Empty);
                            }

                            if (responseFromRPC.Item1)
                            {
                                string check_emulation = hert.Send_check("127.0.0.1", "Inventory.Get", "", true);
                                string rte = responseFromRPC.Item2.Trim();

                                var resultValue = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Deserialize<jsonReadInventoryList>(rte);

                                if(resultValue.result != null && resultValue.result.Count > 0)
                                {
                                    foreach(var inventoryValues in resultValue.result)
                                    {
                                        if (inventoryValues.Type != null && inventoryValues.Type != string.Empty)
                                        {
                                            if (inventoryValues.Type.Equals("Core", StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                if (!inventoryValues.Model.Contains("Core "))
                                                    inventoryValues.Model = Backup_Model_no = inventoryValues.Model.Insert(4, " ");
                                                else
                                                    Backup_Model_no = inventoryValues.Model;
                                            }
                                        }

                                        string joinstring = "'" + inventoryValues.Type + "','" + inventoryValues.Model + "','" + inventoryValues.Name + "','primary','')";
                                        sourceTestPlanItem.DesignInventory.Add(joinstring);
                                    }
                                }

                                //string[] splitString = rte.Split('[', ']');
                                //string[] splitstring1 = Regex.Split(splitString[1], "}},");
                                //for (int i = 0; i < splitstring1.Length; i++)
                                //{
                                //    var inventory = ShowMatch(splitstring1[i]);
                                //    if ((inventory.Item2 != null) & (inventory.Item2 != string.Empty))
                                //        Backup_Model_no = inventory.Item2;
                                //    //string inventory = ShowMatch(splitstring1[i]);
                                //    sourceTestPlanItem.DesignInventory.Add(inventory.Item1);
                                //}
                                

                                bool saveButtonState = sourceTestPlanItem.SaveButtonIsEnabled;
                                sourceTestPlanItem.SaveButtonIsEnabled = false;
                                bool testCaseListState = sourceTestPlanItem.TestCaseListIsEnabled;
                                sourceTestPlanItem.TestCaseListIsEnabled = false;
                                //btn_TestPlanSave.IsEnabled = false;
                                //btn_TestPlanSaveandclose.IsEnabled = false;
                                //lst_TestPlan.IsEnabled = false;
                                XmlDocument xmlDoc = new XmlDocument();
                                DirectoryInfo directory = null;
                                if (Properties.Settings.Default.Qsyscheckbox.ToString() == "true")
                                {
                                    directory = new DirectoryInfo(Properties.Settings.Default.Qsystemppath.ToString());
                                }
                                else
                                {
                                    directory = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QSys Temp Files\");
                                }

                                var myFile = directory.GetDirectories().OrderByDescending(f => f.LastWriteTime).Where(d => !d.Name.Contains("Temp")).First();
                                string getcompileid = GetcompileID(directory + "//" + myFile.ToString());
                                if ((getcompileid == check_emulation) || (check_emulation == string.Empty))
                                {
                                    if (check_emulation == string.Empty)
                                    {
                                        QDCinvoke.Show();
                                        MessageBoxResult btnresultq = MessageBox.Show(this, "Not able to read design code, Please confirm whether the file emulated is the correct design file and then continue", "User Input", MessageBoxButton.OKCancel, MessageBoxImage.Information);
                                        if (btnresultq == MessageBoxResult.OK)
                                            tryemulate = false;
                                        else
                                        {
                                            sourceTestPlanItem.SaveButtonIsEnabled = saveButtonState;
                                            tryemulate = true;
                                        }
                                        QDCinvoke.Hide();
                                    }
                                   if(!tryemulate)
                                    {
                                       bool IsTcintializationComplete = TCInitialization(sourceTestPlanItem, Backup_Model_no, directory + "//" + myFile.ToString());
                                        QDCinvoke.Kill();
                                        LoadDesignStatus.Text = "";
                                        Mouse.OverrideCursor = null;
                                        if (IsTcintializationComplete)
                                        {
                                            MessageBoxResult btnresult = MessageBox.Show(this, "Design Successfully loaded, Please continue save", "Design Loaded", MessageBoxButton.OK, MessageBoxImage.Information);
                                            if (btnresult == MessageBoxResult.OK)
                                            {
                                                sourceTestPlanItem.IsNewTestDesign = true;
                                                sourceTestPlanItem.SaveButtonIsEnabled = true;
                                                sourceTestPlanItem.TestCaseListIsEnabled = true;
                                                sourceTestPlanItem.TestCaseListContextMenuVisibility = Visibility.Visible;
                                                returnStatus = true;
                                                //btn_TestPlanSave.IsEnabled = true;
                                                //btn_TestPlanSaveandclose.IsEnabled = true;
                                                //lst_TestPlan.IsEnabled = true;
                                                //lst_TestPlan.ContextMenu.Visibility = System.Windows.Visibility.Visible;
                                            }
                                            else
                                            {
                                                sourceTestPlanItem.SaveButtonIsEnabled = saveButtonState;
                                                sourceTestPlanItem.TestCaseListIsEnabled = testCaseListState;
                                                returnStatus = false;
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Failed to save design initial values", "Design Load fail", MessageBoxButton.OK, MessageBoxImage.Error);
                                          
                                            msgbox_status = false;
                                            returnStatus = false;
                                        }
                                    }
                                   else
                                    {
                                        //MessageBox.Show("User cancelled emulated successfully", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Error);
                                        QDCinvoke.Kill();
                                        msgbox_status = false;
                                        returnStatus = false;
                                        LoadDesignStatus.Text = "";
                                        Mouse.OverrideCursor = null;
                                    }


                                }
                                else
                                {
                                  
                                    MessageBox.Show("Only one design can be emulated at a time on a given computer", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Information);
                                   
                                      
                                    QDCinvoke.Kill();
                                    msgbox_status = false;
                                    returnStatus = false;
                                    LoadDesignStatus.Text = "";
                                    Mouse.OverrideCursor = null;


                                }

                            }
                            else
                            {
                                //returnStatus = false;
                                MessageBox.Show("The design file is not emulated successfully", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Error);
                                QDCinvoke.Kill();
                                msgbox_status = false;
                                returnStatus = false;
                                LoadDesignStatus.Text = "";
                                Mouse.OverrideCursor = null;
                            }
                            msgbox_status = false;
                        }
                        else
                        {
                            MessageBox.Show("The design file is not emulated successfully", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Error);
                            QDCinvoke.Kill();
                            msgbox_status = false;
                            returnStatus = false;
                            LoadDesignStatus.Text = "";
                            Mouse.OverrideCursor = null;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Another design is in emulation. Only one design can be emulated at a time on a given computer", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Information);
                        returnStatus = false;
                        LoadDesignStatus.Text = "";
                        Mouse.OverrideCursor = null;
                    }

                }
                else
                {
                    MessageBox.Show("Please select the designer exe version in preferences menu", "Select Designer exe from Preferences", MessageBoxButton.OK, MessageBoxImage.Information);
                    returnStatus = false;
                    LoadDesignStatus.Text = "";
                    Mouse.OverrideCursor = null;
                }
                //}
                //else
                //{
                //    MessageBox.Show("Only one design can be emulated at a time on a given computer", "Emulation Error", MessageBoxButton.OK, MessageBoxImage.Information);
                //    returnStatus = false;
                //}

            }
            catch (Exception ex)
            {
                QDCinvoke.Kill();
                LoadDesignStatus.Text = "";
                if (Mouse.OverrideCursor != null)
                    Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12063", MessageBoxButton.OK, MessageBoxImage.Error);
                returnStatus = false;
            }
            return returnStatus;
        }

        private Tuple<string, string> ShowMatch(string text)            
        {
            try
            {
                string backup_model = string.Empty;
                string expr = "\"Name\":\".*?\"";
                string expr1 = "\"Model\":\".*?\"";
                string expr2 = "\"Type\":\".*?\"";
                string gettype = string.Empty;
                MatchCollection mc = Regex.Matches(text, expr);
                MatchCollection mc1 = Regex.Matches(text, expr1);
                MatchCollection mc2 = Regex.Matches(text, expr2);

                foreach (Match m in mc)
                {
                    string getr = m.ToString();
                    string fer = getr.Replace("\"", "");
                    string[] final = fer.Split(':');
                    getoup = final[1];
                }

                foreach (Match e in mc1)
                {
                    string getrtype = e.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(':');
                    getouptype = finaltype[1];
                    if (getouptype.Contains("Core"))
                    {
                        getouptype = getouptype.Insert(4, " ");
                        backup_model = getouptype;
                    }
                }

                foreach (Match n in mc2)
                {
                    string getrtype = n.ToString();
                    string fertype = getrtype.Replace("\"", "");
                    string[] finaltype = fertype.Split(':');
                    gettype = finaltype[1];
                }

                string joinstring = "'" + gettype + "','" + getouptype + "','" + getoup + "','" + "primary" + "','" + "" + "')";

                return new Tuple<string, string>(joinstring, backup_model);

                //getAllCompNameFromDesign.Add(getoup);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12064", MessageBoxButton.OK, MessageBoxImage.Error);
                return null;
            }
        }

        private void Btn_TCSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if (Properties.Settings.Default.TesterName.ToString() != string.Empty)
                {
                    TestCaseItem sourceTestCaseItem = null;
                    Button sourceButton = sender as Button;
                    if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestCaseItem")
                        sourceTestCaseItem = (TestCaseItem)sourceButton.DataContext;

                    if (sourceTestCaseItem == null)
                        return;

                    if (!string.IsNullOrEmpty(sourceTestCaseItem.TestItemName))
                    {
                        if (Regex.IsMatch(sourceTestCaseItem.TestItemName, @"[\\/:*?<>|""[\]&]"))
                        {
                            MessageBox.Show("The TestCase name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Please enter TestCase name", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }

                    if (IsItemNameExist(sourceTestCaseItem.TestItemName, sourceTestCaseItem.TestItemNameCopy))
                        return;

                    if (sourceTestCaseItem != null && sourceTestCaseItem.TestCaseTreeViewExplorer != null && !treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children.Contains(sourceTestCaseItem.TestCaseTreeViewExplorer))
                    {
                        //TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children.Find(x => x.ItemKey == sourceTestCaseItem.TestCaseTreeViewExplorer.ItemKey);

                        //if (designerTreeViewExplorer != null)
                        //    sourceTestCaseItem.TestCaseTreeViewExplorer = designerTreeViewExplorer;

                        if (isGroupByCategory == false)
                        {
                            TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children.Find(x => x.ItemKey == sourceTestCaseItem.TestCaseTreeViewExplorer.ItemKey);

                            if (designerTreeViewExplorer != null)
                                sourceTestCaseItem.TestCaseTreeViewExplorer = designerTreeViewExplorer;
                        }
                        else
                        {
                            foreach (TreeViewExplorer treeview in treeViewExplorerCategoryList)
                            {
                                TreeViewExplorer designerTreeViewExplorer1 = treeview.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                                if (designerTreeViewExplorer1 != null)
                                {
                                    TreeViewExplorer designerTreeViewExplorer = designerTreeViewExplorer1.Children.Find(x => x.ItemKey == sourceTestCaseItem.TestCaseTreeViewExplorer.ItemKey);

                                    if (designerTreeViewExplorer != null)
                                    {
                                        sourceTestCaseItem.TestCaseTreeViewExplorer = designerTreeViewExplorer;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    string oldModifiedName = null;
                    if (sourceTestCaseItem.TestCaseTreeViewExplorer!= null)
                        oldModifiedName = sourceTestCaseItem.TestCaseTreeViewExplorer.Modifiedby;

                    if (SaveTestCase(sourceTestCaseItem))
                    {                        
                        if (!isDesignerFilterListSelected && !isDesignerSearchListSelected)
                        {
                            if (isGroupByCategory)
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                            }
                            else
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            }
                        }
                        else
                        {
                            if (isDesignerFilterListSelected)
                                RefreshFilterItemCategory(true);

                            if (isDesignerSearchListSelected)
                                SearchTreeViewItem(true);
                        }

                        if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != sourceTestCaseItem.Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(sourceTestCaseItem.Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(sourceTestCaseItem.Modifiedby))
                                    modifiedByList.Add(sourceTestCaseItem.Modifiedby, 1);
                                else
                                    modifiedByList[sourceTestCaseItem.Modifiedby] = modifiedByList[sourceTestCaseItem.Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != sourceTestCaseItem.Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }


                            }
                        }


                            insertselectionItem();

                        MessageBox.Show("Test Case Saved \n", "QAT Message", MessageBoxButton.OK, MessageBoxImage.Information);
                        sourceTestCaseItem.TestCaseSettingsVisible = Visibility.Visible;
                    }
                }
                else
                {
                    MessageBox.Show("Please enter Tester name in the preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                Mouse.OverrideCursor = Cursors.Arrow;
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = Cursors.Arrow;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);

            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }

        }
		
        public bool SaveTestCase(TestCaseItem sourceTestCaseItem)
        {
            try
            {
                if (sourceTestCaseItem == null)
                    return false;

                if (sourceTestCaseItem.TestPlanSelected == null)
                {
                    MessageBox.Show("Select Test Plan \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    return false;
                }

                foreach (TestActionItem actionItem in sourceTestCaseItem.TestActionItemList)
                {
                    if (actionItem.TestActionItemNameTextBox.IsReadOnly == false)
                        actionItem.RenameItem();

                    if (Regex.IsMatch(actionItem.TestActionItemName, @"[\\/:*?<>|""[\]&]"))
                    {
                        MessageBox.Show("The TestAction name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return false;
                    }

                    foreach (TestControlItem controlItem in actionItem.SetTestControlList)
                    {
                        if (string.IsNullOrEmpty(controlItem.TestControlComponentNameSelectedItem))
                        {
                            MessageBox.Show("Select Action Component Name in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (string.IsNullOrEmpty(controlItem.TestControlPropertySelectedItem))
                        {
                            MessageBox.Show("Select Action Control value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (((string.IsNullOrEmpty(controlItem.TestControlPropertyInitialValueSelectedItem))))// & (controlItem.TestControlComboValueSelectedItem == null)))//| ((controlItem.TestControlPropertyInitialValueSelectedItem != null) & (controlItem.TestControlComboValueSelectedItem == null))
                        {
                            MessageBox.Show("Select Action Property Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (controlItem.ChannelEnabled && string.IsNullOrEmpty(controlItem.ChannelSelectionSelectedItem))// & (controlItem.TestControlComboValueSelectedItem == null)))//| ((controlItem.TestControlPropertyInitialValueSelectedItem != null) & (controlItem.TestControlComboValueSelectedItem == null))
                        {
                            MessageBox.Show("Select Action Channel Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (controlItem.TestControlPropertyInitialValueSelectedItem != null)
                        {
                            bool valid = IsValid(this);
                            if (!valid)
                            {
                                MessageBox.Show("Please enter valid Action Property Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                        if (controlItem.LoopIsChecked)
                        {
                            if (string.IsNullOrEmpty(controlItem.LoopStart) || string.IsNullOrEmpty(controlItem.LoopEnd) || string.IsNullOrEmpty(controlItem.LoopIncrement))
                            {
                                MessageBox.Show("Please enter LoopStart/ Loopend/ LoopIncrement value in Action Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (!(string.IsNullOrEmpty(controlItem.LoopStart)) & !(string.IsNullOrEmpty(controlItem.LoopEnd)))
                            {
                                Int32 loop_start = Convert.ToInt32(controlItem.LoopStart);
                                Int32 loop_end = Convert.ToInt32(controlItem.LoopEnd);
                                if (loop_start > loop_end)
                                {
                                    MessageBox.Show("Please enter Loopend value greater than Loopstart value in Action Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }

                            if (!(string.IsNullOrEmpty(controlItem.LoopEnd)) & !(string.IsNullOrEmpty(controlItem.LoopIncrement)))
                            {
                                Int32 loop_inc = Convert.ToInt32(controlItem.LoopIncrement);
                                Int32 loop_end = Convert.ToInt32(controlItem.LoopEnd);
                                if (loop_inc > loop_end)
                                {
                                    MessageBox.Show("Please enter LoopIncrement value smaller than Loopend value in Action Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                        }
                    }

                    foreach (TestControlItem controlItem in actionItem.VerifyTestControlList)
                    {
                        if (string.IsNullOrEmpty(controlItem.TestControlComponentNameSelectedItem))
                        {
                            MessageBox.Show("Select Verification Component Name in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (string.IsNullOrEmpty(controlItem.TestControlPropertySelectedItem))
                        {
                            MessageBox.Show("Select Verification Control Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (((string.IsNullOrEmpty(controlItem.TestControlPropertyInitialValueSelectedItem))))// & (controlItem.TestControlComboValueSelectedItem == null)))
                        {
                            MessageBox.Show("Select Verification Property Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (controlItem.TestControlPropertyInitialValueSelectedItem != null)
                        {
                            bool valid = IsValid(this);
                            if (!valid)
                            {
                                MessageBox.Show("Please enter valid Verification Property Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
						
						if (controlItem.ChannelEnabled && string.IsNullOrEmpty(controlItem.ChannelSelectionSelectedItem))// & (controlItem.TestControlComboValueSelectedItem == null)))//| ((controlItem.TestControlPropertyInitialValueSelectedItem != null) & (controlItem.TestControlComboValueSelectedItem == null))
                        {
                            MessageBox.Show("Select Verification Channel Value in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (controlItem.LoopIsChecked)
                        {
                            if (string.IsNullOrEmpty(controlItem.LoopStart) || string.IsNullOrEmpty(controlItem.LoopEnd) || string.IsNullOrEmpty(controlItem.LoopIncrement))
                            {
                                MessageBox.Show("Please enter LoopStart/ Loopend/ LoopIncrement value in Verification Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (!(string.IsNullOrEmpty(controlItem.LoopStart)) & !(string.IsNullOrEmpty(controlItem.LoopEnd)))
                            {
                                Int32 loop_start = Convert.ToInt32(controlItem.LoopStart);
                                Int32 loop_end = Convert.ToInt32(controlItem.LoopEnd);
                                if (loop_start > loop_end)
                                {
                                    MessageBox.Show("Please enter Loopend value greater than Loopstart value in Verification Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }

                            if (!(string.IsNullOrEmpty(controlItem.LoopEnd)) & !(string.IsNullOrEmpty(controlItem.LoopIncrement)))
                            {
                                Int32 loop_inc = Convert.ToInt32(controlItem.LoopIncrement);
                                Int32 loop_end = Convert.ToInt32(controlItem.LoopEnd);
                                if (loop_inc > loop_end)
                                {
                                    MessageBox.Show("Please enter LoopIncrement value smaller than Loopend value in Verification Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                        }

                        if ((!(string.IsNullOrEmpty(controlItem.MaximumLimit))) && (!(string.IsNullOrEmpty(controlItem.MinimumLimit))))
                        {
                            double Maxlimit = Convert.ToDouble(controlItem.MaximumLimit);
                            double Minlimit = Convert.ToDouble(controlItem.MinimumLimit);
                            if (Maxlimit < Minlimit)
                            {
                                MessageBox.Show("Please enter Upperlimit value greater than LowerLimit value in Verification Property in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                    }

                    foreach (TestUsbAudioBridging testusbaction in actionItem.SetTestUsbList)
                    {
                        if (testusbaction.UsbAudioBridgeList.Count() == 0)
                        {
                            MessageBox.Show("No Usb devices available in the testplan \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (testusbaction.UsbAudioTypeSelectedItem == null)
                        {
                            MessageBox.Show("Please select playback or recording in Usb Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (testusbaction.UsbAudioBridgeTypeSelectedItem == null)
                        {
                            MessageBox.Show("Please select bridge name in Usb Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testusbaction.UsbAudioDeviceSelectedItem == null)
                        {
                            MessageBox.Show("Please select audio device in Usb Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testusbaction.UsbDefaultDeviceOptionSelectedItem == null || testusbaction.UsbDefaultDeviceOptionSelectedItem == string.Empty)
                        {
                            MessageBox.Show("Please select device as Multimedia/Communication/Both in Usb Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

   					foreach(TestUserActionItem testUserActionItem in actionItem.SetTestUserActionList)
                    {
                        if(string.IsNullOrEmpty(testUserActionItem.ActionUserText))
                        {
                            MessageBox.Show("Please enter user text in User Action in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestUserVerifyItem testUserVerifyItem in actionItem.VerifyTestUserList)
                    {
                        if (string.IsNullOrEmpty(testUserVerifyItem.VerifyUserText))
                        {
                            MessageBox.Show("Please enter user text in User Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestActionQRCMItem testQRCMaction in actionItem.SetTestQRCMActionList)
                    {                       
                        if (testQRCMaction.QRCM_DeviceSelectedItem == null)
                        {
                            MessageBox.Show("Please select device name in QRCM Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testQRCMaction.QRCM_MethodsSelectedItem == null)
                        {
                            MessageBox.Show("Please select method name in QRCM Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testQRCMaction.SetPayloadBtnIsEnabled)
                        {                        
                            if(testQRCMaction.SetPayloadContent != null && testQRCMaction.SetPayloadContent.Trim() != string.Empty)
                            {
                                string jsonWithoutStatusCode = testQRCMaction.SetPayloadContent.Trim().Replace("QATStatusCode-TreeChecked", "");
                                string[] array = jsonWithoutStatusCode.Split(new string[] { "-TreeChecked" }, StringSplitOptions.RemoveEmptyEntries);
                                if (array.Count() < 2)
                                {
                                    MessageBox.Show("Please enter payload value in QRCM Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                            else if(testQRCMaction.SetPayloadContent == null || testQRCMaction.SetPayloadContent.Trim() == string.Empty)
                            {
                                MessageBox.Show("Please enter payload value in QRCM Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }     
                        }
                        if (testQRCMaction.ArgumentsTextboxIsEnabled && (testQRCMaction.ActionUserArguments == null || testQRCMaction.ActionUserArguments.Trim() == string.Empty))
                        {
                            MessageBox.Show("Please enter input arguments in QRCM Action in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestVerifyQRCMItem testQRCMverification in actionItem.VerifyTestQRCMList)
                    {
                        if (testQRCMverification.QRCM_DeviceSelectedItem == null)
                        {
                            MessageBox.Show("Please select device name in QRCM Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testQRCMverification.QRCM_MethodsSelectedItem == null)
                        {
                            MessageBox.Show("Please select method name in QRCM Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testQRCMverification.SetReferenceBtnIsEnabled)
                        {
                            if (testQRCMverification.SetReferenceContent != null && testQRCMverification.SetReferenceContent.Trim() != string.Empty)
                            {
                                string jsonWithoutStatusCode = testQRCMverification.SetReferenceContent.Trim().Replace("QATStatusCode-TreeChecked", "");
                                string[] array = jsonWithoutStatusCode.Split(new string[] { "-TreeChecked" }, StringSplitOptions.RemoveEmptyEntries);
                                if (array.Count() < 2)
                                {
                                    MessageBox.Show("Please enter Reference value in QRCM Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                            else if (testQRCMverification.SetReferenceContent == null || testQRCMverification.SetReferenceContent.Trim() == string.Empty)
                            {
                                MessageBox.Show("Please enter Reference value in QRCM Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                        if (testQRCMverification.ArgumentsTextboxIsEnabled && (testQRCMverification.VerifyUserArguments == null || testQRCMverification.VerifyUserArguments.Trim() == string.Empty))
                        {
                            MessageBox.Show("Please enter input arguments in QRCM Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestScriptVerification testScriptVerifyItem in actionItem.VerifyTestScriptList)
                    {
                        if (string.IsNullOrEmpty(testScriptVerifyItem.VerifyScriptActionSelectedItem))
                        {
                            MessageBox.Show("Please select Action in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (string.IsNullOrEmpty(testScriptVerifyItem.DevicenamelistSelectedItem))
                        {
                            MessageBox.Show("Please select deviceName in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }                        

                        if (testScriptVerifyItem.VerifyScriptActionSelectedItem == "CPU Monitoring" && string.IsNullOrEmpty(testScriptVerifyItem.CPUNumberSelectedItem))
                        {
                            MessageBox.Show("Please select CPU number in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testScriptVerifyItem.VerifyScriptActionSelectedItem != "CPU Monitoring" && testScriptVerifyItem.VerifyScriptActionSelectedItem != "Deploy Monitoring" && testScriptVerifyItem.VerifyScriptActionSelectedItem != "LoadFromCore Monitoring")
                        {
                            if (testScriptVerifyItem.VerifyScriptActionSelectedItem == "Custom Command" && string.IsNullOrEmpty(testScriptVerifyItem.CustomCommand))
                            {
                                MessageBox.Show("Please enter command in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (string.IsNullOrEmpty(testScriptVerifyItem.RegexMatch))
                            {
                                MessageBox.Show("Please enter Regex text in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (string.IsNullOrEmpty(testScriptVerifyItem.LimitUnitSelectedItem))
                            {
                                MessageBox.Show("Please select Limit unit in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (string.IsNullOrEmpty(testScriptVerifyItem.Upperlimit) || testScriptVerifyItem.Upperlimit == ".")
                            {
                                MessageBox.Show("Please enter Upperlimit value in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }

                            if (string.IsNullOrEmpty(testScriptVerifyItem.Lowerlimit) || testScriptVerifyItem.Lowerlimit == ".")
                            {
                                MessageBox.Show("Please enter Lowerlimit value in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                        
                    }
                    
                    if(actionItem.VerifyTestScriptList.Count > 0)
                    {
                        if (actionItem.ExecuteIterationChkboxIsChecked == true)
                        {
                            if(actionItem.ScriptExecuteIterationChkbxEnable)
                            {
                                if (string.IsNullOrEmpty(actionItem.Script_checktimeTextbox) || Convert.ToInt32(actionItem.Script_checktimeTextbox) == 0)
                                {
                                    MessageBox.Show("Please enter time interval for each iteration in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }

                                if (string.IsNullOrEmpty(actionItem.Script_DurationTextbox) || Convert.ToInt32(actionItem.Script_DurationTextbox) == 0)
                                {
                                    MessageBox.Show("Please enter total execution duration in Script Verification in Action Tab " + actionItem.TestActionItemName, "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                            else
                            {
                                if(actionItem.ExecuteIterationChkboxIsChecked)
                                {
                                    actionItem.ExecuteIterationChkboxIsChecked = false;
                                    actionItem.Script_checktimeTextbox = string.Empty;
                                    actionItem.Script_DurationTextbox = string.Empty;
                                    actionItem.Script_ChecktimeUnitSelected = "Min";
                                    actionItem.Script_DurationTimeUnitSelected = "Hour";

                                }
                            }                           
                        }
                        else
                        {
                            actionItem.Script_checktimeTextbox = string.Empty;
                            actionItem.Script_DurationTextbox = string.Empty;
                            actionItem.Script_ChecktimeUnitSelected = "Min";
                            actionItem.Script_DurationTimeUnitSelected = "Hour";
                        }
                    }


                    foreach (TestUsbAudioBridging testusbaction in actionItem.VerifyTestUsbList)
                    {
                        if (testusbaction.UsbAudioBridgeList.Count() == 0)
                        {
                            MessageBox.Show("No Usb devices available in the testplan \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testusbaction.UsbAudioTypeSelectedItem == null)
                        {
                            MessageBox.Show("Please select playback or recording in Usb Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testusbaction.UsbAudioBridgeTypeSelectedItem == null)
                        {
                            MessageBox.Show("Please select bridge name in Usb Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testusbaction.UsbAudioDeviceSelectedItem == null)
                        {
                            MessageBox.Show("Please select audio device in Usb Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (testusbaction.UsbDefaultDeviceOptionSelectedItem == null || testusbaction.UsbDefaultDeviceOptionSelectedItem == string.Empty)
                        {
                            MessageBox.Show("Please select device as Multimedia/Communication/Both in Usb Verification in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }


                    foreach (TestApxItem testApxItem in actionItem.VerifyTestApxList)
                    {
                        if (testApxItem.APxSettingsList[0].cmbTypeOfMode == null)
                        {
                            MessageBox.Show("Select Apx Verification Property settings in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        string PreferencesServerPath = QatConstants.QATServerPath;

                        if (!Directory.Exists(PreferencesServerPath))
                        {
                            MessageBox.Show("Please enter server path in preferences menu \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        //if (sourceTestCaseItem.IsNewTestCase)
                        //{
                        //    string file = Path.Combine(PreferencesServerPath, "Audio Precision", "AP Project Files", testApxItem.APxLocationTimeStamp);

                        //    if (File.Exists(file))
                        //    {
                        //        MessageBoxResult res = MessageBox.Show("APx file is already exist in the server path in Action Tab " + actionItem.TestActionItemName + ". \nDo you want to replace?", "QAT Error Message", MessageBoxButton.OKCancel, MessageBoxImage.Error);

                        //        if (res == MessageBoxResult.Cancel)
                        //            return false;
                        //    }
                        //}

                        //if (testApxItem.APxLocationTimeStamp != null & testApxItem.APxLocationTimeStamp != string.Empty)
                        //{
                        //    if (sourceTestCaseItem.IsNewTestCase == true)
                        //    {
                        //        if (!GetAPFileExists(("\\Audio Precision" + "\\AP Project Files\\"), testApxItem.APxLocationTimeStamp))
                        //        {
                        //            MessageBox.Show("APx project file is already exist in Action Tab " + actionItem.TestActionItemName + ".\nRename the Apx File \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                        //            return false;
                        //        }
                        //    }
                        //}
                    }

                    foreach (TestLogItem testlogitem in actionItem.VerifyTestLogList)
                    {
                        if (testlogitem.PcapLogIsChecked == true && testlogitem.SetTestPcapList.Count > 0)
                        {
                            foreach (PcapItem testpcapitem in testlogitem.SetTestPcapList)
                            {
                                if (testpcapitem.PcapProtocolName == null || testpcapitem.PcapProtocolName.Trim() == string.Empty)
                                {
                                    MessageBox.Show("Enter Protocol name in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                                if (testpcapitem.PcapFieldText == null || testpcapitem.PcapFieldText.Trim() == string.Empty)
                                {
                                    MessageBox.Show("Enter Field text in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                            if(testlogitem.PcaplogDelaySetting == string.Empty || testlogitem.PcaplogDelaySetting == null)
                            {
                                MessageBox.Show("Enter Pcap log delay in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                        else if(testlogitem.PcapLogIsChecked == true && testlogitem.SetTestPcapList.Count == 0)
                        {
                            MessageBox.Show("Pcap Log Verification is empty in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (testlogitem.PcapLogIsChecked != true && testlogitem.iLogIsChecked != true && testlogitem.ConfiguratorIsChecked != true && testlogitem.EventLogIsChecked != true && testlogitem.KernelLogIsChecked != true && testlogitem.QsysAppLogIsChecked != true && testlogitem.SIPLogIsChecked != true && testlogitem.SoftPhoneLogIsChecked != true && testlogitem.UCIViewerLogIsChecked != true && testlogitem.WindowsEventLogsIsChecked != true)
                        {
                            MessageBox.Show("Log Verification is empty, please select atleast one logs \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.iLogIsChecked == true && (testlogitem.iLog_selected_item == null || testlogitem.iLog_selected_item == string.Empty))
                        {
                            MessageBox.Show("Select iLog device in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.iLogIsChecked == true && (testlogitem.ilogtext == null || testlogitem.ilogtext == string.Empty))
                        {
                            MessageBox.Show("Select iLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.KernelLogIsChecked == true && (testlogitem.kernalLog_selected_item == null || testlogitem.kernalLog_selected_item == string.Empty))
                        {
                            MessageBox.Show("Select KernalLog device in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.KernelLogIsChecked == true && (testlogitem.kernallogtext == null || testlogitem.kernallogtext == string.Empty))
                        {
                            MessageBox.Show("Select KernalLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.ConfiguratorIsChecked == true && (testlogitem.configuratorlogtext == null || testlogitem.configuratorlogtext == string.Empty))
                        {
                            MessageBox.Show("Select ConfiguratorLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.ConfiguratorIsChecked == true && (testlogitem.configuratorlogtext == null || testlogitem.configuratorlogtext == string.Empty))
                        {
                            MessageBox.Show("Select ConfiguratorLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.EventLogIsChecked == true && (testlogitem.eventlogtext == null || testlogitem.eventlogtext == string.Empty))
                        {
                            MessageBox.Show("Select EventLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.SIPLogIsChecked == true && (testlogitem.siplogtext == null || testlogitem.siplogtext == string.Empty))
                        {
                            MessageBox.Show("Select SIP Log command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.QsysAppLogIsChecked == true && (testlogitem.qsysapplogtext == null || testlogitem.qsysapplogtext == string.Empty))
                        {
                            MessageBox.Show("Select QSysAppLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.UCIViewerLogIsChecked == true && (testlogitem.UCIlogtext == null || testlogitem.UCIlogtext == string.Empty))
                        {
                            MessageBox.Show("Select UCILog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testlogitem.WindowsEventLogsIsChecked == true && (testlogitem.windowseventlogtext == null || testlogitem.windowseventlogtext == string.Empty))
                        {
                            MessageBox.Show("Select WindowsEventLog command in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestTelnetItem verifyTestTelnetItem in actionItem.VerifyTestTelnetList)
                    {

                        if (verifyTestTelnetItem.TelnetFailureTextIsEnabled == true)
                        {
                            if (verifyTestTelnetItem.TelnetFailureText == null)
                            {
                                MessageBox.Show("Please enter Compare Values in Ssh/Telnet Verification " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                            if (verifyTestTelnetItem.TelnetFailureText.Trim() == string.Empty)
                            {
                                MessageBox.Show("Please enter Compare Values in Ssh/Telnet Verification " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                    }

                    foreach (TestTelnetItem verifyTestTelnetItem in actionItem.SetTestTelnetList)
                    {
                        if (verifyTestTelnetItem.TelnetCommand == null || verifyTestTelnetItem.TelnetCommand.Trim() == string.Empty)
                        {
                            MessageBox.Show("Please enter Command in Ssh/Telnet action" + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        else
                        {
                            verifyTestTelnetItem.TelnetCommand = verifyTestTelnetItem.TelnetCommand.Trim();
                        }
                        if (verifyTestTelnetItem.TelnetSelectedDevice == null || verifyTestTelnetItem.TelnetSelectedDevice == string.Empty)
                        {
                            MessageBox.Show("Please select device in Ssh/Telnet action " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestCECItem setTestcectItem in actionItem.SetTestCECList)
                    {
                        if(setTestcectItem.DeviceselectionSelecetdItem == null || setTestcectItem.DeviceselectionSelecetdItem == string.Empty)
                        {
                            MessageBox.Show("Please select CEC Device in CEC action " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (setTestcectItem.CECCommandListSelectedItem == null || setTestcectItem.CECCommandListSelectedItem == string.Empty)
                        {
                            MessageBox.Show("Please select CEC command in CEC action " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (setTestcectItem.CECCommandListSelectedItem == "Others" && (setTestcectItem.CECActionOpcode == null || setTestcectItem.CECActionOpcode == string.Empty))
                        {
                            MessageBox.Show("Please enter CEC opcode in CEC action " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if((setTestcectItem.CECActionOpcode != null &&setTestcectItem.CECActionOpcode != string.Empty))
                        {
                            string text = setTestcectItem.CECActionOpcode.ToString();
                            List<string> lst = text.Split(':').ToList();
                            foreach (string txt in lst)
                            {
                                if (txt == string.Empty || txt.Length != 2)
                                {
                                    MessageBox.Show("Please enter valid CEC opcode in CEC action " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                        }
                    }

                    foreach (TestVerifyCECItem verifyTestcectItem in actionItem.VerifyTestCECList)
                    {
                        if (verifyTestcectItem.CECverificationOpcode == null || verifyTestcectItem.CECverificationOpcode == string.Empty)
                        {
                            MessageBox.Show("Please enter CEC Opcode in CEC verification " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        else
                        {
                            string text = verifyTestcectItem.CECverificationOpcode.ToString();
                            List<string> lst = text.Split(':').ToList();
                            foreach(string txt in lst)
                            {
                                if (txt == string.Empty|| txt.Length != 2)
                                {
                                    MessageBox.Show("Please enter valid CEC Opcode in CEC verification " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }                              
                            }                    

                        }

                  
                    }

                    foreach (TestVerifyQRItem verifyTestQRItem in actionItem.VerifyTestQRList)
                    {
                        if (verifyTestQRItem.QRverificationcode == null || verifyTestQRItem.QRverificationcode == string.Empty)
                        {
                            MessageBox.Show("Please enter QR code " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (verifyTestQRItem.CameraSelectedItem == null || verifyTestQRItem.CameraSelectedItem == string.Empty)
                        {
                            MessageBox.Show("Please select camera " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                    }

                    foreach (TestFirmwareItem verifyfirmwareItem in actionItem.SetTestFirmwareList)
                    {
                        if (verifyfirmwareItem.FirmwareBrowseLocation == null || verifyfirmwareItem.FirmwareBrowseLocation == string.Empty && verifyfirmwareItem.FirmwareTypeSelected != "Start auto update with new version of SW at")
                        {
                            MessageBox.Show("Please click on browse to select location\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if (verifyfirmwareItem.FirmwareBrowseLocation != string.Empty && (string.Equals(verifyfirmwareItem.FirmwareTypeSelected, "Automatically update when new version of SW available", StringComparison.CurrentCultureIgnoreCase) || string.Equals(verifyfirmwareItem.FirmwareTypeSelected, "Start auto update with new version of SW at", StringComparison.CurrentCultureIgnoreCase)))
                        {
                            bool qsysexists = false;

                            try
                            {
                                Uri outUri;
                                if (!(Uri.TryCreate(verifyfirmwareItem.FirmwareBrowseLocation, UriKind.Absolute, out outUri) && (outUri.Scheme == Uri.UriSchemeHttp || outUri.Scheme == Uri.UriSchemeHttps)))
                                {
                                    bool isURL = false;

                                    try
                                    {
                                        DirectoryInfo dir = new DirectoryInfo(verifyfirmwareItem.FirmwareBrowseLocation);
                                    }
                                    catch (Exception ex)
                                    {
                                        string val = "http://" + verifyfirmwareItem.FirmwareBrowseLocation;
                                        if (!(Uri.TryCreate(val, UriKind.Absolute, out outUri) && (outUri.Scheme == Uri.UriSchemeHttp || outUri.Scheme == Uri.UriSchemeHttps)))
                                        {
                                            MessageBox.Show("Ivalid firmware path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                            return false;
                                        }
                                        else
                                        {
                                            isURL = true;

                                            string filename = HttpUtility.UrlDecode(System.IO.Path.GetFileName(val));
                                            if (filename != null && filename != string.Empty)
                                            {
                                                MessageBox.Show("Enter only path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                return false;
                                            }

                                            verifyfirmwareItem.FirmwareBrowseLocation = val;
                                        }
                                    }

                                    if (isURL == false)
                                    {
                                        if (checkreadaccess(verifyfirmwareItem.FirmwareBrowseLocation))
                                        {
                                            DirectoryInfo dir = new DirectoryInfo(verifyfirmwareItem.FirmwareBrowseLocation);
                                            DirectoryInfo[] dircollection = dir.GetDirectories();
                                            if (dircollection.Length > 0)
                                            {
                                                foreach (DirectoryInfo direct in dircollection)
                                                {
                                                    if (checkreadaccess(direct.FullName))
                                                    {
                                                        FileInfo[] files = direct.GetFiles();
                                                        if (files.Length > 0)
                                                        {
                                                            foreach (FileInfo file in files)
                                                            {
                                                                if (fileAccesCheck(System.IO.Path.Combine(direct.FullName.ToString(), file.Name)))
                                                                {
                                                                    var versInfo = FileVersionInfo.GetVersionInfo(System.IO.Path.Combine(direct.FullName.ToString(), file.Name));

                                                                    String setupProductName = versInfo.ProductName;
                                                                    if (setupProductName != null)
                                                                    {
                                                                        if (setupProductName.StartsWith("Q-SYS Designer"))
                                                                        {
                                                                            if (String.Equals(Path.GetExtension(direct.FullName.ToString() + file.Name), ".exe", StringComparison.InvariantCultureIgnoreCase))
                                                                            {
                                                                                qsysexists = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("Files inside QSD software root folders are access denied.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                                    return false;
                                                                }

                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("Folders inside QSD software root folders are access denied.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                        return false;
                                                    }

                                                }
                                                if (!qsysexists)
                                                {
                                                    MessageBox.Show("Selected root folder not contains QSD installer. \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("Please select QSD software root folder\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                return false;
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Selected QSD software folder not exists or access denied.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                            return false;
                                        }
                                    }
                                }
                                else
                                {
                                    string filename = HttpUtility.UrlDecode(System.IO.Path.GetFileName(verifyfirmwareItem.FirmwareBrowseLocation));
                                    if (filename != null && filename != string.Empty)
                                    {
                                        MessageBox.Show("Enter only path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                        return false;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("Invalid Path.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }

                        if (verifyfirmwareItem.FirmwareBrowseLocation != string.Empty && string.Equals(verifyfirmwareItem.FirmwareTypeSelected, "Upgrade/Downgrade by installing application", StringComparison.CurrentCultureIgnoreCase))
                        {
                            Uri outUri;

                            if (!(Uri.TryCreate(verifyfirmwareItem.FirmwareBrowseLocation, UriKind.Absolute, out outUri) && (outUri.Scheme == Uri.UriSchemeHttp || outUri.Scheme == Uri.UriSchemeHttps)))
                            {
                                bool isURL = false;

                                try
                                {
                                    DirectoryInfo dir = new DirectoryInfo(verifyfirmwareItem.FirmwareBrowseLocation);
                                }
                                catch (Exception ex)
                                {
                                    string val = "http://" + verifyfirmwareItem.FirmwareBrowseLocation;
                                    if (!(Uri.TryCreate(val, UriKind.Absolute, out outUri) && (outUri.Scheme == Uri.UriSchemeHttp || outUri.Scheme == Uri.UriSchemeHttps)))
                                    {
                                        MessageBox.Show("Invalid firmware path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                        return false;
                                    }
                                    else
                                    {
                                        isURL = true;

                                        //////Chk exe

                                        string fileName = HttpUtility.UrlDecode(System.IO.Path.GetFileName(val));

                                        if (fileName != null && fileName != string.Empty && fileName.StartsWith("Q-SYS Designer", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            verifyfirmwareItem.FirmwareBrowseLocation = val;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                            return false;
                                        }
                                    }
                                }

                                if (isURL == false)
                                {
                                    try
                                    {
                                        FileVersionInfo info = FileVersionInfo.GetVersionInfo(verifyfirmwareItem.FirmwareBrowseLocation);

                                        if (info != null && info.ProductName != null)
                                        {
                                            if (!info.ProductName.Trim().StartsWith("Q-SYS Designer", StringComparison.CurrentCultureIgnoreCase))
                                            {
                                                MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                                return false;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                        return false;
                                    }
                                }
                            }
                            else
                            {
                                ////////Chk exe
                                string fileName = HttpUtility.UrlDecode(System.IO.Path.GetFileName(verifyfirmwareItem.FirmwareBrowseLocation));

                                if (!(fileName != null && fileName != string.Empty && fileName.StartsWith("Q-SYS Designer", StringComparison.CurrentCultureIgnoreCase)))
                                {
                                    MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                    return false;
                                }
                            }
                        }

                        if (verifyfirmwareItem.FirmwareBrowseLocation != string.Empty && string.Equals(verifyfirmwareItem.FirmwareTypeSelected, "Upgrade/Downgrade by launching application", StringComparison.CurrentCultureIgnoreCase))
                        {
                            try
                            {
                                FileVersionInfo info = FileVersionInfo.GetVersionInfo(verifyfirmwareItem.FirmwareBrowseLocation);

                                if (info != null && info.OriginalFilename != null)
                                {
                                    if (!info.OriginalFilename.Trim().StartsWith("Q-SYS Designer", StringComparison.CurrentCultureIgnoreCase))
                                    {
                                        MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                        return false;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("Enter valid Designer exe path/URL.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }

                        if (verifyfirmwareItem.FirmwareTypeSelected == "Start auto update with new version of SW at")
                        {
                            if (verifyfirmwareItem.FirmwareDate == null || verifyfirmwareItem.FirmwareDate == string.Empty)
                            {
                                MessageBox.Show("Please select date for auto update\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                            else if (verifyfirmwareItem.TimeSelectionComboSelectedItem == null || verifyfirmwareItem.TimeSelectionComboSelectedItem == string.Empty)
                            {
                                MessageBox.Show("Please select time for auto update\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                            else if (verifyfirmwareItem.FirmwareBrowseLocation == null || verifyfirmwareItem.FirmwareBrowseLocation == string.Empty)
                            {
                                MessageBox.Show("Please click on browse to select location\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }
                    }
                                    
                    foreach (TestResponsalyzerItem testResponsalyzerItem in actionItem.verifyTestResponsalyzerList)
                    {
                        if ((string.IsNullOrEmpty(testResponsalyzerItem.TestResponsalyzerNameSelectedItem)))
                        {
                            MessageBox.Show("Select Responsalyzer Name in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if ((string.IsNullOrEmpty(testResponsalyzerItem.TestResponsalyzerTypeSelectedItem)))
                        {
                            MessageBox.Show("Select Responsalyzer Graph selection in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                        if ((string.IsNullOrEmpty(testResponsalyzerItem.TestResponsalyzerVerificationFile)))
                        {
                            MessageBox.Show("Select Responsalyzer reference file in Action Tab " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }
                    }

                    foreach (TestDesignerItem testDesignItem in actionItem.SetTestDesignerList)
                    {
                        if (testDesignItem.newdesigncheck == true && testDesignItem.ChkNoOfTimeDeployCheck)
                        {
                            MessageBox.Show("Please select designer option in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testDesignItem.ChkNoOfTimeDeployCheck && string.IsNullOrEmpty(testDesignItem.NoOfTimesDeployed))
                        {
                            MessageBox.Show("Please enter iteration in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if(testDesignItem.Loadfromcore && string.IsNullOrEmpty(testDesignItem.NoOfTimesDeployed))
                        {
                            MessageBox.Show("Please enter iteration in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testDesignItem.Loadfromcore && !string.IsNullOrEmpty(testDesignItem.NoOfTimesDeployed))
                        {
                            int outVal = 0;
                            bool isint = int.TryParse(testDesignItem.NoOfTimesDeployed, out outVal);
                            if (!isint || (outVal == 0))
                            {
                                MessageBox.Show("Please enter iteration greater than '0' in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                                return false;
                            }
                        }

                        if (testDesignItem.ChkNoOfTimeDeployCheck && !string.IsNullOrEmpty(testDesignItem.NoOfTimesDeployed) && Convert.ToInt32(testDesignItem.NoOfTimesDeployed) == 0)
                        {
                            MessageBox.Show("Please enter iteration greater than '0' in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                        if (testDesignItem.IsEnabledDesignerTimeout == Visibility.Visible && string.IsNullOrEmpty(testDesignItem.DesignerTimeout))
                        {
                            MessageBox.Show("Please enter timeout value in " + actionItem.TestActionItemName + " \n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                            return false;
                        }

                       
                    }                    
                }

                if (sourceTestCaseItem.IsNewTestCase)
                {
                    QscDatabase.WriteTestCaseItemToDB(sourceTestCaseItem, null);
                    sourceTestCaseItem.TestCaseTreeViewExplorer = new TreeViewExplorer(sourceTestCaseItem.TestCaseID, sourceTestCaseItem.TestItemName, QatConstants.DbTestCaseTable, null, this, null, null, null, null, null, null,null,null,0, true);
                    AddTreeViewExplorerToList(sourceTestCaseItem.TestCaseTreeViewExplorer, sourceTestCaseItem.Category);
                    sourceTestCaseItem.TestCaseTreeViewExplorer.ChildrenCountViewIsEnabled = true;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestCaseItem.TestCaseID, QatConstants.DbTestActionTable, QatConstants.DbTestCaseLinkTableID, QatConstants.DbTestActionTableTestActionID);

                    if (sourceTestCaseItem.IsTestCaseCreatedFromTestPlan == true)
                    {
                        sourceTestCaseItem.ParentTestPlanItem.TestCaseListAddItem(sourceTestCaseItem.TestCaseTreeViewExplorer);
                    }
                    if (!String.IsNullOrEmpty(sourceTestCaseItem.Createdby))
                    {
                        if (!createdByList.ContainsKey(sourceTestCaseItem.Createdby))
                            createdByList.Add(sourceTestCaseItem.Createdby, 1);
                        else
                            createdByList[sourceTestCaseItem.Createdby] = createdByList[sourceTestCaseItem.Createdby] + 1;
                    }
                    if (!String.IsNullOrEmpty(sourceTestCaseItem.Category))
                    {
                        if (!categoryList.ContainsKey(sourceTestCaseItem.Category))
                            categoryList.Add(sourceTestCaseItem.Category, 1);
                        else
                            categoryList[sourceTestCaseItem.Category] = categoryList[sourceTestCaseItem.Category] + 1;
                    }
                    sourceTestCaseItem.TestCaseTreeViewExplorer.ItemName = sourceTestCaseItem.TestItemName;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Createdon = sourceTestCaseItem.Createdon;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Createdby = sourceTestCaseItem.Createdby;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Summary = sourceTestCaseItem.Summary;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Category = sourceTestCaseItem.Category;
                    sourceTestCaseItem.CancelButtonIsEnabled = true;
                    sourceTestCaseItem.SaveButtonIsEnabled = false;

                }
                else
                {
                  
                    QscDatabase.WriteTestCaseItemToDB(sourceTestCaseItem, null);
                    sourceTestCaseItem.TestCaseTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestCaseItem.TestCaseID, QatConstants.DbTestActionTable, QatConstants.DbTestCaseLinkTableID, QatConstants.DbTestActionTableTestActionID);
                    //RemoveTreeViewExplorerFromList(sourceTestCaseItem.TestCaseTreeViewExplorer, sourceTestCaseItem.TestItemName);
                  
                    sourceTestCaseItem.TestCaseTreeViewExplorer.ItemName = sourceTestCaseItem.TestItemName;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Modifiedon = sourceTestCaseItem.Modifiedon;
                    sourceTestCaseItem.TestCaseTreeViewExplorer.Modifiedby = sourceTestCaseItem.Modifiedby;
                    sourceTestCaseItem.CancelButtonIsEnabled = true;
                    sourceTestCaseItem.SaveButtonIsEnabled = false;

                }
                      return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                if(ex.ToString().Contains("is denied"))
                {
                    MessageBox.Show("Selected folder is access denied.\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    return false;
                }
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
        }

        public bool checkreadaccess(string path_folder)
        {
            DirectoryInfo directory = new DirectoryInfo(path_folder);
            if (directory.Exists)
            {
                try
                {
                    var acl = directory.GetAccessControl();
                    return true;
                }
                catch (UnauthorizedAccessException ex)
                {
                    if (ex.Message.Contains("read-only"))
                    {

                        return true;
                    }
                }
            }

            return false;
        }

        public bool fileAccesCheck(string fileName)
        {
            try
            {
                using (FileStream stream = File.Open(fileName, FileMode.Open, FileAccess.Read))
                {
                    return true;
                }
            }
            catch (IOException)
            {
                return false;
            }
            catch(Exception)
            {
                return false;
            }
               
            
        }

        public static bool IsValid(DependencyObject parent)
        {
            try
            {
                if (Validation.GetHasError(parent))
                    return false;

                // Validate all the bindings on the children
                for (int i = 0; i != VisualTreeHelper.GetChildrenCount(parent); ++i)
                {
                    DependencyObject child = VisualTreeHelper.GetChild(parent, i);
                    if (!IsValid(child)) { return false; }
                }

                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }

        }

        public bool GetAPFileExists(string FilePath, string apFile)
        {
            try
            {
                FileInfo path = new FileInfo(apFile);
                string ap_path = path.FullName;
                string apfileName = path.Name;

                string PreferencesServerPath = QatConstants.QATServerPath + FilePath;
                if (!Directory.Exists(PreferencesServerPath))
                    return true;

                if (File.Exists(PreferencesServerPath + apfileName))
                    return false;

                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
        }

        private void ServerMenuItem_Click_Designer(object sender, RoutedEventArgs e)
        {
            DeviceDiscovery.CreatePreferenceWindow();
            ////OpenPreferences();
        }

        private void OpenPreferences()
        {
            try
            {
                ServerDetails serverInvoke = new ServerDetails();
                serverInvoke.Owner = this;
                serverInvoke.ShowDialog();
                serverInvoke.Close();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12092", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeViewDesigner_Drop(object sender, DragEventArgs e)
        {
            try
            {

                if (_dragdropWindow != null)
                {
                    _dragdropWindow.Close();
                    _dragdropWindow = null;
                }


                if (e.Data == null)
                    return;

                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;


                if (dragData.DragSourceType == "TestSuiteListView")
                {
                    TestSuiteItem sourceTestSuite = null;
                    List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();

                    sourceTestSuite = dragData.SourceTestSuiteItem;
                    testPlanList = dragData.SelectedItems;

                    sourceTestSuite.TestPlanListRemoveList(testPlanList);
                }
                else if (dragData.DragSourceType == "TestPlanListView")
                {
                    TestPlanItem sourceTestPlan = null;
                    List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();

                    sourceTestPlan = dragData.SourceTestPlanItem;
                    testCaseList = dragData.SelectedItems;

                    sourceTestPlan.TestCaseListRemoveList(testCaseList);
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show(ex.ToString());
            }

        }

        private void TestAction_ContentRendered(object sender, EventArgs e)
        {
            //Checking whether server path exists and permission status
            try
            {
                FilterValueSelection = Visibility.Hidden;
                FilterSummaryText = Visibility.Hidden;
                FilterStartDate = Visibility.Hidden;
                FilterEndDate = Visibility.Hidden;

                if (!Directory.Exists(QatConstants.QATServerPath))
                {
                    MessageBox.Show("Invalid Server path", "", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
                else
                {
                    ServerDetails folderreadcheck = new ServerDetails();
                    bool hasreadAccess = folderreadcheck.hasWriteAccessToFolder(QatConstants.QATServerPath);
                    folderreadcheck.Close();
                    if (!hasreadAccess)
                    {
                        MessageBox.Show("The server path entered in Preferences Menu is read only", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12093", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TCname_textBox_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                TextBox nameTextBox = sender as TextBox;
                if (nameTextBox == null)
                    return;
                RemoveAdornerFromTextBox(nameTextBox);
                TestCaseItem sourceTestCaseItem = nameTextBox.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (nameTextBox.IsKeyboardFocusWithin == false)
                    IsItemNameExist(sourceTestCaseItem.TestItemName, sourceTestCaseItem.TestItemNameCopy);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void TestPlan_TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                TextBox nameTextBox = sender as TextBox;
                if (nameTextBox == null)
                    return;
                RemoveAdornerFromTextBox(nameTextBox);
                TestPlanItem sourceTestPlanItem = nameTextBox.DataContext as TestPlanItem;
                if (sourceTestPlanItem == null)
                    return;

                if (nameTextBox.IsKeyboardFocusWithin == false)
                    IsItemNameExist(sourceTestPlanItem.TestItemName, sourceTestPlanItem.TestItemNameCopy);

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private bool IsItemNameExist(string itemName, string itemNameCopy)
        {
            try
            {
                if (itemName == null)
                {
                    MessageBox.Show("Name is empty\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    return true;
                }

                if (String.Equals(itemName.Trim(), itemNameCopy, StringComparison.CurrentCultureIgnoreCase))
                    return false;

                string existstc = QscDatabase.ChkNameExistinInventoryList(itemName.Trim());

                if (itemName.Trim() == "")
                {
                    MessageBox.Show("Name is empty\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    return true;
                }
                else if (existstc != null)
                {
                    MessageBox.Show("Name already available in " + existstc + " list.\nPlease rename", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    itemName = string.Empty;
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                return true;
            }
        }

        private void btn_btn_SelectActionPlus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestActionItem originalTestActionItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestActionItem"))
                    originalTestActionItem = (TestActionItem)selectedComboBox.DataContext;

                if (originalTestActionItem == null)
                    return;

                originalTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                switch (originalTestActionItem.ActionSelected)
                {
                    case "Control Action":
                        originalTestActionItem.AddSetTestControlItem();
                        break;
                    case "Ssh/Telnet Action":
                        originalTestActionItem.AddSetTestTelnetItem();
                        break;
                    case "Firmware Action":
                        break;
                    case "Designer Action":
                        break;
                    case "USB Action":
                        originalTestActionItem.AddSetTestUsbItem();
                        break;
                    case "CEC Action":
                        originalTestActionItem.AddSetTestCECItem();
                        break;
                    case "User Action":
                        originalTestActionItem.AddSetTestUserItem();
                        break;
                    case "QRCM Action":
                        originalTestActionItem.AddSetTestQRCMItem();
                        break;
                    case "Skip Action":
                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SetControlMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestControlItem originalTestControlItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                    originalTestControlItem = (TestControlItem)selectedComboBox.DataContext;

                if (originalTestControlItem == null)
                    return;

                originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                originalTestControlItem.ParentTestActionItem.RemoveSetTestControlItem(originalTestControlItem);

                if (originalTestControlItem.ParentTestActionItem.SetTestControlList.Count == 0)
                    originalTestControlItem.ParentTestActionItem.ActionSelected = "Skip Action";
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SelectVerificationPlus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestActionItem originalTestActionItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestActionItem"))
                    originalTestActionItem = (TestActionItem)selectedComboBox.DataContext;

                if (originalTestActionItem == null)
                    return;

                originalTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                switch (originalTestActionItem.VerificationSelected)
                {
                    case "Control Verification":
                        originalTestActionItem.AddVerifyTestControlItem();
                        break;
                    case "Ssh/Telnet Verification":
                        break;
                    case "LUA Text Verification":
                        break;
                    case "Log Verification":
                        break;
                    case "Audio Precision Verification":
                        break;
                    case "Responsalyzer":
                        originalTestActionItem.AddTestResponsalyzerItem();
                        break;
                    case "USB Verification":
                        originalTestActionItem.AddVerifyTestUsbItem();
                        break;
                    case "CEC Verification":
                        originalTestActionItem.AddVerifyTestCECItem();
                        break;
                    case "QR code Verification":
                        originalTestActionItem.AddVerifyTestQRItem();
                        break;
                    case "Script Verification":
                        originalTestActionItem.AddVerifyTestScriptItem();
                        break;
                    case "User Verification":
                        originalTestActionItem.AddTestUserVerifyItem();
                        break;
                    case "QRCM Verification":
                        originalTestActionItem.AddVerifyTestQRCMItem();
                        break;
                    case "Skip Verification":
                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_VerifyControlMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestControlItem originalTestControlItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                    originalTestControlItem = (TestControlItem)selectedComboBox.DataContext;

                if (originalTestControlItem == null)
                    return;

                originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestControlItem.ParentTestActionItem.RemoveVerifyTestControlItem(originalTestControlItem);

                if (originalTestControlItem.ParentTestActionItem.VerifyTestControlList.Count == 0)
                {
                    originalTestControlItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void TextBox_PreviewKeyUp(object sender, KeyEventArgs e)
        {
            var textBox = e.OriginalSource as TextBox;

            if (textBox != null && e.Key == Key.Tab)
            {
                textBox.SelectAll();
            }
        }

        private void btn_SetTelnetMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestTelnetItem originalTestTelnetItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestTelnetItem"))
                    originalTestTelnetItem = (TestTelnetItem)selectedComboBox.DataContext;

                if (originalTestTelnetItem == null)
                    return;

                originalTestTelnetItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestTelnetItem.ParentTestActionItem.RemoveSetTestTelnetItem(originalTestTelnetItem);
                if (originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList.Count == 0)
                {
                    originalTestTelnetItem.ParentTestActionItem.ActionSelected = "Skip Action";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void RefreshMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string order = mstrOrders;
                Refresh_ImportWindow(order);
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

     


        public void RefreshFilterItemCategory(bool skippropertyupdate)
        {
            try
            {
                string selectedItem = string.Empty;
                string filterSelection = string.Empty;
                if(!skippropertyupdate)
                {
                    categoryList.Clear();
                    createdByList.Clear();
                    modifiedByList.Clear();

                    categoryList = QscDatabase.ReadFilterItemList(QatConstants.DbCategoryColumnName);
                    createdByList = QscDatabase.ReadFilterItemList(QatConstants.DbCreatedByColumnName);
                    modifiedByList = QscDatabase.ReadFilterItemList(QatConstants.DbModifiedByColumnName);
                }
               

                selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                filterSelection = comboSortValueSelection1.SelectionBoxItem.ToString();
                if (selectedItem != string.Empty)
                {
                    if ((selectedItem == "Created by") | (selectedItem == "Modified by") | (selectedItem == "Category"))
                    {
                        insertselectionItem();
                        copiedItemsDesigner.Clear();
                        comboSelectionChanged_forRefresh();
                       
                    }
                    else if(selectedItem == "Created on" || selectedItem == "Modified on" || selectedItem == "Summary")
                    {
                        insertselectionItem();
                        copiedItemsDesigner.Clear();

                        if (selectedItem == "Created on" || selectedItem == "Modified on")
                            toDatePicker_forRefresh();
                        //toDatePicker_SelectedDateChanged(null, null);

                        if (selectedItem == "Summary")
                            summaryTextBox_ForRefresh();
                        //summaryTextBox_TextChanged(null, null);
                    }

                }


            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxxF", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

public void Refresh_ImportWindow(string order)
        {
            try
            {
                if (order == string.Empty)
                { 

                    order = "No order";

                    MenuAscending1.IsChecked = MenuAscending2.IsChecked= false;
                    MenuascendingName.IsChecked = ascendingName.IsChecked= false;
                    MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked= false;

                    MenuDecending1.IsChecked = MenuDecending2.IsChecked=false;
                    MenudecendingName.IsChecked = descendingName.IsChecked=false;
                    MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked=false;



                }
                Mouse.OverrideCursor = Cursors.Wait;
             

                if (isGroupByCategory == false)
                {
                    if (isDesignerFilterListSelected)
                    {
                        SetupTreeViewDesignerFromDB(false, order);
                        RefreshFilterItemCategory(true);
                        //SetupFilterTreeViewDesignerFromDB(true, mstrOrders);
                    }
                    else
                    {
                        SetupTreeViewDesignerFromDB(true, order);
                        //categoryList = QscDatabase.ReadFilterItemList(QatConstants.DbCategoryColumnName);
                        //createdByList = QscDatabase.ReadFilterItemList(QatConstants.DbCreatedByColumnName);
                        //modifiedByList = QscDatabase.ReadFilterItemList(QatConstants.DbModifiedByColumnName);
                        insertselectionItem();
                    }

                    //RefreshFilterItem();
                }
                else
                {
                    copiedItemsDesigner.Clear();

                    if (isDesignerFilterListSelected)
                    {
                        SetupcategoryTreeViewDesignerFromDB(false, order);
                        RefreshFilterItemCategory(false);

                        //SetupFilterTreeViewCategory(true, mstrOrders);
                    }
                    else
                    {
                        categoryList.Clear();
                        createdByList.Clear();
                        modifiedByList.Clear();
                        SetupcategoryTreeViewDesignerFromDB(true, order);
                        categoryList = QscDatabase.ReadFilterItemList(QatConstants.DbCategoryColumnName);
                        createdByList = QscDatabase.ReadFilterItemList(QatConstants.DbCreatedByColumnName);
                        modifiedByList = QscDatabase.ReadFilterItemList(QatConstants.DbModifiedByColumnName);
                        insertselectionItem();

                    }
                }
                mstrOrders_originalList = mstrOrders;
                isDesignerSearchListSelected = false;
                Mouse.OverrideCursor = null;

            }

             catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxxF", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    


        private void TSRmoveAll_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestSuiteItem sourceTestSuite = sourceMenuItem.DataContext as TestSuiteItem;
                if (sourceTestSuite == null)
                    return;

                sourceTestSuite.TestPlanListRemoveAll();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TPRmoveAll_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestPlanItem sourceTestPlan = sourceMenuItem.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseListRemoveAll();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TSCut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestSuiteItem sourceTestSuite = sourceMenuItem.DataContext as TestSuiteItem;
                if (sourceTestSuite == null)
                    return;

                sourceTestSuite.TestPlanListForCutCopy.Clear();
                foreach (var item in sourceTestSuite.TestPlanSelectedList)
                {
                    sourceTestSuite.TestPlanListForCutCopy.Add(item);
                }

                sourceTestSuite.IsCutMenuSelected = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TSCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestSuiteItem sourceTestSuite = null;

                MenuItem sourceMenuItem = sender as MenuItem;

                sourceTestSuite = sender as TestSuiteItem;

                if (sourceMenuItem == null && sourceTestSuite==null)
                    return;

                if (sourceMenuItem != null)
                {
                    sourceTestSuite = sourceMenuItem.DataContext as TestSuiteItem;
                }

                if (sourceTestSuite == null)
                    return;

                sourceTestSuite.TestPlanListForCutCopy.Clear();
                foreach (var item in sourceTestSuite.TestPlanSelectedList)
                {
                    sourceTestSuite.TestPlanListForCutCopy.Add(item);
                }

                sourceTestSuite.IsCutMenuSelected = false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TSPaste_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                IsScrolltoEnd = "Bottom";

                TestSuiteItem sourceTestSuite = null;

                MenuItem sourceMenuItem = sender as MenuItem;

                sourceTestSuite = sender as TestSuiteItem;

                if (sourceMenuItem == null && sourceTestSuite==null)
                    return;
                if (sourceMenuItem != null)
                {
                    sourceTestSuite = sourceMenuItem.DataContext as TestSuiteItem;
                }

                if (sourceTestSuite == null)
                    return;

                if (sourceTestSuite.TestPlanListForCutCopy.Count > 0)
                {
                    int targetIndex = sourceTestSuite.TestPlanList.Count;
                    if (sourceTestSuite.TestPlanSelectedList.Count > 0)
                    {
                       
                        targetIndex = sourceTestSuite.TestPlanList.IndexOf(sourceTestSuite.TestPlanSelectedList[0]);
                        IsScrolltoEnd = targetIndex.ToString();
                    }

                    int sourceIndex = sourceTestSuite.TestPlanList.IndexOf(sourceTestSuite.TestPlanListForCutCopy[0]);

                    if (sourceIndex < targetIndex && targetIndex < sourceTestSuite.TestPlanList.Count)
                        targetIndex += 1;

                    if (targetIndex < 0 || sourceIndex < 0)
                        return;

                    sourceTestSuite.TestPlanListInsertList(targetIndex, sourceTestSuite.TestPlanListForCutCopy);

                    if (sourceTestSuite.IsCutMenuSelected)
                    {
                        int removeCount = sourceTestSuite.TestPlanListForCutCopy.Count;
                        for (int i = 0; i < removeCount; i++)
                        {
                            sourceTestSuite.TestPlanListRemoveItem(sourceTestSuite.TestPlanListForCutCopy[i]);
                        }

                        sourceTestSuite.TestPlanListForCutCopy.Clear();
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TPCut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MenuItem sourceMenuItem = sender as MenuItem;
                if (sourceMenuItem == null)
                    return;

                TestPlanItem sourceTestPlan = sourceMenuItem.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseListForCutCopy.Clear();
                foreach (var item in sourceTestPlan.TestCaseSelectedList)
                {
                    sourceTestPlan.TestCaseListForCutCopy.Add(item);
                }

                sourceTestPlan.IsCutMenuSelected = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TPCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestPlanItem sourceTestPlan = null;

                MenuItem sourceMenuItem = sender as MenuItem;

                sourceTestPlan = sender as TestPlanItem;

                if (sourceMenuItem == null && sourceTestPlan==null)
                    return;

                if (sourceMenuItem != null)
                sourceTestPlan = sourceMenuItem.DataContext as TestPlanItem;

                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseListForCutCopy.Clear();
                foreach (var item in sourceTestPlan.TestCaseSelectedList)
                {
                    sourceTestPlan.TestCaseListForCutCopy.Add(item);
                }

                sourceTestPlan.IsCutMenuSelected = false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TPPaste_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                IsScrolltoEnd = "Bottom";
                TestPlanItem sourceTestPlan = null;

                sourceTestPlan = sender as TestPlanItem;
                MenuItem sourceMenuItem = sender as MenuItem;

                if (sourceMenuItem == null && sourceTestPlan == null)
                    return;

                if (sourceMenuItem != null)
                    sourceTestPlan = sourceMenuItem.DataContext as TestPlanItem;

                if (sourceTestPlan == null)
                    return;

                if (sourceTestPlan.TestCaseListForCutCopy.Count > 0)
                {
                    int targetIndex = sourceTestPlan.TestCaseList.Count;
                    if (sourceTestPlan.TestCaseSelectedList.Count > 0)
                    {
                        
                        targetIndex = sourceTestPlan.TestCaseList.IndexOf(sourceTestPlan.TestCaseSelectedList[0]);
                        IsScrolltoEnd = targetIndex.ToString();
                    }

                    int sourceIndex = sourceTestPlan.TestCaseList.IndexOf(sourceTestPlan.TestCaseListForCutCopy[0]);

                    if (sourceIndex < targetIndex && targetIndex < sourceTestPlan.TestCaseList.Count)
                        targetIndex += 1;

                    if (targetIndex < 0 || sourceIndex < 0)
                        return;

                    sourceTestPlan.TestCaseListInsertList(targetIndex, sourceTestPlan.TestCaseListForCutCopy);

                    if (sourceTestPlan.IsCutMenuSelected)
                    {
                        int removeCount = sourceTestPlan.TestCaseListForCutCopy.Count;
                        for (int i = 0; i < removeCount; i++)
                        {
                            sourceTestPlan.TestCaseListRemoveItem(sourceTestPlan.TestCaseListForCutCopy[i]);
                        }
                        sourceTestPlan.TestCaseListForCutCopy.Clear();
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Btn_CreateNewTestCase_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Properties.Settings.Default.TesterName.ToString() != string.Empty)
                {
                    Button sourceButton = sender as Button;
                    if (sourceButton == null)
                        return;

                    TestPlanItem sourceTestPlan = sourceButton.DataContext as TestPlanItem;
                    if (sourceTestPlan == null)
                        return;

                    if (sourceTestPlan.TestItemName != string.Empty)
                    {
                        TestCaseItem newTestCaseItem = new TestCaseItem(sourceTestPlan);
                        newTestCaseItem.SaveButtonIsEnabled = false;
                        DesignerTabList.Add(newTestCaseItem);
                    }
                    else if (sourceTestPlan.TestItemName == string.Empty)
                    {
                        MessageBox.Show("Please enter Testplan name");
                    }
                }
                else
                {
                    MessageBox.Show("Please enter Tester name in the preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12097", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Btn_TestSuitedelete_Click(object sender, RoutedEventArgs e)
           {
            try
            {
                TestSuiteItem sourceTestSuiteItem = null;
                Button sourceButton = sender as Button;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestSuiteItem")
                    sourceTestSuiteItem = (TestSuiteItem)sourceButton.DataContext;
                
                TestSuiteCancel(sourceTestSuiteItem);

               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12099", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestSuiteCancel(TestSuiteItem sourceTestSuiteItem)
        {
            MessageBoxResult btnresult = MessageBoxResult.Yes;

            if (!(sourceTestSuiteItem != null && sourceTestSuiteItem.SaveButtonIsEnabled == false))
                btnresult = MessageBox.Show("All your testsuite changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (btnresult == MessageBoxResult.Yes)
            {
                if (sourceTestSuiteItem != null)
                {
                    sourceTestSuiteItem.SaveButtonIsEnabled = false;
                }

                if (sourceTestSuiteItem == null || sourceTestSuiteItem.IsNewTestSuite == true)
                {
                    TestBlankItem newBlankItem = new TestBlankItem();
                    AddTabToDesigner(newBlankItem, false);
                }
                else
                {
                    QscDatabase.SetEditedByItem(sourceTestSuiteItem.TestSuiteTreeViewExplorer, string.Empty);
                    OpenTreeViewItem(sourceTestSuiteItem.TestSuiteTreeViewExplorer, false);
                }
            }

            if (Action_Window != null)
            {
                Action_Window.Close();
            }
        }

        private void Btn_TestPlanCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                TestPlanItem sourceTestPlanItem = null;
                Button sourceButton = sender as Button;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestPlanItem")
                    sourceTestPlanItem = (TestPlanItem)sourceButton.DataContext;

                TestPlanCancel(sourceTestPlanItem);

               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12100", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestPlanCancel(TestPlanItem sourceTestPlanItem)
        {
            MessageBoxResult btnresult = MessageBoxResult.Yes;

            if (!(sourceTestPlanItem != null && sourceTestPlanItem.SaveButtonIsEnabled == false))
                btnresult = MessageBox.Show("All your testplan changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (btnresult == MessageBoxResult.Yes)
            {
                if (sourceTestPlanItem != null)
                {
                    sourceTestPlanItem.SaveButtonIsEnabled = false;
                }

                if (sourceTestPlanItem == null || sourceTestPlanItem.IsNewTestPlan == true)
                {
                    TestBlankItem testBlankItem = new TestBlankItem();
                    AddTabToDesigner(testBlankItem, false);
                }
                else
                {
                    QscDatabase.SetEditedByItem(sourceTestPlanItem.TestPlanTreeViewExplorer, string.Empty);
                    OpenTreeViewItem(sourceTestPlanItem.TestPlanTreeViewExplorer, false);
                }
            }

            if (Action_Window != null)
            {
                Action_Window.Close();
            }
        }

        private void Btn_TestCaseCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestCaseItem sourceTestCaseItem = null;
                Button sourceButton = sender as Button;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestCaseItem")
                    sourceTestCaseItem = (TestCaseItem)sourceButton.DataContext;

                TestCaseCancel(sourceTestCaseItem);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12101", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestCaseCancel(TestCaseItem sourceTestCaseItem)
        {
            try
            {

                MessageBoxResult btnresult = MessageBoxResult.Yes;

                if (!(sourceTestCaseItem != null && sourceTestCaseItem.SaveButtonIsEnabled == false))
                    btnresult = MessageBox.Show("All your testcase changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

                if (btnresult == MessageBoxResult.Yes)
                {
                    if (sourceTestCaseItem != null)
                    {
                        sourceTestCaseItem.SaveButtonIsEnabled = false;
                    }

                    if (sourceTestCaseItem == null || sourceTestCaseItem.IsNewTestCase == true)
                    {
                        TestBlankItem newBlankItem = new TestBlankItem();
                        AddTabToDesigner(newBlankItem, false);
                    }
                    else
                    {
                        QscDatabase.SetEditedByItem(sourceTestCaseItem.TestCaseTreeViewExplorer, string.Empty);
                        OpenTreeViewItem(sourceTestCaseItem.TestCaseTreeViewExplorer, false);
                    }

                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12101", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopStart_textBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;
                if (sourceTestCaseItem != null)
                {
                    TestControlItem originalTestControlItem = null;
                    if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.TextBox")
                    {
                        var sourceTextBox = (TextBox)e.OriginalSource;
                        if (sourceTextBox != null && sourceTextBox.DataContext != null && String.Equals(sourceTextBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                            originalTestControlItem = (TestControlItem)sourceTextBox.DataContext;
                        string loopStartText = e.Text;
                        e.Handled = IsTextAllowed(loopStartText);
                        if (e.Handled)
                        {
                            if ((originalTestControlItem.ChannelSelectionSelectedItem != string.Empty) && ((originalTestControlItem.ChannelSelectionList.Count > 0)))// & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                            {
                                Int32 _textloopstart = Convert.ToInt32(loopStartText);
                                Int32 channelCount = originalTestControlItem.ChannelSelectionList.Count;
                                if ((_textloopstart > 0) & (_textloopstart < channelCount))
                                {
                                    e.Handled = false;
                                }
                                else if (_textloopstart == 0)
                                {
                                    e.Handled = false;
                                }
                                else if (_textloopstart == channelCount)
                                {
                                    e.Handled = false;
                                }
                                else
                                {
                                    e.Handled = true;
                                }
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                        //string loopStartText = originalTestControlItem.LoopStart;

                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12104", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopStart_textBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                string lstrCopyandPasteTxtBox = null;
                if (e.Handled == IsTextAllowed(e.ToString()))
                {
                    if (e.Key == Key.Space)
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }
                //copy and Paste               
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(lstrCopyandPasteTxtBox))
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12105", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void textBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                string lstrCopyandPasteTxtBox = null;
                TextBox Text = e.OriginalSource as TextBox;
                AdornerLayer myAdornerLayer = null;
                var rect = Text.GetRectFromCharacterIndex(Text.CaretIndex);
                var point = rect.BottomRight;



                if (Text != null)
                {
                    myAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                    Warning = new TextblockWarning(myAdornerLayer, point.X, point.Y);
                }


               
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (Regex.IsMatch(lstrCopyandPasteTxtBox, @"[\\/:*?<>'%|""[\]&]"))
                    {
                        if (myAdornerLayer != null && Text != null)
                        {
                            Warning.Remove(myAdornerLayer, Text);
                            myAdornerLayer.Add(new TextblockWarning(Text, point.X, point.Y));

                        }
                        e.Handled = true;
                    }
                    else
                    {
                        Warning.Remove(myAdornerLayer, Text);
                        e.Handled = false;
                    }

                    base.OnPreviewKeyDown(e);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12105", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopEnd_textBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (sourceTestCaseItem != null)
                {
                    TestControlItem originalTestControlItem = null;
                    if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.TextBox")
                    {
                        var sourceTextBox = (TextBox)e.OriginalSource;
                        if (sourceTextBox != null && sourceTextBox.DataContext != null && String.Equals(sourceTextBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                            originalTestControlItem = (TestControlItem)sourceTextBox.DataContext;
                        string loopEndText = e.Text;
                        e.Handled = IsTextAllowed(loopEndText);
                        if (e.Handled)
                        {
                            if ((originalTestControlItem.ChannelSelectionSelectedItem != string.Empty) && ((originalTestControlItem.ChannelSelectionList.Count > 0)) && ((!string.IsNullOrEmpty(originalTestControlItem.LoopStart))))// & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                            {
                                Int32 _textloopstart = Convert.ToInt32(originalTestControlItem.LoopStart);
                                Int32 _textloopend = Convert.ToInt32(loopEndText);
                                Int32 channelCount = originalTestControlItem.ChannelSelectionList.Count;
                                if ((_textloopend > 0) && (_textloopend <= channelCount) && (_textloopend > _textloopstart))
                                {
                                    e.Handled = false;
                                }
                                else if (_textloopstart == 0)
                                {
                                    e.Handled = false;
                                }
                                else
                                {
                                    e.Handled = false;
                                }
                            }
                            else
                            {
                                e.Handled = false;
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                        //string loopStartText = originalTestControlItem.LoopStart;

                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12106", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopIncrement_textBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (sourceTestCaseItem != null)
                {
                    TestControlItem originalTestControlItem = null;
                    if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.TextBox")
                    {
                        var sourceTextBox = (TextBox)e.OriginalSource;
                        if (sourceTextBox != null && sourceTextBox.DataContext != null && String.Equals(sourceTextBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                            originalTestControlItem = (TestControlItem)sourceTextBox.DataContext;
                        string loopIncrText = e.Text;
                        e.Handled = IsTextAllowed(loopIncrText);
                        if (e.Handled)
                        {
                            if ((originalTestControlItem.ChannelSelectionSelectedItem != string.Empty) && ((originalTestControlItem.ChannelSelectionList.Count > 0)) && ((!string.IsNullOrEmpty(originalTestControlItem.LoopStart))) && ((!string.IsNullOrEmpty(originalTestControlItem.LoopEnd))))// & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                            {
                                Int32 _textloopIncr = Convert.ToInt32(loopIncrText);
                                Int32 channelCount = originalTestControlItem.ChannelSelectionList.Count;
                                if ((_textloopIncr > 0) & (_textloopIncr < channelCount))
                                {
                                    e.Handled = false;
                                }
                                else if (_textloopIncr == 0)
                                {
                                    e.Handled = false;
                                }
                                else if (_textloopIncr == channelCount)
                                {
                                    e.Handled = false;
                                }
                                else
                                {
                                    e.Handled = false;
                                }
                            }
                            else
                            {
                                e.Handled = true;
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                        //string loopStartText = originalTestControlItem.LoopStart;

                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12107", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopEnd_textBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Handled == IsTextAllowed(e.ToString()))
                {
                    if (e.Key == Key.Space)
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }
                // Copy and Paste
                string lstrCopyandPasteTxtBox = null;
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(lstrCopyandPasteTxtBox))
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12108", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoopIncrement_textBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Handled == IsTextAllowed(e.ToString()))
                {
                    if (e.Key == Key.Space)
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }

                string lstrCopyandPasteTxtBox = null;
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(lstrCopyandPasteTxtBox))
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12109", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_Value_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (sourceTestCaseItem != null)
                {
                    TestControlItem originalTestControlItem = null;
                    if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.TextBox")
                    {
                        var sourceTextBox = (TextBox)e.OriginalSource;
                        if (sourceTextBox != null && sourceTextBox.DataContext != null && String.Equals(sourceTextBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                            originalTestControlItem = (TestControlItem)sourceTextBox.DataContext;

                        string controlSelected = string.Empty;
                        string selectedPrettyName = originalTestControlItem.ChannelSelectionSelectedItem;
                        string selectedControlID = string.Empty;

                        if ((!string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)))// & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                        {
                            if ((!string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)) & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))//& ((originalTestControlItem.TestControlPropertySelectedItem.StartsWith("CHANNEL "))|| (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("OUTPUT "))|| (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT_OUTPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("TAP ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_INPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_OUTPUT ")))
                            {
                                string[] prettyControlName = null;
                                sourceTestCaseItem.ControlIDDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + originalTestControlItem.TestControlPropertySelectedItem + selectedPrettyName, out prettyControlName);

                                if (prettyControlName != null)
                                {
                                    if(prettyControlName.Count() > 0)
                                        selectedPrettyName = prettyControlName[0];
                                    if(prettyControlName.Count() > 1)
                                        selectedControlID = prettyControlName[1];
                                }

                                controlSelected = selectedPrettyName + "~" + removeQATPrefix(originalTestControlItem.TestControlPropertySelectedItem);
                                
                                //if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("CHANNEL "))
                                //controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + removeQATPrefix(originalTestControlItem.TestControlPropertySelectedItem);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 7);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 6);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 13);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("TAP "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 4);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 19);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 20);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_INPUT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 26);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 18);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 19);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 11);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 12);
                            }
                            else
                            {
                                string[] prettyControlName = null;
                                sourceTestCaseItem.ControlIDDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + originalTestControlItem.TestControlPropertySelectedItem, out prettyControlName);
                                //selectedPrettyName = prettyControlName[0];

                                if(prettyControlName != null && prettyControlName.Count() > 1)
                                    selectedControlID = prettyControlName[1];

                                controlSelected = originalTestControlItem.TestControlPropertySelectedItem;
                            }
                            
                            if ((sourceTestCaseItem.dataTypeDictionary.Keys.Contains(originalTestControlItem.TestControlComponentNameSelectedItem+controlSelected + selectedControlID)) | (sourceTestCaseItem.VerifyDataTypeDictionary.Keys.Contains(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID)))
                            {
                                string valueType = string.Empty;
                                sourceTestCaseItem.dataTypeDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID, out valueType);
                                if ((valueType == string.Empty) | (valueType == null))
                                {
                                    sourceTestCaseItem.VerifyDataTypeDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID, out valueType);
                                }
                                if ((String.Equals("Float", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    TextBox btn = (TextBox)sender;
                                    string str = btn.Text;
                                    int SelectionSort = btn.SelectionStart;

                                    if (keyValue == "Decimal" || keyValue == "OemPeriod")
                                    {
                                        if (!str.Contains('.') == true)
                                        {
                                            e.Handled = !IsTextAllowedForDecimal(e.Text);

                                        }
                                    }

                                    if ((keyValue == "Subtract" || keyValue == "OemMinus") & SelectionSort == 0)
                                    {

                                        if (!str.Contains('-') == true)
                                        {
                                            e.Handled = !IsTextAllowedForDecimal(e.Text);
                                        }

                                    }
                                    else
                                    {
                                        if (keyValue != "Subtract")
                                        {
                                            if (keyValue != "OemMinus")
                                            {
                                                e.Handled = !IsTextAllowedForDecimal(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = true;
                                        }
                                    }
                                }
                                else if (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    TextBox btn = (TextBox)sender;
                                    string str = btn.Text;
                                    int SelectionSort = btn.SelectionStart;

                                    if (keyValue == "Decimal" || keyValue == "OemPeriod")
                                    {
                                        if (!str.Contains('.') == true)
                                        {
                                            e.Handled = !IsTextAllowedForDecimal(e.Text);

                                        }
                                    }

                                    if ((keyValue == "Subtract" || keyValue == "OemMinus") & SelectionSort == 0)
                                    {

                                        if (!str.Contains('-') == true)
                                        {
                                            e.Handled = !IsTextAllowedForDecimal(e.Text);
                                        }

                                    }
                                    else
                                    {
                                        if (keyValue != "Subtract")
                                        {
                                            if (keyValue != "OemMinus")
                                            {
                                                e.Handled = !IsTextAllowedForDecimal(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = true;
                                        }
                                    }

                                }
                                else if ((String.Equals("Integer", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    e.Handled = false;

                                }
                                else if ((String.Equals("Unknown", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    e.Handled = false;

                                }
                                else if ((String.Equals("Text", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    e.Handled = false;

                                }
                                else if ((String.Equals("Boolean", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase)) | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    TextBox btn = (TextBox)sender;
                                    string str = btn.Text;
                                    if (str.Length == 0)
                                    {
                                        if (keyValue == "NumPad1" || keyValue == "D1")
                                        {
                                            if (!str.Contains('1') == true)
                                            {
                                                e.Handled = IsboolAllowed(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else if (keyValue == "NumPad0" || keyValue == "D0")
                                        {
                                            if (!str.Contains('0') == true)
                                            {
                                                e.Handled = IsboolAllowed(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = false;
                                        }
                                    }
                                    else
                                    {
                                        e.Handled = false;
                                    }

                                }
                                else if ((String.Equals("Trigger", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))// | (String.Equals("set by position", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    TextBox btn = (TextBox)sender;
                                    string str = btn.Text;
                                    if (str.Length == 0)
                                    {
                                        if (keyValue == "NumPad1" || keyValue == "D1")
                                        {
                                            if (!str.Contains('1') == true)
                                            {
                                                e.Handled = IsboolAllowed(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else if (keyValue == "NumPad0" || keyValue == "D0")
                                        {
                                            if (!str.Contains('0') == true)
                                            {
                                                e.Handled = IsboolAllowed(e.Text);
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = false;
                                        }
                                    }
                                    else
                                    {
                                        e.Handled = false;
                                    }

                                }
                                else
                                {
                                    e.Handled = false;
                                }
                            }

                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)) & (string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                            //{
                            //    e.Handled = true;  
                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)))
                            //{
                            //    e.Handled = true;
                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.ChannelSelectionSelectedItem)) & (!originalTestControlItem.ChannelEnabled))
                            //{
                            //    e.Handled = true; 
                            //}
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12110", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public string removeQATPrefix(string controlWithQATPrefix)
        {
            try
            {
                string[] controlWithoutQATPrefix = new string[2];
                string channelControl = string.Empty;
                int spaceCount = controlWithQATPrefix.Count(x => x == ' ');
                string channelWithTwoTilt = controlWithQATPrefix;
                int idx = channelWithTwoTilt.IndexOf(' ');
                controlWithoutQATPrefix[0] = channelWithTwoTilt.Substring(0, idx);
                controlWithoutQATPrefix[1] = channelWithTwoTilt.Substring(idx + 1);
                return controlWithoutQATPrefix[1];
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                return string.Empty;
            }
        }

        private string keyValue = null;

        private void cmb_Value_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (sourceTestCaseItem != null)
                {
                    TestControlItem originalTestControlItem = null;
                    if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.TextBox")
                    {
                        var sourceTextBox = (TextBox)e.OriginalSource;
                        if (sourceTextBox != null && sourceTextBox.DataContext != null && String.Equals(sourceTextBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestControlItem"))
                            originalTestControlItem = (TestControlItem)sourceTextBox.DataContext;

                        string controlSelected = string.Empty;
                        string selectedPrettyName = originalTestControlItem.ChannelSelectionSelectedItem;
                        string selectedControlID = string.Empty;

                        if ((!string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)))
                        {
                            if ((!string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem))  & (!string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))//& ((originalTestControlItem.TestControlPropertySelectedItem.StartsWith("CHANNEL ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("OUTPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT_OUTPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("TAP ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_INPUT ")) || (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_OUTPUT ")))
                            {
                                string[] prettyControlName = null;
                                sourceTestCaseItem.ControlIDDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + originalTestControlItem.TestControlPropertySelectedItem + selectedPrettyName, out prettyControlName);

                                if (prettyControlName != null)
                                {
                                    if(prettyControlName.Count() > 0)
                                        selectedPrettyName = prettyControlName[0];

                                    if(prettyControlName.Count() > 1)
                                        selectedControlID = prettyControlName[1];
                                }

                                controlSelected = selectedPrettyName + "~" + removeQATPrefix(originalTestControlItem.TestControlPropertySelectedItem);

                                //if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("CHANNEL "))
                                //controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + removeQATPrefix(originalTestControlItem.TestControlPropertySelectedItem); 
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 7);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 6);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("INPUT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 13);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("TAP "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 4);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 19);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 20);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_CONTROL_INPUT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 26);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 18);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("BANK_SELECT_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 19);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_INPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 11);
                                //else if (originalTestControlItem.TestControlPropertySelectedItem.StartsWith("GPIO_OUTPUT "))
                                //    controlSelected = originalTestControlItem.ChannelSelectionSelectedItem + "~" + originalTestControlItem.TestControlPropertySelectedItem.Remove(0, 12);
                            }
                            else
                            {
                                string[] prettyControlName = null;
                                sourceTestCaseItem.ControlIDDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + originalTestControlItem.TestControlPropertySelectedItem, out prettyControlName);
                                //selectedPrettyName = prettyControlName[0];

                                if(prettyControlName != null && prettyControlName.Count() > 1)
                                    selectedControlID = prettyControlName[1];

                                controlSelected = originalTestControlItem.TestControlPropertySelectedItem;
                            }

                            TextBox btn = (TextBox)sender;
                            string str = btn.Text;

                            keyValue = e.Key.ToString();

                            int SelectionSort = btn.SelectionStart;

                            if ((sourceTestCaseItem.dataTypeDictionary.Keys.Contains(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID)) | (sourceTestCaseItem.VerifyDataTypeDictionary.Keys.Contains(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID)))
                            {
                                string valueType = string.Empty;
                                sourceTestCaseItem.dataTypeDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID, out valueType);
                                if ((valueType == string.Empty) | (valueType == null))
                                {
                                    sourceTestCaseItem.VerifyDataTypeDictionary.TryGetValue(originalTestControlItem.TestControlComponentNameSelectedItem + controlSelected + selectedControlID, out valueType);
                                }
                                if ((String.Equals("Float", valueType, StringComparison.InvariantCultureIgnoreCase)) & ((String.Equals("set by value", originalTestControlItem.InputSelectionComboSelectedItem, StringComparison.InvariantCultureIgnoreCase))))
                                {
                                    if (keyValue == "Decimal" || keyValue == "OemPeriod")
                                    {
                                        if (!str.Contains('.') == true)
                                        {

                                            if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                                            {
                                                if (e.Key == Key.Space)
                                                {
                                                    e.Handled = true;
                                                }
                                                base.OnPreviewKeyDown(e);
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = true;
                                        }
                                    }

                                    if ((keyValue == "Subtract" || keyValue == "OemMinus") && SelectionSort == 0)
                                    {
                                        if (!str.Contains('-') == true)
                                        {

                                            if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                                            {
                                                if (e.Key == Key.Space)
                                                {
                                                    e.Handled = true;
                                                }
                                                base.OnPreviewKeyDown(e);
                                            }
                                        }
                                        else
                                        {
                                            e.Handled = true;
                                        }
                                    }
                                    else
                                    {
                                        if (keyValue != "Subtract")
                                        {
                                            if (keyValue != "OemMinus")
                                            {
                                                if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                                                {
                                                    if (e.Key == Key.Space)
                                                    {
                                                        e.Handled = true;
                                                    }
                                                    base.OnPreviewKeyDown(e);
                                                }
                                            }
                                            else
                                            {
                                                e.Handled = true;
                                            }

                                        }
                                        else
                                        {
                                            e.Handled = true;
                                        }

                                    }
                                }
                            }

                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)) & (string.IsNullOrEmpty((originalTestControlItem.ChannelSelectionSelectedItem))))
                            //{
                            //    MessageBox.Show("Select Control and Channel property", "QAT Error Code - EC12111A", MessageBoxButton.OK, MessageBoxImage.Error);
                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.TestControlPropertySelectedItem)))
                            //{
                            //    MessageBox.Show("Select Control property", "QAT Error Code - EC12111B", MessageBoxButton.OK, MessageBoxImage.Error);
                            //}
                            //else if ((string.IsNullOrEmpty(originalTestControlItem.ChannelSelectionSelectedItem)) & (!originalTestControlItem.ChannelEnabled))
                            //{
                            //    MessageBox.Show("Select Channel property", "QAT Error Code - EC12111C", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                        else
                        {
                            e.Handled = false;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12111", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void txt_Delay_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Handled == IsTextAllowed(e.ToString()))
                {
                    if (e.Key == Key.Space)
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }

                // Copy and Paste
                string lstrCopyandPasteTxtBox = null;
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(lstrCopyandPasteTxtBox))
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12112", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Ittration_txtbox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                e.Handled = !IsTextAllowed(e.Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12113", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Ittration_txtbox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                string lstrCopyandPasteTxtBox = null;
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    lstrCopyandPasteTxtBox = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(lstrCopyandPasteTxtBox))
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }
                if (e.Handled == IsTextAllowed(e.ToString()))
                {
                    if (e.Key == Key.Space)
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12114", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void firmwareLocationBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string sourcepath = string.Empty;
                TestFirmwareItem sourceFirmItem = null;
                Button sourceButton = sender as Button;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestFirmwareItem")
                    sourceFirmItem = (TestFirmwareItem)sourceButton.DataContext;
                if (sourceFirmItem == null)
                    return;
                else if (sourceFirmItem != null)
                {

                    if ((sourceFirmItem.FirmwareTypeSelected == "Automatically update when new version of SW available") || (sourceFirmItem.FirmwareTypeSelected == "Start auto update with new version of SW at"))
                    {
                        var dialog = new System.Windows.Forms.FolderBrowserDialog();
                        //dialog.SelectedPath = @"\\testingproject\Sharing\QSC_SourceCode_Phase1\Qsys_softwares\Designer Exe's";//\Q-SYS_Designer_Installer_5.1.31
                        System.Windows.Forms.DialogResult result = dialog.ShowDialog();
                        sourcepath = dialog.SelectedPath;
                    }
                    if (sourceFirmItem.FirmwareTypeSelected == "Upgrade/Downgrade by installing application")
                    {
                        OpenFileDialog openFileDialog = new OpenFileDialog();
                        openFileDialog.Filter = "Exe files (*.exe)|*.exe";
                        if (openFileDialog.ShowDialog() == true)
                        {
                            FileVersionInfo fileVersionInfo = FileVersionInfo.GetVersionInfo(openFileDialog.FileName);
                            if (fileVersionInfo.ProductName != null/* && fileVersionInfo.FileVersion != null*/)
                            {
                                string converttoupper = fileVersionInfo.ProductName.ToString().ToUpper();
                                //var fileversion_get = new Version(fileVersionInfo.FileVersion);
                                if (converttoupper.StartsWith("Q-SYS"))
                                {
                                    //if (fileversion_get >= new Version("5.0.0"))
                                        sourcepath = openFileDialog.FileName;
                                    //else
                                    //    MessageBox.Show("QAT supports firmware upgrade/downgrade from 5.x.x versions only ", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);

                                }
                                else
                                {
                                    MessageBox.Show("Please select Qsys designer", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                                }
                            }
                            else
                            {
                                MessageBox.Show("Please select Qsys designer", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                        }
                    }

                    if(sourceFirmItem.FirmwareTypeSelected == "Upgrade/Downgrade by launching application")
                    {
                        OpenFileDialog openFileDialog = new OpenFileDialog();
                        openFileDialog.Filter = "Exe files (*.exe)|*.exe";
                        if (openFileDialog.ShowDialog() == true)
                        {
                            FileVersionInfo fileVersionInfo = FileVersionInfo.GetVersionInfo(openFileDialog.FileName);
                            if (fileVersionInfo.ProductName != null /*&& fileVersionInfo.FileVersion != null*/)
                            {
                                string converttoupper = fileVersionInfo.ProductName.ToString().ToUpper();
                                //var fileversion_get = new Version(fileVersionInfo.FileVersion);
                                if (converttoupper.StartsWith("Q-SYS"))
                                {
                                    //if (fileversion_get >= new Version("5.0.0"))
                                        sourcepath = openFileDialog.FileName;
                                    //else
                                    //    MessageBox.Show("QAT supports firmware upgrade/downgrade from 5.x.x versions only ", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);

                                }
                                else
                                {
                                    MessageBox.Show("Please select Qsys designer exe", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                                }
                            }
                            else
                            {
                                MessageBox.Show("Please select Qsys designer exe", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                        }
                    }
                }

                sourceFirmItem.FirmwareBrowseLocation = sourcepath;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12115", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestAction_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            try
            {
                MessageBoxResult result = MessageBox.Show(this, "Are you sure you want to close?", "QAT-Designer Closing", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (result == MessageBoxResult.No)
                {
                    e.Cancel = true;
                }
                else if (result == MessageBoxResult.Yes)
                {
                    foreach (object item in tabControl.Items)
                    {
                        TestCaseItem selectedTestCaseItem = item as TestCaseItem;
                        TestPlanItem selectedTestPlanItem = item as TestPlanItem;
                        TestSuiteItem selectedTestSuiteItem = item as TestSuiteItem;

                        TreeViewExplorer sourceTreeViewExplorer = null;

                        if (selectedTestSuiteItem != null)
                        {
                            if (selectedTestSuiteItem.IsEditModeEnabled == true)
                                sourceTreeViewExplorer = selectedTestSuiteItem.TestSuiteTreeViewExplorer;
                        }
                        else if (selectedTestPlanItem != null)
                        {
                            if (selectedTestPlanItem.IsEditModeEnabled == true)
                                sourceTreeViewExplorer = selectedTestPlanItem.TestPlanTreeViewExplorer;
                        }
                        else if (selectedTestCaseItem != null)
                        {
                            if (selectedTestCaseItem.IsEditModeEnabled == true)
                                sourceTreeViewExplorer = selectedTestCaseItem.TestCaseTreeViewExplorer;
                        }

                        if (sourceTreeViewExplorer != null)
                            QscDatabase.SetEditedByItem(sourceTreeViewExplorer, string.Empty);
                    }

                }

                if (Action_Window != null)
                {
                    Action_Window.Close();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_TestSuiteVerification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button sourceButton = sender as Button;
                if (sourceButton == null)
                    return;

                TestSuiteItem sourceTestSuiteItem = sourceButton.DataContext as TestSuiteItem;
                if (sourceTestSuiteItem == null)
                    return;

                Action_Window = new ContinousBackgroundMonitoring(sourceTestSuiteItem, null);
                Action_Window.Owner = this;
                Action_Window.DataContext = sourceTestSuiteItem.BackgroundMonitoring;
                Action_Window.ShowDialog();
                Action_Window.Activate();
                //this.Show();

                if (Action_Window.WindowState == WindowState.Minimized)
                {
                    Action_Window.WindowState = WindowState.Normal;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_Verification_TestPlan_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button sourceButton = sender as Button;
                if (sourceButton == null)
                    return;

                TestPlanItem sourceTestPlanItem = sourceButton.DataContext as TestPlanItem;
                if (sourceTestPlanItem == null)
                    return;

                Action_Window = new ContinousBackgroundMonitoring(null, sourceTestPlanItem);
                Action_Window.Owner = this;
                Action_Window.DataContext = sourceTestPlanItem.BackgroundMonitoring;
                Action_Window.ShowDialog();
                Action_Window.Activate();
                //this.Show();         
                if (Action_Window.WindowState == WindowState.Minimized)
                {
                    Action_Window.WindowState = WindowState.Normal;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        //ToolTip x = null;
        TextblockWarning Warning = null;
        private void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
               
                AdornerLayer myAdornerLayer = null;
              

                  var rect = Text.GetRectFromCharacterIndex(Text.CaretIndex);
                var point = rect.BottomRight;

              

                if (Text != null)
                {
                    Text.TextChanged += Text_TextChanged;
                    Text.LostFocus += Text_LostFocus;
                    Text.LostKeyboardFocus += Text_LostKeyboardFocus;
                    myAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                    Warning = new TextblockWarning(myAdornerLayer, point.X, point.Y);
                   

                }
             
               
                if (Regex.IsMatch(e.Text, @"[\\/:*?<>%'|""[\]&]"))
                {
                    if (myAdornerLayer != null && Text != null)
                    {
                        Warning.Remove(myAdornerLayer, Text);
                        myAdornerLayer.Add(new TextblockWarning(Text, point.X, point.Y));

                    }
                    e.Handled = true;
                }
                else
                {
                    Warning.Remove(myAdornerLayer, Text);
                    e.Handled = false;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Text_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;

                AdornerLayer myAdornerLayer = null;
                myAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                if (Warning != null)
                    Warning.Remove(myAdornerLayer, Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

      

        private void Text_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;

                AdornerLayer myAdornerLayer = null;
                myAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                if (Warning != null)
                    Warning.Remove(myAdornerLayer, Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Text_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;

                AdornerLayer myAdornerLayer = null;
                myAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                if (Warning != null)
                    Warning.Remove(myAdornerLayer, Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        //private TimerTick(object sender, EventArgs e,AdornerLayer adl,TextBox Tx)
        //{
        //    DispatcherTimer timer = (DispatcherTimer)sender;
        //    timer.Stop();


        //}

        private void lst_TestPlan_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                ListView sourceListView = sender as ListView;
                if (sourceListView == null)
                    return;
                ListviewTPCount = sourceListView.Items.Count;
                TestPlanItem sourceTestPlan = sourceListView.DataContext as TestPlanItem;
                if (sourceTestPlan == null)
                    return;

                sourceTestPlan.TestCaseSelectedList.Clear();
                foreach (TreeViewExplorer item in sourceListView.SelectedItems)
                {
                    sourceTestPlan.TestCaseSelectedList.Add(item);
                }

                sourceListView.ScrollIntoView(sourceListView.SelectedItems);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void listView_designerlist_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceListView = sender as ListView;
                if (sourceListView == null)
                    return;

                TreeViewExplorer sourceTreeViewExplorer = sourceListView.SelectedItem as TreeViewExplorer;
                if (sourceTreeViewExplorer == null)
                    return;

                TestHeaderItem sourceTestItemHeader = sourceListView.DataContext as TestHeaderItem;
                if (sourceTestItemHeader == null)
                    return;

                OpenTreeViewItem(sourceTreeViewExplorer, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TSname_textBox_LostFocus(object sender, RoutedEventArgs e)
        {
            try
            {
                TextBox nameTextBox = sender as TextBox;
                if (nameTextBox == null)
                    return;

                RemoveAdornerFromTextBox(nameTextBox);

                TestSuiteItem sourceTestSuiteItem = nameTextBox.DataContext as TestSuiteItem;
                if (sourceTestSuiteItem == null)
                    return;

                if (nameTextBox.IsKeyboardFocusWithin == false)
                    IsItemNameExist(sourceTestSuiteItem.TestItemName, sourceTestSuiteItem.TestItemNameCopy);

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void listView_TestSuite_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
              
                ListView sourceListView = sender as ListView;
                if (sourceListView == null)
                    return;
                ListviewTSCount = sourceListView.Items.Count;
                TestSuiteItem sourceTestSuite = sourceListView.DataContext as TestSuiteItem;
                if (sourceTestSuite == null)
                    return;

                sourceTestSuite.TestPlanSelectedList.Clear();
                foreach (TreeViewExplorer item in sourceListView.SelectedItems)
                {
                    sourceTestSuite.TestPlanSelectedList.Add(item);
                }

                sourceListView.ScrollIntoView(sourceListView.SelectedItems);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RampValue_Textbox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                keyValue = e.Key.ToString();
                int SelectionSort = btn.SelectionStart;
                if (keyValue == "V" && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    string cliptext = Clipboard.GetText();
                    if (e.Handled == IsTextAllowed(cliptext))
                    {
                        e.Handled = true;
                    }
                    base.OnPreviewKeyDown(e);
                }
                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {

                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") && SelectionSort == 0)
                {
                    if (!str.Contains('-') == true)
                    {

                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                            {
                                if (e.Key == Key.Space)
                                {
                                    e.Handled = true;
                                }
                                base.OnPreviewKeyDown(e);
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12117", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ScriptlimitTxtbox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                if (e.Text == ".")
                {
                    TextBox textinput = (TextBox)sender;
                    string text = textinput.Text;
                    if (text.Contains('.'))
                        e.Handled = true;
                }
                else
                {
                    Regex regex = new Regex("[^0-9]");
                    e.Handled = regex.IsMatch(e.Text);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }


        private void ScriptlimitTxtbox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;

                    Regex regex = new Regex("[^0-9]");
                    e.Handled = regex.IsMatch(Clipboard.GetText());

                    base.OnPreviewKeyDown(e);
                }
                if (e.Key == Key.Space)
                {
                    e.Handled = true;
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }


        private void cmb_UpperLimit_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                keyValue = e.Key.ToString();
                int SelectionSort = btn.SelectionStart;
                if (keyValue == "V" && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    string cliptext = Clipboard.GetText();

                    if(btn.SelectedText == str && IsTextAllowedForDecimal(cliptext) == true)
                    {
                        e.Handled = false;
                    }   
                    else if (e.Handled == IsTextAllowedForDecimal(str + cliptext))
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }
                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {

                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") && SelectionSort == 0)
                {
                    if(Keyboard.Modifiers == ModifierKeys.Shift && keyValue == "OemMinus")
                    {
                        e.Handled = true;
                    }
                    else if ((!str.Contains('-') == true && Keyboard.Modifiers != ModifierKeys.Shift) || (btn.SelectedText == str && Keyboard.Modifiers != ModifierKeys.Shift))
                    {

                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                            {
                                if (e.Key == Key.Space)
                                {
                                    e.Handled = true;
                                }
                                base.OnPreviewKeyDown(e);
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12111", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_UpperLimit_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                int SelectionSort = btn.SelectionStart;

                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);

                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") & SelectionSort == 0)
                {

                    if (!str.Contains('-') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);
                    }

                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            e.Handled = !IsTextAllowedForDecimal(e.Text);
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_LowerLimit_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                keyValue = e.Key.ToString();
                int SelectionSort = btn.SelectionStart;
                if (keyValue == "V" && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    e.Handled = false;
                    string cliptext = Clipboard.GetText();

                    if (btn.SelectedText == str && IsTextAllowedForDecimal(cliptext) == true)
                    {
                        e.Handled = false;
                    }
                    else if (e.Handled == IsTextAllowedForDecimal(str + cliptext))
                    {
                        e.Handled = true;
                    }

                    base.OnPreviewKeyDown(e);
                }

                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {

                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") && SelectionSort == 0)
                {
                    if (Keyboard.Modifiers == ModifierKeys.Shift && keyValue == "OemMinus")
                    {
                        e.Handled = true;
                    }
                    else if ((!str.Contains('-') == true && Keyboard.Modifiers != ModifierKeys.Shift) || (btn.SelectedText == str && Keyboard.Modifiers != ModifierKeys.Shift))
                    {
                        if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                        {
                            if (e.Key == Key.Space)
                            {
                                e.Handled = true;
                            }
                            base.OnPreviewKeyDown(e);
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            if (e.Handled == IsTextAllowedForDecimal(e.ToString()))
                            {
                                if (e.Key == Key.Space)
                                {
                                    e.Handled = true;
                                }
                                base.OnPreviewKeyDown(e);
                            }
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12111", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_LowerLimit_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                int SelectionSort = btn.SelectionStart;

                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);

                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") & SelectionSort == 0)
                {

                    if (!str.Contains('-') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);
                    }

                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            e.Handled = !IsTextAllowedForDecimal(e.Text);
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RampValue_Textbox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                TextBox btn = (TextBox)sender;
                string str = btn.Text;
                int SelectionSort = btn.SelectionStart;

                if (keyValue == "Decimal" || keyValue == "OemPeriod")
                {
                    if (!str.Contains('.') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);

                    }
                }

                if ((keyValue == "Subtract" || keyValue == "OemMinus") & SelectionSort == 0)
                {

                    if (!str.Contains('-') == true)
                    {
                        e.Handled = !IsTextAllowedForDecimal(e.Text);
                    }

                }
                else
                {
                    if (keyValue != "Subtract")
                    {
                        if (keyValue != "OemMinus")
                        {
                            e.Handled = !IsTextAllowedForDecimal(e.Text);
                        }
                        else
                        {
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_BenchWaveform_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                APXClockModeSettings sourceApxItem = null;
                if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.ComboBox")
                {
                    var sourceButton = (ComboBox)e.OriginalSource;
                    if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXClockModeSettings")
                        sourceApxItem = (APXClockModeSettings)sourceButton.DataContext;
                    if (sourceApxItem == null)
                        return;
                    else if (sourceApxItem != null)
                    {
                        if (sourceApxItem.cmb_BenchWaveform == "Browse for file...")
                        {
                            OpenFileDialog openFileDialog = new OpenFileDialog();
                            openFileDialog.Filter = "WAV Files (*.wav)|*.wav|AP Wave Files (*.agm,*.ags)|*.agm;*.ags|Dolby Digital Files (*.ac3)|*.ac3|Dolby Digital+ Files (*.ec3)|*.ec3|Dolby TrueHD Files (*.mlp)|*.mlp|MAT Files (*.mat)|*.mat|DTS Files (*.dts,*.cpt)|*.dt;*.cpt|DTS HD Files (*.dtshd)|*.dtshd|All Files (*.wav,*.agm,*.ags,*.ac3,*.ec3,*.mlp,*.mat,*.dts,*.cpt,*.dtshd)|*.wav;*.agm;*.ags;*.ac3;*.ec3;*.mlp;*.mat;*.dts;*.cpt;*.dtshd";
                            if (openFileDialog.ShowDialog() == true)
                            {
                                string path = openFileDialog.FileName;
                                sourceApxItem.WaveFilePathList.Add(path);
                                sourceApxItem.BrowseWaveform = path;
                                path = path.Split('\\').Last();
                                if (!Regex.IsMatch(path, @"[\\/:*?<>|""[\]&]"))
                                {
                                    sourceApxItem.BenchWaveFormSelectedFile = path;
                                    if (!sourceApxItem.cmb_BenchWaveformList.Contains(sourceApxItem.BenchWaveFormSelectedFile))
                                    {
                                        sourceApxItem.cmb_BenchWaveformList.Add(sourceApxItem.BenchWaveFormSelectedFile);
                                        sourceApxItem.isNewWaveform.Add(sourceApxItem.BenchWaveFormSelectedFile, true);
                                    }

                                    sourceApxItem.cmb_BenchWaveform = sourceApxItem.BenchWaveFormSelectedFile;
                                }
                                else
                                {
                                    MessageBox.Show("The selected file shouldn't contains special characters", "Warning", MessageBoxButton.OK, MessageBoxImage.Information);
                                    sourceApxItem.cmb_BenchWaveform = sourceApxItem.cmb_PreviousBenchWaveform;
                                }
                            }
                            else
                            {
                                sourceApxItem.cmb_BenchWaveform = sourceApxItem.cmb_PreviousBenchWaveform;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_seqWaveform_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                APXClockModeSettings sourceApxItem = null;
                if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.ComboBox")
                {
                    var sourceButton = (ComboBox)e.OriginalSource;
                    if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXClockModeSettings")
                        sourceApxItem = (APXClockModeSettings)sourceButton.DataContext;
                    if (sourceApxItem == null)
                        return;
                    else if (sourceApxItem != null)
                    {
                        if (sourceApxItem.cmbSeqWaveForm == "Browse for file...")
                        {
                            OpenFileDialog openFileDialog = new OpenFileDialog();
                            openFileDialog.Filter = "WAV Files (*.wav)|*.wav|AP Wave Files (*.agm,*.ags)|*.agm;*.ags|Dolby Digital Files (*.ac3)|*.ac3|Dolby Digital+ Files (*.ec3)|*.ec3|Dolby TrueHD Files (*.mlp)|*.mlp|MAT Files (*.mat)|*.mat|DTS Files (*.dts,*.cpt)|*.dts;*.cpt|DTS HD Files (*.dtshd)|*.dtshd|All Files (*.wav,*.agm,*.ags,*.ac3,*.ec3,*.mlp,*.mat,*.dts,*.cpt,*.dtshd)|*.wav;*.agm;*.ags;*.ac3;*.ec3;*.mlp;*.mat;*.dts;*.cpt;*.dtshd";
                            if (openFileDialog.ShowDialog() == true)
                            {
                                string path = openFileDialog.FileName;
                                sourceApxItem.WaveFilePathList.Add(path);
                                sourceApxItem.BrowseWaveform = path;
                                path = path.Split('\\').Last();
                                if (!Regex.IsMatch(path, @"[\\/:*?<>|""[\]&]"))
                                {
                                    sourceApxItem.SeqWaveFormSelectedFile = path;
                                    if (!sourceApxItem.cmb_SeqWaveformList.Contains(sourceApxItem.SeqWaveFormSelectedFile))
                                    {
                                        sourceApxItem.cmb_SeqWaveformList.Add(sourceApxItem.SeqWaveFormSelectedFile);
                                        sourceApxItem.isNewWaveform.Add(sourceApxItem.SeqWaveFormSelectedFile, true);
                                    }

                                    sourceApxItem.cmbSeqWaveForm = sourceApxItem.SeqWaveFormSelectedFile;
                                }
                                else
                                {
                                    MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                                    sourceApxItem.cmbSeqWaveForm = sourceApxItem.SeqWaveFormSelectedFile;
                                }
                            }
                            else
                            {
                                sourceApxItem.cmbSeqWaveForm = sourceApxItem.cmb_PreviousSeqWaveform;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_GainWaveform_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                APXLevelandGain_Verification sourceApxItem = null;
                if (e.OriginalSource.GetType().ToString() == "System.Windows.Controls.ComboBox")
                {
                    var sourceButton = (ComboBox)e.OriginalSource;
                    if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXLevelandGain_Verification")
                        sourceApxItem = (APXLevelandGain_Verification)sourceButton.DataContext;
                    if (sourceApxItem == null)
                        return;
                    else if (sourceApxItem != null)
                    {
                        if (sourceApxItem.cmb_GainWaveform == "Browse for file...")
                        {
                            OpenFileDialog openFileDialog = new OpenFileDialog();
                            openFileDialog.Filter = "WAV Files (*.wav)|*.wav|AP Wave Files (*.agm,*.ags)|*.agm;*.ags|Dolby Digital Files (*.ac3)|*.ac3|Dolby Digital+ Files (*.ec3)|*.ec3|Dolby TrueHD Files (*.mlp)|*.mlp|MAT Files (*.mat)|*.mat|DTS Files (*.dts,*.cpt)|*.dts;*.cpt|DTS HD Files (*.dtshd)|*.dtshd|All Files (*.wav,*.agm,*.ags,*.ac3,*.ec3,*.mlp,*.mat,*.dts,*.cpt,*.dtshd)|*.wav;*.agm;*.ags;*.ac3;*.ec3;*.mlp;*.mat;*.dts;*.cpt;*.dtshd";
                            if (openFileDialog.ShowDialog() == true)
                            {
                                string path = openFileDialog.FileName;
                                sourceApxItem.WaveFilePathList.Add(path);
                                sourceApxItem.BrowseGainWaveform = path;
                                path = path.Split('\\').Last();
                                if (!Regex.IsMatch(path, @"[\\/:*?<>|""[\]&]"))
                                {
                                    sourceApxItem.GainWaveFormSelectedFile = path;
                                    if (!sourceApxItem.cmbGainWaveformList.Contains(sourceApxItem.GainWaveFormSelectedFile))
                                    {
                                        sourceApxItem.cmbGainWaveformList.Add(sourceApxItem.GainWaveFormSelectedFile);
                                        sourceApxItem.isNewWaveform.Add(sourceApxItem.GainWaveFormSelectedFile, true);
                                    }

                                    sourceApxItem.cmb_GainWaveform = sourceApxItem.GainWaveFormSelectedFile;
                                }
                                else
                                {
                                    MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                                    sourceApxItem.cmb_GainWaveform = sourceApxItem.GainWaveFormSelectedFile;
                                }
                            }
                            else
                            {
                                sourceApxItem.cmb_GainWaveform = sourceApxItem.cmb_PreviousGainWaveform;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_Browse_Click(object sender, RoutedEventArgs e)
        {
            APx500 apx = new APx500();
            Button btnBrowse = sender as Button;
            btnBrowse.IsEnabled = false;

            try
            {
                TestApxItem sourceApxItem = null;
                if (btnBrowse != null && btnBrowse.DataContext != null && btnBrowse.DataContext.GetType().ToString() == "QSC_Test_Automation.TestApxItem")
                    sourceApxItem = (TestApxItem)btnBrowse.DataContext;
                if (sourceApxItem == null)
                    return;
                else if (sourceApxItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "AP Template (*.approjx)|*.approjx";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        sourceApxItem.APxBrowseLocation = openFileDialog.FileName;
                        string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        string apfileName = System.IO.Path.GetFileName(openFileDialog.FileName);

                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                        if (!Regex.IsMatch(apfileName, @"[\\/:*?<>|""[\]&]"))
                        {
                            Mouse.OverrideCursor = Cursors.Wait;
                            apx.OpenProject(sourceApxItem.APxBrowseLocation);

                            //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);
                            //string apfileName = name + Date_time_AP + extension;

                            sourceApxItem.APxLocationTimeStamp = apfileName;

                            sourceApxItem.APxInitialSettingsList[0].cmbTypeOfMode = sourceApxItem.APxSettingsList[0].cmbTypeOfMode = null;
                            //sourceApxItem.APxInitialLevelAndGainList[0].cmbTypeOfVerfication = sourceApxItem.APxLevelAndGainList[0].cmbTypeOfVerfication = null;
                            sourceApxItem.cmbTypeOfVerfication = sourceApxItem.cmbTypeOfVerfication = null;

                            GetBenchModeApx(apx, sourceApxItem);
                            GetSequenceModeApx(apx, sourceApxItem);
                            GetMeasurementsSettings(apx, sourceApxItem);

                            sourceApxItem.isAPXFileLoaded = true;

                            sourceApxItem.ApSettingsVisibility = Visibility.Visible;
                            sourceApxItem.ApVerifyVisibility = Visibility.Visible;

                            RemoveProcess();
                            Mouse.OverrideCursor = Cursors.Arrow;
                            if (!btnBrowse.IsEnabled)
                                btnBrowse.IsEnabled = true;

                        }
                        else
                        {
                            MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                            sourceApxItem.isAPXFileLoaded = false;
                        }
                    }
                    else
                    {
                        Mouse.OverrideCursor = Cursors.Arrow;
                        if (!btnBrowse.IsEnabled)
                            btnBrowse.IsEnabled = true;
                    }
                }
            }
            catch (APException ex)
            {
                RemoveProcess();
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                MessageBox.Show("Exception\n \n" + ex.Message, "Warning", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12118", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
                if (!btnBrowse.IsEnabled)
                    btnBrowse.IsEnabled = true;
            }
        }

        public void RemoveProcess()
        {
            try
            {
                Process application = null;
                foreach (var proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("AudioPrecision"))
                    {
                        application = proc;
                        if (application != null || application.Responding)
                        {
                            application.Kill();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        ////AP implementation
        public void GetBenchModeApx(APx500 apx, TestApxItem sourceApxItem)
        {
            DataTable tbl = new DataTable();

            try
            {
                if (apx.OperatingMode != APxOperatingMode.BenchMode)
                    apx.OperatingMode = APxOperatingMode.BenchMode;

                ////////apxBenchModeVM.cmbTypeOfMode = APxOperatingMode.BenchMode.ToString();
                sourceApxItem.APxInitialSettingsList[0].ChkBenchGenON = sourceApxItem.APxSettingsList[0].ChkBenchGenON = apx.BenchMode.Generator.On;
                sourceApxItem.APxInitialSettingsList[0].cmb_BenchWaveform = sourceApxItem.APxSettingsList[0].cmb_BenchWaveform = apx.BenchMode.Generator.Waveform;
                int outChCount = sourceApxItem.APxInitialSettingsList[0].BenchSetupCount = sourceApxItem.APxSettingsList[0].BenchSetupCount = apx.BenchMode.Setup.OutputChannelCount;

                sourceApxItem.APxInitialSettingsList[0].chkBx_BenchLevelTrackCh = sourceApxItem.APxSettingsList[0].chkBx_BenchLevelTrackCh = apx.BenchMode.Generator.Levels.TrackFirstChannel;
                sourceApxItem.APxInitialSettingsList[0].txt_BenchfrequencyA = sourceApxItem.APxSettingsList[0].txt_BenchfrequencyA = apx.BenchMode.Generator.Frequency.Text;
                sourceApxItem.APxInitialSettingsList[0].txt_BenchfrequencyB = sourceApxItem.APxSettingsList[0].txt_BenchfrequencyB = apx.BenchMode.Generator.SineDual.FrequencyB.Text;

                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh1Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh1Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh1 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh1 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch1, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh1 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh1 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch1, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh1EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh1EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh1EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh1EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh2Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh2Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh2 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh2 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch2, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh2 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh2 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch2, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh2EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh2EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh2EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh2EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh3Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh3Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh3 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh3 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch3, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh3 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh3 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch3, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh3EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh3EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh3EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh3EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh4Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh4Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh4 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh4 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch4, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh4 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh4 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch4, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh4EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh4EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh4EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh4EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh5Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh5Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh5 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh5 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch5, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh5 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh5 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch5, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh5EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh5EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh5EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh5EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh6Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh6Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh6 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh6 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch6, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh6 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh6 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch6, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh6EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh6EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh6EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh6EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh7Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh7Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh7 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh7 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch7, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh7 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh7 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch7, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh7EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh7EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh7EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh7EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkBenchCh8Enable = sourceApxItem.APxSettingsList[0].ChkBenchCh8Enable = apx.BenchMode.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchLevelCh8 = sourceApxItem.APxSettingsList[0].txt_BenchLevelCh8 = apx.BenchMode.Generator.Levels.GetText(OutputChannelIndex.Ch8, apx.BenchMode.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].txt_BenchDcOffsetCh8 = sourceApxItem.APxSettingsList[0].txt_BenchDcOffsetCh8 = apx.BenchMode.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch8, apx.BenchMode.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh8EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh8EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkBenchCh8EnableVisible = sourceApxItem.APxSettingsList[0].chkBenchCh8EnableVisible = Visibility.Collapsed;
                }

                //BenchModeMeterType x = apx.BenchMode.Meters.GetMeterType(0);
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12119", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12119", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetSequenceModeApx(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                    apx.OperatingMode = APxOperatingMode.SequenceMode;

                //apxBenchModeVM.cmbTypeOfMode = APxOperatingMode.SequenceMode.ToString();
                sourceApxItem.APxInitialSettingsList[0].ChkSeqGenON = sourceApxItem.APxSettingsList[0].ChkSeqGenON = apx.SignalPathSetup.Generator.On;
                sourceApxItem.APxInitialSettingsList[0].cmbSeqWaveForm = sourceApxItem.APxSettingsList[0].cmbSeqWaveForm = apx.SignalPathSetup.Generator.Waveform;
                sourceApxItem.APxInitialSettingsList[0].cmbSeqTestChannel = sourceApxItem.APxSettingsList[0].cmbSeqTestChannel = apx.SignalPathSetup.Generator.VerificationChannel.ToString();
                int outChCount = sourceApxItem.APxInitialSettingsList[0].SeqSetupCount = sourceApxItem.APxSettingsList[0].SeqSetupCount = apx.SignalPathSetup.OutputChannelCount;

                sourceApxItem.APxInitialSettingsList[0].ChkSeqTrackCh = sourceApxItem.APxSettingsList[0].ChkSeqTrackCh = apx.SignalPathSetup.Generator.Levels.TrackFirstChannel;
                sourceApxItem.APxInitialSettingsList[0].TxtSeqFreqA = sourceApxItem.APxSettingsList[0].TxtSeqFreqA = apx.SignalPathSetup.Generator.Frequency.Text;
                sourceApxItem.APxInitialSettingsList[0].TxtSeqFreqB = sourceApxItem.APxSettingsList[0].TxtSeqFreqB = apx.SignalPathSetup.Generator.SineDual.FrequencyB.Text;

                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh1Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh1Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh1 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh1 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch1, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh1 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh1 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch1, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh1EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh1EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh1EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh1EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh2Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh2Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh2 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh2 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch2, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh2 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh2 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch2, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh2EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh2EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh2EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh2EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh3Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh3Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh3 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh3 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch3, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh3 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh3 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch3, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh3EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh3EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh3EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh3EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh4Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh4Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh4 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh4 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch4, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh4 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh4 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch4, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh4EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh4EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh4EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh4EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh5Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh5Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh5 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh5 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch5, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh5 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh5 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch5, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh5EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh5EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh5EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh5EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh6Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh6Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh6 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh6 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch6, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh6 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh6 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch6, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh6EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh6EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh6EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh6EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh7Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh7Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh7 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh7 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch7, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh7 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh7 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch7, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh7EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh7EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh7EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh7EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialSettingsList[0].ChkSeqCh8Enable = sourceApxItem.APxSettingsList[0].ChkSeqCh8Enable = apx.SignalPathSetup.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelCh8 = sourceApxItem.APxSettingsList[0].TxtSeqLevelCh8 = apx.SignalPathSetup.Generator.Levels.GetText(OutputChannelIndex.Ch8, apx.SignalPathSetup.Generator.Levels.Unit);
                    sourceApxItem.APxInitialSettingsList[0].TxtSeqLevelDcCh8 = sourceApxItem.APxSettingsList[0].TxtSeqLevelDcCh8 = apx.SignalPathSetup.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch8, apx.SignalPathSetup.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh8EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh8EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialSettingsList[0].chkSeqCh8EnableVisible = sourceApxItem.APxSettingsList[0].chkSeqCh8EnableVisible = Visibility.Collapsed;
                }

                sourceApxItem.APxInitialSettingsList[0].TxtSeqDelay = sourceApxItem.APxSettingsList[0].TxtSeqDelay = apx.SignalPathSetup.DeviceDelay.Text;
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12120", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12120", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetMeasurementsSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                if (apx.OperatingMode != APxOperatingMode.SequenceMode)
                    apx.OperatingMode = APxOperatingMode.SequenceMode;

                for (int i = 1; i < apx.Sequence[0].Count; i++)
                {
                    apx.ShowMeasurement(0, i);
                    if (apx.ActiveMeasurementType == MeasurementType.LevelAndGain)
                    {
                        GetLevelandGainSettings(apx, sourceApxItem);
                    }
                    else if (apx.ActiveMeasurementType == MeasurementType.FrequencyResponse)
                    {
                        GetFreqResposeSettings(apx, sourceApxItem);
                    }
                    else if (apx.ActiveMeasurementType == MeasurementType.InterchannelPhase)
                    {
                        GetInterChannelPhaseSettings(apx, sourceApxItem);
                    }
                    else if (apx.ActiveMeasurementType == MeasurementType.SteppedFrequencySweep)
                    {
                        GetSteppedFreqSweepSettings(apx, sourceApxItem);
                    }
                    else if (apx.ActiveMeasurementType == MeasurementType.ThdN)
                    {
                        GetTHDNSettings(apx, sourceApxItem);
                    }
                }
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12121", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12121", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetLevelandGainSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                sourceApxItem.APxInitialLevelAndGainList[0].ChkGainGenON = sourceApxItem.APxLevelAndGainList[0].ChkGainGenON = true;
                sourceApxItem.APxInitialLevelAndGainList[0].cmb_GainWaveform = sourceApxItem.APxLevelAndGainList[0].cmb_GainWaveform = apx.LevelAndGain.Generator.Waveform;
                int outChCount = sourceApxItem.APxInitialLevelAndGainList[0].SeqGainSetupCount = sourceApxItem.APxLevelAndGainList[0].SeqGainSetupCount = apx.SignalPathSetup.OutputChannelCount;

                sourceApxItem.APxInitialLevelAndGainList[0].chkBx_GainLevelTrackCh = sourceApxItem.APxLevelAndGainList[0].chkBx_GainLevelTrackCh = apx.LevelAndGain.Generator.Levels.TrackFirstChannel;
                sourceApxItem.APxInitialLevelAndGainList[0].txt_GainfrequencyA = sourceApxItem.APxLevelAndGainList[0].txt_GainfrequencyA = apx.LevelAndGain.Generator.Frequency.Text;
                sourceApxItem.APxInitialLevelAndGainList[0].txt_GainfrequencyB = sourceApxItem.APxLevelAndGainList[0].txt_GainfrequencyB = apx.LevelAndGain.Generator.SineDual.FrequencyB.Text;

                sourceApxItem.APxInitialLevelAndGainList[0].GainInputChCount = sourceApxItem.APxLevelAndGainList[0].GainInputChCount = apx.SignalPathSetup.InputChannelCount;
                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh1 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh1 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh1Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh1Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch1, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh1Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh1Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch1, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh1EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh1EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh1EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh1EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh2 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh2 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh2Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh2Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch2, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh2Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh2Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch2, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh2EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh2EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh2EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh2EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh3 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh3 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh3Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh3Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch3, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh3Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh3Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch3, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh3EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh3EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh3EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh3EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh4 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh4 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh4Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh4Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch4, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh4Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh4Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch4, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh4EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh4EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh4EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh4EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh5 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh5 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh5Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh5Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch5, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh5Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh5Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch5, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh5EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh5EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh5EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh5EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh6 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh6 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh6Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh6Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch6, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh6Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh6Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch6, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh6EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh6EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh6EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh6EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh7 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh7 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh7Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh7Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch7, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh7Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh7Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch7, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh7EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh7EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh7EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh7EnableVisible = Visibility.Collapsed;
                }

                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].btn_GainCh8 = sourceApxItem.APxLevelAndGainList[0].btn_GainCh8 = apx.LevelAndGain.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainCh8Level = sourceApxItem.APxLevelAndGainList[0].txt_GainCh8Level = apx.LevelAndGain.Generator.Levels.GetText(OutputChannelIndex.Ch8, apx.LevelAndGain.Generator.Levels.Unit);
                    sourceApxItem.APxInitialLevelAndGainList[0].txt_GainDcCh8Offset = sourceApxItem.APxLevelAndGainList[0].txt_GainDcCh8Offset = apx.LevelAndGain.Generator.Levels.GetOffsetText(OutputChannelIndex.Ch8, apx.LevelAndGain.Generator.Levels.OffsetUnit);
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh8EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh8EnableVisible = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialLevelAndGainList[0].chkGainCh8EnableVisible = sourceApxItem.APxLevelAndGainList[0].chkGainCh8EnableVisible = Visibility.Collapsed;
                }
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12122", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12122", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetFreqResposeSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                int chCount = sourceApxItem.APxInitialFreqResponseList[0].OutChannelCount = sourceApxItem.APxFreqResponseList[0].OutChannelCount = apx.SignalPathSetup.OutputChannelCount;
                sourceApxItem.APxInitialFreqResponseList[0].StartGenON = sourceApxItem.APxFreqResponseList[0].StartGenON = true;
                sourceApxItem.APxInitialFreqResponseList[0].txtStartFreq = sourceApxItem.APxFreqResponseList[0].txtStartFreq = apx.FrequencyResponse.Generator.StartFrequency.Text;
                sourceApxItem.APxInitialFreqResponseList[0].txtStopFreq = sourceApxItem.APxFreqResponseList[0].txtStopFreq = apx.FrequencyResponse.Generator.StopFrequency.Text;
                sourceApxItem.APxInitialFreqResponseList[0].txtLevel = sourceApxItem.APxFreqResponseList[0].txtLevel = apx.FrequencyResponse.Generator.Levels.GetText(OutputChannelIndex.Ch1);

                if (chCount > 0)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh1 = sourceApxItem.APxFreqResponseList[0].IsEnableCh1 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);

                if (chCount > 1)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh2 = sourceApxItem.APxFreqResponseList[0].IsEnableCh2 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);

                if (chCount > 2)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh3 = sourceApxItem.APxFreqResponseList[0].IsEnableCh3 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);

                if (chCount > 3)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh4 = sourceApxItem.APxFreqResponseList[0].IsEnableCh4 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);

                if (chCount > 4)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh5 = sourceApxItem.APxFreqResponseList[0].IsEnableCh5 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);

                if (chCount > 5)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh6 = sourceApxItem.APxFreqResponseList[0].IsEnableCh6 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);

                if (chCount > 6)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh7 = sourceApxItem.APxFreqResponseList[0].IsEnableCh7 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);

                if (chCount > 7)
                    sourceApxItem.APxInitialFreqResponseList[0].IsEnableCh8 = sourceApxItem.APxFreqResponseList[0].IsEnableCh8 = apx.FrequencyResponse.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetInterChannelPhaseSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                int outChCount = sourceApxItem.APxInitialInterChPhaseList[0].OutChannelCount = sourceApxItem.APxInterChPhaseList[0].OutChannelCount = apx.SignalPathSetup.OutputChannelCount;
                int inChCount = sourceApxItem.APxInitialInterChPhaseList[0].InChannelCount = sourceApxItem.APxInterChPhaseList[0].InChannelCount = apx.SignalPathSetup.InputChannelCount;

                sourceApxItem.APxInitialInterChPhaseList[0].ChkGenON = sourceApxItem.APxInterChPhaseList[0].ChkGenON = true;

                sourceApxItem.APxInitialInterChPhaseList[0].SteppedTrackChannel = sourceApxItem.APxInterChPhaseList[0].SteppedTrackChannel = apx.InterchannelPhase.Generator.Levels.TrackFirstChannel;

                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh1 = sourceApxItem.APxInterChPhaseList[0].LevelCh1 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch1Enable = sourceApxItem.APxInterChPhaseList[0].Isch1Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch1Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch1Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch1Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch1Visibility = Visibility.Collapsed;
                }

                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh2 = sourceApxItem.APxInterChPhaseList[0].LevelCh2 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch2Enable = sourceApxItem.APxInterChPhaseList[0].Isch2Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch2Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch2Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch2Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch2Visibility = Visibility.Collapsed;
                }

                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh3 = sourceApxItem.APxInterChPhaseList[0].LevelCh3 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch3Enable = sourceApxItem.APxInterChPhaseList[0].Isch3Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch3Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch3Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch3Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch3Visibility = Visibility.Collapsed;
                }

                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh4 = sourceApxItem.APxInterChPhaseList[0].LevelCh4 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch4Enable = sourceApxItem.APxInterChPhaseList[0].Isch4Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch4Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch4Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch4Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch4Visibility = Visibility.Collapsed;
                }

                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh5 = sourceApxItem.APxInterChPhaseList[0].LevelCh5 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch5Enable = sourceApxItem.APxInterChPhaseList[0].Isch5Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch5Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch5Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch5Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch5Visibility = Visibility.Collapsed;
                }

                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh6 = sourceApxItem.APxInterChPhaseList[0].LevelCh6 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch6Enable = sourceApxItem.APxInterChPhaseList[0].Isch6Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch6Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch6Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch6Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch6Visibility = Visibility.Collapsed;

                }

                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh7 = sourceApxItem.APxInterChPhaseList[0].LevelCh7 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch7Enable = sourceApxItem.APxInterChPhaseList[0].Isch7Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch7Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch7Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch7Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch7Visibility = Visibility.Collapsed;
                }

                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].LevelCh8 = sourceApxItem.APxInterChPhaseList[0].LevelCh8 = apx.InterchannelPhase.Generator.Levels.GetText(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialInterChPhaseList[0].Isch8Enable = sourceApxItem.APxInterChPhaseList[0].Isch8Enable = apx.InterchannelPhase.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch8Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch8Visibility = Visibility.Visible;
                }
                else
                {
                    sourceApxItem.APxInitialInterChPhaseList[0].Ch8Visibility = sourceApxItem.APxInitialInterChPhaseList[0].Ch8Visibility = Visibility.Collapsed;
                }

                sourceApxItem.APxInitialInterChPhaseList[0].TxtFreqA = sourceApxItem.APxInterChPhaseList[0].TxtFreqA = apx.InterchannelPhase.Generator.Frequency.Text;
                sourceApxItem.APxInitialInterChPhaseList[0].CmbRefChannelSelected = sourceApxItem.APxInterChPhaseList[0].CmbRefChannelSelected = apx.InterchannelPhase.ReferenceChannel.ToString();

                string meterRange = apx.InterchannelPhase.MeterRange.ToString();

                if (meterRange == "ZeroTo360")
                {
                    meterRange = "0 -> 360 deg";
                }
                else if (meterRange == "Minus90To270")
                {
                    meterRange = "-90 -> 270 deg";
                }
                else if (meterRange == "Minus180To180")
                {
                    meterRange = "-180 -> 180 deg";
                }

                sourceApxItem.APxInitialInterChPhaseList[0].MeterRangeSelected = sourceApxItem.APxInterChPhaseList[0].MeterRangeSelected = meterRange;
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12122", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12122", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetSteppedFreqSweepSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                int outChCount = sourceApxItem.APxInitialSteppedFreqSweepList[0].OutChannelCount = sourceApxItem.APxSteppedFreqSweepList[0].OutChannelCount = apx.SignalPathSetup.OutputChannelCount;
                int inChCount = sourceApxItem.APxInitialSteppedFreqSweepList[0].InChCount = sourceApxItem.APxSteppedFreqSweepList[0].InChCount = apx.SignalPathSetup.InputChannelCount;
                sourceApxItem.APxInitialSteppedFreqSweepList[0].ChkGenON = sourceApxItem.APxSteppedFreqSweepList[0].ChkGenON = true;

                sourceApxItem.APxInitialSteppedFreqSweepList[0].StartFrequency = sourceApxItem.APxSteppedFreqSweepList[0].StartFrequency = apx.SteppedFrequencySweep.Generator.StartFrequency.Text;
                sourceApxItem.APxInitialSteppedFreqSweepList[0].StopFrequency = sourceApxItem.APxSteppedFreqSweepList[0].StopFrequency = apx.SteppedFrequencySweep.Generator.StopFrequency.Text;

                string selectedSweep = apx.SteppedFrequencySweep.Generator.SweepParameters.StepType.ToString();
                if (selectedSweep == "Log")
                    selectedSweep = "Logarithmic";
                else if (selectedSweep == "Lin")
                    selectedSweep = "Linear";

                sourceApxItem.APxInitialSteppedFreqSweepList[0].SelectedSweep = sourceApxItem.APxSteppedFreqSweepList[0].SelectedSweep = selectedSweep;
                sourceApxItem.APxInitialSteppedFreqSweepList[0].Steppedpoints = sourceApxItem.APxSteppedFreqSweepList[0].Steppedpoints = apx.SteppedFrequencySweep.Generator.SweepParameters.NumberOfPoints;

                sourceApxItem.APxInitialSteppedFreqSweepList[0].SteppedLevel = sourceApxItem.APxSteppedFreqSweepList[0].SteppedLevel = apx.SteppedFrequencySweep.Generator.Levels.GetText(OutputChannelIndex.Ch1);

                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh1 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh1 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                }

                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh2 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh2 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                }

                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh3 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh3 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                }

                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh4 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh4 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                }

                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh5 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh5 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                }

                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh6 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh6 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                }

                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh7 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh7 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                }

                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialSteppedFreqSweepList[0].IsEnableCh8 = sourceApxItem.APxSteppedFreqSweepList[0].IsEnableCh8 = apx.SteppedFrequencySweep.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                }

                sourceApxItem.APxInitialSteppedFreqSweepList[0].cmbPhaseRefChannel = sourceApxItem.APxSteppedFreqSweepList[0].cmbPhaseRefChannel = apx.SteppedFrequencySweep.PhaseReferenceChannel.ToString();
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void GetTHDNSettings(APx500 apx, TestApxItem sourceApxItem)
        {
            try
            {
                int outChCount = sourceApxItem.APxInitialTHDNList[0].OutChannelCount = sourceApxItem.APxTHDNList[0].OutChannelCount = apx.SignalPathSetup.OutputChannelCount;
                sourceApxItem.APxInitialTHDNList[0].ChkGenON = sourceApxItem.APxTHDNList[0].ChkGenON = true;
                sourceApxItem.APxInitialTHDNList[0].chkBx_ThdnLevelTrackCh = sourceApxItem.APxTHDNList[0].chkBx_ThdnLevelTrackCh = apx.ThdN.Generator.Levels.TrackFirstChannel;

                if (outChCount > 0)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh1Content = sourceApxItem.APxTHDNList[0].txtCh1Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch1);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh1 = sourceApxItem.APxTHDNList[0].btn_THDCh1 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch1);
                }
                if (outChCount > 1)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh2Content = sourceApxItem.APxTHDNList[0].txtCh2Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch2);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh2 = sourceApxItem.APxTHDNList[0].btn_THDCh2 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch2);
                }
                if (outChCount > 2)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh3Content = sourceApxItem.APxTHDNList[0].txtCh3Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch3);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh3 = sourceApxItem.APxTHDNList[0].btn_THDCh3 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch3);
                }
                if (outChCount > 3)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh4Content = sourceApxItem.APxTHDNList[0].txtCh4Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch4);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh4 = sourceApxItem.APxTHDNList[0].btn_THDCh4 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch4);
                }
                if (outChCount > 4)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh5Content = sourceApxItem.APxTHDNList[0].txtCh5Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch5);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh5 = sourceApxItem.APxTHDNList[0].btn_THDCh5 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch5);
                }
                if (outChCount > 5)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh6Content = sourceApxItem.APxTHDNList[0].txtCh6Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch6);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh6 = sourceApxItem.APxTHDNList[0].btn_THDCh6 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch6);
                }
                if (outChCount > 6)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh7Content = sourceApxItem.APxTHDNList[0].txtCh7Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch7);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh7 = sourceApxItem.APxTHDNList[0].btn_THDCh7 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch7);
                }
                if (outChCount > 7)
                {
                    sourceApxItem.APxInitialTHDNList[0].txtCh8Content = sourceApxItem.APxTHDNList[0].txtCh8Content = apx.ThdN.Generator.Levels.GetText(OutputChannelIndex.Ch8);
                    sourceApxItem.APxInitialTHDNList[0].btn_THDCh8 = sourceApxItem.APxTHDNList[0].btn_THDCh8 = apx.ThdN.Generator.GetChannelEnabled(OutputChannelIndex.Ch8);
                }

                sourceApxItem.APxInitialTHDNList[0].txt_THDfrequency = sourceApxItem.APxTHDNList[0].txt_THDfrequency = apx.ThdN.Generator.Frequency.Text;

                sourceApxItem.APxInitialTHDNList[0].cmb_THDLowPassFilter = sourceApxItem.APxTHDNList[0].cmb_THDLowPassFilter = apx.ThdN.LowpassFilterType.ToString();

                sourceApxItem.APxInitialTHDNList[0].TxtLowpass = sourceApxItem.APxTHDNList[0].TxtLowpass = apx.ThdN.LowpassFilterFrequency.Text;

                sourceApxItem.APxInitialTHDNList[0].cmb_THDHighPassFilter = sourceApxItem.APxTHDNList[0].cmb_THDHighPassFilter = apx.ThdN.HighpassFilterType.ToString();

                sourceApxItem.APxInitialTHDNList[0].TxtHighpass = sourceApxItem.APxTHDNList[0].TxtHighpass = apx.ThdN.HighpassFilterFrequency.Text;

                string noiseWeight = apx.ThdN.NoiseWeighting.ToString();

                if (noiseWeight == "SignalPath")
                {
                    noiseWeight = "Signal Path";
                }
                else if (noiseWeight == "wt_A")
                {
                    noiseWeight = "A-wt.";
                }
                else if (noiseWeight == "wt_B")
                {
                    noiseWeight = "B-wt.";
                }
                else if (noiseWeight == "wt_C")
                {
                    noiseWeight = "C-wt.";
                }
                else if (noiseWeight == "wt_Ccir")
                {
                    noiseWeight = "CCIR-1k";
                }
                else if (noiseWeight == "wt_Dolby2k")
                {
                    noiseWeight = "CCIR-2k";
                }
                else if (noiseWeight == "wt_Ccitt")
                {
                    noiseWeight = "CCITT";
                }
                else if (noiseWeight == "wt_CMessage")
                {
                    noiseWeight = "C-Message";
                }
                else if (noiseWeight == "wt_Deemph50us")
                {
                    noiseWeight = "50 us de-emph.";
                }
                else if (noiseWeight == "wt_Deemph75us")
                {
                    noiseWeight = "75 us de-emph.";
                }
                else if (noiseWeight == "wt_Deemph50usA")
                {
                    noiseWeight = "50 us de-emph. + A-wt.";
                }
                else if (noiseWeight == "wt_Deemph75usA")
                {
                    noiseWeight = "75 us de-emph. + A-wt.";
                }

                sourceApxItem.APxInitialTHDNList[0].cmb_THDWeighting = sourceApxItem.APxTHDNList[0].cmb_THDWeighting = noiseWeight;

                sourceApxItem.APxInitialTHDNList[0].cmb_THDTuningMode = sourceApxItem.APxTHDNList[0].cmb_THDTuningMode = apx.ThdN.NotchTuningMode.ToString();

                sourceApxItem.APxInitialTHDNList[0].txtFilterFrequency = sourceApxItem.APxTHDNList[0].txtFilterFrequency = apx.ThdN.NotchFilterFrequency.Text;
            }
            catch (APException ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC12123", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void tabControl_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestSuiteItem != null)
                {
                    if (selectedTestSuiteItem.ItemNameTextBoxIsEnabled == false)
                        EditTreeViewItem(selectedTestSuiteItem.TestSuiteTreeViewExplorer, false);
                }
                else if (selectedTestPlanItem != null)
                {
                    if (selectedTestPlanItem.ItemNameTextBoxIsEnabled == false)
                        EditTreeViewItem(selectedTestPlanItem.TestPlanTreeViewExplorer, false);
                }
                else if (selectedTestCaseItem != null)
                {
                    if (selectedTestCaseItem.ItemNameTextBoxIsEnabled == false)
                        EditTreeViewItem(selectedTestCaseItem.TestCaseTreeViewExplorer, false);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_TestActionTabPlus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button sourceButton = sender as Button;
                if (sourceButton == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceButton.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                sourceTestCaseItem.AddTestAction();
                //sourceTestActionItem.ParentTestCaseItem.SelectedActionItem = sourceTestActionItem.ParentTestCaseItem.TestActionItemList[sourceTestActionItem.ParentTestCaseItem.TestActionItemList.Count - 2];

                if (sourceTestCaseItem.TestActionItemList.Count == 2)
                {
                    sourceTestCaseItem.TestActionItemList[0].TestActionTabDeleteButtonVisibility = Visibility.Visible;
                }

                sourceTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_TestActionTabDelete_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button sourceButton = sender as Button;
                if (sourceButton == null)
                    return;

                TestActionItem sourceTestActionItem = sourceButton.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                MessageBoxResult result = MessageBox.Show("Do you want to delete Action Tab : " + sourceTestActionItem.TestActionItemName + " ?", "Delete Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);
                if (result == MessageBoxResult.Cancel)
                    return;

                sourceTestActionItem.ParentTestCaseItem.RemoveTestActionItem(sourceTestActionItem);

                if (sourceTestActionItem.ParentTestCaseItem.TestActionItemList.Count == 1)
                {
                    sourceTestActionItem.ParentTestCaseItem.TestActionItemList[0].TestActionTabDeleteButtonVisibility = Visibility.Hidden;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ActionTab_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                ToolTip tabtooltip = new ToolTip();
                tabtooltip.Content = "Drop on the tab action header to rearrange";

                if (e.LeftButton == MouseButtonState.Pressed && e.RightButton == MouseButtonState.Released)
                {
                    Border sourceBorder = e.OriginalSource as Border;
                    if (sourceBorder != null)
                    {
                        TestActionItem sourceTestActionItem = sourceBorder.DataContext as TestActionItem;


                        if (sourceTestActionItem == null)
                            return;

                        if (sourceTestActionItem.ParentTestCaseItem.IsEditModeEnabled)
                        {


                            tabtooltip.IsOpen = true;

                            DragDropItem dragData = new DragDropItem();
                            dragData.DragSourceType = "TestActionTab";
                            dragData.DragSourceHashCode = this.GetHashCode();
                            dragData.sourceTestActionItem = sourceTestActionItem;

                            DragDrop.DoDragDrop(sourceBorder, new DataObject(typeof(DragDropItem), dragData), DragDropEffects.Copy);


                        }
                    }

                }
                if (e.LeftButton == MouseButtonState.Released || e.RightButton == MouseButtonState.Released)
                {
                    tabtooltip.IsOpen = false;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void ActionTab_Drop(object sender, DragEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;

                if (sourceElement == null)
                    return;

                TestActionItem targetTestActionItem = sourceElement.DataContext as TestActionItem;
                if (targetTestActionItem == null)
                    return;

                if (e.Data == null)
                    return;

                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;

                if (!targetTestActionItem.ParentTestCaseItem.IsEditModeEnabled)
                    return;

                TestActionItem sourceTestActionItem = dragData.sourceTestActionItem;

                if (dragData.DragSourceType == "TestActionTab" && dragData.DragSourceHashCode == this.GetHashCode())
                {
                    int sourceIndex = sourceTestActionItem.ParentTestCaseItem.TestActionItemList.IndexOf(sourceTestActionItem);

                    int targetIndex = 0;

                    targetIndex = sourceTestActionItem.ParentTestCaseItem.TestActionItemList.IndexOf(targetTestActionItem);

                    if (sourceIndex != targetIndex)
                    {
                        sourceTestActionItem.ParentTestCaseItem.RemoveTestActionItem(sourceTestActionItem);
                        sourceTestActionItem.ParentTestCaseItem.InsertTestActionItem(targetIndex, sourceTestActionItem);
                        //sourceTestActionItem.ParentTestCaseItem.SelectedActionItem = sourceTestActionItem;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void ActionTab_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;

                if (sourceElement == null)
                    return;

                TestActionItem sourceTestActionItem = sourceElement.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                if (e.ClickCount == 2 && sourceTestActionItem.ParentTestCaseItem.IsEditModeEnabled)
                {
                    sourceTestActionItem.TestActionItemNameTextBox.SelectAll();
                    sourceTestActionItem.TestActionItemNameTextBox.IsHitTestVisible = true;
                    sourceTestActionItem.TestActionItemNameCopy = sourceTestActionItem.TestActionItemName;
                    sourceTestActionItem.TestActionItemNameTextBox.IsReadOnly = false;
                    sourceTestActionItem.TestActionItemNameTextBox.Focusable = true;
                    sourceTestActionItem.TestActionItemNameTextBox.Cursor = Cursors.IBeam;
                    sourceTestActionItem.TestActionItemNameTextBox.Background = Brushes.LightGray;
                    sourceTestActionItem.ParentTestCaseItem.SaveButtonIsDefault = false;
                    Keyboard.Focus(sourceTestActionItem.TestActionItemNameTextBox);

                    e.Handled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SetControlCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                originalTestControlItem.ParentTestActionItem.AddSetTestControlItem(originalTestControlItem);
                originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_SetControlMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                int index = originalTestControlItem.ParentTestActionItem.SetTestControlList.IndexOf(originalTestControlItem);
                TestControlItem targetTestControlItem = null;

                if (index > 0)
                {
                    targetTestControlItem = originalTestControlItem.ParentTestActionItem.SetTestControlList[index - 1];
                    originalTestControlItem.ParentTestActionItem.SetTestControlList[index - 1] = originalTestControlItem;
                    originalTestControlItem.ParentTestActionItem.SetTestControlList[index] = targetTestControlItem;
                    originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_SetControlMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                int index = originalTestControlItem.ParentTestActionItem.SetTestControlList.IndexOf(originalTestControlItem);
                TestControlItem targetTestControlItem = null;

                if (index < originalTestControlItem.ParentTestActionItem.SetTestControlList.Count - 1)
                {
                    targetTestControlItem = originalTestControlItem.ParentTestActionItem.SetTestControlList[index + 1];
                    originalTestControlItem.ParentTestActionItem.SetTestControlList[index + 1] = originalTestControlItem;
                    originalTestControlItem.ParentTestActionItem.SetTestControlList[index] = targetTestControlItem;
                    originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_VerifyControlCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                originalTestControlItem.ParentTestActionItem.AddVerifyTestControlItem(originalTestControlItem);
                originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_VerifyControlMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                int index = originalTestControlItem.ParentTestActionItem.VerifyTestControlList.IndexOf(originalTestControlItem);
                TestControlItem targetTestControlItem = null;

                if (index > 0)
                {
                    targetTestControlItem = originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index - 1];
                    originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index - 1] = originalTestControlItem;
                    originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index] = targetTestControlItem;
                    originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
               // DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_VerifyControlMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestControlItem originalTestControlItem = sourceElement.DataContext as TestControlItem;
                if (originalTestControlItem == null)
                    return;

                int index = originalTestControlItem.ParentTestActionItem.VerifyTestControlList.IndexOf(originalTestControlItem);
                TestControlItem targetTestControlItem = null;

                if (index < originalTestControlItem.ParentTestActionItem.VerifyTestControlList.Count - 1)
                {
                    targetTestControlItem = originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index + 1];
                    originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index + 1] = originalTestControlItem;
                    originalTestControlItem.ParentTestActionItem.VerifyTestControlList[index] = targetTestControlItem;
                    originalTestControlItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
               // DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_SetTelnetCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestTelnetItem originalTestTelnetItem = sourceElement.DataContext as TestTelnetItem;
                if (originalTestTelnetItem == null)
                    return;

                originalTestTelnetItem.ParentTestActionItem.AddSetTestTelnetItem(originalTestTelnetItem);
                originalTestTelnetItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_SetTelnetMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestTelnetItem originalTestTelnetItem = sourceElement.DataContext as TestTelnetItem;
                if (originalTestTelnetItem == null)
                    return;

                int index = originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList.IndexOf(originalTestTelnetItem);
                TestTelnetItem targetTestTelnetItem = null;

                if (index > 0)
                {
                    targetTestTelnetItem = originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index - 1];
                    originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index - 1] = originalTestTelnetItem;
                    originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index] = targetTestTelnetItem;
                    originalTestTelnetItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                }
            }
            catch (Exception ex)
            {
                 DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_SetTelnetMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestTelnetItem originalTestTelnetItem = sourceElement.DataContext as TestTelnetItem;
                if (originalTestTelnetItem == null)
                    return;

                int index = originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList.IndexOf(originalTestTelnetItem);
                TestTelnetItem targetTestTelnetItem = null;

                if (index < originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList.Count - 1)
                {
                    targetTestTelnetItem = originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index + 1];
                    originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index + 1] = originalTestTelnetItem;
                    originalTestTelnetItem.ParentTestActionItem.SetTestTelnetList[index] = targetTestTelnetItem;
                    originalTestTelnetItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void RadioButton_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                if (sourceElement != null)
                {
                    if (e.Source.GetType().ToString() == "System.Windows.Controls.RadioButton")
                    {
                        var sourceTextBox = (RadioButton)e.Source;
                        if ((sourceTextBox != null) && (sourceTextBox.DataContext != null))
                        {
                            if (String.Equals(sourceTextBox.DataContext.ToString(), "Automatically update when new version of SW available", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //   tip.Content = "Locate folder containing Q-sys designer software using browse option";
                                tip.Content = "Use browse button to select the path for QSD software folder";

                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Start auto update with new version of SW at", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //  tip.Content = "Locate folder containing Q-sys designer software using browse option";
                                tip.Content = "Use browse button to select the path for QSD software folder";

                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Upgrade/Downgrade by installing application", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //  tip.Content = "Locate Q-sys designer installer exe file using browse option";
                                tip.Content = "Use browse button to select the QSD installer";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Upgrade/Downgrade by launching application", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                tip.Content = "Use browse button to select the QSD version for launching from local PC";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Ramp_checkBox_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCaseItem sourceTestCaseItem = sourceElement.DataContext as TestCaseItem;
                if (sourceTestCaseItem == null)
                    return;

                if (sourceTestCaseItem != null)
                {
                    if (e.Source.GetType().ToString() == "System.Windows.Controls.CheckBox")
                    {
                        var sourceTextBox = (CheckBox)e.Source;
                        if ((sourceTextBox != null) && (sourceTextBox.DataContext != null))
                        {
                            if (String.Equals(sourceTextBox.DataContext.ToString(), "QSC_Test_Automation.TestControlItem", StringComparison.CurrentCultureIgnoreCase))
                            {
                                sourceTextBox.ToolTip = "Use control verification to validate Ramp value";
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RadioButton_GotFocus(object sender, RoutedEventArgs e)
        {
            //TestCaseItem sourceTestCaseItem = (TestCaseItem)tab_TestCase.DataContext;
            //if (sourceTestCaseItem == null)
            //    return;
            //if (sourceTestCaseItem != null)
            //{
            //    if (e.Source.GetType().ToString() == "System.Windows.Controls.RadioButton")
            //    {
            //        var sourceTextBox = (RadioButton)e.Source;
            //        if ((sourceTextBox != null) && (sourceTextBox.DataContext != null))
            //        {
            //            if (String.Equals(sourceTextBox.DataContext.ToString(), "Automatically Update when new version of SW available", StringComparison.CurrentCultureIgnoreCase))
            //            {
            //                sourceTextBox.ToolTip = "Select folder containing Q-sys Designer installer from server ";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Start auto Update with new version of SW at")
            //            {
            //                sourceTextBox.ToolTip = "Select folder containing Q-sys Designer installer from server";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Upgrade/Downgrade by installing application")
            //            {
            //                sourceTextBox.ToolTip = "Select Q-sys Designer installer EXE from local PC";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Upgrade/Downgrade by launching application")
            //            {
            //                sourceTextBox.ToolTip = "Select Q-sys Designer EXE from local PC";
            //            }
            //        }
            //    }
            //}
        }

        private void RadioButton_GotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {
            //TestCaseItem sourceTestCaseItem = (TestCaseItem)tab_TestCase.DataContext;
            //if (sourceTestCaseItem == null)
            //    return;
            //if (sourceTestCaseItem != null)
            //{
            //    if (e.Source.GetType().ToString() == "System.Windows.Controls.RadioButton")
            //    {
            //        var sourceTextBox = (RadioButton)e.Source;
            //        if ((sourceTextBox != null) && (sourceTextBox.DataContext != null))
            //        {
            //            if (String.Equals(sourceTextBox.DataContext.ToString(), "Automatically Update when new version of SW available", StringComparison.CurrentCultureIgnoreCase))
            //            {
            //                sourceTextBox.ToolTip = "Select folder containing Q-sys Designer installer from server ";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Start auto Update with new version of SW at")
            //            {
            //                sourceTextBox.ToolTip = "Select folder containing Q-sys Designer installer from server";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Upgrade/Downgrade by installing application")
            //            {
            //                sourceTextBox.ToolTip = "Select Q-sys Designer installer EXE from local PC";
            //            }
            //            else if (sourceTextBox.DataContext.ToString() == "Upgrade/Downgrade by launching application")
            //            {
            //                sourceTextBox.ToolTip = "Select Q-sys Designer EXE from local PC";
            //            }
            //        }
            //    }
            //}
        }

        private void RadioButton_GotMouseCapture(object sender, MouseEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                if (sourceElement != null)
                {
                    if (e.Source.GetType().ToString() == "System.Windows.Controls.RadioButton")
                    {
                        var sourceTextBox = (RadioButton)e.Source;
                        if ((sourceTextBox != null) && (sourceTextBox.DataContext != null))
                        {
                            if (String.Equals(sourceTextBox.DataContext.ToString(), "Automatically update when new version of SW available", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //  tip.Content = "Locate folder containing Q-sys designer software using browse option";
                                tip.Content = "Use browse button to select the path for QSD software folder";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Start auto update with new version of SW at", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //  tip.Content = "Locate folder containing Q-sys designer software using browse option";
                                tip.Content = "Use browse button to select the path for QSD software folder";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Upgrade/Downgrade by installing application", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //tip.Content = "Locate Q-sys designer installer exe file using browse option";
                                tip.Content = "Use browse button to select the QSD installer";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }

                            else if (String.Equals(sourceTextBox.DataContext.ToString(), "Upgrade/Downgrade by launching application", StringComparison.CurrentCultureIgnoreCase))
                            {
                                if ((sender as FrameworkElement).ToolTip == null)
                                    (sender as FrameworkElement).ToolTip = new ToolTip() { Placement = PlacementMode.Relative };
                                double x = e.GetPosition((sender as FrameworkElement)).X;
                                double y = e.GetPosition((sender as FrameworkElement)).Y;
                                var tip = ((sender as FrameworkElement).ToolTip as ToolTip);
                                //    tip.Content = "Locate installed Q-sys designer exe file using browse option ";
                                tip.Content = "Use browse button to select the QSD version for launching from local PC";
                                tip.HorizontalOffset = x + 10;
                                tip.VerticalOffset = y + 20;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_HideInventory_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (grid3.Visibility == Visibility.Visible)
                {
                    grid2.ColumnDefinitions[0].Width = new GridLength(0, GridUnitType.Pixel);
                    grid3.Visibility = Visibility.Collapsed;
                }
                else
                {
                    grid2.ColumnDefinitions[0].Width = new GridLength(15, GridUnitType.Star);
                    grid3.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ControlAction_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            try
            {
                GroupBox sourceElement = sender as GroupBox;
                if (sourceElement == null)
                    return;

                TestActionItem sourceTestActionItem = sourceElement.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                if (sourceElement.ActualHeight > 310)
                {
                    sourceTestActionItem.ActionGridMaxHeight = 225 + sourceElement.ActualHeight - 310;
                }
                else
                {
                    sourceTestActionItem.ActionGridMaxHeight = 225;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Executionwindow_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DeviceDiscovery.CreateRunnerWindow(false);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC15010", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void scrollViewerSetControl_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            try
            {
                ScrollViewer sourceElement = sender as ScrollViewer;
                if (sourceElement == null)
                    return;

                TestActionItem sourceTestActionItem = sourceElement.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                sourceTestActionItem.ActionGridMinHeight = 85 + sourceElement.ActualHeight;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ControlVerify_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            try
            {
                GroupBox sourceElement = sender as GroupBox;
                if (sourceElement == null)
                    return;

                TestActionItem sourceTestActionItem = sourceElement.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                if (sourceElement.ActualHeight > 310)
                {
                    sourceTestActionItem.VerifyGridMaxHeight = 225 + sourceElement.ActualHeight - 310;
                }
                else
                {
                    sourceTestActionItem.VerifyGridMaxHeight = 225;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void scrollViewerVerifyControl_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            try
            {
                ScrollViewer sourceElement = sender as ScrollViewer;
                if (sourceElement == null)
                    return;

                TestActionItem sourceTestActionItem = sourceElement.DataContext as TestActionItem;
                if (sourceTestActionItem == null)
                    return;

                sourceTestActionItem.VerifyGridMinHeight = 85 + sourceElement.ActualHeight;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void listView_TestSuite_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceListiView = sender as ListView;
                if (sourceListiView == null)
                    return;

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                HitTestResult r = VisualTreeHelper.HitTest(sourceListiView, e.GetPosition(sourceListiView));
                sourceElement = r.VisualHit as FrameworkElement;
                TreeViewExplorer originalTreeViewItem = sourceElement.DataContext as TreeViewExplorer;
                List<TreeViewExplorer> selectedTreeViewExplorer = new List<TreeViewExplorer>();

                if (originalTreeViewItem == null)
                {
                    foreach (TreeViewExplorer item in sourceListiView.SelectedItems)
                    {
                        selectedTreeViewExplorer.Add(item);
                    }

                    selectedTreeViewExplorer.ForEach(x => x.IsSelected = false);
                }
              
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void lst_TestPlan_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceListiView = sender as ListView;
                if (sourceListiView == null)
                    return;

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                HitTestResult r = VisualTreeHelper.HitTest(sourceListiView, e.GetPosition(sourceListiView));
                sourceElement = r.VisualHit as FrameworkElement;
                TreeViewExplorer originalTreeViewItem = sourceElement.DataContext as TreeViewExplorer;
                List<TreeViewExplorer> selectedTreeViewExplorer = new List<TreeViewExplorer>();

                if (originalTreeViewItem == null)
                {
                    foreach (TreeViewExplorer item in sourceListiView.SelectedItems)
                    {
                        selectedTreeViewExplorer.Add(item);
                    }

                    selectedTreeViewExplorer.ForEach(x => x.IsSelected = false);
                }
                
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeViewDesigner_PreviewMouseDownUp(object sender, MouseButtonEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                if (sourceElement == null)
                    return;

                if (sourceElement.GetType().ToString() != "System.Windows.Controls.TextBox" && sourceElement.GetType().ToString() != "System.Windows.Controls.TextBoxView")
                {
                    TreeViewExplorer originalTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;

                    if (e.OriginalSource as Border != null)
                    {
                        if ((e.OriginalSource as Border).Child as System.Windows.Shapes.Path != null)
                            return;
                    }
                    else if (e.OriginalSource as System.Windows.Shapes.Path != null)
                    {
                        return;
                    }
                    else if (originalTreeViewExplorer == null && sourceElement.ToString() != "System.Windows.Controls.Grid")
                    {
                        return;
                    }

                    if (originalTreeViewExplorer != null && isRenameModeEnabled == true && selectedItemsDesigner.Count > 0)
                    {
                        string oldModifiedName = selectedItemsDesigner[0].Modifiedby;
                        selectedItemsDesigner[0].RenameItem();


                        if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(selectedItemsDesigner[0].Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(selectedItemsDesigner[0].Modifiedby))
                                    modifiedByList.Add(selectedItemsDesigner[0].Modifiedby, 1);
                                else
                                    modifiedByList[selectedItemsDesigner[0].Modifiedby] = modifiedByList[selectedItemsDesigner[0].Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }


                            }
                        }
                        insertselectionItem();

                    }


                    TreeView_MultiSelectDesigner(originalTreeViewExplorer, selectedItemsDesigner, false, e.ChangedButton, e.ClickCount);
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14001", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeViewDesigner_PreviewKeyDownUp(object sender, KeyEventArgs e)
        {
            try
            {
                TextBox Text1 = e.OriginalSource as TextBox;

                if(Text1!=null)
                {
                    Text1.TextChanged += Text1_TextChanged;
                }

                if (e.Key == Key.Apps)
                {
                    e.Handled = true;
                }
                else if (e.Key == Key.Escape)
                {
                    TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                    TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                    TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                    if (selectedTestSuiteItem != null && selectedTestSuiteItem.IsEditModeEnabled==true)
                    {
                        TestSuiteCancel(selectedTestSuiteItem);
                    }
                    else if (selectedTestPlanItem != null && selectedTestPlanItem.IsEditModeEnabled == true)
                    {
                        TestPlanCancel(selectedTestPlanItem);
                    }
                    else if (selectedTestCaseItem != null && selectedTestCaseItem.IsEditModeEnabled==true)
                    {
                        TestCaseCancel(selectedTestCaseItem);
                    }

                }
                if ((Keyboard.IsKeyDown(Key.LeftCtrl)) || (Keyboard.IsKeyDown(Key.RightCtrl)))
                {
                    if (e.Key == Key.V)
                    {
                        string lstrCopyandPasteTxtBox = null;
                        TextBox Text = e.OriginalSource as TextBox;
                        AdornerLayer TxtAdornerLayer = null;
                        var rect = Text.GetRectFromCharacterIndex(Text.CaretIndex);
                        var point = rect.BottomRight;
                        if (Text != null)
                        {
                            TxtAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                            Warning = new TextblockWarning(TxtAdornerLayer, point.X, point.Y);
                        }
                       
                            lstrCopyandPasteTxtBox = Clipboard.GetText();
                            if (Regex.IsMatch(lstrCopyandPasteTxtBox, @"[\\/:*?<>'%|""[\]&]"))
                            {
                                if (TxtAdornerLayer != null && Text != null)
                                {
                                    Warning.Remove(TxtAdornerLayer, Text);
                                TxtAdornerLayer.Add(new TextblockWarning(Text, point.X, point.Y));
                                }
                                e.Handled = true;
                            }
                            else
                            {
                                Warning.Remove(TxtAdornerLayer, Text);
                                e.Handled = false;
                            }
                        
                    }

                }
                if (e.Key == Key.Multiply)
                {
                    string textBoxItemue = "*";
                    TextBox Text = e.OriginalSource as TextBox;
                    AdornerLayer TxtAdornerLayer = null;
                    var rect = Text.GetRectFromCharacterIndex(Text.CaretIndex);
                    var point = rect.BottomRight;
                    if (Text != null)
                    {
                        TxtAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                        Warning = new TextblockWarning(TxtAdornerLayer, point.X, point.Y);
                    }
                    if (Regex.IsMatch(textBoxItemue, @"[\\/:*?<>'%|""[\]&]"))
                    {
                        if (TxtAdornerLayer != null && Text != null)
                        {
                            Warning.Remove(TxtAdornerLayer, Text);
                            TxtAdornerLayer.Add(new TextblockWarning(Text, point.X, point.Y));
                        }
                        e.Handled = true;
                    }
                    else
                    {
                        Warning.Remove(TxtAdornerLayer, Text);
                        e.Handled = false;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14003", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Text1_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void TreeViewDesigner_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            try
            {
                TreeViewExplorer originalTreeViewExplorer = TreeViewDesigner.SelectedItem as TreeViewExplorer;
                if (originalTreeViewExplorer == null)
                    return;

                if ((Keyboard.IsKeyDown(Key.Up)) || (Keyboard.IsKeyDown(Key.Down)) || (Keyboard.IsKeyDown(Key.Left)) || (Keyboard.IsKeyDown(Key.Right)))
                {
                    TreeView_MultiSelectDesigner(originalTreeViewExplorer, selectedItemsDesigner, true, MouseButton.Left, 1);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeView_MultiSelectDesigner(TreeViewExplorer originalTreeViewExplorer, List<TreeViewExplorer> selectedItems, bool isKeyBoardInput,
            MouseButton changedButton, int clickCount)
        {
            bool isTestItemInEditMode = false;
            string editModeItemType = null;
            try
            {
                if (isKeyBoardInput == false && originalTreeViewExplorer == null)
                {
                    foreach (TreeViewExplorer item in selectedItems)
                    {
                        item.IsMultiSelectOn = false;
                        item.IsSelected = false;
                    }
                    selectedItems.Clear();
                    return;
                }

                if (isKeyBoardInput == false && changedButton == MouseButton.Left && Mouse.LeftButton == MouseButtonState.Pressed)
                    skipMouseReleaseButton = false;

                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestCaseItem != null && selectedTestCaseItem.IsEditModeEnabled)
                    isTestItemInEditMode = selectedTestCaseItem.SaveButtonIsEnabled;
                else if (selectedTestPlanItem != null && selectedTestPlanItem.IsEditModeEnabled)
                {
                    isTestItemInEditMode = selectedTestPlanItem.SaveButtonIsEnabled;
                    if (selectedTestPlanItem.IsEditModeEnabled)
                        editModeItemType = QatConstants.DbTestCaseTable;
                }
                else if (selectedTestSuiteItem != null && selectedTestSuiteItem.IsEditModeEnabled)
                {
                    isTestItemInEditMode = selectedTestSuiteItem.SaveButtonIsEnabled;
                    if (selectedTestSuiteItem.IsEditModeEnabled)
                        editModeItemType = QatConstants.DbTestPlanTable;
                }

                if (isTestItemInEditMode == true && !String.Equals(editModeItemType, originalTreeViewExplorer.ItemType))
                    return;

                if (isKeyBoardInput || (changedButton == MouseButton.Left && Mouse.LeftButton == MouseButtonState.Pressed && selectedItems.Count < 2) ||
                    (changedButton == MouseButton.Left && Mouse.LeftButton == MouseButtonState.Released && selectedItems.Count >= 2))
                {
                    if (((Keyboard.IsKeyDown(Key.LeftShift)) || (Keyboard.IsKeyDown(Key.RightShift))) && (editModeItemType == null || String.Equals(editModeItemType, originalTreeViewExplorer.ItemType)))
                    {
                        if ((selectedItems.Count > 0 && !String.Equals(selectedItems.First().ItemType, QatConstants.TveDesignerHeaderItemType) && String.Equals(selectedItems.First().ItemType, originalTreeViewExplorer.ItemType)) ||
                            (selectedItems.Count == 0 && !String.Equals(originalTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType)))
                        {
                            List<TreeViewExplorer> parentInventoryList = new List<TreeViewExplorer>();
                            int endIndex = 0;
                            int startIndex = 0;

                            if (selectedItems.Count > 0)
                            {
                                parentInventoryList = originalTreeViewExplorer.Parent.Children;
                                TreeViewExplorer startItem = selectedItems.Last();
                                startIndex = parentInventoryList.IndexOf(startItem);
                                endIndex = parentInventoryList.IndexOf(originalTreeViewExplorer);
                            }
                            else
                            {
                                parentInventoryList = originalTreeViewExplorer.Parent.Children;
                                startIndex = endIndex = parentInventoryList.IndexOf(originalTreeViewExplorer);
                            }

                            if (startIndex <= endIndex)
                            {
                                startIndex += 1;
                                for (int i = startIndex; i <= endIndex; i++)
                                {
                                    if (!selectedItems.Contains(parentInventoryList[i]))
                                    {
                                        selectedItems.Add(parentInventoryList[i]);
                                        parentInventoryList[i].IsMultiSelectOn = true;
                                    }
                                    else
                                    {
                                        selectedItems.Remove(parentInventoryList[i - 1]);
                                        parentInventoryList[i - 1].IsMultiSelectOn = false;
                                    }
                                }
                            }
                            else
                            {
                                startIndex -= 1;
                                for (int i = startIndex; i >= endIndex; i--)
                                {
                                    if (!selectedItems.Contains(parentInventoryList[i]))
                                    {
                                        selectedItems.Add(parentInventoryList[i]);
                                        parentInventoryList[i].IsMultiSelectOn = true;
                                    }
                                    else
                                    {
                                        selectedItems.Remove(parentInventoryList[i + 1]);
                                        parentInventoryList[i + 1].IsMultiSelectOn = false;
                                    }
                                }
                            }
                        }
                    }
                    else if (((Keyboard.IsKeyDown(Key.LeftCtrl)) || (Keyboard.IsKeyDown(Key.RightCtrl))) && (editModeItemType == null || String.Equals(editModeItemType, originalTreeViewExplorer.ItemType)))
                    {
                        if ((selectedItems.Count > 0 && !String.Equals(selectedItems.First().ItemType, QatConstants.TveDesignerHeaderItemType) && String.Equals(selectedItems.First().ItemType, originalTreeViewExplorer.ItemType) && (!String.Equals(selectedItems.First().ItemType, QatConstants.TveDesignerCatHeaderItemType))) ||
                            (selectedItems.Count == 0 && !String.Equals(originalTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType)))
                        {
                            if (!selectedItems.Contains(originalTreeViewExplorer))
                            {
                                if (selectedItems.Count == 1)
                                    skipMouseReleaseButton = true;

                                selectedItems.Add(originalTreeViewExplorer);
                                originalTreeViewExplorer.IsMultiSelectOn = true;
                            }
                            else if (!skipMouseReleaseButton)
                            {
                                originalTreeViewExplorer.IsMultiSelectOn = false;
                                selectedItems.Remove(originalTreeViewExplorer);
                            }
                        }
                    }
                    else
                    {
                        foreach (TreeViewExplorer item in selectedItems)
                        {
                            item.IsMultiSelectOn = false;
                        }
                        selectedItems.Clear();
                        selectedItems.Add(originalTreeViewExplorer);
                        originalTreeViewExplorer.IsMultiSelectOn = true;

                        if (isTestItemInEditMode == false && clickCount == 1 && !String.Equals(editModeItemType, originalTreeViewExplorer.ItemType))
                        {
                            if (!isKeyBoardInput && originalTreeViewExplorer.IsSelected == false)
                                originalTreeViewExplorer.IsSelected = true;
                            OpenTreeViewItem(originalTreeViewExplorer, false);
                        }
                        else if (isTestItemInEditMode == false && isRenameModeEnabled == false && clickCount == 2 && !String.Equals(originalTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType) && !String.Equals(editModeItemType, originalTreeViewExplorer.ItemType))
                        {
                            if (!isKeyBoardInput && originalTreeViewExplorer.IsSelected == false)
                                originalTreeViewExplorer.IsSelected = true;
                            EditTreeViewItem(originalTreeViewExplorer, false);
                        }
                    }
                }

                if (isKeyBoardInput == false && changedButton == MouseButton.Right && Mouse.RightButton == MouseButtonState.Pressed)
                {
                    if (!selectedItems.Contains(originalTreeViewExplorer))
                    {
                        foreach (TreeViewExplorer item in selectedItems)
                        {
                            item.IsMultiSelectOn = false;
                        }
                        selectedItems.Clear();
                        selectedItems.Add(originalTreeViewExplorer);
                        originalTreeViewExplorer.IsMultiSelectOn = true;

                        if (isTestItemInEditMode == false && !String.Equals(editModeItemType, originalTreeViewExplorer.ItemType))
                        {
                            if (!isKeyBoardInput && originalTreeViewExplorer.IsSelected == false)
                                originalTreeViewExplorer.IsSelected = true;
                            OpenTreeViewItem(originalTreeViewExplorer, false);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14004", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeViewDesigner_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.LeftButton == MouseButtonState.Pressed && e.OriginalSource.GetType().ToString() != "System.Windows.Controls.Primitives.Thumb" && isRenameModeEnabled == false)
                {
                    FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                    if (sourceElement == null)
                        return;

                    TreeViewExplorer originalTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;

                    if (originalTreeViewExplorer != null)
                        MouseMove_Designer(originalTreeViewExplorer, sender);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14005", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void MouseMove_Designer(TreeViewExplorer originalTreeViewExplorer, object sender)
        {
            try
            {
                if (originalTreeViewExplorer == null)
                    return;

                bool isTestItemInEditMode = false;
                string editModeItemType = null;
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                {
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                    editModeItemType = QatConstants.DbTestCaseTable;
                }
                else if (selectedTestSuiteItem != null)
                {
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;
                    editModeItemType = QatConstants.DbTestPlanTable;
                }

                if (isTestItemInEditMode == false || !String.Equals(editModeItemType, originalTreeViewExplorer.ItemType) || String.Equals(originalTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType))
                    return;

                if (!selectedItemsDesigner.Contains(originalTreeViewExplorer))
                    return;

                DataObject dataSourceObject = new DataObject();
                dataSourceObject.SetData(this.GetHashCode().ToString(), this);
                if (selectedItemsDesigner != null)
                {
                    DragDropItem dragData = new DragDropItem();
                    dragData.DragSourceType = "TreeView";
                    dragData.SelectedItems = selectedItemsDesigner;
                    CreateDragDropWindow(selectedItemsDesigner);
                    DragDrop.DoDragDrop(sender as DependencyObject, new DataObject(typeof(DragDropItem), dragData), DragDropEffects.Copy);
                    if (_dragdropWindow != null)
                    {
                        _dragdropWindow.Close();
                        _dragdropWindow = null;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14007", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Window _dragdropWindow;
        private void CreateDragDropWindow(List<TreeViewExplorer> selectedItemscount)
        {
            try
            {
                FormattedText t = null;

                _dragdropWindow = new Window
                {
                    WindowStyle = WindowStyle.None,
                    AllowsTransparency = true,
                    AllowDrop = false,
                    Background = null,

                    IsHitTestVisible = false,
                    SizeToContent = SizeToContent.WidthAndHeight,
                    Topmost = true,
                    ShowInTaskbar = false

                };

                TextBlock visual = new TextBlock();


                visual.Margin = new Thickness(20, 20, 0, 0);


                if (selectedItemscount.Count > 1)
                {
                    visual.Text = selectedItemscount[0].ItemName + "+ " + (selectedItemscount.Count - 1).ToString() + " more Items";

                }

                else
                {
                    visual.Text = selectedItemscount[0].ItemName;
                }

                t = new FormattedText(selectedItemscount[0].ItemName, CultureInfo.CurrentUICulture, FlowDirection.LeftToRight,
              new Typeface(selectedItemscount[0].ItemTextBox.FontFamily, selectedItemscount[0].ItemTextBox.FontStyle, selectedItemscount[0].ItemTextBox.FontWeight, selectedItemscount[0].ItemTextBox.FontStretch),
              selectedItemscount[0].ItemTextBox.FontSize,
              Brushes.Black);


                visual.Width = t.Width + 100;
                visual.Height = t.Height + 10;

                _dragdropWindow.Content = visual;
                Win32Point w32Mouse = new Win32Point();
                GetCursorPos(ref w32Mouse);
                _dragdropWindow.Left = w32Mouse.X;
                _dragdropWindow.Top = w32Mouse.Y;
                _dragdropWindow.Show();

            }


            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECXXCDD", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void Btn_Search_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SearchTreeViewItem(true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14008", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SearchBoxKeyDown(object sender, RoutedEventArgs e)
        {
            try
            {
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                txt_Search.Clear();

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14009", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenBlankTab_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestBlankItem sourceTestBlankItem = new TestBlankItem();
                DesignerTabList.Add(sourceTestBlankItem);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14010", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void NewMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                NewTreeViewItem(designerTreeContextMenuSource);

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14010", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                OpenTreeViewItem(designerTreeContextMenuSource, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14011", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EditMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                EditTreeViewItem(designerTreeContextMenuSource, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14012", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RenameMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TreeViewExplorer sourceTreeViewExplorer = null;
                if (selectedItemsDesigner.Count == 1)
                    sourceTreeViewExplorer = selectedItemsDesigner.First();

                if (sourceTreeViewExplorer == null)
                    return;

                if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType))
                    return;

                isRenameModeEnabled = true;
                sourceTreeViewExplorer.copyItemName = sourceTreeViewExplorer.ItemName;
                sourceTreeViewExplorer.ItemTextBox.IsReadOnly = false;
                sourceTreeViewExplorer.ItemTextBox.IsHitTestVisible = true;
                sourceTreeViewExplorer.ItemTextBox.Focusable = true;
                sourceTreeViewExplorer.ItemTextBox.Cursor = Cursors.IBeam;
                sourceTreeViewExplorer.ItemTextBox.Background = Brushes.LightGray;
                sourceTreeViewExplorer.ItemTextBox.Text = sourceTreeViewExplorer.ItemName;
                sourceTreeViewExplorer.ItemTextBox.SelectAll();
                sourceTreeViewExplorer.IsRenameModeEnabled = true;
                sourceTreeViewExplorer.ItemTextBox.MaxLength = 260;
                Keyboard.Focus(sourceTreeViewExplorer.ItemTextBox);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14013", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DeleteMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                List<TreeViewExplorer> removedItemList = new List<TreeViewExplorer>();
                TreeViewExplorer sourceTreeViewExplorer = null;
                TreeViewExplorer selectPreviousTreeViewExplorer = null;

                //if (selectedItemsDesigner.Count > 0 && selectedItemsDesigner[0].ItemType == QatConstants.DbTestSuiteTable)
                //{
                //    MessageBoxResult response = MessageBox.Show("Are you sure you want to delete?", "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);

                //    if (response == MessageBoxResult.Cancel)
                //        return;
                //}

                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    if (QscDatabase.DeleteTreeItem(item))
                    {
                        removedItemList.Add(item);

                        if (copiedItemsDesigner.Contains(item))
                            copiedItemsDesigner.Remove(item);

                        int removedItemIndex = item.Parent.Children.IndexOf(item);

                        if (removedItemIndex == 0)
                        {
                            sourceTreeViewExplorer = item.Parent;
                            selectPreviousTreeViewExplorer = item.Parent;
                        }
                        else if (removedItemIndex > 0)
                        {
                            sourceTreeViewExplorer = item.Parent.Children[removedItemIndex - 1];
                            selectPreviousTreeViewExplorer = item.Parent.Children[removedItemIndex - 1];  
                        }
                        else
                            MessageBox.Show("Exception\n ", "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);


                        if (isGroupByCategory == false)
                        {
                            deleteinlist(treeViewExplorerDesignerList, item.ItemType, item);
                            deleteinlist(treeViewExplorerFilterList, item.ItemType, item);
                            deleteinlist(treeViewExplorerSearchList, item.ItemType, item);
                         
                        }
                        else
                        {
                         
                          
                            DeleteCategoryList(treeViewExplorerCategoryFilterList, item);
                            DeleteCategoryList(treeViewExplorerCategorySearchList, item);
                            DeleteCategoryList(treeViewExplorerCategoryList, item);


                        }

                        //item.Parent.RemoveChildren(item);
                        if (item.Category != null && item.Category != string.Empty && categoryList.ContainsKey(item.Category))
                        {
                            if (categoryList[item.Category]==1)
                                categoryList.Remove(item.Category);
                            else
                                categoryList[item.Category] = categoryList[item.Category] -1;
                        }

                        if (item.Createdby != null && item.Createdby != string.Empty&& createdByList.ContainsKey(item.Createdby))
                        {
                            if (createdByList[item.Createdby]==1)
                                createdByList.Remove(item.Createdby);
                            else
                                createdByList[item.Createdby] = createdByList[item.Createdby] - 1;
                        }

                        if (item.Modifiedby != null && item.Modifiedby != string.Empty&& modifiedByList.ContainsKey(item.Modifiedby))
                        {
                            if (modifiedByList[item.Modifiedby]==1)
                                modifiedByList.Remove(item.Modifiedby);
                            else
                                modifiedByList[item.Modifiedby] = modifiedByList[item.Modifiedby] - 1;
                        }
                    }
                }

                insertselectionItem();
                if (removedItemList.Count == 0)
                    return;

                if (sourceTreeViewExplorer == null)
                    return;

                foreach (TreeViewExplorer item in removedItemList)
                {
                    if (selectedItemsDesigner.Contains(item))
                        selectedItemsDesigner.Remove(item);
                }

                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    item.IsMultiSelectOn = false;
                    item.IsSelected = false;
                }

                selectedItemsDesigner.Clear();

                //selectedItemsDesigner.Add(sourceTreeViewExplorer);
                //sourceTreeViewExplorer.IsMultiSelectOn = true;

                bool isTestItemInEditMode = false;
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (isTestItemInEditMode == false)
                    OpenTreeViewItem(sourceTreeViewExplorer, false);

                var dataContext = TreeViewDesigner.DataContext;
                TreeViewDesigner.DataContext = null;
                TreeViewDesigner.DataContext = dataContext;
                if (selectPreviousTreeViewExplorer != null)
                    BringIntoView(selectPreviousTreeViewExplorer, selectPreviousTreeViewExplorer.ItemType);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14014", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DeleteCategoryList(ObservableCollection<TreeViewExplorer> CategoryList, TreeViewExplorer item)
        {
            try
            {
                TreeViewExplorer[] CategoryHeader = CategoryList.Where(p => p.Children.Where(x => x.Children.Contains(item)).Any()).ToArray();
           
                if (CategoryHeader.Count() > 0)
                {
                    var treeViewExplore = CategoryHeader[0];

                    if (item.ItemType == "TestSuite")
                    {
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle).Children.Remove(item);
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle).ChildrenCountForView = treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle).Children.Count;
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle).ChildrenCountViewIsEnabled = true;
                        if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle).ChildrenCountForView == 0)
                        {
                            if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle) == null && treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle) == null)
                                CategoryList.Remove(treeViewExplore);
                            else
                                treeViewExplore.Children.Remove(treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle));

                        }
                            
                    }
                    else if (item.ItemType == "TestPlan")
                    {
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle).Children.Remove(item);
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle).ChildrenCountForView = treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle).Children.Count;
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle).ChildrenCountViewIsEnabled = true;
                        if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle).ChildrenCountForView == 0)
                        {
                            if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle) == null && treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle) == null)
                                CategoryList.Remove(treeViewExplore);
                            else
                                treeViewExplore.Children.Remove(treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle));


                        }

                    }
                    else if (item.ItemType == "TestCase")
                    {
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle).Children.Remove(item);
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle).ChildrenCountForView = treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle).Children.Count;
                        treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle).ChildrenCountViewIsEnabled = true;
                        if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle).ChildrenCountForView == 0)
                        {
                            if (treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle) == null && treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle) == null)
                                CategoryList.Remove(treeViewExplore);
                            else
                                treeViewExplore.Children.Remove(treeViewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle));

                        }

                    }
                  
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14014", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void deleteinlist(ObservableCollection<TreeViewExplorer> listname, string itemtype, TreeViewExplorer item)
        {
            try
            {
           
                if (itemtype == "TestSuite")
                {
                    TreeViewExplorer removeItem = listname[QatConstants.TveDesignerTestSuiteIndex].Children.Find(x => x.ItemName == item.ItemName);
                    if (removeItem != null)
                    {
                        listname[QatConstants.TveDesignerTestSuiteIndex].Children.Remove(removeItem);
                        listname[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = listname[QatConstants.TveDesignerTestSuiteIndex].Children.Count;
                        listname[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                    }

                    //listname[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                    //listname[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);

                }

                if (itemtype == "TestPlan")
                {
                    TreeViewExplorer removeItem = listname[QatConstants.TveDesignerTestPlanIndex].Children.Find(x => x.ItemName == item.ItemName);
                    if (removeItem != null)
                    {
                        listname[QatConstants.TveDesignerTestPlanIndex].Children.Remove(removeItem);
                        listname[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = listname[QatConstants.TveDesignerTestPlanIndex].Children.Count;
                        listname[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                    }

                    //listname[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                    //listname[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);

                }
                if (itemtype == "TestCase")
                {
                    TreeViewExplorer removeItem = listname[QatConstants.TveDesignerTestCaseIndex].Children.Find(x => x.ItemName == item.ItemName);
                    if (removeItem != null)
                    {
                        listname[QatConstants.TveDesignerTestCaseIndex].Children.Remove(removeItem);
                        listname[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = listname[QatConstants.TveDesignerTestCaseIndex].Children.Count;
                        listname[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;
                    }
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14015", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void CopyMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                copiedItemsDesigner.Clear();
                List<TreeViewExplorer> temp = new List<TreeViewExplorer>();
                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    string query = string.Empty;
                    if (item.ItemType == QatConstants.DbTestSuiteTable)
                        query = "select Category from " + QatConstants.DbTestSuiteTable + " where " + QatConstants.DbTestSuiteIDColumn + " = " + item.ItemKey;
                    else if (item.ItemType == QatConstants.DbTestPlanTable)
                        query = "select Category from " + QatConstants.DbTestPlanTable + " where " + QatConstants.DbTestPlanIDColumn + " = " + item.ItemKey;
                    else if (item.ItemType == QatConstants.DbTestCaseTable)
                        query = "select Category from " + QatConstants.DbTestCaseTable + " where " + QatConstants.DbTestCaseIDColumn + " = " + item.ItemKey;

                    string category = string.Empty;
                    if (query != string.Empty)
                    {
                        DataTable dataTable = QscDatabase.SendCommand_Toreceive(query);
                        DataTableReader read1 = dataTable.CreateDataReader();

                        while (read1.Read())
                        {
                            category = read1.GetValue(0).ToString();
                        }

                        item.Category = category;
                    }

                    copiedItemsDesigner.Add(item);
                    copiedItemType = item.ItemType;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14015", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void AddPastedIteminList(ObservableCollection<TreeViewExplorer> ListType, string itemtype, TreeViewExplorer newitem)
        {
            try
            {
                if (itemtype == "TestSuite")
                {
                    if (!ListType[QatConstants.TveDesignerTestSuiteIndex].Children.Contains(newitem))
                        ListType[QatConstants.TveDesignerTestSuiteIndex].AddChildren(newitem);

                    ListType[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = ListType[QatConstants.TveDesignerTestSuiteIndex].Children.Count;
                    ListType[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                }
                if (itemtype == "TestPlan")
                {
                    if (!ListType[QatConstants.TveDesignerTestPlanIndex].Children.Contains(newitem))
                        ListType[QatConstants.TveDesignerTestPlanIndex].AddChildren(newitem);

                    ListType[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = ListType[QatConstants.TveDesignerTestPlanIndex].Children.Count;
                    ListType[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                }
                if (itemtype == "TestCase")
                {
                    if (!ListType[QatConstants.TveDesignerTestCaseIndex].Children.Contains(newitem))
                        ListType[QatConstants.TveDesignerTestCaseIndex].AddChildren(newitem);

                    ListType[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = ListType[QatConstants.TveDesignerTestCaseIndex].Children.Count;
                    ListType[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                
            }
        }
        private void AddPastedIteminCategoryList(ObservableCollection<TreeViewExplorer> ListType, string itemtype, TreeViewExplorer newitem, TreeViewExplorer item)
        {
            try
            {
                TreeViewExplorer[] categoryName = null;
                categoryName = ListType.Where(p => p.Children.Where(x => x.Children.Contains(item)).Any()).ToArray();
                if (categoryName.Count() > 0)
                {
                    var treeviewExplore = categoryName[0];
                    TreeViewExplorer headeritem = null; 
                    if (itemtype == "TestSuite")
                    {
                        headeritem= treeviewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                        if (!headeritem.Children.Contains(newitem))
                        {
                            headeritem.AddChildren(newitem);
                            headeritem.ChildrenCountForView = headeritem.Children.Count;
                            headeritem.ChildrenCountViewIsEnabled = true;
                            
                        }
                    }
                    else if (itemtype == "TestPlan")
                    {
                        headeritem = treeviewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle);
                        if (!headeritem.Children.Contains(newitem))
                        {
                            headeritem.AddChildren(newitem);
                            headeritem.ChildrenCountForView = headeritem.Children.Count;
                            headeritem.ChildrenCountViewIsEnabled = true;
                        }
                    }
                    else if (itemtype == "TestCase")
                    {
                        headeritem = treeviewExplore.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle);
                        if (!headeritem.Children.Contains(newitem))
                        {
                            headeritem.AddChildren(newitem);
                            headeritem.ChildrenCountForView = headeritem.Children.Count;
                            headeritem.ChildrenCountViewIsEnabled = true;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }


        private void PasteMenuItem_Click(object sender, RoutedEventArgs e)
        {
            TreeViewExplorer newItemDuplicate = null;

            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if (copiedItemsDesigner.Count == 0)
                    return;

                if (String.Equals(copiedItemsDesigner[0].ItemType, QatConstants.TveDesignerHeaderItemType))
                    return;

                foreach (TreeViewExplorer item in copiedItemsDesigner)
                {
                    TreeViewExplorer newItem = QscDatabase.CopyTreeItem(item);
                    if (newItem != null)
                    {
                        newItem.ChildrenCountForView = item.ChildrenCountForView;
                        newItem.ChildrenCountViewIsEnabled = true;
                        ////item.Parent.AddChildren(newItem);

               
                        if (isGroupByCategory == false)
                        {

                            if (isDesignerSearchListSelected == true && isDesignerFilterListSelected == true)
                            {
                                AddPastedIteminList(treeViewExplorerDesignerList, item.ItemType, newItem);
                                AddPastedIteminList(treeViewExplorerFilterList, item.ItemType, newItem);
                                AddPastedIteminList(treeViewExplorerSearchList, item.ItemType, newItem);

                            }
                            else if(isDesignerSearchListSelected == true)
                            {
                                AddPastedIteminList(treeViewExplorerDesignerList, item.ItemType, newItem);
                                AddPastedIteminList(treeViewExplorerSearchList, item.ItemType, newItem);
                            }
                            else if(isDesignerFilterListSelected == true)
                            {
                                AddPastedIteminList(treeViewExplorerDesignerList, item.ItemType, newItem);
                                AddPastedIteminList(treeViewExplorerFilterList, item.ItemType, newItem);
                            }
                            else
                            {
                                AddPastedIteminList(treeViewExplorerDesignerList, item.ItemType, newItem);
                            }

                            //if (isDesignerFilterListSelected == true)
                            //    AddPastedIteminList(treeViewExplorerFilterList, item.ItemType, newItem);
                            //if (isDesignerSearchListSelected == true)
                            //    AddPastedIteminList(treeViewExplorerSearchList, item.ItemType, newItem);
                        }
                        else
                        {
                          
                            if (isDesignerSearchListSelected == true && isDesignerFilterListSelected == true)
                            {
                                AddPastedIteminCategoryList(treeViewExplorerCategoryList, item.ItemType, newItem, item);
                                AddPastedIteminCategoryList(treeViewExplorerCategoryFilterList, item.ItemType, newItem, item);
                                AddPastedIteminCategoryList(treeViewExplorerCategorySearchList, item.ItemType, newItem, item);
                            }
                            else if (isDesignerSearchListSelected == true)
                           
                              {
                                AddPastedIteminCategoryList(treeViewExplorerCategoryList, item.ItemType, newItem, item);
                                AddPastedIteminCategoryList(treeViewExplorerCategorySearchList, item.ItemType, newItem, item);
                           
                            }
                           else if(isDesignerFilterListSelected == true)
                            {
                                AddPastedIteminCategoryList(treeViewExplorerCategoryList, item.ItemType, newItem, item);
                                AddPastedIteminCategoryList(treeViewExplorerCategoryFilterList, item.ItemType, newItem, item);

                            }
                            else
                            {
                                AddPastedIteminCategoryList(treeViewExplorerCategoryList, item.ItemType, newItem, item);
                            }
                        }
                    

                        if (!newItem.Parent.IsExpanded)
                            newItem.Parent.IsExpanded = true;
                        //newItem.IsSelected = true;
                        newItemDuplicate = newItem;
                        if (newItem.Category != null && newItem.Category != string.Empty)
                        {
                            if (!categoryList.ContainsKey(newItem.Category))
                                categoryList.Add(newItem.Category, 1);
                            else
                                categoryList[newItem.Category] = categoryList[newItem.Category] + 1;
                        }

                        if (newItem.Createdby != null && newItem.Createdby != string.Empty)
                        {
                            if (!createdByList.ContainsKey(newItem.Createdby))
                                createdByList.Add(newItem.Createdby, 1);
                            else
                                createdByList[newItem.Createdby] = createdByList[newItem.Createdby] + 1;
                        }
                    }
                    
                }              
                insertselectionItem();
                var dataContext = TreeViewDesigner.DataContext;
                TreeViewDesigner.DataContext = null;
                TreeViewDesigner.DataContext = dataContext;
                Mouse.OverrideCursor = Cursors.Arrow;

                TreeViewDesigner.UpdateLayout();
                BringIntoView(newItemDuplicate, newItemDuplicate.ItemType);
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = Cursors.Arrow;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14016", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
           
        }

        private void NewMenu1Item_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (selectedItemsDesigner.Count == 1)
                    NewTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14010", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenMenu1Item_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (selectedItemsDesigner.Count == 1)
                    OpenTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14011", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EditMenu1Item_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (selectedItemsDesigner.Count == 1)
                    EditTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14012", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TreeViewDesignerGrid_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                if (sourceElement == null)
                    return;

                FrameworkElement senderElement = sender as FrameworkElement;
                if (senderElement == null)
                    return;

                if (designerTreeContextMenuSource != null)
                {
                    if (designerTreeContextMenuSource.IsRenameModeEnabled == true)
                    {
                      
                        string oldModifiedName = designerTreeContextMenuSource.Modifiedby;
                        designerTreeContextMenuSource.RenameItem();

                        if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(selectedItemsDesigner[0].Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(selectedItemsDesigner[0].Modifiedby))
                                    modifiedByList.Add(selectedItemsDesigner[0].Modifiedby, 1);
                                else
                                    modifiedByList[selectedItemsDesigner[0].Modifiedby] = modifiedByList[selectedItemsDesigner[0].Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }


                            }
                        }
                        insertselectionItem();
                    }
                }

                TreeViewExplorer sourceTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;
                SetContextMenu(sourceTreeViewExplorer);
                designerTreeContextMenuSource = sourceTreeViewExplorer;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EditMenu_SubmenuOpened(object sender, RoutedEventArgs e)
        {
            try
            {
                TreeViewExplorer sourceTreeViewExplorer = null;

                if (selectedItemsDesigner.Count > 0)
                    sourceTreeViewExplorer = TreeViewDesigner.SelectedItem as TreeViewExplorer;

                SetContextMenu(sourceTreeViewExplorer);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SearchTreeViewItem(bool updateDataContext)
        {
            List<TreeViewExplorer> testSuiteList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();

            try
            {
                // if search text present refresh the search
                if (String.IsNullOrEmpty(txt_Search.Text) == false)
                {
                    if (isGroupByCategory == false)
                    {
                        if (comboSortTypeSelection.SelectionBoxItem.ToString() == string.Empty || comboSortTypeSelection.SelectionBoxItem.ToString() == "Clear Filter" || (fromDatePicker.SelectedDate == null && toDatePicker.SelectedDate == null && (summaryTextBox.Text == null || summaryTextBox.Text == string.Empty) && comboSortValueSelection1.SelectedItem == null))
                        {
                            //SetupTreeViewDesignerFromDB(false, "No order");
                            if (mstrOrders != mstrOrders_originalList)
                            {
                                sortinginDesignerList(treeViewExplorerDesignerList, false, mstrOrders);
                                mstrOrders_originalList = mstrOrders;

                            }


                            foreach (TreeViewExplorer testSuite in treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children)
                            {
                                //TreeViewExplorer testSuite = new TreeViewExplorer(testSuites, true);

                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testSuite.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testSuiteList.Add(testSuite);
                            }

                            foreach (TreeViewExplorer testPlan in treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children)
                            {
                                //TreeViewExplorer testPlan = new TreeViewExplorer(testPlans, true);
                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testPlan.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testPlanList.Add(testPlan);
                            }

                            foreach (TreeViewExplorer testCase in treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children)
                            {
                                //TreeViewExplorer testCase = new TreeViewExplorer(testCases, true);
                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testCase.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testCaseList.Add(testCase);
                            }
                        }
                        else
                        {
                            //SetupTreeViewDesignerFromDB(false, "No order");
                            if(mstrOrders!=mstrOrders_filter)
                            {
                                sortinginDesignerList(treeViewExplorerFilterList, false, mstrOrders);
                                mstrOrders_filter = mstrOrders;

                            }


                            foreach (TreeViewExplorer testSuite in treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].Children)
                            {
                                //TreeViewExplorer testSuite = new TreeViewExplorer(testSuites, true);
                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testSuite.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testSuiteList.Add(testSuite);
                            }

                            foreach (TreeViewExplorer testPlan in treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].Children)
                            {
                                //TreeViewExplorer testPlan = new TreeViewExplorer(testPlans, true);
                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testPlan.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testPlanList.Add(testPlan);
                            }

                            foreach (TreeViewExplorer testCase in treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].Children)
                            {
                                //TreeViewExplorer testCase = new TreeViewExplorer(testCases, true);
                                CultureInfo culture1 = CultureInfo.InvariantCulture;
                                if (culture1.CompareInfo.IndexOf(testCase.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                    testCaseList.Add(testCase);
                            }
                        }


                        treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();

                        treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                        treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                        treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerSearchList;
                            isDesignerSearchListSelected = true;
                        }
                    }
                    else
                    {
                        if (comboSortTypeSelection.SelectionBoxItem.ToString() == string.Empty || comboSortTypeSelection.SelectionBoxItem.ToString() == "Clear Filter" || (fromDatePicker.SelectedDate == null && toDatePicker.SelectedDate == null && (summaryTextBox.Text == null || summaryTextBox.Text == string.Empty) && comboSortValueSelection1.SelectedItem == null))
                        {
                            //GroupByCategory(false, mstrOrders);

                            //ObservableCollection<TreeViewExplorer> searchTreeViewExplorer = new ObservableCollection<TreeViewExplorer>();
                            if (mstrOrders != mstrOrders_originalList)
                            {
                                sortinginCategoryList(treeViewExplorerCategoryList, false, mstrOrders, "CategoryList");
                                mstrOrders_originalList = mstrOrders;

                            }

                            treeViewExplorerCategorySearchList.Clear();
                            foreach (TreeViewExplorer treeview1 in treeViewExplorerCategoryList)
                            {                                     
                                TreeViewExplorer treeview = new TreeViewExplorer(treeview1, false);

                                testSuiteList.Clear();
                                testPlanList.Clear();
                                testCaseList.Clear();

                                TreeViewExplorer suiteExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                                if (suiteExplorer != null)
                                {
                                    foreach (TreeViewExplorer testSuite in suiteExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testSuite.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testSuiteList.Add(testSuite);
                                    }
                                }

                                TreeViewExplorer planExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                                if (planExplorer != null)
                                {
                                    foreach (TreeViewExplorer testPlan in planExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testPlan.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testPlanList.Add(testPlan);
                                    }
                                }


                                TreeViewExplorer caseExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                                if (caseExplorer != null)
                                {
                                    foreach (TreeViewExplorer testcase in caseExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testcase.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testCaseList.Add(testcase);
                                    }
                                }

                                if (testSuiteList.Count > 0 || testPlanList.Count > 0 || testCaseList.Count > 0)
                                {
                                    TreeViewExplorer testsuiteHeader = null;
                                    if (testSuiteList.Count > 0)
                                    {
                                        testsuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testsuiteHeader.ChildrenCountForView = testSuiteList.Count;
                                        testsuiteHeader.ChildrenCountViewIsEnabled = true;

                                        testsuiteHeader.AddChildrenList(testSuiteList);
                                    }

                                    TreeViewExplorer testplanHeader = null;
                                    if (testPlanList.Count > 0)
                                    {
                                        testplanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testplanHeader.ChildrenCountForView = testPlanList.Count;
                                        testplanHeader.ChildrenCountViewIsEnabled = true;

                                        testplanHeader.AddChildrenList(testPlanList);
                                    }

                                    TreeViewExplorer testcaseHeader = null;
                                    if (testCaseList.Count > 0)
                                    {
                                        testcaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testcaseHeader.ChildrenCountForView = testCaseList.Count;
                                        testcaseHeader.ChildrenCountViewIsEnabled = true;

                                        testcaseHeader.AddChildrenList(testCaseList);
                                    }

                                    if (testsuiteHeader != null || testplanHeader != null || testcaseHeader != null)
                                    {
                                        treeview.Children.Clear();

                                        if (testsuiteHeader != null)
                                            treeview.Children.Add(testsuiteHeader);

                                        if (testplanHeader != null)
                                            treeview.Children.Add(testplanHeader);

                                        if (testcaseHeader != null)
                                            treeview.Children.Add(testcaseHeader);

                                        treeViewExplorerCategorySearchList.Add(treeview);
                                    }
                                }
                            }
                        }
                        else
                        {
                            //GroupByCategory(false, mstrOrders);
                            if (mstrOrders != mstrOrders_filter)
                            {
                              
                                sortinginCategoryList(treeViewExplorerCategoryFilterList, false, mstrOrders, "FilterList");
                                mstrOrders_filter = mstrOrders;

                            }
                            //ObservableCollection<TreeViewExplorer> searchTreeViewExplorer = new ObservableCollection<TreeViewExplorer>();
                            treeViewExplorerCategorySearchList.Clear();
                            
                            foreach (TreeViewExplorer treeviewlist in treeViewExplorerCategoryFilterList)
                            {
                                TreeViewExplorer treeview = new TreeViewExplorer(treeviewlist, false);

                                testSuiteList.Clear();
                                testPlanList.Clear();
                                testCaseList.Clear();

                                TreeViewExplorer suiteExplorer = treeviewlist.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                                if (suiteExplorer != null)
                                {
                                    foreach (TreeViewExplorer testSuite in suiteExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testSuite.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testSuiteList.Add(testSuite);
                                    }
                                }

                                TreeViewExplorer planExplorer = treeviewlist.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                                if (planExplorer != null)
                                {
                                    foreach (TreeViewExplorer testPlan in planExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testPlan.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testPlanList.Add(testPlan);
                                    }
                                }


                                TreeViewExplorer caseExplorer = treeviewlist.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                                if (caseExplorer != null)
                                {
                                    foreach (TreeViewExplorer testcase in caseExplorer.Children)
                                    {
                                        CultureInfo culture1 = CultureInfo.InvariantCulture;
                                        if (culture1.CompareInfo.IndexOf(testcase.ItemName, txt_Search.Text, CompareOptions.IgnoreCase) >= 0)
                                            testCaseList.Add(testcase);
                                    }
                                }

                                if (testSuiteList.Count > 0 || testPlanList.Count > 0 || testCaseList.Count > 0)
                                {
                                    TreeViewExplorer testsuiteHeader = null;
                                    if (testSuiteList.Count > 0)
                                    {
                                        testsuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testsuiteHeader.ChildrenCountForView = testSuiteList.Count;
                                        testsuiteHeader.ChildrenCountViewIsEnabled = true;

                                        testsuiteHeader.AddChildrenList(testSuiteList);
                                    }

                                    TreeViewExplorer testplanHeader = null;
                                    if (testPlanList.Count > 0)
                                    {
                                        testplanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testplanHeader.ChildrenCountForView = testPlanList.Count;
                                        testplanHeader.ChildrenCountViewIsEnabled = true;

                                        testplanHeader.AddChildrenList(testPlanList);
                                    }

                                    TreeViewExplorer testcaseHeader = null;
                                    if (testCaseList.Count > 0)
                                    {
                                        testcaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        testcaseHeader.ChildrenCountForView = testCaseList.Count;
                                        testcaseHeader.ChildrenCountViewIsEnabled = true;

                                        testcaseHeader.AddChildrenList(testCaseList);
                                    }

                                    if (testsuiteHeader != null || testplanHeader != null || testcaseHeader != null)
                                    {
                                        treeview.Children.Clear();

                                        if (testsuiteHeader != null)
                                            treeview.Children.Add(testsuiteHeader);

                                        if (testplanHeader != null)
                                            treeview.Children.Add(testplanHeader);

                                        if (testcaseHeader != null)
                                            treeview.Children.Add(testcaseHeader);

                                        treeViewExplorerCategorySearchList.Add(treeview);
                                    }
                                }
                            }
                        }

                        TreeViewDesigner.DataContext = null;
                        TreeViewDesigner.DataContext = treeViewExplorerCategorySearchList;
                        isDesignerSearchListSelected = true;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void FilterTreeViewItem(string selectedType, string selectedItem, bool updateDataContext)
        {
            List<TreeViewExplorer> testSuiteList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();

            try
            {
                // if search text present refresh the search
                if (mstrOrders != mstrOrders_originalList)
                {
                    mstrOrders_originalList = mstrOrders;
                    
                    if (isGroupByCategory == false)
                        sortinginDesignerList(treeViewExplorerDesignerList, false, mstrOrders);
                    else
                        sortinginCategoryList(treeViewExplorerCategoryList, false, mstrOrders, "CategoryList");
                }
                mstrOrders_filter = mstrOrders;

                if (isGroupByCategory == false)
                {

                    //SetupTreeViewDesignerFromDB(false, mstrOrders);

                    foreach (TreeViewExplorer testSuite in treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children)
                    {
                        if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testSuite.Createdby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                testSuiteList.Add(testSuite);
                        }
                        else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testSuite.Category, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                testSuiteList.Add(testSuite);
                        }
                        else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testSuite.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                testSuiteList.Add(testSuite);
                        }

                    }

                    foreach (TreeViewExplorer testPlan in treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children)
                    {
                        if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testPlan.Createdby, StringComparison.CurrentCultureIgnoreCase))
                                testPlanList.Add(testPlan);
                        }
                        else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testPlan.Category, StringComparison.CurrentCultureIgnoreCase))
                                testPlanList.Add(testPlan);
                        }
                        else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testPlan.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                testPlanList.Add(testPlan);
                        }

                    }

                    foreach (TreeViewExplorer testCase in treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children)
                    {
                        if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testCase.Createdby, StringComparison.CurrentCultureIgnoreCase))
                                testCaseList.Add(testCase);
                        }
                        else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testCase.Category, StringComparison.CurrentCultureIgnoreCase))
                                testCaseList.Add(testCase);
                        }
                        else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                        {
                            if (String.Equals(selectedItem, testCase.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                testCaseList.Add(testCase);
                        }

                    }

                    treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();

                    treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                    if (isDesignerFilterListSelected == true)
                    {
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();


                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);


                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;


                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerFilterList;
                            //isDesignerSearchListSelected = true;
                        }
                    }
                }
                else
                {
                    //GroupByCategory(false, mstrOrders);

                    treeViewExplorerCategorySearchList.Clear();
                    treeViewExplorerCategoryFilterList.Clear();

                    foreach (TreeViewExplorer treeview1 in treeViewExplorerCategoryList)
                    {
                        TreeViewExplorer treeview = new TreeViewExplorer(treeview1, false);
                        testSuiteList.Clear();
                        testPlanList.Clear();
                        testCaseList.Clear();

                        TreeViewExplorer suiteExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                        if (suiteExplorer != null)
                        {
                            foreach (TreeViewExplorer testSuite in suiteExplorer.Children)
                            {
                                if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testSuite.Createdby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                        testSuiteList.Add(testSuite);
                                }
                                else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testSuite.Category, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                        testSuiteList.Add(testSuite);
                                }
                                else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testSuite.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                        testSuiteList.Add(testSuite);
                                }
                            }
                        }

                        TreeViewExplorer planExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                        if (planExplorer != null)
                        {
                            foreach (TreeViewExplorer testPlan in planExplorer.Children)
                            {
                                if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testPlan.Createdby, StringComparison.CurrentCultureIgnoreCase))
                                        testPlanList.Add(testPlan);
                                }
                                else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testPlan.Category, StringComparison.CurrentCultureIgnoreCase))
                                        testPlanList.Add(testPlan);
                                }
                                else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testPlan.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                        testPlanList.Add(testPlan);
                                }
                            }
                        }


                        TreeViewExplorer caseExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                        if (caseExplorer != null)
                        {
                            foreach (TreeViewExplorer testCase in caseExplorer.Children)
                            {
                                if (String.Equals(selectedType, "Created by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testCase.Createdby, StringComparison.CurrentCultureIgnoreCase))
                                        testCaseList.Add(testCase);
                                }
                                else if (String.Equals(selectedType, "Category", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testCase.Category, StringComparison.CurrentCultureIgnoreCase))
                                        testCaseList.Add(testCase);
                                }
                                else if (String.Equals(selectedType, "Modified by", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if (String.Equals(selectedItem, testCase.Modifiedby, StringComparison.CurrentCultureIgnoreCase))//selectedType
                                        testCaseList.Add(testCase);
                                }
                            }
                        }

                        if (testSuiteList.Count > 0 || testPlanList.Count > 0 || testCaseList.Count > 0)
                        {
                            TreeViewExplorer testsuiteHeader = null;
                            if (testSuiteList.Count > 0)
                            {
                                testsuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testsuiteHeader.ChildrenCountForView = testSuiteList.Count;
                                testsuiteHeader.ChildrenCountViewIsEnabled = true;

                                testsuiteHeader.AddChildrenList(testSuiteList);
                            }

                            TreeViewExplorer testplanHeader = null;
                            if (testPlanList.Count > 0)
                            {
                                testplanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testplanHeader.ChildrenCountForView = testPlanList.Count;
                                testplanHeader.ChildrenCountViewIsEnabled = true;

                                testplanHeader.AddChildrenList(testPlanList);
                            }

                            TreeViewExplorer testcaseHeader = null;
                            if (testCaseList.Count > 0)
                            {
                                testcaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testcaseHeader.ChildrenCountForView = testCaseList.Count;
                                testcaseHeader.ChildrenCountViewIsEnabled = true;

                                testcaseHeader.AddChildrenList(testCaseList);
                            }

                            if (testsuiteHeader != null || testplanHeader != null || testcaseHeader != null)
                            {
                                treeview.Children.Clear();

                                if (testsuiteHeader != null)
                                    treeview.Children.Add(testsuiteHeader);

                                if (testplanHeader != null)
                                    treeview.Children.Add(testplanHeader);

                                if (testcaseHeader != null)
                                    treeview.Children.Add(testcaseHeader);

                                treeViewExplorerCategorySearchList.Add(treeview);

                                if (isDesignerFilterListSelected == true)
                                    treeViewExplorerCategoryFilterList.Add(treeview);
                            }
                        }
                    }

                    if (isDesignerFilterListSelected == true)
                    {
                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerCategoryFilterList;
                        }
                    }

                   
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void FilterTreeViewItemByDate(string selectedItem, DateTime? startdate, DateTime? enddate, bool updateDataContext)
        {
            List<TreeViewExplorer> testSuiteList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();

            try
            {
                // if search text present refresh the search
                if (mstrOrders != mstrOrders_originalList)
                {
                    mstrOrders_originalList = mstrOrders;
                    if (isGroupByCategory == false)
                        sortinginDesignerList(treeViewExplorerDesignerList, false, mstrOrders);
                    else
                        sortinginCategoryList(treeViewExplorerCategoryList, false, mstrOrders, "CategoryList");
                }
                mstrOrders_filter = mstrOrders;
                if (isGroupByCategory == false)
                {
                    //SetupTreeViewDesignerFromDB(false, mstrOrders);
                    if (String.Equals(selectedItem, "Created on", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (TreeViewExplorer testSuite in treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children)
                        {
                            if ((testSuite.Createdon >= startdate) & (testSuite.Createdon <= enddate))//selectedType
                                testSuiteList.Add(testSuite);
                        }

                        foreach (TreeViewExplorer testPlan in treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children)
                        {

                            if ((testPlan.Createdon >= startdate) & (testPlan.Createdon <= enddate))//selectedType
                                testPlanList.Add(testPlan);
                        }

                        foreach (TreeViewExplorer testCase in treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children)
                        {

                            if ((testCase.Createdon >= startdate) & (testCase.Createdon <= enddate))//selectedType
                                testCaseList.Add(testCase);
                        }
                    }
                    else if (String.Equals(selectedItem, "Modified on", StringComparison.CurrentCultureIgnoreCase))
                    {
                        foreach (TreeViewExplorer testSuite in treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children)
                        {
                            if ((testSuite.Modifiedon >= startdate) & (testSuite.Modifiedon <= enddate))//selectedType
                                testSuiteList.Add(testSuite);
                        }

                        foreach (TreeViewExplorer testPlan in treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children)
                        {

                            if ((testPlan.Modifiedon >= startdate) & (testPlan.Modifiedon <= enddate))//selectedType
                                testPlanList.Add(testPlan);
                        }

                        foreach (TreeViewExplorer testCase in treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children)
                        {

                            if ((testCase.Modifiedon >= startdate) & (testCase.Modifiedon <= enddate))//selectedType
                                testCaseList.Add(testCase);
                        }
                    }


                    treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();

                    treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                    treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                    if (isDesignerFilterListSelected == true)
                    {
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();


                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerFilterList;
                            //isDesignerSearchListSelected = true;
                        }
                    }
                }
                else
                {
                    copiedItemsDesigner.Clear();
                    //GroupByCategory(false, mstrOrders);

                    treeViewExplorerCategorySearchList.Clear();
                    treeViewExplorerCategoryFilterList.Clear();

                    foreach (TreeViewExplorer treeview1 in treeViewExplorerCategoryList)
                    {
                        TreeViewExplorer treeview = new TreeViewExplorer(treeview1, false);

                        testSuiteList.Clear();
                        testPlanList.Clear();
                        testCaseList.Clear();

                        TreeViewExplorer suiteExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                        if (suiteExplorer != null)
                        {
                            foreach (TreeViewExplorer testSuite in suiteExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Created on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testSuite.Createdon >= startdate) & (testSuite.Createdon <= enddate))//selectedType
                                        testSuiteList.Add(testSuite);
                                }
                                else if (String.Equals(selectedItem, "Modified on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testSuite.Modifiedon >= startdate) & (testSuite.Modifiedon <= enddate))//selectedType
                                        testSuiteList.Add(testSuite);
                                }
                            }
                        }

                        TreeViewExplorer planExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                        if (planExplorer != null)
                        {
                            foreach (TreeViewExplorer testPlan in planExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Created on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testPlan.Createdon >= startdate) & (testPlan.Createdon <= enddate))//selectedType
                                        testPlanList.Add(testPlan);
                                }
                                else if (String.Equals(selectedItem, "Modified on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testPlan.Modifiedon >= startdate) & (testPlan.Modifiedon <= enddate))//selectedType
                                        testPlanList.Add(testPlan);
                                }
                            }
                        }


                        TreeViewExplorer caseExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                        if (caseExplorer != null)
                        {
                            foreach (TreeViewExplorer testCase in caseExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Created on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testCase.Createdon >= startdate) & (testCase.Createdon <= enddate))//selectedType
                                        testCaseList.Add(testCase);
                                }
                                else if (String.Equals(selectedItem, "Modified on", StringComparison.CurrentCultureIgnoreCase))//selectedType
                                {
                                    if ((testCase.Modifiedon >= startdate) & (testCase.Modifiedon <= enddate))//selectedType
                                        testCaseList.Add(testCase);
                                }
                            }
                        }

                        if (testSuiteList.Count > 0 || testPlanList.Count > 0 || testCaseList.Count > 0)
                        {
                            TreeViewExplorer testsuiteHeader = null;
                            if (testSuiteList.Count > 0)
                            {
                                testsuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testsuiteHeader.ChildrenCountForView = testSuiteList.Count;
                                testsuiteHeader.ChildrenCountViewIsEnabled = true;

                                testsuiteHeader.AddChildrenList(testSuiteList);
                            }

                            TreeViewExplorer testplanHeader = null;
                            if (testPlanList.Count > 0)
                            {
                                testplanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testplanHeader.ChildrenCountForView = testPlanList.Count;
                                testplanHeader.ChildrenCountViewIsEnabled = true;

                                testplanHeader.AddChildrenList(testPlanList);
                            }

                            TreeViewExplorer testcaseHeader = null;
                            if (testCaseList.Count > 0)
                            {
                                testcaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testcaseHeader.ChildrenCountForView = testCaseList.Count;
                                testcaseHeader.ChildrenCountViewIsEnabled = true;

                                testcaseHeader.AddChildrenList(testCaseList);
                            }

                            if (testsuiteHeader != null || testplanHeader != null || testcaseHeader != null)
                            {
                                treeview.Children.Clear();

                                if (testsuiteHeader != null)
                                    treeview.Children.Add(testsuiteHeader);

                                if (testplanHeader != null)
                                    treeview.Children.Add(testplanHeader);

                                if (testcaseHeader != null)
                                    treeview.Children.Add(testcaseHeader);

                                treeViewExplorerCategorySearchList.Add(treeview);

                                if (isDesignerFilterListSelected == true)
                                    treeViewExplorerCategoryFilterList.Add(treeview);
                            }
                        }
                    }

                    if (isDesignerFilterListSelected == true)
                    {
                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerCategoryFilterList;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void FilterTreeViewItemBySummary(string selectedItem, string summaryKeyword, bool updateDataContext)
        {
            List<TreeViewExplorer> testSuiteList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
            List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();

            try
            {
                // if search text present refresh the search
                if (mstrOrders != mstrOrders_originalList)
                {
                    mstrOrders_originalList = mstrOrders;
                   
                    if (isGroupByCategory == false)
                        sortinginDesignerList(treeViewExplorerDesignerList, false, mstrOrders);
                    else
                        sortinginCategoryList(treeViewExplorerCategoryList, false, mstrOrders, "CategoryList");
                }
                mstrOrders_filter = mstrOrders;
                if (isGroupByCategory == false)
                {
                    //SetupTreeViewDesignerFromDB(false, "No order");

                    foreach (TreeViewExplorer testSuite in treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children)
                    {
                        if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testSuite.Summary != null && testSuite.Summary != string.Empty)//selectedType
                        {
                            CultureInfo culture1 = CultureInfo.InvariantCulture;
                            if (culture1.CompareInfo.IndexOf(testSuite.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                testSuiteList.Add(testSuite);
                        }
                    }

                    foreach (TreeViewExplorer testPlan in treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children)
                    {
                        if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testPlan.Summary != null && testPlan.Summary != string.Empty)//selectedType
                        {
                            CultureInfo culture1 = CultureInfo.InvariantCulture;
                            if (culture1.CompareInfo.IndexOf(testPlan.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                testPlanList.Add(testPlan);
                        }
                    }

                    foreach (TreeViewExplorer testCase in treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children)
                    {
                        if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testCase.Summary != null && testCase.Summary != string.Empty)//selectedType
                        {
                            CultureInfo culture1 = CultureInfo.InvariantCulture;
                            if (culture1.CompareInfo.IndexOf(testCase.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                testCaseList.Add(testCase);
                        }
                    }

                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();

                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                    //treeViewExplorerSearchList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                    if (isDesignerFilterListSelected == true)
                    {
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ClearChildren();
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ClearChildren();


                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(testSuiteList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(testPlanList);
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(testCaseList);

                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                        treeViewExplorerFilterList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                        treeViewExplorerFilterList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerFilterList;
                            //isDesignerSearchListSelected = true;
                        }
                    }
                }
                else
                {

                    treeViewExplorerCategorySearchList.Clear();
                    treeViewExplorerCategoryFilterList.Clear();

                    foreach (TreeViewExplorer treeview1 in treeViewExplorerCategoryList)
                    {
                        TreeViewExplorer treeview = new TreeViewExplorer(treeview1, false);

                        testSuiteList.Clear();
                        testPlanList.Clear();
                        testCaseList.Clear();

                        TreeViewExplorer suiteExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                        if (suiteExplorer != null)
                        {
                            foreach (TreeViewExplorer testSuite in suiteExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testSuite.Summary != null && testSuite.Summary != string.Empty)//selectedType
                                {
                                    CultureInfo culture1 = CultureInfo.InvariantCulture;
                                    if (culture1.CompareInfo.IndexOf(testSuite.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                        testSuiteList.Add(testSuite);
                                }
                            }
                        }

                        TreeViewExplorer planExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                        if (planExplorer != null)
                        {
                            foreach (TreeViewExplorer testPlan in planExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testPlan.Summary != null && testPlan.Summary != string.Empty)//selectedType
                                {
                                    CultureInfo culture1 = CultureInfo.InvariantCulture;
                                    if (culture1.CompareInfo.IndexOf(testPlan.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                        testPlanList.Add(testPlan);
                                }
                            }
                        }


                        TreeViewExplorer caseExplorer = treeview1.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestCaseTitle);

                        if (caseExplorer != null)
                        {
                            foreach (TreeViewExplorer testCase in caseExplorer.Children)
                            {
                                if (String.Equals(selectedItem, "Summary", StringComparison.CurrentCultureIgnoreCase) && testCase.Summary != null && testCase.Summary != string.Empty)//selectedType
                                {
                                    CultureInfo culture1 = CultureInfo.InvariantCulture;
                                    if (culture1.CompareInfo.IndexOf(testCase.Summary, summaryKeyword, CompareOptions.IgnoreCase) >= 0)
                                        testCaseList.Add(testCase);
                                }
                            }
                        }

                        if (testSuiteList.Count > 0 || testPlanList.Count > 0 || testCaseList.Count > 0)
                        {
                            TreeViewExplorer testsuiteHeader = null;
                            if (testSuiteList.Count > 0)
                            {
                                testsuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testsuiteHeader.ChildrenCountForView = testSuiteList.Count;
                                testsuiteHeader.ChildrenCountViewIsEnabled = true;

                                testsuiteHeader.AddChildrenList(testSuiteList);
                            }

                            TreeViewExplorer testplanHeader = null;
                            if (testPlanList.Count > 0)
                            {
                                testplanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testplanHeader.ChildrenCountForView = testPlanList.Count;
                                testplanHeader.ChildrenCountViewIsEnabled = true;

                                testplanHeader.AddChildrenList(testPlanList);
                            }

                            TreeViewExplorer testcaseHeader = null;
                            if (testCaseList.Count > 0)
                            {
                                testcaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                testcaseHeader.ChildrenCountForView = testCaseList.Count;
                                testcaseHeader.ChildrenCountViewIsEnabled = true;

                                testcaseHeader.AddChildrenList(testCaseList);
                            }

                            if (testsuiteHeader != null || testplanHeader != null || testcaseHeader != null)
                            {
                                treeview.Children.Clear();

                                if (testsuiteHeader != null)
                                    treeview.Children.Add(testsuiteHeader);

                                if (testplanHeader != null)
                                    treeview.Children.Add(testplanHeader);

                                if (testcaseHeader != null)
                                    treeview.Children.Add(testcaseHeader);

                                treeViewExplorerCategorySearchList.Add(treeview);

                                if (isDesignerFilterListSelected == true)
                                    treeViewExplorerCategoryFilterList.Add(treeview);
                            }
                        }
                    }

                    if (isDesignerFilterListSelected == true)
                    {
                        copiedItemsDesigner.Clear();

                        foreach (TreeViewExplorer item in selectedItemsDesigner)
                        {
                            item.IsMultiSelectOn = false;
                            item.IsSelected = false;
                        }

                        selectedItemsDesigner.Clear();

                        if (updateDataContext)
                        {
                            TreeViewDesigner.DataContext = null;
                            TreeViewDesigner.DataContext = treeViewExplorerCategoryFilterList;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void NewTreeViewItem(TreeViewExplorer sourceTreeViewExplorer)
        {
            try
            {
                if (sourceTreeViewExplorer == null)
                    return;

                if ((String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType) &&
                    String.Equals(sourceTreeViewExplorer.ItemName, QatConstants.TveDesignerTestSuiteTitle)) ||
                          String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                {
                    TestSuiteItem sourceTestSuiteItem = new TestSuiteItem();
                    sourceTestSuiteItem.SaveButtonIsEnabled = false;
                    DesignerTabList.Add(sourceTestSuiteItem);
                }
                else if ((String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType) &&
                          String.Equals(sourceTreeViewExplorer.ItemName, QatConstants.TveDesignerTestPlanTitle)) ||
                          String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                {
                    TestPlanItem sourceTestPlanItem = new TestPlanItem();
                    sourceTestPlanItem.SaveButtonIsEnabled = false;
                    DesignerTabList.Add(sourceTestPlanItem);
                }
                else if ((String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType) &&
                          String.Equals(sourceTreeViewExplorer.ItemName, QatConstants.TveDesignerTestCaseTitle)) ||
                          String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable) || String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                {
                    TestCaseItem sourceTestCaseItem = new TestCaseItem();
                    sourceTestCaseItem.SaveButtonIsEnabled = false;
                    DesignerTabList.Add(sourceTestCaseItem);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14018", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void OpenTreeViewItem(TreeViewExplorer sourceTreeViewExplorer, bool openInNewTab)
        {
            try
            {
                if (sourceTreeViewExplorer == null)
                    return;
                if (Mouse.OverrideCursor != Cursors.Wait)
                    Mouse.OverrideCursor = Cursors.Wait;

                if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                {
                    TestSuiteItem sourceTestSuiteItem = new TestSuiteItem(sourceTreeViewExplorer, false);
                    sourceTestSuiteItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestSuiteItem, openInNewTab);
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                {
                    TestPlanItem oldTestPlanItem = tabControl.SelectedItem as TestPlanItem;

                    TestPlanItem sourceTestPlanItem = new TestPlanItem(sourceTreeViewExplorer, false);
                    sourceTestPlanItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestPlanItem, openInNewTab);

                    if (sourceTestPlanItem.IsDesignChecked == true && (oldTestPlanItem == null || oldTestPlanItem.TestPlanTreeViewExplorer == null || oldTestPlanItem.TestPlanTreeViewExplorer.ItemName != sourceTreeViewExplorer.ItemName))
                    {
                        string PreferencesServerPath = QatConstants.QATServerPath + "\\Designs" + "\\";
                        //string PreferencesServerPath = Properties.Settings.Default.Path.ToString() + "\\";
                        if (!File.Exists(PreferencesServerPath + sourceTestPlanItem.DesignName))
                        {
                            MessageBox.Show("Designer File is not exist in the server path", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        }
                    }
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                {
                    TestCaseItem oldTestCaseItem = tabControl.SelectedItem as TestCaseItem;

                    TestCaseItem sourceTestCaseItem = new TestCaseItem(sourceTreeViewExplorer, false);
                    sourceTestCaseItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestCaseItem, openInNewTab);

                    if (oldTestCaseItem == null || oldTestCaseItem.TestCaseTreeViewExplorer == null || oldTestCaseItem.TestCaseTreeViewExplorer.ItemName != sourceTreeViewExplorer.ItemName)
                    {
                        if (sourceTestCaseItem.DesignNameSelected == null)
                        {

                            DBConnection TC_Orphan = new DBConnection();
                            List<TreeViewExplorer> testCaseList = TC_Orphan.ReadTreeTableTC(QatConstants.DbTestPlanTable, sourceTreeViewExplorer.ItemKey, null, null);
                            List<string> testCaseStringList = new List<string>();
                            testCaseList.ForEach(item => testCaseStringList.Add(item.ItemName));
                            string TC_list = string.Join("\n", testCaseStringList.ToArray());

                            if (testCaseList.Count > 0)
                            {
                                MessageBox.Show("No Design is associated with this testcase.\nControl action and Ssh/Telnet action will not work properly.\n\n" + "This test case is also associated with following test plans:\n" + TC_list, "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                            else
                            {
                                MessageBox.Show("No Design is associated with this testcase.\nControl action and Ssh/Telnet action will not work properly.\n\n No Test plans are associated with testcase : " + sourceTreeViewExplorer.ItemName, "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                            }
                        }
                        else
                        {
                            var result = QscDatabase.GetDesignNameFromDB(sourceTreeViewExplorer.ItemName, QatConstants.DbTestCaseTable);
                            ////checking script checked
                            if (result.Item2 == true)
                            {
                                string PreferencesServerPath = QatConstants.QATServerPath + "\\Designs" + "\\";
                                //string PreferencesServerPath = Properties.Settings.Default.Path.ToString() + "\\";
                                if (!File.Exists(PreferencesServerPath + result.Item1))
                                {
                                    MessageBox.Show("Design File not exist in the server path", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                                }
                            }
                        }

                        ////// when QRCM build version not available in any action/verification, display error message
                        int qrcmActionCount = sourceTestCaseItem.TestActionItemList.Where(x => x.ActionSelected == "QRCM Action").Count();
                        int qrcmVerificationCount = sourceTestCaseItem.TestActionItemList.Where(x => x.VerificationSelected == "QRCM Verification").Count();
                        var versionselectedItem = sourceTestCaseItem.TestActionItemList.Where(x => (x.ActionQRCMVersionSelected ==null && x.ActionSelected== "QRCM Action") ||( x.VerifyQRCMVersionSelected==null && x.VerificationSelected == "QRCM Verification"));

                        if ((versionselectedItem.Count() > 0) && (qrcmActionCount > 0 || qrcmVerificationCount > 0))
                        {
                            MessageBox.Show("Please select QRCM build version.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemName, "Test Suites") || String.Equals(sourceTreeViewExplorer.ItemName, "Test Plans") || String.Equals(sourceTreeViewExplorer.ItemName, "Test Cases"))
                {
                    TestHeaderItem testHeaderItem = new TestHeaderItem(sourceTreeViewExplorer);
                    AddTabToDesigner(testHeaderItem, openInNewTab);
                }
                else if(sourceTreeViewExplorer.ItemType != QatConstants.TveDesignerCatHeaderItemType)
                {
                    TestBlankItem newBlankItem = new TestBlankItem();
                    AddTabToDesigner(newBlankItem, openInNewTab);
                }
                if ((Mouse.OverrideCursor != null) && (Mouse.OverrideCursor != Cursors.Arrow))
                Mouse.OverrideCursor = Cursors.Arrow;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                if ((Mouse.OverrideCursor != null) && (Mouse.OverrideCursor != Cursors.Arrow))
                    Mouse.OverrideCursor = Cursors.Arrow;
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14019", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EditTreeViewItem(TreeViewExplorer sourceTreeViewExplorer, bool openInNewTab)
        {
            try
            {
                if (sourceTreeViewExplorer == null)
                    return;
                if (Mouse.OverrideCursor != Cursors.Wait)
                    Mouse.OverrideCursor = Cursors.Wait;
            
                string editedBy = QscDatabase.GetEditedByItem(sourceTreeViewExplorer);
                if(string.IsNullOrEmpty(editedBy) || string.Equals(editedBy.Trim(),Properties.Settings.Default.TesterName.ToString().Trim(), StringComparison.CurrentCultureIgnoreCase))
                {
                    QscDatabase.SetEditedByItem(sourceTreeViewExplorer, Properties.Settings.Default.TesterName.ToString().Trim());
                }
                else
                {
                    MessageBox.Show(sourceTreeViewExplorer.ItemName+" is currently edited by " + editedBy + ". So it cannnot be edited now.", "Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    if ((Mouse.OverrideCursor != null) && (Mouse.OverrideCursor != Cursors.Arrow))
                        Mouse.OverrideCursor = Cursors.Arrow;
                    return;
                }

                if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                {
                    TestSuiteItem sourceTestSuiteItem = new TestSuiteItem(sourceTreeViewExplorer, true);
                    sourceTestSuiteItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestSuiteItem, openInNewTab);
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                {
                    TestPlanItem sourceTestPlanItem = new TestPlanItem(sourceTreeViewExplorer, true);
                    sourceTestPlanItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestPlanItem, openInNewTab);
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                {
                    TestCaseItem sourceTestCaseItem = new TestCaseItem(sourceTreeViewExplorer, true);
                    sourceTestCaseItem.SaveButtonIsEnabled = false;
                    AddTabToDesigner(sourceTestCaseItem, openInNewTab);
                    if (sourceTestCaseItem.DesignNameSelected == null)
                    {
                        MessageBox.Show("No Design is associated with this testcase. \n Please select a new design.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }

                if ((Mouse.OverrideCursor != null) && (Mouse.OverrideCursor != Cursors.Arrow))
                    Mouse.OverrideCursor = Cursors.Arrow;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
                if ((Mouse.OverrideCursor != null) && (Mouse.OverrideCursor != Cursors.Arrow))
                    Mouse.OverrideCursor = Cursors.Arrow;
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14021", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// Save TestSuite
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Btn_TestSuiteSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if (Properties.Settings.Default.TesterName.ToString() != string.Empty)
                {
                    Button sourceButton = sender as Button;
                    if (sourceButton == null)
                        return;

                    TestSuiteItem sourceTestSuiteItem = sourceButton.DataContext as TestSuiteItem;
                    if (sourceTestSuiteItem == null)
                        return;

                    if (IsItemNameExist(sourceTestSuiteItem.TestItemName, sourceTestSuiteItem.TestItemNameCopy))
                        return;

                    if (sourceTestSuiteItem != null && sourceTestSuiteItem.TestSuiteTreeViewExplorer != null && !treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children.Contains(sourceTestSuiteItem.TestSuiteTreeViewExplorer))
                    {
                        //TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children.Find(x => x.ItemKey == sourceTestSuiteItem.TestSuiteTreeViewExplorer.ItemKey);

                        //if (designerTreeViewExplorer != null)
                        //    sourceTestSuiteItem.TestSuiteTreeViewExplorer = designerTreeViewExplorer;

                        if (isGroupByCategory == false)
                        {
                            TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children.Find(x => x.ItemKey == sourceTestSuiteItem.TestSuiteTreeViewExplorer.ItemKey);

                            if (designerTreeViewExplorer != null)
                                sourceTestSuiteItem.TestSuiteTreeViewExplorer = designerTreeViewExplorer;
                        }
                        else
                        {
                            foreach (TreeViewExplorer treeview in treeViewExplorerCategoryList)
                            {
                                TreeViewExplorer designerTreeViewExplorer1 = treeview.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                                if (designerTreeViewExplorer1 != null)
                                {
                                    TreeViewExplorer designerTreeViewExplorer = designerTreeViewExplorer1.Children.Find(x => x.ItemKey == sourceTestSuiteItem.TestSuiteTreeViewExplorer.ItemKey);

                                    if (designerTreeViewExplorer != null)
                                    {
                                        sourceTestSuiteItem.TestSuiteTreeViewExplorer = designerTreeViewExplorer;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    string oldModifiedName = null;
                    if (sourceTestSuiteItem.TestSuiteTreeViewExplorer != null)
                        oldModifiedName = sourceTestSuiteItem.TestSuiteTreeViewExplorer.Modifiedby;
                    if (SaveTestSuite(sourceTestSuiteItem))
                    {
                        if (!isDesignerFilterListSelected && !isDesignerSearchListSelected)
                        {
                            if (isGroupByCategory)
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                            }
                            else
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            }
                        }
                        else
                        {
                            if (isDesignerFilterListSelected)
                                RefreshFilterItemCategory(true);

                            if (isDesignerSearchListSelected)
                                SearchTreeViewItem(true);
                        }
                    

                    if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != sourceTestSuiteItem.Modifiedby)
                    {
                        if (!String.IsNullOrEmpty(sourceTestSuiteItem.Modifiedby))
                        {
                            if (!modifiedByList.ContainsKey(sourceTestSuiteItem.Modifiedby))
                                modifiedByList.Add(sourceTestSuiteItem.Modifiedby, 1);
                            else
                                modifiedByList[sourceTestSuiteItem.Modifiedby] = modifiedByList[sourceTestSuiteItem.Modifiedby] + 1;
                        }

                        if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != sourceTestSuiteItem.Modifiedby)
                        {

                            if (modifiedByList.ContainsKey(oldModifiedName))
                            {
                                if (modifiedByList[oldModifiedName] == 1)
                                    modifiedByList.Remove(oldModifiedName);
                                else
                                    modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                            }
                        }
                    }
                        insertselectionItem();

                        MessageBox.Show("Test Suite Saved \n", "QAT Message", MessageBoxButton.OK, MessageBoxImage.Information);
                        sourceTestSuiteItem.TestSuiteSettingsVisible = Visibility.Visible;
                    }

                }
                else
                {
                    MessageBox.Show("Please enter Tester name in the preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                Mouse.OverrideCursor = Cursors.Arrow;
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = Cursors.Arrow;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14022", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
        }

        private bool SaveTestSuite(TestSuiteItem sourceTestSuiteItem)
        {
            try
            {
                if (sourceTestSuiteItem == null)
                    return false;

                if (Regex.IsMatch(sourceTestSuiteItem.TestItemName, @"[\\/:*?<>|""[\]&]"))
                {
                    MessageBox.Show("The TestSuite name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return false;
                }

                if (sourceTestSuiteItem.IsNewTestSuite)
                {
                    QscDatabase.WriteTestSuiteItemToDB(sourceTestSuiteItem);
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer = new TreeViewExplorer(sourceTestSuiteItem.TestSuiteID, sourceTestSuiteItem.TestItemName, QatConstants.DbTestSuiteTable, null, this, null, null, null, null, null, null, null, null,0, true);
                    AddTreeViewExplorerToList(sourceTestSuiteItem.TestSuiteTreeViewExplorer, sourceTestSuiteItem.Category);
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.ChildrenCountViewIsEnabled = true;
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestSuiteItem.TestSuiteID, QatConstants.DbTestSuiteTestPlanLinkTable, QatConstants.DbTestSuiteLinkTableID, QatConstants.DbTestPlanLinkTableID);
                    if (!String.IsNullOrEmpty(sourceTestSuiteItem.Createdby))
                    {
                        if (!createdByList.ContainsKey(sourceTestSuiteItem.Createdby))
                            createdByList.Add(sourceTestSuiteItem.Createdby, 1);
                        else
                            createdByList[sourceTestSuiteItem.Createdby] = createdByList[sourceTestSuiteItem.Createdby] + 1;
                    }
                sourceTestSuiteItem.TestSuiteTreeViewExplorer.Createdon = sourceTestSuiteItem.Createdon;
                sourceTestSuiteItem.TestSuiteTreeViewExplorer.Createdby = sourceTestSuiteItem.Createdby;
                sourceTestSuiteItem.TestSuiteTreeViewExplorer.Category = sourceTestSuiteItem.Category;
   
                sourceTestSuiteItem.TestSuiteTreeViewExplorer.Summary = sourceTestSuiteItem.Summary;
                sourceTestSuiteItem.TestSuiteTreeViewExplorer.ItemName = sourceTestSuiteItem.TestItemName;
                sourceTestSuiteItem.CreateNewTestPlanIsEnabled = true;
                sourceTestSuiteItem.BackgroundVerfificationButtonIsEnabled = true;
                sourceTestSuiteItem.CancelButtonIsEnabled = true;
                sourceTestSuiteItem.SaveButtonIsEnabled = false;
                }
                else
                {

                    QscDatabase.WriteTestSuiteItemToDB(sourceTestSuiteItem);
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestSuiteItem.TestSuiteID, QatConstants.DbTestSuiteTestPlanLinkTable, QatConstants.DbTestSuiteLinkTableID, QatConstants.DbTestPlanLinkTableID);
                    //RemoveTreeViewExplorerFromList(sourceTestSuiteItem.TestSuiteTreeViewExplorer, sourceTestSuiteItem.TestItemName);

                  
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.Modifiedon = sourceTestSuiteItem.Modifiedon;
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.Modifiedby = sourceTestSuiteItem.Modifiedby;
             
                    sourceTestSuiteItem.TestSuiteTreeViewExplorer.ItemName = sourceTestSuiteItem.TestItemName;
                    sourceTestSuiteItem.CreateNewTestPlanIsEnabled = true;
                    sourceTestSuiteItem.BackgroundVerfificationButtonIsEnabled = true;
                    sourceTestSuiteItem.CancelButtonIsEnabled = true;
                    sourceTestSuiteItem.SaveButtonIsEnabled = false;
                }

          

            
                
                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
        }


        /// <summary>
        /// Save TestPlan
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Btn_TestPlanSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if (Properties.Settings.Default.TesterName.ToString() != string.Empty)
                {
                    Button sourceButton = sender as Button;
                    if (sourceButton == null)
                        return;

                    TestPlanItem sourceTestPlanItem = sourceButton.DataContext as TestPlanItem;
                    if (sourceTestPlanItem == null)
                        return;

                    if (IsItemNameExist(sourceTestPlanItem.TestItemName, sourceTestPlanItem.TestItemNameCopy))
                        return;

                    if (Regex.IsMatch(sourceTestPlanItem.TestItemName, @"[\\/:*?<>|""[\]&]"))
                    {
                        MessageBox.Show("The TestPlan name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }                    

                    if (sourceTestPlanItem != null && sourceTestPlanItem.TestPlanTreeViewExplorer != null && !treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children.Contains(sourceTestPlanItem.TestPlanTreeViewExplorer))
                    {
                        //TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children.Find(x => x.ItemKey == sourceTestPlanItem.TestPlanTreeViewExplorer.ItemKey);

                        //if (designerTreeViewExplorer != null)
                        //    sourceTestPlanItem.TestPlanTreeViewExplorer = designerTreeViewExplorer;

                        if (isGroupByCategory == false)
                        {
                            TreeViewExplorer designerTreeViewExplorer = treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children.Find(x => x.ItemKey == sourceTestPlanItem.TestPlanTreeViewExplorer.ItemKey);

                            if (designerTreeViewExplorer != null)
                                sourceTestPlanItem.TestPlanTreeViewExplorer = designerTreeViewExplorer;
                        }
                        else
                        {
                            //var dd = treeViewExplorerCategoryList.Select(p => p.Children.Find(y => y.ItemName == "Test Plans"));

                            //foreach (TreeViewExplorer exp in dd)
                            //{

                            //}


                            foreach (TreeViewExplorer treeview in treeViewExplorerCategoryList)
                            {
                                TreeViewExplorer designerTreeViewExplorer1 = treeview.Children.Find(y => y.ItemName == QatConstants.TveDesignerTestPlanTitle);

                                if (designerTreeViewExplorer1 != null)
                                {
                                    TreeViewExplorer designerTreeViewExplorer = designerTreeViewExplorer1.Children.Find(x => x.ItemKey == sourceTestPlanItem.TestPlanTreeViewExplorer.ItemKey);

                                    if (designerTreeViewExplorer != null)
                                    {
                                        sourceTestPlanItem.TestPlanTreeViewExplorer = designerTreeViewExplorer;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    string oldModifiedName = null;
                    if (sourceTestPlanItem.TestPlanTreeViewExplorer != null)
                        oldModifiedName = sourceTestPlanItem.TestPlanTreeViewExplorer.Modifiedby;

                    if (SaveTestPlan(sourceTestPlanItem))
                    {
                        if (!isDesignerFilterListSelected && !isDesignerSearchListSelected)
                        {
                            if (isGroupByCategory)
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                            }
                            else
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            }
                        }
                        else
                        {
                            if (isDesignerFilterListSelected)
                                RefreshFilterItemCategory(true);

                            if (isDesignerSearchListSelected)
                                SearchTreeViewItem(true);
                        }
                     
                    
						   if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != sourceTestPlanItem.Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(sourceTestPlanItem.Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(sourceTestPlanItem.Modifiedby))
                                    modifiedByList.Add(sourceTestPlanItem.Modifiedby, 1);
                                else
                                    modifiedByList[sourceTestPlanItem.Modifiedby] = modifiedByList[sourceTestPlanItem.Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != sourceTestPlanItem.Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }


                         }
                       }
                       insertselectionItem();

                        MessageBox.Show("Test Plan Saved \n", "QAT Message", MessageBoxButton.OK, MessageBoxImage.Information);
                        sourceTestPlanItem.TestPlanSettingsVisible = Visibility.Visible;
                    }
                }
                else
                {
                    MessageBox.Show("Please enter Tester name in the preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                Mouse.OverrideCursor = Cursors.Arrow;

            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = Cursors.Arrow;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                Mouse.OverrideCursor = Cursors.Arrow;
            }
        }

        private bool SaveTestPlan(TestPlanItem sourceTestPlanItem)
        {
            try
            {
                if (sourceTestPlanItem == null)
                    return false;

                if (sourceTestPlanItem.IsDesignChecked == true)
                {
                    if (sourceTestPlanItem.DesignName == null || sourceTestPlanItem.DesignName.Trim() == string.Empty)
                    {
                        MessageBox.Show("Please select a design", "QAT Error Code - IEC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                        return false;
                    }

                    ServerDetails designFolder = new ServerDetails();

                    if (!designFolder.hasWriteAccessToFolder(QatConstants.QATServerPath))
                    {
                        MessageBox.Show("Internal Exception\n User don't have the access to write the designfile in serverpath", "Error Code - IEC14003", MessageBoxButton.OK, MessageBoxImage.Error);
                        designFolder.Close();
                        return false;
                    }

                    designFolder.Close();
                }

                if (sourceTestPlanItem.IsNewTestPlan)
                {
                    if(!QscDatabase.WriteTestPlanItemToDB(sourceTestPlanItem))
                    {
                        return false;
                    }

                    sourceTestPlanItem.TestPlanTreeViewExplorer = new TreeViewExplorer(sourceTestPlanItem.TestPlanID, sourceTestPlanItem.TestItemName, QatConstants.DbTestPlanTable, null, this, null, null, null, null, null, null, null, null,0, true);
                    AddTreeViewExplorerToList(sourceTestPlanItem.TestPlanTreeViewExplorer, sourceTestPlanItem.Category);
                    sourceTestPlanItem.TestPlanTreeViewExplorer.ChildrenCountViewIsEnabled = true;
                    sourceTestPlanItem.TestPlanTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestPlanItem.TestPlanID, QatConstants.DbTestPlanTestCaseLinkTable, QatConstants.DbTestPlanLinkTableID, QatConstants.DbTestCaseLinkTableID);
					if (sourceTestPlanItem.IsTestPlanCreatedFromTestSuite == true)
                    {
                        sourceTestPlanItem.ParentTestSuiteItem.TestPlanListAddItem(sourceTestPlanItem.TestPlanTreeViewExplorer);
                    }
                    if (!String.IsNullOrEmpty(sourceTestPlanItem.Createdby))
                    {
                        if (!createdByList.ContainsKey(sourceTestPlanItem.Createdby))
                            createdByList.Add(sourceTestPlanItem.Createdby, 1);
                        else
                            createdByList[sourceTestPlanItem.Createdby] = createdByList[sourceTestPlanItem.Createdby] + 1;
                    }
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Createdon = sourceTestPlanItem.Createdon;
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Createdby = sourceTestPlanItem.Createdby;
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Category = sourceTestPlanItem.Category;
                  
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Summary = sourceTestPlanItem.Summary;
                    sourceTestPlanItem.TestPlanTreeViewExplorer.ItemName = sourceTestPlanItem.TestItemName;
                    sourceTestPlanItem.CreateNewTestCaseIsEnabled = true;

                    if (sourceTestPlanItem.IsDesignChecked == true)
                        sourceTestPlanItem.BackgroundVerfificationButtonIsEnabled = true;
                    if (!sourceTestPlanItem.TestCaseListIsEnabled)
                        sourceTestPlanItem.TestCaseListIsEnabled = true;

                    sourceTestPlanItem.CancelButtonIsEnabled = true;
                    sourceTestPlanItem.SaveButtonIsEnabled = false;

                }
                else
                {
                    
                    if (!QscDatabase.WriteTestPlanItemToDB(sourceTestPlanItem))
                    {
                        return false;
                    }

                    sourceTestPlanItem.TestPlanTreeViewExplorer.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(sourceTestPlanItem.TestPlanID, QatConstants.DbTestPlanTestCaseLinkTable, QatConstants.DbTestPlanLinkTableID, QatConstants.DbTestCaseLinkTableID);
                    //RemoveTreeViewExplorerFromList(sourceTestPlanItem.TestPlanTreeViewExplorer, sourceTestPlanItem.TestItemName);

                   
              
                
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Modifiedon = sourceTestPlanItem.Modifiedon;
                    sourceTestPlanItem.TestPlanTreeViewExplorer.Modifiedby = sourceTestPlanItem.Modifiedby;
             
                    sourceTestPlanItem.TestPlanTreeViewExplorer.ItemName = sourceTestPlanItem.TestItemName;
                    sourceTestPlanItem.CreateNewTestCaseIsEnabled = true;

                    if (sourceTestPlanItem.IsDesignChecked == true)
                        sourceTestPlanItem.BackgroundVerfificationButtonIsEnabled = true;
                    if (!sourceTestPlanItem.TestCaseListIsEnabled)
                        sourceTestPlanItem.TestCaseListIsEnabled = true;

                    sourceTestPlanItem.CancelButtonIsEnabled = true;
                    sourceTestPlanItem.SaveButtonIsEnabled = false;
                }

              
             
    

                return true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
        }


        /// <summary>
        /// /to find the testcase lists where actioncount is not updated
        /// </summary>

        private void TCwithnoActioncount()
        {
            try
            {
                string null_tc_query = null;
                string Action_nos_query = null;
                string Actioncount_update = null;
                null_tc_query = "select TestcaseID from Testcase  where Actioncount is null";
                var Actioncountnull = QscDatabase.Get_testcase_Actioncount_null(null_tc_query);
                foreach (DataRow actioncount in Actioncountnull.Rows)
                {
                    var TCID = actioncount.ItemArray[0];
                    Action_nos_query = "select * from TestAction as c join TestAction as p on p.TestActionID = c.TestActionID where p.TCID =" + TCID + "";

                    //query = "select * from " + childTableName + " as c join " + parentLinkTable + " as p on p." + childIDColumn + " = c." + childTableName + "ID where p." + parentIDColumn + " = " + parentPrimaryKey.ToString();
                    var Testcase_childcount = QscDatabase.Testcase_childcount(Action_nos_query);
                    Actioncount_update = "UPDATE Testcase SET Actioncount = " + Testcase_childcount + " WHERE TestcaseID =" + TCID + "";
                    QscDatabase.Testcase_fillActioncount(Actioncount_update);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                //return false;
            }
        }
		
        private void TPwithnoActioncount()
        {
            try
            {
                string null_tc_query = null;
                string Action_nos_query = null;
                string Actioncount_update = null;
                null_tc_query = "select TestPlanID from Testplan  where TPActioncount is null";
                var Actioncountnull = QscDatabase.Get_testcase_Actioncount_null(null_tc_query);
                foreach (DataRow actioncount in Actioncountnull.Rows)
                {
                    var TCID = actioncount.ItemArray[0];
                    Action_nos_query = "select * from TPTCLinkTable where TPID =" + TCID + "";
                    ////"select * from TestAction as c join TestAction as p on p.TestActionID = c.TestActionID where p.TCID =" + TCID + "";
                    //query = "select * from " + childTableName + " as c join " + parentLinkTable + " as p on p." + childIDColumn + " = c." + childTableName + "ID where p." + parentIDColumn + " = " + parentPrimaryKey.ToString();
                    var Testcase_childcount = QscDatabase.Testcase_childcount(Action_nos_query);
                    Actioncount_update = "UPDATE Testplan SET TPActioncount = " + Testcase_childcount + " WHERE TestPlanID =" + TCID + "";
                    QscDatabase.Testcase_fillActioncount(Actioncount_update);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                //return false;
            }
        }

        private void TSwithnoActioncount()
        {
            try
            {
                string null_tc_query = null;
                string Action_nos_query = null;
                string Actioncount_update = null;

                null_tc_query = "select TestSuiteID from Testsuite  where TSActioncount is null";
                var Actioncountnull = QscDatabase.Get_testcase_Actioncount_null(null_tc_query);
                foreach (DataRow actioncount in Actioncountnull.Rows)
                {
                    var TCID = actioncount.ItemArray[0];
                    Action_nos_query = "select * from TSTPLinkTable where TSID =" + TCID + "";

                    //query = "select * from " + childTableName + " as c join " + parentLinkTable + " as p on p." + childIDColumn + " = c." + childTableName + "ID where p." + parentIDColumn + " = " + parentPrimaryKey.ToString();
                    var Testcase_childcount = QscDatabase.Testcase_childcount(Action_nos_query);
                    Actioncount_update = "UPDATE Testsuite SET TSActioncount = " + Testcase_childcount + " WHERE TestSuiteID =" + TCID + "";
                    QscDatabase.Testcase_fillActioncount(Actioncount_update);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC14023", MessageBoxButton.OK, MessageBoxImage.Error);
                //return false;
            }
        }


        //bool ascending = false;

        private void SetupTreeViewDesignerFromDB(bool updateDataContext, string sortingType)
        {
            try
            {
                mstrOrders = string.Empty;
                List<TreeViewExplorer> sortedTestSuiteList = null;
                List<TreeViewExplorer> sortedTestPlanList = null;
                List<TreeViewExplorer> sortedTestCaseList = null;
                categoryList.Clear();
                createdByList.Clear();
                modifiedByList.Clear();

                //List<TreeViewExplorer> dateTestSuiteList = QscDatabase.ReadTreebydatecreated(QatConstants.DbTestSuiteTable, 0, null, this, ascending);
                List<TreeViewExplorer> testSuiteList = QscDatabase.ReadTreeTable(QatConstants.DbTestSuiteTable, 0, null, this);
                foreach (TreeViewExplorer item in testSuiteList)
                {
                    //item.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(QatConstants.DbTestPlanTable, item.ItemKey);
                    item.ChildrenCountViewIsEnabled = true;

                    if(item.Category != null && item.Category != string.Empty )
                    {
                        if (!categoryList.ContainsKey(item.Category))
                            categoryList.Add(item.Category, 1);
                        else
                            categoryList[item.Category] = categoryList[item.Category] + 1;
                    }

                    if (item.Createdby != null && item.Createdby != string.Empty)
                    {
                        if (!createdByList.ContainsKey(item.Createdby))
                            createdByList.Add(item.Createdby, 1);
                        else
                            createdByList[item.Createdby] = createdByList[item.Createdby] + 1;
                    }

                    if (item.Modifiedby != null && item.Modifiedby != string.Empty)
                    {
                        if (!modifiedByList.ContainsKey(item.Modifiedby))
                            modifiedByList.Add(item.Modifiedby, 1);
                        else
                            modifiedByList[item.Modifiedby] = modifiedByList[item.Modifiedby] + 1;
                    }
                        

                   
                }

                //List<TreeViewExplorer> dateTestPlanList = QscDatabase.ReadTreebydatecreated(QatConstants.DbTestPlanTable, 0, null, this, ascending);
                List<TreeViewExplorer> testPlanList = QscDatabase.ReadTreeTable(QatConstants.DbTestPlanTable, 0, null, this);
                foreach (TreeViewExplorer item in testPlanList)
                {
                    //item.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(QatConstants.DbTestCaseTable, item.ItemKey);
                    item.ChildrenCountViewIsEnabled = true;

                    if (item.Category != null && item.Category != string.Empty)
                    {
                        if (!categoryList.ContainsKey(item.Category))
                            categoryList.Add(item.Category, 1);
                        else
                            categoryList[item.Category] = categoryList[item.Category] + 1;
                    }

                    if (item.Createdby != null && item.Createdby != string.Empty)
                    {
                        if (!createdByList.ContainsKey(item.Createdby))
                            createdByList.Add(item.Createdby, 1);
                        else
                            createdByList[item.Createdby] = createdByList[item.Createdby] + 1;
                    }

                    if (item.Modifiedby != null && item.Modifiedby != string.Empty)
                    {
                        if (!modifiedByList.ContainsKey(item.Modifiedby))
                            modifiedByList.Add(item.Modifiedby, 1);
                        else
                            modifiedByList[item.Modifiedby] = modifiedByList[item.Modifiedby] + 1;
                    }

                }

                //List<TreeViewExplorer> dateTestCaseList = QscDatabase.ReadTreebydatecreated(QatConstants.DbTestCaseTable, 0, null, this, ascending);
                List<TreeViewExplorer> testCaseList = QscDatabase.ReadTreeTable(QatConstants.DbTestCaseTable, 0, null, this);
                foreach (TreeViewExplorer item in testCaseList)
                {
                    //item.ChildrenCountForView = QscDatabase.ReadTreeTableChildrenCount(QatConstants.DbTestActionTable, item.ItemKey);
                    item.ChildrenCountViewIsEnabled = true;

                    if (item.Category != null && item.Category != string.Empty)
                    {
                        if (!categoryList.ContainsKey(item.Category))
                            categoryList.Add(item.Category, 1);
                        else
                            categoryList[item.Category] = categoryList[item.Category] + 1;
                    }

                    if (item.Createdby != null && item.Createdby != string.Empty)
                    {
                        if (!createdByList.ContainsKey(item.Createdby))
                            createdByList.Add(item.Createdby, 1);
                        else
                            createdByList[item.Createdby] = createdByList[item.Createdby] + 1;
                    }

                    if (item.Modifiedby != null && item.Modifiedby != string.Empty)
                    {
                        if (!modifiedByList.ContainsKey(item.Modifiedby))
                            modifiedByList.Add(item.Modifiedby, 1);
                        else
                            modifiedByList[item.Modifiedby] = modifiedByList[item.Modifiedby] + 1;
                    }

                }
				
                //if(!ascending)
                //    ascending = true;
                //else
                //    ascending = false;
				
                if (sortingType == "Descending")
                {
                    mstrOrders = "Descending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Ascending")
                {
                    mstrOrders = "Ascending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Date Created Ascending")
                {
                    mstrOrders = "Date Created Ascending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                    //sortedTestSuiteList = testSuiteList;
                    //sortedTestPlanList = testPlanList;
                    //sortedTestCaseList = testCaseList;
                }
                else if (sortingType == "Date Created Descending")
                {
                    mstrOrders = "Date Created Descending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "No order")
                {
                    mstrOrders = "No order";
                    sortedTestSuiteList = testSuiteList;
                    sortedTestPlanList = testPlanList;
                    sortedTestCaseList = testCaseList;
                }
                //else if (sortingType == "Date Created")
                //{
                //    mstrOrders = "Date Created";
                //    sortedTestSuiteList = dateTestSuiteList;
                //    sortedTestPlanList = dateTestPlanList;
                //    sortedTestCaseList = dateTestCaseList;
                //}

                List<TreeViewExplorer> headerList = new List<TreeViewExplorer>();

                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestSuiteID, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestPlanID, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestCaseID, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true));


                headerList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(sortedTestSuiteList);
                headerList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(sortedTestPlanList);
                headerList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(sortedTestCaseList);

                if (treeViewExplorerDesignerList != null && treeViewExplorerDesignerList.Count == 3)
                {
                    headerList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestPlanIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestCaseIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].IsExpanded;
                }

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                copiedItemsDesigner.Clear();

                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    item.IsMultiSelectOn = false;
                    item.IsSelected = false;
                }
                selectedItemsDesigner.Clear();

                treeViewExplorerDesignerList.Clear();
                treeViewExplorerDesignerList.Add(headerList[0]);
                treeViewExplorerDesignerList.Add(headerList[1]);
                treeViewExplorerDesignerList.Add(headerList[2]);

                //Update_QRCMVersionList();

                if (updateDataContext)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                }
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14025", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void GroupByNone_usingCategoryList(bool updateDataContext, string sortingType)
        {
            try
            {
            
                mstrOrders = string.Empty;
                List<TreeViewExplorer> testSuiteList = new List<TreeViewExplorer>();
                List<TreeViewExplorer> testPlanList = new List<TreeViewExplorer>();
                List<TreeViewExplorer> testCaseList = new List<TreeViewExplorer>();
                foreach (TreeViewExplorer category in treeViewExplorerCategoryList)
                {
                    TreeViewExplorer testSuiteHeader = category.Children.Find(x => x.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                    if(testSuiteHeader!=null)
                   { 
                     foreach (TreeViewExplorer testSuite in testSuiteHeader.Children)
                     {
                         testSuiteList.Add(testSuite);

                     }
                   }

                   TreeViewExplorer testPlanHeader = category.Children.Find(x => x.ItemName == QatConstants.TveDesignerTestPlanTitle);
                  if(testPlanHeader!=null)
                 { 
                    foreach (TreeViewExplorer testPlan in testPlanHeader.Children)
                    {
                        testPlanList.Add(testPlan);

                    }
                 }
                
                TreeViewExplorer testCaseHeader = category.Children.Find(x => x.ItemName == QatConstants.TveDesignerTestCaseTitle);
                if(testCaseHeader != null)
                { 
                    foreach (TreeViewExplorer testCase in testCaseHeader.Children)
                    {
                            
                            testCaseList.Add(testCase);

                    }
                 }


              }
                List<TreeViewExplorer> sortedTestSuiteList = null;
                List<TreeViewExplorer> sortedTestPlanList = null;
                List<TreeViewExplorer> sortedTestCaseList = null;


                if (sortingType == "Descending")
                {
                    mstrOrders = "Descending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Ascending")
                {
                    mstrOrders = "Ascending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Date Created Ascending" || sortingType == "No order")
                {
                    if(sortingType== "No order")
                    {
                        MenuAscending1.IsChecked = MenuAscending2.IsChecked = true;
                        MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                        MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = true;

                        MenuDecending1.IsChecked = MenuDecending2.IsChecked = false;
                        MenudecendingName.IsChecked = descendingName.IsChecked = false;
                        MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;
                    }
                    mstrOrders = "Date Created Ascending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                    //sortedTestSuiteList = testSuiteList;
                    //sortedTestPlanList = testPlanList;
                    //sortedTestCaseList = testCaseList;
                }
                else if (sortingType == "Date Created Descending")
                {
                    mstrOrders = "Date Created Descending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                //else if (sortingType == "No order")
                //{
                //    mstrOrders = "No order";
                //    sortedTestSuiteList = testSuiteList;
                //    sortedTestPlanList = testPlanList;
                //    sortedTestCaseList = testCaseList;
                //}

                //else if (sortingType == "Date Created")
                //{
                //    mstrOrders = "Date Created";
                //    sortedTestSuiteList = dateTestSuiteList;
                //    sortedTestPlanList = dateTestPlanList;
                //    sortedTestCaseList = dateTestCaseList;
                //}

                List<TreeViewExplorer> headerList = new List<TreeViewExplorer>();

                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestSuiteID, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestPlanID, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestCaseID, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));


                headerList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(sortedTestSuiteList);
                headerList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(sortedTestPlanList);
                headerList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(sortedTestCaseList);

                if (treeViewExplorerDesignerList != null && treeViewExplorerDesignerList.Count == 3)
                {
                    headerList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestPlanIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestCaseIndex].IsExpanded = treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].IsExpanded;
                }

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                copiedItemsDesigner.Clear();

                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    item.IsMultiSelectOn = false;
                    item.IsSelected = false;
                }
                selectedItemsDesigner.Clear();

                treeViewExplorerDesignerList.Clear();
                treeViewExplorerDesignerList.Add(headerList[0]);
                treeViewExplorerDesignerList.Add(headerList[1]);
                treeViewExplorerDesignerList.Add(headerList[2]);



                if (updateDataContext)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                }
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14025", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
      private void sortinginDesignerList(ObservableCollection<TreeViewExplorer> treeviewList,bool updateDataContext, string sortingType)
        {
          try
          {
                mstrOrders = string.Empty;
                List<TreeViewExplorer> sortedTestSuiteList = null;
                List<TreeViewExplorer> sortedTestPlanList = null;
                List<TreeViewExplorer> sortedTestCaseList = null;
                List<TreeViewExplorer> testSuiteList = treeviewList[QatConstants.TveDesignerTestSuiteIndex].Children;
                List<TreeViewExplorer> testPlanList = treeviewList[QatConstants.TveDesignerTestPlanIndex].Children;
                List<TreeViewExplorer> testCaseList = treeviewList[QatConstants.TveDesignerTestCaseIndex].Children;
                if (sortingType == "Descending")
                {
                    mstrOrders = "Descending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Ascending")
                {
                    mstrOrders = "Ascending";
                    //TestSuite
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "Date Created Ascending")
                {
                    mstrOrders = "Date Created Ascending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                    //sortedTestSuiteList = testSuiteList;
                    //sortedTestPlanList = testPlanList;
                    //sortedTestCaseList = testCaseList;
                }
                else if (sortingType == "Date Created Descending")
                {
                    mstrOrders = "Date Created Descending";

                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestSuiteSorted);
                    sortedTestSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestPlanSorted);
                    sortedTestPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    Array.Reverse(alphaTestCaseSorted);
                    sortedTestCaseList = alphaTestCaseSorted.ToList();
                }
                else if (sortingType == "No order")
                {
                    mstrOrders = "No order";
                    sortedTestSuiteList = testSuiteList;
                    sortedTestPlanList = testPlanList;
                    sortedTestCaseList = testCaseList;
                }
                //else if (sortingType == "Date Created")
                //{
                //    mstrOrders = "Date Created";
                //    sortedTestSuiteList = dateTestSuiteList;
                //    sortedTestPlanList = dateTestPlanList;
                //    sortedTestCaseList = dateTestCaseList;
                //}

                List<TreeViewExplorer> headerList = new List<TreeViewExplorer>();

                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestSuiteID, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestPlanID, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));
                headerList.Add(new TreeViewExplorer(QatConstants.TveDesignerTestCaseID, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null, 0, true));


                headerList[QatConstants.TveDesignerTestSuiteIndex].AddChildrenList(sortedTestSuiteList);
                headerList[QatConstants.TveDesignerTestPlanIndex].AddChildrenList(sortedTestPlanList);
                headerList[QatConstants.TveDesignerTestCaseIndex].AddChildrenList(sortedTestCaseList);

                if (treeviewList != null && treeviewList.Count == 3)
                {
                    headerList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded = treeviewList[QatConstants.TveDesignerTestSuiteIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestPlanIndex].IsExpanded = treeviewList[QatConstants.TveDesignerTestPlanIndex].IsExpanded;
                    headerList[QatConstants.TveDesignerTestCaseIndex].IsExpanded = treeviewList[QatConstants.TveDesignerTestCaseIndex].IsExpanded;
                }

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountForView = testSuiteList.Count;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountForView = testPlanList.Count;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountForView = testCaseList.Count;

                headerList[QatConstants.TveDesignerTestSuiteIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestPlanIndex].ChildrenCountViewIsEnabled = true;
                headerList[QatConstants.TveDesignerTestCaseIndex].ChildrenCountViewIsEnabled = true;

                copiedItemsDesigner.Clear();

                foreach (TreeViewExplorer item in selectedItemsDesigner)
                {
                    item.IsMultiSelectOn = false;
                    item.IsSelected = false;
                }
                selectedItemsDesigner.Clear();

                treeviewList.Clear();
                treeviewList.Add(headerList[0]);
                treeviewList.Add(headerList[1]);
                treeviewList.Add(headerList[2]);
                if (updateDataContext)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeviewList;
                }

            }
            catch (Exception ex)
         {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14025", MessageBoxButton.OK, MessageBoxImage.Error);

            }

        }
        private void sortinginCategoryList(ObservableCollection<TreeViewExplorer>treeViewList, bool updateDataContext, string sortType,string Listname)
        {
            try
            {
                //List<TreeViewExplorer> CategoryList = new List<TreeViewExplorer>();
                List<TreeViewExplorer> sortCategoryLists = new List<TreeViewExplorer>();
                List<TreeViewExplorer> CategoryList = new List<TreeViewExplorer>();
                foreach (TreeViewExplorer category in treeViewList)
                {
                    TreeViewExplorer tableRow = new TreeViewExplorer(0, category.ItemName, QatConstants.TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                    CategoryList.Add(tableRow);
                }

                if (sortType == "Descending" || sortType == "Ascending" || sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                {
                    mstrOrders = sortType;

                    TreeViewExplorer[] alphaTestSuiteSorted = CategoryList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());

                    if (sortType == "Descending" || sortType == "Date Created Descending")
                        Array.Reverse(alphaTestSuiteSorted);

                    sortCategoryLists = alphaTestSuiteSorted.ToList();
                 }
                 else
                 {
                    mstrOrders = "No order";
                    sortCategoryLists = CategoryList;
                 }
                List<TreeViewExplorer> treeViewExplorerCatList = new List<TreeViewExplorer>();
                if (treeViewList != null && treeViewList.Count > 0)
                    treeViewExplorerCatList = new List<TreeViewExplorer>(treeViewList);

                foreach (TreeViewExplorer category in sortCategoryLists)
                {
                    TreeViewExplorer testSuiteExist = null;
                    TreeViewExplorer testPlanExist = null;
                    TreeViewExplorer testCaseExist = null;
                    List<TreeViewExplorer> Header = new List<TreeViewExplorer>();
                    TreeViewExplorer categoryHeader = null;

                    //foreach (TreeViewExplorer item in treeViewExplorerCategoryList)
                    //{
                    //    if (category.ItemName == item.ItemName)
                    //    {
                    //        categoryHeader = item;
                    //        testSuiteExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                    //        testPlanExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle);
                    //        testCaseExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle);
                    //    }
                    //}

                    if (treeViewExplorerCatList != null && treeViewExplorerCatList.Count > 0)
                    {
                        categoryHeader = treeViewExplorerCatList.Find(p => p.ItemName == category.ItemName);

                        if (categoryHeader != null)
                        {
                            testSuiteExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                            testPlanExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestPlanTitle);
                            testCaseExist = categoryHeader.Children.Find(p => p.ItemName == QatConstants.TveDesignerTestCaseTitle);
                            category.IsExpanded = categoryHeader.IsExpanded;
                        }
                    }

                    if (testSuiteExist != null)
                    {
                        List<TreeViewExplorer> testSuiteList = testSuiteExist.Children;
                        List<TreeViewExplorer> sortedtestSuiteList = new List<TreeViewExplorer>();

                        if (testSuiteList.Count > 0)
                        {
                            if (sortType == "Descending" || sortType == "Ascending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                                Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                                if (sortType == "Descending")
                                    Array.Reverse(alphaTestSuiteSorted);
                                sortedtestSuiteList = alphaTestSuiteSorted.ToList();
                            }
                            else if (sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                                Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                                if (sortType == "Date Created Descending")
                                    Array.Reverse(alphaTestSuiteSorted);
                                sortedtestSuiteList = alphaTestSuiteSorted.ToList();
                                }
                                  else if(sortType== "No order")
                                    {
                                        mstrOrders = "No order";
                                        sortedtestSuiteList = testSuiteList;
                                    }

                            TreeViewExplorer testSuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testSuiteHeader.ChildrenCountForView = sortedtestSuiteList.Count;
                            testSuiteHeader.ChildrenCountViewIsEnabled = true;

                            if (categoryHeader != null)
                            {
                                TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testSuiteHeader.ItemName);

                                if (catChild != null)
                                    testSuiteHeader.IsExpanded = catChild.IsExpanded;
                            }
                            testSuiteHeader.ClearChildren();
                            testSuiteHeader.AddChildrenList(sortedtestSuiteList);

                            Header.Add(testSuiteHeader);
                        }
                    }

                    if (testPlanExist != null)
                    {
                        List<TreeViewExplorer> testPlanList = testPlanExist.Children;
                        List<TreeViewExplorer> sortedtestPlanList = new List<TreeViewExplorer>();
                        if (testPlanList.Count > 0)
                        {
                            if (sortType == "Descending" || sortType == "Ascending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                                Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast());
                                if (sortType == "Descending")
                                    Array.Reverse(alphaTestPlanSorted);
                                sortedtestPlanList = alphaTestPlanSorted.ToList();
                            } else if (sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                                Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                                if (sortType == "Date Created Descending")
                                    Array.Reverse(alphaTestPlanSorted);
                                sortedtestPlanList = alphaTestPlanSorted.ToList();
                            }
                                    else if (sortType == "No order")
                                    {
                                      mstrOrders = "No order";
                                      sortedtestPlanList = testPlanList;
                                   }

                            TreeViewExplorer testPlanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testPlanHeader.ChildrenCountForView = sortedtestPlanList.Count;
                            testPlanHeader.ChildrenCountViewIsEnabled = true;

                            if (categoryHeader != null)
                            {
                                TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testPlanHeader.ItemName);

                                if (catChild != null)
                                    testPlanHeader.IsExpanded = catChild.IsExpanded;
                            }

                            testPlanHeader.AddChildrenList(sortedtestPlanList);

                            Header.Add(testPlanHeader);
                        }
                    }

                    if (testCaseExist != null)
                    {
                        List<TreeViewExplorer> testCaseList = testCaseExist.Children;
                        List<TreeViewExplorer> sortedtestCaseList = new List<TreeViewExplorer>();
                        if (testCaseList.Count > 0)
                        {
                            if (sortType == "Descending" || sortType == "Ascending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                                Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast());
                                if (sortType == "Descending")
                                    Array.Reverse(alphaTestCaseSorted);
                                sortedtestCaseList = alphaTestCaseSorted.ToList();
                            }
                            else if (sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                            {
                                mstrOrders = sortType;

                                TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                                Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                                if (sortType == "Date Created Descending")
                                    Array.Reverse(alphaTestCaseSorted);
                                sortedtestCaseList = alphaTestCaseSorted.ToList();
                            }
                            else if (sortType == "No order")
                              {
                                     mstrOrders = "No order";
                                     sortedtestCaseList = testCaseList;
                               }

                            TreeViewExplorer testCaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testCaseHeader.ChildrenCountForView = sortedtestCaseList.Count;
                            testCaseHeader.ChildrenCountViewIsEnabled = true;

                            if (categoryHeader != null)
                            {
                                TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testCaseHeader.ItemName);

                                if (catChild != null)
                                    testCaseHeader.IsExpanded = catChild.IsExpanded;
                            }
                            testCaseHeader.ClearChildren();
                            testCaseHeader.AddChildrenList(sortedtestCaseList);

                            Header.Add(testCaseHeader);


                        }
                    }


                    isGroupByCategory = true;
                    //List<TreeViewExplorer> testSuiteList= categorytreeview
                    category.AddChildrenList(Header);
                }
               
                //treeViewList = new ObservableCollection<TreeViewExplorer>(treeViewExplorerCategoryList);

              

                
                    if (Listname == "CategoryList")
                    {
                        treeViewExplorerCategoryList = new ObservableCollection<TreeViewExplorer>(sortCategoryLists);
                      if(updateDataContext==true)
                      { 
                        TreeViewDesigner.DataContext = null;
                        TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                      }
                   }
                    else if(Listname =="SearchList")
                    {
                        treeViewExplorerCategorySearchList = new ObservableCollection<TreeViewExplorer>(sortCategoryLists);
                       if (updateDataContext == true)
                       {
                        TreeViewDesigner.DataContext = null;
                        TreeViewDesigner.DataContext = treeViewExplorerCategorySearchList;
                       }
                    }else if(Listname =="FilterList")
                    {
                        treeViewExplorerCategoryFilterList = new ObservableCollection<TreeViewExplorer>(sortCategoryLists);
                      if (updateDataContext == true)
                      {
                        TreeViewDesigner.DataContext = null;
                        TreeViewDesigner.DataContext = treeViewExplorerCategoryFilterList;

                    }
                    
                }                
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14025", MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }


        public void SetupTreeViewSearch()
        {
            try
            {
                TreeViewExplorer testSuiteHeader = new TreeViewExplorer(1, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);
                TreeViewExplorer testPlanHeader = new TreeViewExplorer(2, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);
                TreeViewExplorer testCaseHeader = new TreeViewExplorer(3, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);

                testSuiteHeader.IsExpanded = true;
                testPlanHeader.IsExpanded = true;
                testCaseHeader.IsExpanded = true;

                treeViewExplorerSearchList.Clear();
                treeViewExplorerSearchList.Add(testSuiteHeader);
                treeViewExplorerSearchList.Add(testPlanHeader);
                treeViewExplorerSearchList.Add(testCaseHeader);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14026", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void SetupTreeViewFilter()
        {
            try
            {
                TreeViewExplorer testSuiteHeader = new TreeViewExplorer(1, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);
                TreeViewExplorer testPlanHeader = new TreeViewExplorer(2, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);
                TreeViewExplorer testCaseHeader = new TreeViewExplorer(3, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, this, null, null, null, null, null, null, null, null,0, true);

                testSuiteHeader.IsExpanded = true;
                testPlanHeader.IsExpanded = true;
                testCaseHeader.IsExpanded = true;

                treeViewExplorerFilterList.Clear();
                treeViewExplorerFilterList.Add(testSuiteHeader);
                treeViewExplorerFilterList.Add(testPlanHeader);
                treeViewExplorerFilterList.Add(testCaseHeader);



            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14026F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void AddTreeViewExplorerToList(TreeViewExplorer sourceTreeViewExplorer, string catHeader)
        {
            try
            {
                if (!isGroupByCategory)
                {
                    int titleindex = 0;

                    if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                        titleindex = QatConstants.TveDesignerTestSuiteIndex;
                    else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                        titleindex = QatConstants.TveDesignerTestPlanIndex;
                    else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                        titleindex = QatConstants.TveDesignerTestCaseIndex;

                    treeViewExplorerDesignerList[titleindex].AddChildren(sourceTreeViewExplorer);
                    treeViewExplorerDesignerList[titleindex].ChildrenCountForView = treeViewExplorerDesignerList[titleindex].Children.Count;
                }
                else
                {
                    string titleName = string.Empty;

                    if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                        titleName = QatConstants.TveDesignerTestSuiteTitle;
                    else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                        titleName = QatConstants.TveDesignerTestPlanTitle;
                    else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                        titleName = QatConstants.TveDesignerTestCaseTitle;

                    if (catHeader == null || catHeader == string.Empty)
                    {
                        catHeader = QatConstants.TveDesignerOtherCatHeader;
                    }

                    AddTreeviewItem(treeViewExplorerCategoryList, sourceTreeViewExplorer, QatConstants.TveDesignerCatHeaderItemType, titleName, catHeader, false);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14027", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void AddTreeviewItem(ObservableCollection<TreeViewExplorer> treeViewExplorerCategory, TreeViewExplorer sourceTreeViewExplorer, string TveDesignerCatHeaderItemType, string titleName, string TveDesignerOtherCatHeader, bool isUpdateTreeview)
        {
            try
            {
                var header = treeViewExplorerCategory.Where(p => string.Equals(p.ItemName, TveDesignerOtherCatHeader, StringComparison.CurrentCultureIgnoreCase)).ToArray();

                if (header != null && header.Count() > 0)
                {
                    var planHeader = header[0].Children.Where(p => p.ItemName == titleName).ToArray();

                    if (planHeader != null && planHeader.Count() > 0)
                    {
                        planHeader[0].AddChildren(sourceTreeViewExplorer);
                        planHeader[0].ChildrenCountForView = planHeader[0].Children.Count;
                    }
                    else
                    {
                        TreeViewExplorer tableRow = new TreeViewExplorer(0, titleName, TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                        tableRow.AddChildren(sourceTreeViewExplorer);
                        tableRow.ChildrenCountViewIsEnabled = true;
                        tableRow.ChildrenCountForView = tableRow.Children.Count;
                        tableRow.IsExpanded = true;
                        header[0].AddChildren(tableRow);
                    }
                }
                else
                {
                    TreeViewExplorer tableRow = new TreeViewExplorer(0, TveDesignerOtherCatHeader, TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                    TreeViewExplorer tableRow_plan = new TreeViewExplorer(0, titleName, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                    tableRow_plan.AddChildren(sourceTreeViewExplorer);
                    tableRow_plan.ChildrenCountViewIsEnabled = true;
                    tableRow_plan.ChildrenCountForView = tableRow_plan.Children.Count;
                    tableRow_plan.IsExpanded = true;
                    tableRow.AddChildren(tableRow_plan);
                    treeViewExplorerCategory.Add(tableRow);
                }

                if (isUpdateTreeview)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeViewExplorerCategory;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14014", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void SetContextMenu(TreeViewExplorer sourceTreeViewExplorer)
        {
            try
            {
                bool isTestItemInEditMode = false;
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if(selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    MenuUndo1.Visibility = Visibility.Visible;
                    MenuRedo1.Visibility = Visibility.Visible;
                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    MenuUndo1.Visibility = Visibility.Visible;
                    MenuRedo1.Visibility = Visibility.Visible;
                }
                else
                {
                    MenuUndo1.Visibility = Visibility.Collapsed;
                    MenuRedo1.Visibility = Visibility.Collapsed;
                }

                if (sourceTreeViewExplorer == null)
                {
                    MenuNew1.Visibility = Visibility.Collapsed;
                    MenuCopy1.Visibility = Visibility.Collapsed;
                    MenuPaste1.Visibility = Visibility.Visible;
                    MenuView1.Visibility = Visibility.Collapsed;
                    MenuEdit1.Visibility = Visibility.Collapsed;
                    MenuRename1.Visibility = Visibility.Collapsed;
                    MenuDelete1.Visibility = Visibility.Collapsed;
                    MenuProperties1.Visibility = Visibility.Collapsed;
                    MenuAscending1.Visibility = Visibility.Visible;
                    MenuDecending1.Visibility = Visibility.Visible;
                    MenuRunner1.Visibility = Visibility.Visible;
                    MenuRefresh1.Visibility = Visibility.Visible;

                    MenuNew2.Visibility = Visibility.Collapsed;
                    MenuCopy2.Visibility = Visibility.Collapsed;
                    MenuPaste2.Visibility = Visibility.Visible;
                    MenuView2.Visibility = Visibility.Collapsed;
                    MenuEdit2.Visibility = Visibility.Collapsed;
                    MenuRename2.Visibility = Visibility.Collapsed;
                    MenuDelete2.Visibility = Visibility.Collapsed;
                    MenuProperties2.Visibility = Visibility.Collapsed;
                    MenuAscending2.Visibility = Visibility.Visible;
                    MenuDecending2.Visibility = Visibility.Visible;
                    MenuRefresh2.Visibility = Visibility.Visible;
                    MenuAddItem2.Visibility = Visibility.Collapsed;
                }
                else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType) || String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerCatHeaderItemType))
                {
                    MenuNew1.Visibility = Visibility.Visible;
                    MenuCopy1.Visibility = Visibility.Collapsed;
                    MenuPaste1.Visibility = Visibility.Visible;
                    MenuView1.Visibility = Visibility.Visible;
                    MenuEdit1.Visibility = Visibility.Collapsed;
                    MenuRename1.Visibility = Visibility.Collapsed;
                    MenuDelete1.Visibility = Visibility.Collapsed;
                    MenuProperties1.Visibility = Visibility.Collapsed;
                    MenuAscending1.Visibility = Visibility.Visible;
                    MenuDecending1.Visibility = Visibility.Visible;
                    MenuRunner1.Visibility = Visibility.Visible;
                    MenuRefresh1.Visibility = Visibility.Visible;

                    MenuNew2.Visibility = Visibility.Visible;
                    MenuCopy2.Visibility = Visibility.Collapsed;
                    MenuPaste2.Visibility = Visibility.Visible;
                    MenuView2.Visibility = Visibility.Visible;
                    MenuEdit2.Visibility = Visibility.Collapsed;
                    MenuRename2.Visibility = Visibility.Collapsed;
                    MenuDelete2.Visibility = Visibility.Collapsed;
                    MenuProperties2.Visibility = Visibility.Collapsed;
                    MenuAscending2.Visibility = Visibility.Visible;
                    MenuDecending2.Visibility = Visibility.Visible;
                    MenuRefresh2.Visibility = Visibility.Visible;
                    MenuAddItem2.Visibility = Visibility.Collapsed;

                    if (!String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerCatHeaderItemType))
                    {
                        if (sourceTreeViewExplorer.ItemName == QatConstants.TveDesignerTestSuiteTitle)
                        {
                            MenuNew1.Header = "New Test Suite";
                            MenuNew2.Header = "New Test Suite";
                        }
                        else if (sourceTreeViewExplorer.ItemName == QatConstants.TveDesignerTestPlanTitle)
                        {
                            MenuNew1.Header = "New Test Plan";
                            MenuNew2.Header = "New Test Plan";
                        }
                        if (sourceTreeViewExplorer.ItemName == QatConstants.TveDesignerTestCaseTitle)
                        {
                            MenuNew1.Header = "New Test Case";
                            MenuNew2.Header = "New Test Case";
                        }
                    }
                    else
                    {
                        MenuNew1.Visibility = Visibility.Collapsed;
                        MenuNew2.Visibility = Visibility.Collapsed;
                        MenuView1.Visibility = Visibility.Collapsed;
                        MenuView2.Visibility = Visibility.Collapsed;
                    }
                }
                else
                {
                    MenuNew1.Visibility = Visibility.Visible;
                    MenuCopy1.Visibility = Visibility.Visible;
                    MenuPaste1.Visibility = Visibility.Visible;
                    MenuView1.Visibility = Visibility.Visible;
                    MenuEdit1.Visibility = Visibility.Visible;
                    MenuRename1.Visibility = Visibility.Visible;
                    MenuDelete1.Visibility = Visibility.Visible;
                    MenuProperties1.Visibility = Visibility.Visible;
                    MenuAscending1.Visibility = Visibility.Visible;
                    MenuDecending1.Visibility = Visibility.Visible;
                    MenuRunner1.Visibility = Visibility.Visible;
                    MenuRefresh1.Visibility = Visibility.Visible;

                    MenuNew2.Visibility = Visibility.Visible;
                    MenuCopy2.Visibility = Visibility.Visible;
                    MenuPaste2.Visibility = Visibility.Visible;
                    MenuView2.Visibility = Visibility.Visible;
                    MenuEdit2.Visibility = Visibility.Visible;
                    MenuRename2.Visibility = Visibility.Visible;
                    MenuDelete2.Visibility = Visibility.Visible;
                    MenuProperties2.Visibility = Visibility.Visible;
                    MenuAscending2.Visibility = Visibility.Visible;
                    MenuDecending2.Visibility = Visibility.Visible;
                    MenuRefresh2.Visibility = Visibility.Visible;

                    if (sourceTreeViewExplorer.ItemType == QatConstants.DbTestSuiteTable)
                    {
                        MenuAddItem2.Visibility = Visibility.Collapsed;
                        MenuNew1.Header = "New Test Suite";
                        MenuNew2.Header = "New Test Suite";
                    }
                    else if (sourceTreeViewExplorer.ItemType == QatConstants.DbTestPlanTable)
                    {
                        MenuNew1.Header = "New Test Plan";
                        MenuNew2.Header = "New Test Plan";

                        MenuAddItem2.Header = "Add TP to TS";
                        MenuAddItem2.Visibility = Visibility.Visible;
                        MenuAddItem2.DataContext = null;

                        if (isGroupByCategory == false)
                        {
                            MenuAddItem2.DataContext = (treeViewExplorerDesignerList as ObservableCollection<TreeViewExplorer>)[QatConstants.TveDesignerTestSuiteIndex].Children;
                        }
                        else
                        {
                            List<TreeViewExplorer> exp = new List<TreeViewExplorer>();

                            foreach(TreeViewExplorer list in treeViewExplorerCategoryList)
                            {
                                TreeViewExplorer explor = list.Children.Find(x => x.ItemName == QatConstants.TveDesignerTestSuiteTitle);

                                if(explor != null)
                                {
                                    exp.AddRange(explor.Children);
                                }
                            }

                            MenuAddItem2.DataContext = exp;
                        }
                    }
                    if (sourceTreeViewExplorer.ItemType == QatConstants.DbTestCaseTable)
                    {
                        MenuNew1.Header = "New Test Case";
                        MenuNew2.Header = "New Test Case";

                        MenuAddItem2.Header = "Add TC to TP";
                        MenuAddItem2.Visibility = Visibility.Visible;
                        MenuAddItem2.DataContext = null;

                        if (isGroupByCategory == false)
                        {
                            MenuAddItem2.DataContext = (treeViewExplorerDesignerList as ObservableCollection<TreeViewExplorer>)[QatConstants.TveDesignerTestPlanIndex].Children;
                        }
                        else
                        {
                            List<TreeViewExplorer> exp = new List<TreeViewExplorer>();

                            foreach (TreeViewExplorer list in treeViewExplorerCategoryList)
                            {
                                TreeViewExplorer explor = list.Children.Find(x => x.ItemName == QatConstants.TveDesignerTestPlanTitle);

                                if (explor != null)
                                {
                                    exp.AddRange(explor.Children);
                                }
                            }

                            MenuAddItem2.DataContext = exp;
                        }
                    }
                }

                if (sourceTreeViewExplorer == null)
                {
                    MenuNew1.IsEnabled = false;
                    MenuCopy1.IsEnabled = false;
                    MenuPaste1.IsEnabled = false;
                    MenuView1.IsEnabled = false;
                    MenuEdit1.IsEnabled = false;
                    MenuRename1.IsEnabled = false;
                    MenuDelete1.IsEnabled = false;
                    MenuProperties1.IsEnabled = false;
                    MenuAscending1.IsEnabled = true;
                    MenuDecending1.IsEnabled = true;
                    MenuRunner1.IsEnabled = true;
                    MenuRefresh1.IsEnabled = true;

                    MenuNew2.IsEnabled = false;
                    MenuCopy2.IsEnabled = false;
                    MenuPaste2.IsEnabled = false;
                    MenuView2.IsEnabled = false;
                    MenuEdit2.IsEnabled = false;
                    MenuRename2.IsEnabled = false;
                    MenuDelete2.IsEnabled = false;
                    MenuProperties2.IsEnabled = false;
                    MenuAscending2.IsEnabled = true;
                    MenuDecending2.IsEnabled = true;
                    MenuRefresh2.IsEnabled = true;
                    if (copiedItemsDesigner.Count > 0 && isTestItemInEditMode == false && isRenameModeEnabled == false)
                    {
                        MenuPaste1.IsEnabled = true;
                        MenuPaste2.IsEnabled = true;
                    }
                }
                else
                {
                    MenuNew1.IsEnabled = true;
                    MenuCopy1.IsEnabled = true;
                    MenuPaste1.IsEnabled = false;
                    MenuView1.IsEnabled = true;
                    MenuEdit1.IsEnabled = true;
                    MenuRename1.IsEnabled = true;
                    MenuDelete1.IsEnabled = true;
                    MenuProperties1.IsEnabled = true;
                    MenuAscending1.IsEnabled = true;
                    MenuDecending1.IsEnabled = true;
                    MenuRunner1.IsEnabled = true;
                    MenuRefresh1.IsEnabled = true;

                    MenuNew2.IsEnabled = true;
                    MenuCopy2.IsEnabled = true;
                    MenuPaste2.IsEnabled = false;
                    MenuView2.IsEnabled = true;
                    MenuEdit2.IsEnabled = true;
                    MenuRename2.IsEnabled = true;
                    MenuDelete2.IsEnabled = true;
                    MenuProperties2.IsEnabled = true;
                    MenuAscending2.IsEnabled = true;
                    MenuDecending2.IsEnabled = true;
                    MenuRefresh2.IsEnabled = true;
                    if (!String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.TveDesignerHeaderItemType))
                    {
                        if (isTestItemInEditMode == true || isRenameModeEnabled == true)
                        {
                            MenuCopy1.IsEnabled = false;
                            MenuPaste1.IsEnabled = false;
                            MenuRename1.IsEnabled = false;
                            MenuDelete1.IsEnabled = false;
                            MenuProperties1.IsEnabled = false;

                            MenuCopy2.IsEnabled = false;
                            MenuPaste2.IsEnabled = false;
                            MenuRename2.IsEnabled = false;
                            MenuDelete2.IsEnabled = false;
                            MenuProperties2.IsEnabled = false;
                        }
                        else if (selectedItemsDesigner.Count > 1)
                        {
                            MenuNew1.IsEnabled = false;
                            MenuPaste1.IsEnabled = false;
                            MenuView1.IsEnabled = false;
                            MenuEdit1.IsEnabled = false;
                            MenuRename1.IsEnabled = false;
                            MenuProperties1.IsEnabled = false;

                            MenuNew2.IsEnabled = false;
                            MenuPaste2.IsEnabled = false;
                            MenuView2.IsEnabled = false;
                            MenuEdit2.IsEnabled = false;
                            MenuRename2.IsEnabled = false;
                            MenuProperties2.IsEnabled = false;
                        }
                    }

                    if (copiedItemsDesigner.Count > 0 && isTestItemInEditMode == false && isRenameModeEnabled == false)
                    {
                        if (String.Equals(sourceTreeViewExplorer.ItemType, copiedItemType))
                        {
                            MenuPaste1.IsEnabled = true;
                            MenuPaste2.IsEnabled = true;
                        }
                        else if (copiedItemsDesigner[0].Parent != null && String.Equals(copiedItemsDesigner[0].Parent.ItemName, sourceTreeViewExplorer.ItemName))
                        {
                            MenuPaste1.IsEnabled = true;
                            MenuPaste2.IsEnabled = true;
                        }
                    }
                }

                if(isGroupByCategory)
                {
                    MenuGroupByNone1.IsEnabled = true;
                    MenuGroupByNone2.IsEnabled = true;
                    MenuCategory1.IsEnabled = false;
                    MenuCategory2.IsEnabled = false;
                }
                else
                {
                    MenuGroupByNone1.IsEnabled = false;
                    MenuGroupByNone2.IsEnabled = false;
                    MenuCategory1.IsEnabled = true;
                    MenuCategory2.IsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14029", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_CreateNewTestPlan_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Properties.Settings.Default.TesterName.ToString() != string.Empty)
                {
                    Button sourceButton = sender as Button;
                    if (sourceButton == null)
                        return;

                    TestSuiteItem sourceTestSuite = sourceButton.DataContext as TestSuiteItem;
                    if (sourceTestSuite == null)
                        return;

                    if (sourceTestSuite.TestItemName != string.Empty)
                    {

                        TestPlanItem newTestPlanItem = new TestPlanItem(sourceTestSuite);
                        newTestPlanItem.SaveButtonIsEnabled = false;
                        DesignerTabList.Add(newTestPlanItem);
                    }
                    else if (sourceTestSuite.TestItemName == string.Empty)
                    {
                        MessageBox.Show("Please enter TestSuite name");
                    }
                }
                else
                {
                    MessageBox.Show("Please enter Tester name in the preferences", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12097", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ZoomIn_Click(object sender, RoutedEventArgs e)
        {
            RunnerSlider.Value += 0.1;
        }

        private void ZoomOut_Click(object sender, RoutedEventArgs e)
        {
            RunnerSlider.Value -= 0.1;
        }

        private void ActualSize_Click(object sender, RoutedEventArgs e)
        {
            RunnerSlider.Value = 1.0;
        }

        private void TestAction_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            try
            {
                if ((Keyboard.IsKeyDown(Key.LeftShift)) || (Keyboard.IsKeyDown(Key.RightShift)))
                {
                    if (e.Delta > 0)
                    {
                        RunnerSlider.Value += 0.1;
                    }
                    else if (e.Delta < 0)
                    {
                        RunnerSlider.Value -= 0.1;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestAction_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;


                if ((Keyboard.IsKeyDown(Key.LeftShift)) || (Keyboard.IsKeyDown(Key.RightShift)))
                {
                    if (e.Key == Key.Add)
                    {
                        RunnerSlider.Value += 0.1;
                    }
                    else if (e.Key == Key.Subtract)
                    {
                        RunnerSlider.Value -= 0.1;
                    }
                }

                if ((Keyboard.IsKeyDown(Key.LeftCtrl)) || (Keyboard.IsKeyDown(Key.RightCtrl)))
                {
                    if (e.Key == Key.N)
                    {
                        if (selectedItemsDesigner.Count == 1)
                            NewTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer);
                    }
                    else if (e.Key == Key.O)
                    {
                        if (selectedItemsDesigner.Count == 1)
                            OpenTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer, true);
                    }
                    else if (e.Key == Key.E)
                    {
                        if (selectedItemsDesigner.Count == 1)
                            EditTreeViewItem(TreeViewDesigner.SelectedItem as TreeViewExplorer, true);
                    }
                    else if (e.Key == Key.T)
                    {
                        TestBlankItem sourceTestBlankItem = new TestBlankItem();
                        DesignerTabList.Add(sourceTestBlankItem);
                    }
                    else if (e.Key == Key.Z)
                    {
                        UndoTestItem();
                    }
                    else if (e.Key == Key.Y)
                    {
                        RedoTestItem();
				    }
				    if (e.Key == Key.C && TreeViewDesigner.IsMouseOver==true  && selectedItemsDesigner.Count()>=1 && !isRenameModeEnabled)
                    {
                        CopyMenuItem_Click(null, null);
                    }
                    else if (e.Key == Key.V &&  TreeViewDesigner.IsMouseOver == true &&  !isRenameModeEnabled) 
                    {
                        PasteMenuItem_Click(null, null);
                    }
                    else if (e.Key == Key.C && tabControl.IsMouseOver == true)
                    {
                        if(selectedTestPlanItem != null && selectedTestPlanItem.TestCaseSelectedList.Count()>=1 )
                        TPCopy_Click(selectedTestPlanItem, e);
                        if(selectedTestSuiteItem != null && selectedTestSuiteItem.TestPlanSelectedList.Count()>= 1)
                        TSCopy_Click(selectedTestSuiteItem, e);
                    }
                    else if (e.Key == Key.V && tabControl.IsMouseOver == true)
                    {
                       
                        if(selectedTestPlanItem != null && selectedTestPlanItem.IsEditModeEnabled == true)
                        TPPaste_Click(selectedTestPlanItem, e);
                        if(selectedTestSuiteItem != null && selectedTestSuiteItem.IsEditModeEnabled == true)
                        TSPaste_Click(selectedTestSuiteItem, e);
                    }
                }

                if (e.Key == Key.System)
                {
                    if (e.SystemKey == Key.F)
                    {
                        FileMenu.IsSubmenuOpen = true;
                        Keyboard.Focus(FileMenu);
                    }
                    else if (e.SystemKey == Key.E)
                    {
                        EditMenu.IsSubmenuOpen = true;
                        Keyboard.Focus(EditMenu);
                    }
                    else if (e.SystemKey == Key.V)
                    {
                        ViewMenu.IsSubmenuOpen = true;
                        Keyboard.Focus(ViewMenu);
                    }
                    else if (e.SystemKey == Key.H)
                    {
                        HelpMenu.IsSubmenuOpen = true;
                        Keyboard.Focus(HelpMenu);
                    }
                    else if (e.SystemKey == Key.P)
                    {
                        OpenPreferences();
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void propertiesMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //ServerDetails TesterNameCheck = new ServerDetails();

                //if (TesterNameCheck.txt_testerName.Text == string.Empty)
                //{
                //    MessageBox.Show("Please enter Tester name in the preferences.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                //    return;
                //}
                DBConnection connect = new DBConnection();
                TreeViewExplorer sourceTreeViewExplorer = null;


                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                string itemType = string.Empty;
                if ((!((selectedTestSuiteItem != null || selectedTestPlanItem != null || selectedTestCaseItem != null) && sender.ToString() == "System.Windows.Controls.Button")) && (selectedItemsDesigner.Count == 1 && selectedItemsDesigner.First().ItemType != null && selectedItemsDesigner.First().ItemType != QatConstants.TveDesignerHeaderItemType && selectedItemsDesigner.First().ItemType != QatConstants.TveDesignerCatHeaderItemType))
                {
                    itemType = selectedItemsDesigner.First().ItemType;
                    //sourceTreeViewExplorer = connect.ReadTreeTableChildrenitem(selectedItemsDesigner.First().ItemType, selectedItemsDesigner.First().ItemKey, this);
                }

                if ((selectedTestSuiteItem != null && sender.ToString() == "System.Windows.Controls.Button") || itemType == QatConstants.DbTestSuiteTable)
                {
                    int itemID = 0;
                    if (itemType == QatConstants.DbTestSuiteTable)
                        itemID = selectedItemsDesigner.First().ItemKey;
                    else
                        itemID = selectedTestSuiteItem.TestSuiteID;

                    if (isGroupByCategory)
                    {
                        TreeViewExplorer[] exp = treeViewExplorerCategoryList.Select(p => p.Children.Find(p4 => String.Equals(p4.ItemName, QatConstants.TveDesignerTestSuiteTitle, StringComparison.CurrentCultureIgnoreCase))).Where(c => c != null && c.Children.Count > 0).SelectMany(y => y.Children.Where(p => p.ItemKey == itemID)).ToArray();
                        if (exp != null && exp.Count() > 0)
                            sourceTreeViewExplorer = exp[0];
                    }
                    else
                    {
                        var exp = treeViewExplorerDesignerList[0].Children.Find(x => x.ItemKey == itemID);
                        if (exp != null)
                            sourceTreeViewExplorer = exp;
                    }
                }
                else if ((selectedTestPlanItem != null && sender.ToString() == "System.Windows.Controls.Button") || itemType == QatConstants.DbTestPlanTable)
                {
                    int itemID = 0;
                    if (itemType == QatConstants.DbTestPlanTable)
                        itemID = selectedItemsDesigner.First().ItemKey;
                    else
                        itemID = selectedTestPlanItem.TestPlanID;

                    if (isGroupByCategory)
                    {
                        TreeViewExplorer[] exp = treeViewExplorerCategoryList.Select(p => p.Children.Find(p4 => String.Equals(p4.ItemName, QatConstants.TveDesignerTestPlanTitle, StringComparison.CurrentCultureIgnoreCase))).Where(c => c != null && c.Children.Count > 0).SelectMany(y => y.Children.Where(p => p.ItemKey == itemID)).ToArray();
                        if (exp != null && exp.Count() > 0)
                            sourceTreeViewExplorer = exp[0];
                    }
                    else
                    {
                        var exp = treeViewExplorerDesignerList[1].Children.Find(x => x.ItemKey == itemID);
                        if (exp != null)
                            sourceTreeViewExplorer = exp;
                    }
                }
                else if ((selectedTestCaseItem != null && sender.ToString() == "System.Windows.Controls.Button") || itemType == QatConstants.DbTestCaseTable)
                {
                    int itemID = 0;
                    if (itemType == QatConstants.DbTestCaseTable)
                        itemID = selectedItemsDesigner.First().ItemKey;
                    else
                        itemID = selectedTestCaseItem.TestCaseID;

                    if (isGroupByCategory)
                    {
                        TreeViewExplorer[] exp = treeViewExplorerCategoryList.Select(p => p.Children.Find(p4 => String.Equals(p4.ItemName, QatConstants.TveDesignerTestCaseTitle, StringComparison.CurrentCultureIgnoreCase))).Where(c => c != null && c.Children.Count > 0).SelectMany(y => y.Children.Where(p => p.ItemKey == itemID)).ToArray();
                        if (exp != null && exp.Count() > 0)
                            sourceTreeViewExplorer = exp[0];
                    }
                    else
                    {
                        var exp = treeViewExplorerDesignerList[2].Children.Find(x => x.ItemKey == itemID);
                        if (exp != null)
                            sourceTreeViewExplorer = exp;
                    }
                }

                if (sourceTreeViewExplorer == null)
                {
                    MessageBox.Show("Properties are not available for New Items", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (sourceTreeViewExplorer.ItemType != QatConstants.TveDesignerHeaderItemType)
                {
                    QATProperties propertiesDetails = new QATProperties(sourceTreeViewExplorer);
                    propertiesDetails.Owner = this;
                    propertiesDetails.ShowDialog();

                    if (propertiesDetails.isSaved)
                    {
                        string oldCategory = sourceTreeViewExplorer.Category;
                        string oldModifiedName = sourceTreeViewExplorer.Modifiedby;
                        sourceTreeViewExplorer.Category = propertiesDetails.Category;
                        sourceTreeViewExplorer.Summary = propertiesDetails.Summary;
                        sourceTreeViewExplorer.Modifiedon = propertiesDetails.Modifiedon;
                        sourceTreeViewExplorer.Modifiedby = propertiesDetails.Modifiedby;

                        if (selectedTestSuiteItem != null && selectedTestSuiteItem.IsEditModeEnabled)
                        {
                            selectedTestSuiteItem.Category = propertiesDetails.Category;
                            selectedTestSuiteItem.Summary = propertiesDetails.Summary;
                            selectedTestSuiteItem.Modifiedon = propertiesDetails.Modifiedon;
                            selectedTestSuiteItem.Modifiedby = propertiesDetails.Modifiedby;
                        }
                        else if (selectedTestPlanItem != null && selectedTestPlanItem.IsEditModeEnabled)
                        {
                            selectedTestPlanItem.Category = propertiesDetails.Category;
                            selectedTestPlanItem.Summary = propertiesDetails.Summary;
                            selectedTestPlanItem.Modifiedon = propertiesDetails.Modifiedon;
                            selectedTestPlanItem.Modifiedby = propertiesDetails.Modifiedby;
                        }
                        else if (selectedTestCaseItem != null && selectedTestCaseItem.IsEditModeEnabled)
                        {
                            selectedTestCaseItem.Category = propertiesDetails.Category;
                            selectedTestCaseItem.Summary = propertiesDetails.Summary;
                            selectedTestCaseItem.Modifiedon = propertiesDetails.Modifiedon;
                            selectedTestCaseItem.Modifiedby = propertiesDetails.Modifiedby;
                        }

                        if (isGroupByCategory)
                        {
                            string tblName = string.Empty;

                            if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestSuiteTable))
                                tblName = QatConstants.TveDesignerTestSuiteTitle;
                            else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestPlanTable))
                                tblName = QatConstants.TveDesignerTestPlanTitle;
                            else if (String.Equals(sourceTreeViewExplorer.ItemType, QatConstants.DbTestCaseTable))
                                tblName = QatConstants.TveDesignerTestCaseTitle;

                            string catHeader = string.Empty;
                            if (sourceTreeViewExplorer.Category == string.Empty || sourceTreeViewExplorer.Category == null)
                                catHeader = QatConstants.TveDesignerOtherCatHeader;
                            else
                                catHeader = sourceTreeViewExplorer.Category;

                            if (!(string.Equals(oldCategory, catHeader, StringComparison.CurrentCultureIgnoreCase)))
                            {
                                TreeViewExplorer[] expl1r = treeViewExplorerCategoryList.Where(p => p.Children.Where(x => x.Children.Contains(sourceTreeViewExplorer)).Any()).ToArray();

                                if (expl1r != null && expl1r.Count() > 0)
                                {
                                    TreeViewExplorer exp123 = expl1r[0].Children.Find(p4 => String.Equals(p4.ItemName, tblName, StringComparison.CurrentCultureIgnoreCase));
                                    if (exp123 != null && exp123.Children.Count > 0)
                                    {
                                        exp123.RemoveChildren(sourceTreeViewExplorer);
                                        exp123.ChildrenCountForView = exp123.Children.Count;

                                        if (exp123.Children.Count == 0)
                                        {
                                            expl1r[0].RemoveChildren(exp123);
                                            expl1r[0].ChildrenCountForView = expl1r[0].Children.Count;

                                            if (expl1r[0].Children.Count == 0)
                                            {
                                                treeViewExplorerCategoryList.Remove(expl1r[0]);
                                            }
                                        }
                                    }
                                }

                                var catHeadTree = treeViewExplorerCategoryList.Where(p => String.Equals(p.ItemName, catHeader, StringComparison.CurrentCultureIgnoreCase)).ToArray();
                                if (catHeadTree != null && catHeadTree.Count() > 0)
                                {
                                    var headerlst = catHeadTree[0].Children.Find(p4 => String.Equals(p4.ItemName, tblName, StringComparison.CurrentCultureIgnoreCase));
                                    if (headerlst != null)
                                    {
                                        var itemlst = headerlst.Children.Find(x => x.ItemKey == sourceTreeViewExplorer.ItemKey);
                                        if (itemlst == null)
                                        {
                                            headerlst.AddChildren(sourceTreeViewExplorer);
                                            headerlst.ChildrenCountForView = headerlst.Children.Count;
                                            //headerlst.IsExpanded = true;
                                            //catHeadTree[0].IsExpanded = true;
                                        }
                                    }
                                    else
                                    {

                                        TreeViewExplorer itemHeader = new TreeViewExplorer(0, tblName, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                        itemHeader.AddChildren(sourceTreeViewExplorer);
                                        itemHeader.ChildrenCountForView = itemHeader.Children.Count;
                                        itemHeader.ChildrenCountViewIsEnabled = true;

                                        TreeViewExplorer suiteHeader = catHeadTree[0].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                                        TreeViewExplorer planHeader = catHeadTree[0].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestPlanTitle);
                                        TreeViewExplorer caseHeader = catHeadTree[0].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestCaseTitle);

                                        if((suiteHeader!=null && planHeader!=null)||(planHeader!=null && caseHeader!=null)||(suiteHeader!=null && caseHeader!=null))
                                        { 
                                            if(tblName == QatConstants.TveDesignerTestSuiteTitle)
                                            {
                                                catHeadTree[0].ClearChildren();
                                                catHeadTree[0].AddChildren(itemHeader);
                                                catHeadTree[0].AddChildren(planHeader);
                                                catHeadTree[0].AddChildren(caseHeader);

                                            }else if(tblName == QatConstants.TveDesignerTestPlanTitle)
                                            {
                                                catHeadTree[0].ClearChildren();
                                                catHeadTree[0].AddChildren(suiteHeader);
                                                catHeadTree[0].AddChildren(itemHeader);
                                                catHeadTree[0].AddChildren(caseHeader);

                                            }else if(tblName== QatConstants.TveDesignerTestCaseTitle)
                                            {
                                                catHeadTree[0].ClearChildren();
                                                catHeadTree[0].AddChildren(suiteHeader);
                                                catHeadTree[0].AddChildren(planHeader);
                                                catHeadTree[0].AddChildren(itemHeader);
                                            }
                                            //testSuiteHeader.IsExpanded = true;
                                            //catHeadTree[0].IsExpanded = true;
                                        }
                                        else if(suiteHeader!=null)
                                        {
                                            catHeadTree[0].ClearChildren();
                                            catHeadTree[0].AddChildren(suiteHeader);
                                            catHeadTree[0].AddChildren(itemHeader);
                                        }else if(planHeader != null)
                                        {
                                            if(tblName == QatConstants.TveDesignerTestSuiteTitle)
                                            {
                                                catHeadTree[0].ClearChildren();
                                                catHeadTree[0].AddChildren(itemHeader);
                                                catHeadTree[0].AddChildren(planHeader);

                                            }else if(tblName == QatConstants.TveDesignerTestCaseTitle)
                                            {
                                                catHeadTree[0].ClearChildren();
                                                catHeadTree[0].AddChildren(planHeader);
                                                catHeadTree[0].AddChildren(itemHeader);

                                            }
                                            
                                        }else if(caseHeader!=null)
                                        {
                                            catHeadTree[0].ClearChildren();
                                            catHeadTree[0].AddChildren(itemHeader);
                                            catHeadTree[0].AddChildren(caseHeader);

                                        }
                                    }
                                }
                                else
                                {
                                    TreeViewExplorer testSuiteHeader = new TreeViewExplorer(0, tblName, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                    testSuiteHeader.AddChildren(sourceTreeViewExplorer);
                                    testSuiteHeader.ChildrenCountForView = testSuiteHeader.Children.Count;
                                    testSuiteHeader.ChildrenCountViewIsEnabled = true;
                                    //testSuiteHeader.IsExpanded = true;

                                    TreeViewExplorer cat_Header = new TreeViewExplorer(0, catHeader, QatConstants.TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                                    cat_Header.AddChildren(testSuiteHeader);
                                    //cat_Header.IsExpanded = true;

                                    treeViewExplorerCategoryList.Add(cat_Header);
                                }
                            }
                        }

                        if (!isDesignerFilterListSelected && !isDesignerSearchListSelected)
                        {
                            if (isGroupByCategory)
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                            }
                            else
                            {
                                TreeViewDesigner.DataContext = null;
                                TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            }
                        }
                        else
                        {
                            if (isDesignerFilterListSelected)
                                RefreshFilterItemCategory(true);

                            if (isDesignerSearchListSelected)
                                SearchTreeViewItem(true);
                        }


                        if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != sourceTreeViewExplorer.Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(sourceTreeViewExplorer.Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(sourceTreeViewExplorer.Modifiedby))
                                    modifiedByList.Add(sourceTreeViewExplorer.Modifiedby, 1);
                                else
                                    modifiedByList[sourceTreeViewExplorer.Modifiedby] = modifiedByList[sourceTreeViewExplorer.Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != sourceTreeViewExplorer.Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }

                            }

                        }
                        if (String.IsNullOrEmpty(oldCategory) || oldCategory != sourceTreeViewExplorer.Category)
                        {
                            if (!String.IsNullOrEmpty(sourceTreeViewExplorer.Category))
                            {
                                if (!categoryList.ContainsKey(sourceTreeViewExplorer.Category))
                                    categoryList.Add(sourceTreeViewExplorer.Category, 1);
                                else
                                    categoryList[sourceTreeViewExplorer.Category] = categoryList[sourceTreeViewExplorer.Category] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldCategory) && oldCategory != sourceTreeViewExplorer.Category)
                            {

                                if (categoryList.ContainsKey(oldCategory))
                                {
                                    if (categoryList[oldCategory] == 1)
                                        categoryList.Remove(oldCategory);
                                    else
                                        categoryList[oldCategory] = categoryList[oldCategory] - 1;
                                }
                            }
                        }

                        insertselectionItem();
                    }
                }

               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }







        private void SortbyascendingMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (isGroupByCategory == false)
                {
                    //SetupTreeViewDesignerFromDB(true, "Ascending");

                   
                    if(isDesignerSearchListSelected)
                        sortinginDesignerList(treeViewExplorerSearchList, true, "Ascending");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginDesignerList(treeViewExplorerFilterList, true, "Ascending");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    { 
                      sortinginDesignerList(treeViewExplorerDesignerList, true, "Ascending");
                        mstrOrders_originalList = mstrOrders;
                    }



                }
                else
                {
                    copiedItemsDesigner.Clear();
                    //GroupByCategory(true, "Ascending");
                    
                    
                    if(isDesignerSearchListSelected)
                        sortinginCategoryList(treeViewExplorerCategorySearchList, true, "Ascending", "SearchList");
                    else if(isDesignerFilterListSelected)
                    { 
                        sortinginCategoryList(treeViewExplorerCategoryFilterList, true, "Ascending", "FilterList");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    { 
                        sortinginCategoryList(treeViewExplorerCategoryList, true, "Ascending", "CategoryList");
                        mstrOrders_originalList = mstrOrders;
                    }


                }
                MenuAscending1.IsChecked = MenuAscending2.IsChecked = true;
                MenuascendingName.IsChecked = ascendingName.IsChecked = true;
                MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = false;

                MenuDecending1.IsChecked = MenuDecending2.IsChecked = false;
                MenudecendingName.IsChecked = descendingName.IsChecked = false;
                MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void insertselectionItem()
        {
            List<string> FilterItemlist = new List<string>();
            try
            {
                if (comboSortTypeSelection.SelectionBoxItem.ToString() == "Created by")
                {

                    FilterItemlist = createdByList.Keys.ToList(); 
                    comboSortValueSelection1.ItemsSource = FilterItemlist;
                    //comboSortValueSelection1.ItemsSource = null;
                    //createdByList.Clear();
                    
                }
                else if (comboSortTypeSelection.SelectionBoxItem.ToString() == "Modified by")
                {
                    FilterItemlist = modifiedByList.Keys.ToList();
                    //comboSortValueSelection1.ItemsSource = null;
                    comboSortValueSelection1.ItemsSource = FilterItemlist;
                }

                else if (comboSortTypeSelection.SelectionBoxItem.ToString() == "Category")
                {
                    FilterItemlist = categoryList.Keys.ToList();
                    //comboSortValueSelection1.ItemsSource = null;
                    comboSortValueSelection1.ItemsSource = FilterItemlist;
                }


                // if search text present refresh the search

                //if (isGroupByCategory == false)
                //{
                //    SetupTreeViewDesignerFromDB(false,mstrOrders);
                //}
                //else
                //{
                //    copiedItemsDesigner.Clear();
                //    GroupByCategory(false,mstrOrders);
                //}
              
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void comboSortTypeSelection_DropDownOpened(object sender, EventArgs e)
        {
            try
            {

                this.Cursor = Cursors.Wait;
                //SetupTreeViewDesignerFromDB(true, "No order");
                //comboSortValueSelection1.ItemsSource = null;
                //comboSortValueSelection2.ItemsSource = null;
                List<string> groupList = new List<string> { "Created by", "Created on", "Modified by", "Modified on", "Summary", "Category", "Clear Filter" };
                foreach (string selectionitem in groupList)
                {
                    if (!comboSortTypeSelection.Items.Contains(selectionitem))
                        comboSortTypeSelection.Items.Add(selectionitem);
                }

                this.Cursor = Cursors.Arrow;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SortbydecendingMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (isGroupByCategory == false)
                {
                    //SetupTreeViewDesignerFromDB(true, "Descending");

                  
                     if (isDesignerSearchListSelected)
                        sortinginDesignerList(treeViewExplorerSearchList, true, "Descending");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginDesignerList(treeViewExplorerFilterList, true, "Descending");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    {
                        sortinginDesignerList(treeViewExplorerDesignerList, true, "Descending");
                        mstrOrders_originalList = mstrOrders;
                    }




                }
                else
                {
                    copiedItemsDesigner.Clear();
                    //GroupByCategory(true, "Ascending");
                    if (isDesignerSearchListSelected)
                        sortinginCategoryList(treeViewExplorerCategorySearchList, true, "Descending", "SearchList");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginCategoryList(treeViewExplorerCategoryFilterList, true, "Descending", "FilterList");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    {
                        sortinginCategoryList(treeViewExplorerCategoryList, true, "Descending", "CategoryList");
                        mstrOrders_originalList = mstrOrders;
                    }

                }

                MenuAscending1.IsChecked = MenuAscending2.IsChecked = false;
                MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = false;

                MenuDecending1.IsChecked = MenuDecending2.IsChecked = true;
                MenudecendingName.IsChecked = descendingName.IsChecked = true;
                MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
		
        private void SortCreatedonbydecendingMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (isGroupByCategory == false)
                {
                    //SetupTreeViewDesignerFromDB(true, "Date Created Descending");
                    
                    if (isDesignerSearchListSelected)
                        sortinginDesignerList(treeViewExplorerSearchList, true, "Date Created Descending");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginDesignerList(treeViewExplorerFilterList, true, "Date Created Descending");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    {
                        sortinginDesignerList(treeViewExplorerDesignerList, true, "Date Created Descending");
                        mstrOrders_originalList = mstrOrders;
                    }

                }
                else
                {
                    copiedItemsDesigner.Clear();
                    //GroupByCategory(true, "Ascending");
                    if (isDesignerSearchListSelected)
                        sortinginCategoryList(treeViewExplorerCategorySearchList, true, "Date Created Descending", "SearchList");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginCategoryList(treeViewExplorerCategoryFilterList, true, "Date Created Descending", "FilterList");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    {
                        sortinginCategoryList(treeViewExplorerCategoryList, true, "Date Created Descending", "CategoryList");
                        mstrOrders_originalList = mstrOrders;
                    }

                    //sortinginCategoryList(true, "Date Created Descending");
                    //GroupByCategory(true, "Date Created Descending");
                }
                MenuAscending1.IsChecked = MenuAscending2.IsChecked = false;
                MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = false;

                MenuDecending1.IsChecked = MenuDecending2.IsChecked = true;
                MenudecendingName.IsChecked = descendingName.IsChecked = false;
                MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
		
        private void SortCreatedonbyascendingMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (isGroupByCategory == false)
                {

                    //SetupTreeViewDesignerFromDB(true, "Date Created Descending");
                    
                     if (isDesignerSearchListSelected)
                        sortinginDesignerList(treeViewExplorerSearchList, true, "Date Created Ascending");
                     else if (isDesignerFilterListSelected)
                    { 
                        sortinginDesignerList(treeViewExplorerFilterList, true, "Date Created Ascending");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                     {
                        sortinginDesignerList(treeViewExplorerDesignerList, true, "Date Created Ascending");
                        mstrOrders_originalList = mstrOrders;
                     }

                }
                else
                {
                    copiedItemsDesigner.Clear();
                    if (isDesignerSearchListSelected)
                        sortinginCategoryList(treeViewExplorerCategorySearchList, true, "Date Created Ascending", "SearchList");
                    else if (isDesignerFilterListSelected)
                    { 
                        sortinginCategoryList(treeViewExplorerCategoryFilterList, true, "Date Created Ascending", "FilterList");
                        mstrOrders_filter = mstrOrders;
                    }
                    else
                    {
                        sortinginCategoryList(treeViewExplorerCategoryList, true, "Date Created Ascending", "CategoryList");
                        mstrOrders_originalList = mstrOrders;
                    }
                    //sortinginCategoryList(true, "Date Created Ascending");
                    //GroupByCategory(true, "Date Created Ascending");
                }
                MenuAscending1.IsChecked = MenuAscending2.IsChecked = true;
                MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = true;

                MenuDecending1.IsChecked = MenuDecending2.IsChecked = false;
                MenudecendingName.IsChecked = descendingName.IsChecked = false;
                MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void comboSortValueSelection1_DropDownClosed(object sender, EventArgs e)
        {
            try
            {
                //SetupTreeViewDesignerFromDB(true, "No order");
                string selectedItem = comboSortValueSelection1.SelectionBoxItem.ToString();
                string selectedType = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    isDesignerFilterListSelected = true;
                    isDesignerSearchListSelected = false;
                    FilterTreeViewItem(selectedType, selectedItem, true);                    
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void comboSelectionChanged_forRefresh()
        {
            try
            {
                //SetupTreeViewDesignerFromDB(true, "No order");
                string selectedItem = comboSortValueSelection1.SelectionBoxItem.ToString();
                string selectedType = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    isDesignerFilterListSelected = true;
                    //isDesignerSearchListSelected = false;
                    FilterTreeViewItem(selectedType, selectedItem, true);                    
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TSContextMenu_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestSuiteItem sourceTestSuiteItem = sourceElement.DataContext as TestSuiteItem;
                if (sourceTestSuiteItem == null)
                    return;

                if (sourceTestSuiteItem.TestPlanList.Count == 0)
                {
                    sourceTestSuiteItem.IsCutMenuEnabled = false;
                    sourceTestSuiteItem.IsCopyMenuEnabled = false;
                    sourceTestSuiteItem.IsPasteMenuEnabled = false;
                    sourceTestSuiteItem.IsRemoveMenuEnabled = false;
                    sourceTestSuiteItem.IsRemoveAllMenuEnabled = false;
                }
                else if (sourceTestSuiteItem.TestPlanSelectedList.Count == 0)
                {
                    sourceTestSuiteItem.IsCutMenuEnabled = false;
                    sourceTestSuiteItem.IsCopyMenuEnabled = false;
                    sourceTestSuiteItem.IsPasteMenuEnabled = false;
                    sourceTestSuiteItem.IsRemoveMenuEnabled = false;
                    sourceTestSuiteItem.IsRemoveAllMenuEnabled = true;

                    if (sourceTestSuiteItem.TestPlanListForCutCopy.Count > 0)
                        sourceTestSuiteItem.IsPasteMenuEnabled = true;
                }
                else
                {
                    sourceTestSuiteItem.IsCutMenuEnabled = true;
                    sourceTestSuiteItem.IsCopyMenuEnabled = true;
                    sourceTestSuiteItem.IsPasteMenuEnabled = false;
                    sourceTestSuiteItem.IsRemoveMenuEnabled = true;
                    sourceTestSuiteItem.IsRemoveAllMenuEnabled = true;

                    if (sourceTestSuiteItem.TestPlanListForCutCopy.Count > 0)
                        sourceTestSuiteItem.IsPasteMenuEnabled = true;
                }
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);


            }

        }

        private void TPContextMenu_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestPlanItem sourceTestPlanItem = sourceElement.DataContext as TestPlanItem;
                if (sourceTestPlanItem == null)
                    return;

                if (sourceTestPlanItem.TestCaseList.Count == 0)
                {
                    sourceTestPlanItem.IsCutMenuEnabled = false;
                    sourceTestPlanItem.IsCopyMenuEnabled = false;
                    sourceTestPlanItem.IsPasteMenuEnabled = false;
                    sourceTestPlanItem.IsRemoveMenuEnabled = false;
                    sourceTestPlanItem.IsRemoveAllMenuEnabled = false;
                }
                else if (sourceTestPlanItem.TestCaseSelectedList.Count == 0)
                {
                    sourceTestPlanItem.IsCutMenuEnabled = false;
                    sourceTestPlanItem.IsCopyMenuEnabled = false;
                    sourceTestPlanItem.IsPasteMenuEnabled = false;
                    sourceTestPlanItem.IsRemoveMenuEnabled = false;
                    sourceTestPlanItem.IsRemoveAllMenuEnabled = true;

                    if (sourceTestPlanItem.TestCaseListForCutCopy.Count > 0)
                        sourceTestPlanItem.IsPasteMenuEnabled = true;
                }
                else
                {
                    sourceTestPlanItem.IsCutMenuEnabled = true;
                    sourceTestPlanItem.IsCopyMenuEnabled = true;
                    sourceTestPlanItem.IsPasteMenuEnabled = false;
                    sourceTestPlanItem.IsRemoveMenuEnabled = true;
                    sourceTestPlanItem.IsRemoveAllMenuEnabled = true;

                    if (sourceTestPlanItem.TestCaseListForCutCopy.Count > 0)
                        sourceTestPlanItem.IsPasteMenuEnabled = true;
                }
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);


            }


        }

        private void AddTabToDesigner(object sourceObject, bool openInNewTab)
        {
            try
            {
                int openTabIndex = tabControl.SelectedIndex;
                bool openExistingTab = false;
                bool isInEditMode = false;
                TestCaseItem sourceTestCaseItem = sourceObject as TestCaseItem;
                TestPlanItem sourceTestPlanItem = sourceObject as TestPlanItem;
                TestSuiteItem sourceTestSuiteItem = sourceObject as TestSuiteItem;
                TestHeaderItem sourceTestHeaderItem = sourceObject as TestHeaderItem;

                string itemType = null;
                int itemKey = 0;

                if (sourceTestCaseItem != null)
                {
                    itemType = QatConstants.DbTestCaseTable;
                    itemKey = sourceTestCaseItem.TestCaseID;
                }
                else if (sourceTestPlanItem != null)
                {
                    itemType = QatConstants.DbTestPlanTable;
                    itemKey = sourceTestPlanItem.TestPlanID;
                }
                else if (sourceTestSuiteItem != null)
                {
                    itemType = QatConstants.DbTestSuiteTable;
                    itemKey = sourceTestSuiteItem.TestSuiteID;
                }
                else if (sourceTestHeaderItem != null)
                {
                    itemType = sourceTestHeaderItem.TestItemHeaderName;
                }

                int existingTabIndex = -1;
                foreach (object item in tabControl.Items)
                {
                    existingTabIndex++;
                    TestCaseItem selectedTestCaseItem = item as TestCaseItem;
                    TestPlanItem selectedTestPlanItem = item as TestPlanItem;
                    TestSuiteItem selectedTestSuiteItem = item as TestSuiteItem;
                    TestHeaderItem selectedTestHeaderItem = item as TestHeaderItem;

                    if (selectedTestCaseItem != null && itemType == QatConstants.DbTestCaseTable && itemKey == selectedTestCaseItem.TestCaseID)
                    {
                        openExistingTab = true;
                        if (selectedTestCaseItem.SaveButtonIsEnabled)
                        {
                            isInEditMode = true;
                            selectedTestCaseItem.IsSelected = true;
                        }
                        else if (selectedTestCaseItem.IsEditModeEnabled)
                            QscDatabase.SetEditedByItem(selectedTestCaseItem.TestCaseTreeViewExplorer, string.Empty);

                        break;
                    }
                    else if (selectedTestPlanItem != null && itemType == QatConstants.DbTestPlanTable && itemKey == selectedTestPlanItem.TestPlanID)
                    {
                        openExistingTab = true;
                        if (selectedTestPlanItem.SaveButtonIsEnabled)
                        {
                            isInEditMode = true;
                            selectedTestPlanItem.IsSelected = true;
                        }
                        else if (selectedTestPlanItem.IsEditModeEnabled)
                            QscDatabase.SetEditedByItem(selectedTestPlanItem.TestPlanTreeViewExplorer, string.Empty);

                        break;
                    }
                    else if (selectedTestSuiteItem != null && itemType == QatConstants.DbTestSuiteTable && itemKey == selectedTestSuiteItem.TestSuiteID)
                    {
                        openExistingTab = true;
                        if (selectedTestSuiteItem.SaveButtonIsEnabled)
                        {
                            isInEditMode = true;
                            selectedTestSuiteItem.IsSelected = true;
                        }
                        else if (selectedTestSuiteItem.IsEditModeEnabled)
                            QscDatabase.SetEditedByItem(selectedTestSuiteItem.TestSuiteTreeViewExplorer, string.Empty);

                        break;
                    }
                    else if (selectedTestHeaderItem != null && itemType == selectedTestHeaderItem.TestItemHeaderName)
                    {
                        openExistingTab = true;
                        break;
                    }
                }

                if (openExistingTab && existingTabIndex >= 0 && isInEditMode == false)
                {
                    DesignerTabList.RemoveAt(existingTabIndex);
                    DesignerTabList.Insert(existingTabIndex, sourceObject);
                }
                else if (!openExistingTab && !openInNewTab && openTabIndex >= 0)
                {
                    TestCaseItem openTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                    TestPlanItem openTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                    TestSuiteItem openTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                    if (openTestCaseItem != null && openTestCaseItem.IsEditModeEnabled)
                    {
                        QscDatabase.SetEditedByItem(openTestCaseItem.TestCaseTreeViewExplorer, string.Empty);
                    }
                    else if (openTestPlanItem != null && openTestPlanItem.IsEditModeEnabled)
                    {
                        QscDatabase.SetEditedByItem(openTestPlanItem.TestPlanTreeViewExplorer, string.Empty);
                    }
                    else if (openTestSuiteItem != null && openTestSuiteItem.IsEditModeEnabled)
                    {
                        QscDatabase.SetEditedByItem(openTestSuiteItem.TestSuiteTreeViewExplorer, string.Empty);
                    }

                    DesignerTabList.RemoveAt(openTabIndex);
                    DesignerTabList.Insert(openTabIndex, sourceObject);
                }
                else if (!openExistingTab)
                {
                    DesignerTabList.Add(sourceObject);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void summaryTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    if ((summaryTextBox.Text == string.Empty)&(!isDesignerSearchListSelected))
                    {
                        if (isGroupByCategory == false)
                        {
                            //SetupTreeViewDesignerFromDB(true,mstrOrders);
                            //TreeViewDesigner.DataContext = null;
                            //TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            sortinginDesignerList(treeViewExplorerDesignerList,true, mstrOrders);

                        }
                        else
                        {

                            //GroupByCategory(true,mstrOrders);
                            copiedItemsDesigner.Clear();
                            sortinginCategoryList(treeViewExplorerCategoryList, true, mstrOrders, "CategoryList");
                            //TreeViewDesigner.DataContext = null;
                            //TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                        }
                    }
                    else
                    {
                        isDesignerFilterListSelected = true;
                        isDesignerSearchListSelected = false;
                        FilterTreeViewItemBySummary(selectedItem, summaryTextBox.Text, true);
                    }

                }
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);


            }
        }

        private void summaryTextBox_ForRefresh()
        {
            try
            {
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    if ((summaryTextBox.Text == string.Empty) & (!isDesignerSearchListSelected))
                    {
                        if (isGroupByCategory == false)
                        {
                            //SetupTreeViewDesignerFromDB(true,mstrOrders);
                            //TreeViewDesigner.DataContext = null;
                            //TreeViewDesigner.DataContext = treeViewExplorerDesignerList;
                            sortinginDesignerList(treeViewExplorerDesignerList,true, mstrOrders);
                           
                        }
                        else
                        {
                            copiedItemsDesigner.Clear();
                            sortinginCategoryList(treeViewExplorerCategoryList, true, mstrOrders, "CategoryList");

                            //TreeViewDesigner.DataContext = null;
                            //TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                        }
                    }
                    else
                    {
                        isDesignerFilterListSelected = true;
                        FilterTreeViewItemBySummary(selectedItem, summaryTextBox.Text, true);
                    }

                }
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);


            }


        }

        private Visibility filterValueSelectionValue = Visibility.Hidden;
        public Visibility FilterValueSelection
        {
            get { return filterValueSelectionValue; }
            set { filterValueSelectionValue = value; OnPropertyChanged("FilterValueSelection"); }
        }

        private Visibility filterSummaryTextValue = Visibility.Hidden;
        public Visibility FilterSummaryText
        {
            get { return filterSummaryTextValue; }
            set { filterSummaryTextValue = value; OnPropertyChanged("FilterSummaryText"); }
        }

        private Visibility filterStartDateValue = Visibility.Hidden;
        public Visibility FilterStartDate
        {
            get { return filterStartDateValue; }
            set { filterStartDateValue = value; OnPropertyChanged("FilterStartDate"); }
        }

        private Visibility filterEndDateValue = Visibility.Hidden;
        public Visibility FilterEndDate
        {
            get { return filterEndDateValue; }
            set { filterEndDateValue = value; OnPropertyChanged("FilterEndDate"); }
        }

        private Visibility filterTextBoxGridValue = Visibility.Hidden;
        public Visibility FilterTextBoxGrid
        {
            get { return filterTextBoxGridValue; }
            set { filterTextBoxGridValue = value; OnPropertyChanged("FilterTextBoxGrid"); }
        }

        private void comboSortTypeSelection_DropDownClosed(object sender, EventArgs e)
        {
            try
            {
                comboSortValueSelection1.Text = string.Empty;
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    if ((selectedItem == "Created by") | (selectedItem == "Modified by") | (selectedItem == "Category"))
                    {
                        FilterValueSelection = Visibility.Visible;
                        FilterEndDate = Visibility.Hidden;
                        FilterStartDate = Visibility.Hidden;
                        FilterSummaryText = Visibility.Hidden;
                        FilterTextBoxGrid = Visibility.Hidden;

                        fromDatePicker.SelectedDate = null;
                        toDatePicker.SelectedDate = null;
                    }
                    else if ((selectedItem == "Summary"))
                    {
                        FilterValueSelection = Visibility.Hidden;
                        FilterEndDate = Visibility.Hidden;
                        FilterStartDate = Visibility.Hidden;
                        FilterTextBoxGrid = Visibility.Visible;
                        FilterSummaryText = Visibility.Visible;

                        fromDatePicker.SelectedDate = null;
                        toDatePicker.SelectedDate = null;
                    }
                    else if ((selectedItem == "Created on") | (selectedItem == "Modified on"))
                    {
                        FilterValueSelection = Visibility.Hidden;
                        FilterEndDate = Visibility.Visible;
                        FilterStartDate = Visibility.Visible;
                        FilterSummaryText = Visibility.Hidden;
                        FilterTextBoxGrid = Visibility.Hidden;
                    }
                    else if (selectedItem == "Clear Filter" || selectedItem == null || selectedItem == string.Empty)
                    {
                        FilterValueSelection = Visibility.Hidden;
                        FilterEndDate = Visibility.Hidden;
                        FilterStartDate = Visibility.Hidden;
                        FilterSummaryText = Visibility.Hidden;
                        FilterTextBoxGrid = Visibility.Hidden;

                        fromDatePicker.SelectedDate = null;
                        toDatePicker.SelectedDate = null;
                    }
                }
                if ((selectedItem == "Created by") | (selectedItem == "Modified by") | (selectedItem == "Category"))
                {
                    insertselectionItem();
                    copiedItemsDesigner.Clear();
                }
                else if ((selectedItem == "Clear Filter"))
                {

                    //treeViewExplorerSearchList.Clear();
                    if (isGroupByCategory == false)
                    {
                        //SetupTreeViewDesignerFromDB(true,mstrOrders);
                        sortinginDesignerList(treeViewExplorerDesignerList,true, mstrOrders);
                        
                    }
                    else
                    {
                        copiedItemsDesigner.Clear();
                        sortinginCategoryList(treeViewExplorerCategoryList, true, mstrOrders, "CategoryList");
                        //sortinginCategoryList1(treeViewExplorerCategoryList, treeViewExplorerCategoryList, true, mstrOrders)

                        //TreeViewDesigner.DataContext = null;
                        //TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                        //GroupByCategory(true,mstrOrders);
                    }
                    mstrOrders_originalList=mstrOrders;

                    isDesignerSearchListSelected = false;
                    isDesignerFilterListSelected = false;
                }
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);


            }

        }

        private void toDatePicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem) && ((selectedItem == "Created on") || (selectedItem == "Modified on")))
                {
                    if (fromDatePicker.SelectedDate != null & toDatePicker.SelectedDate != null)
                    {
                        DateTime? startdate = fromDatePicker.SelectedDate;
                        DateTime enddate = toDatePicker.SelectedDate.Value;
                        enddate = enddate.AddSeconds(DateTime.Now.TimeOfDay.TotalSeconds);
                        isDesignerFilterListSelected = true;
                        isDesignerSearchListSelected = false;
                        FilterTreeViewItemByDate(selectedItem, startdate, enddate, true);
                        //toDatePicker.SelectedDate = null;
                    }
                    else if (fromDatePicker.SelectedDate == null)
                    {
                        MessageBox.Show("Select From Date", "QAT", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void toDatePicker_forRefresh()
        {
            try
            {
                string selectedItem = comboSortTypeSelection.SelectionBoxItem.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    if (fromDatePicker.SelectedDate != null & toDatePicker.SelectedDate != null)
                    {
                        DateTime? startdate = fromDatePicker.SelectedDate;
                        DateTime enddate = toDatePicker.SelectedDate.Value;
                        enddate = enddate.AddSeconds(DateTime.Now.TimeOfDay.TotalSeconds);
                        isDesignerFilterListSelected = true;
                        FilterTreeViewItemByDate(selectedItem, startdate, enddate, true);
                        //toDatePicker.SelectedDate = null;
                    }
                    else if (fromDatePicker.SelectedDate == null)
                    {
                        MessageBox.Show("Select From Date", "QAT", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void TreeViewDesigner_GiveFeedback(object sender, GiveFeedbackEventArgs e)
        {
            try
            {
                Win32Point w32Mouse = new Win32Point();
                GetCursorPos(ref w32Mouse);

                _dragdropWindow.Left = w32Mouse.X;
                _dragdropWindow.Top = w32Mouse.Y;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void listView_TestSuite_GiveFeedback(object sender, GiveFeedbackEventArgs e)
        {
            try
            {
                Win32Point w32Mouse = new Win32Point();
                GetCursorPos(ref w32Mouse);

                _dragdropWindow.Left = w32Mouse.X;
                _dragdropWindow.Top = w32Mouse.Y;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void lst_TestPlan_GiveFeedback(object sender, GiveFeedbackEventArgs e)
        {
            try
            {
                Win32Point w32Mouse = new Win32Point();
                GetCursorPos(ref w32Mouse);

                _dragdropWindow.Left = w32Mouse.X;
                _dragdropWindow.Top = w32Mouse.Y;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click_DesignrTabDelete(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;

                TestCaseItem selectedTestCaseItem = sourceElement.DataContext as TestCaseItem;
                TestPlanItem selectedTestPlanItem = sourceElement.DataContext as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = sourceElement.DataContext as TestSuiteItem;


                MessageBoxResult btnresult = MessageBoxResult.Yes;
                TreeViewExplorer sourceTreeViewExplorer = null;

                if (selectedTestSuiteItem != null)
                {
                    if (selectedTestSuiteItem.SaveButtonIsEnabled == true)
                        btnresult = MessageBox.Show("All your testsuite changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

                    if (selectedTestSuiteItem.IsEditModeEnabled == true)
                        sourceTreeViewExplorer = selectedTestSuiteItem.TestSuiteTreeViewExplorer;
                }
                else if (selectedTestPlanItem != null)
                {
                    if (selectedTestPlanItem.SaveButtonIsEnabled == true)
                        btnresult = MessageBox.Show("All your testplan changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

                    if (selectedTestPlanItem.IsEditModeEnabled == true)
                        sourceTreeViewExplorer = selectedTestPlanItem.TestPlanTreeViewExplorer;
                }
                else if (selectedTestCaseItem != null)
                {
                    if (selectedTestCaseItem.SaveButtonIsEnabled == true)
                        btnresult = MessageBox.Show("All your testcase changes will be lost, are you sure you want to close?", string.Empty, MessageBoxButton.YesNo, MessageBoxImage.Question);

                    if (selectedTestCaseItem.IsEditModeEnabled == true)
                        sourceTreeViewExplorer = selectedTestCaseItem.TestCaseTreeViewExplorer;
                }

                if (btnresult == MessageBoxResult.Yes)
                {
                    if (sourceTreeViewExplorer != null)
                        QscDatabase.SetEditedByItem(sourceTreeViewExplorer, string.Empty);

                    if (sourceElement.DataContext != null)
                        DesignerTabList.Remove(sourceElement.DataContext);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void listView_TestSuite_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceElement = sender as ListView;
                TreeViewExplorer sourceTreeViewExplorer = sourceElement.SelectedItem as TreeViewExplorer;
                if (sourceTreeViewExplorer == null)
                    return;

                OpenTreeViewItem(sourceTreeViewExplorer, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void lst_TestPlan_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView sourceElement = sender as ListView;
                TreeViewExplorer sourceTreeViewExplorer = sourceElement.SelectedItem as TreeViewExplorer;
                if (sourceTreeViewExplorer == null)
                    return;

                OpenTreeViewItem(sourceTreeViewExplorer, true);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void MenuAddItem2_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;
                if (sourceElement == null)
                    return;

                if (selectedItemsDesigner.Count <= 1)
                {
                    if (designerTreeContextMenuSource != null)
                        AddItemToParent(new List<TreeViewExplorer> { designerTreeContextMenuSource }, sourceElement.DataContext as TreeViewExplorer);
                }
                else
                {
                    AddItemToParent(selectedItemsDesigner, sourceElement.DataContext as TreeViewExplorer);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void AddItemToParent(List<TreeViewExplorer> sourceTreeViewExplorer, TreeViewExplorer TargetTreeViewExplorer)
        {
            try
            {
                TestSuiteItem selectedTestSuiteItem = null;
                TestPlanItem selectedTestPlanItem = null;

                QMessageBox = new QatMessageBox(this);
                if (sourceTreeViewExplorer == null || TargetTreeViewExplorer == null)
                    return;


                List<TreeViewExplorer> childrenList = new List<TreeViewExplorer>();
                if (TargetTreeViewExplorer.ItemType == QatConstants.DbTestSuiteTable)
                {
                    childrenList = QscDatabase.ReadTreeTable(QatConstants.DbTestPlanTable, TargetTreeViewExplorer.ItemKey, null, this);
                }
                else if (TargetTreeViewExplorer.ItemType == QatConstants.DbTestPlanTable)
                {
                    childrenList = QscDatabase.ReadTreeTable(QatConstants.DbTestCaseTable, TargetTreeViewExplorer.ItemKey, null, this);
                }

                string availableItems = string.Empty;
                string newItems = string.Empty;

                foreach (TreeViewExplorer item in sourceTreeViewExplorer)
                {
                    if (childrenList.Find(x => x.ItemName == item.ItemName) != null)
                    {
                        availableItems += item.ItemName + "\n";
                    }
                    else
                    {
                        newItems += item.ItemName + "\n";
                    }
                }

                MessageBoxResult result = MessageBoxResult.Cancel;

                result = QMessageBox.Show("\n Do you want to add items to " + TargetTreeViewExplorer.ItemName + "?\n\n Duplicate to the list: \n" + availableItems + "\n New to the list:\n " + newItems, "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Warning);

                if (result == MessageBoxResult.OK)
                {
                    QscDatabase.AddChildItemToParent(sourceTreeViewExplorer, TargetTreeViewExplorer);

                    foreach(var addItemToParent in DesignerTabList)
                    {
                        if(String.Equals(addItemToParent.GetType().ToString(), "QSC_Test_Automation.TestSuiteItem"))
                        {
                            selectedTestSuiteItem = addItemToParent as TestSuiteItem;
                            if ((selectedTestSuiteItem != null) && (selectedTestSuiteItem.TestSuiteID == TargetTreeViewExplorer.ItemKey))//&& ((selectedTestSuiteItem.IsEditModeEnabled) || (selectedTestSuiteItem.TestPlanListIsEnabled))
                            {
                                selectedTestSuiteItem.TestPlanListAddList(sourceTreeViewExplorer);
                                if (!selectedTestSuiteItem.IsEditModeEnabled)
                                    selectedTestSuiteItem.SaveButtonIsEnabled = false;

                            }
                        }
                        if (String.Equals(addItemToParent.GetType().ToString(), "QSC_Test_Automation.TestPlanItem"))
                        {
                            selectedTestPlanItem = addItemToParent as TestPlanItem;
                            if ((selectedTestPlanItem != null) && (selectedTestPlanItem.TestPlanID == TargetTreeViewExplorer.ItemKey))
                            {
                                selectedTestPlanItem.TestCaseListAddList(sourceTreeViewExplorer);
                                if (!selectedTestPlanItem.IsEditModeEnabled)
                                    selectedTestPlanItem.SaveButtonIsEnabled = false;

                            }
                        }                     
                    }
                }
                else
                    return;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_FreqVerificationBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                APXFreqResponseVerification sourceApxItem = null;
                var sourceButton = (Button)e.OriginalSource;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXFreqResponseVerification")
                    sourceApxItem = (APXFreqResponseVerification)sourceButton.DataContext;
                if (sourceApxItem == null)
                    return;
                else if (sourceApxItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Text Files (*.txt)|*.txt";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        //string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);
                        string apfileName = Path.GetFileName(openFileDialog.FileName);
                        if (!Regex.IsMatch(apfileName, @"[\\/:*?<>|""[\]&]"))
                        {
                            //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);

                            //string apfileName = name + Date_time_AP + extension;
                            sourceApxItem.txtFreqVerification = apfileName;
                            sourceApxItem.txtFreqVerificationpath = openFileDialog.FileName;
                            sourceApxItem.isVerficationFileLoaded = true;
                        }
                        else
                        {
                            MessageBox.Show("The TestPlan name can't contains any of the following characters: \n  " + @"\ / : * ? & "" < > [ ] |", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                            sourceApxItem.isVerficationFileLoaded = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_PhaseVerificationBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                APXInterChannelPhaseVerification sourceApxItem = null;
                var sourceButton = (Button)e.OriginalSource;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXInterChannelPhaseVerification")
                    sourceApxItem = (APXInterChannelPhaseVerification)sourceButton.DataContext;
                if (sourceApxItem == null)
                    return;
                else if (sourceApxItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Text Files (*.txt)|*.txt";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        //string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                        string apfileName= Path.GetFileName(openFileDialog.FileName);
                        if (!Regex.IsMatch(apfileName, @"[\\/:*?<>|""[\]&]"))
                        {
                            //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);
                            //string apfileName = name + Date_time_AP + extension;

                            sourceApxItem.txtPhaseVerification = apfileName;
                            sourceApxItem.txtPhaseVerificationPath = openFileDialog.FileName;
                            sourceApxItem.isVerficationFileLoaded = true;
                        }
                        else
                        {
                            MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                            sourceApxItem.isVerficationFileLoaded = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void btn_THDNBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                APXTHDNVerification sourceApxItem = null;
                var sourceButton = (Button)e.OriginalSource;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXTHDNVerification")
                    sourceApxItem = (APXTHDNVerification)sourceButton.DataContext;
                if (sourceApxItem == null)
                    return;
                else if (sourceApxItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Text Files (*.txt)|*.txt";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        //string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                        string apfileName = Path.GetFileName(openFileDialog.FileName);

                        if (!Regex.IsMatch(apfileName, @"[\\/:*?<>|""[\]&]"))
                        {
                            //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);
                            //string apfileName = name + Date_time_AP + extension;

                            sourceApxItem.txtTHDNVerification = apfileName;
                            sourceApxItem.txtTHDNVerificationPath = openFileDialog.FileName;
                            sourceApxItem.isVerficationFileLoaded = true;
                        }
                        else
                        {
                            MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                            sourceApxItem.isVerficationFileLoaded = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private void MenuDateCreated1_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //SetupTreeViewDesignerFromDB(true, "Date Created");
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_steppedFreqVerificationBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                APXSteppedFreqSweepVerification sourceApxItem = null;
                var sourceButton = (Button)e.OriginalSource;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.APXSteppedFreqSweepVerification")
                    sourceApxItem = (APXSteppedFreqSweepVerification)sourceButton.DataContext;
                if (sourceApxItem == null)
                    return;
                else if (sourceApxItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Text Files (*.txt)|*.txt";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        //string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                        string apfileName = Path.GetFileName(openFileDialog.FileName);

                        if (!Regex.IsMatch(apfileName, @"[\\/:*?<>|""[\]&]"))
                        {
                            //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);

                            //string apfileName = name + Date_time_AP + extension;

                            sourceApxItem.txtSteppedFreqVerification = apfileName;
                            sourceApxItem.txtSteppedFreqVerificationpath = openFileDialog.FileName;
                            sourceApxItem.isVerficationFileLoaded = true;
                        }
                        else
                        {
                            MessageBox.Show("The selected file shouldn't contains special characters", "Waring", MessageBoxButton.OK, MessageBoxImage.Information);
                            sourceApxItem.isVerficationFileLoaded = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UndoMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                UndoTestItem();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UndoTestItem()
        {
            try
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                bool isTestItemInEditMode = false;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (selectedTestCaseItem != null && isTestItemInEditMode)
                {

                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    selectedTestPlanItem.UndoProperty();
                }
                else if (selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    selectedTestSuiteItem.UndoProperty();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void RedoMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                RedoTestItem();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RedoTestItem()
        {
            try
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                bool isTestItemInEditMode = false;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (selectedTestCaseItem != null && isTestItemInEditMode)
                {

                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    selectedTestPlanItem.RedoProperty();
                }
                else if (selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    selectedTestSuiteItem.RedoProperty();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void btn_FindNext_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string findText = textBox_Find.Text;
                bool isItemFound = false;
                bool isOnlyOneItemFound = false;

                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                bool isTestItemInEditMode = false;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (selectedTestCaseItem != null && isTestItemInEditMode)
                {
                    if (!String.Equals(findText, selectedTestCaseItem.SelectedActionItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestCaseItem.SelectedActionItem.PreviousFindText = findText;
                        selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = "-1.-1.-1";
                    }

                    switch (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]))
                    {
                        case -1:
                            switch (selectedTestCaseItem.SelectedActionItem.ActionSelected)
                            {
                                case "Control Action":
                                    int startIndex = 0;
                                    int previousFindIndex = -1;

                                    if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]) == -1)
                                    {
                                        if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]) >= 0 && (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1])) < selectedTestCaseItem.SelectedActionItem.SetTestControlList.Count)
                                            startIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]);

                                        previousFindIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[2]);
                                    }

                                    for (int i = startIndex; i < selectedTestCaseItem.SelectedActionItem.SetTestControlList.Count; i++)
                                    {
                                        switch (previousFindIndex)
                                        {
                                            case -1:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem == null)
                                                {
                                                    goto case 0;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 0;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 0;
                                            case 0:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem == null)
                                                {
                                                    goto case 1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 1;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 1;
                                            case 1:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem == null)
                                                {
                                                    goto case 2;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 2;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 2;
                                            case 2:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem == null)
                                                {
                                                    goto case 3;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 3;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 3;
                                            case 3:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem == null)
                                                {
                                                    goto case 4;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 4;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 4;
                                            case 4:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem == null)
                                                {
                                                    goto default;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 5;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto default;
                                            default:
                                                previousFindIndex = -1;
                                                break;
                                        }

                                        if (isItemFound)
                                            break;
                                    }
                                    break;
                                case "Ssh/Telnet Action":
                                case "Firmware Action":
                                case "Designer Action":
                                case "Net Pairing Action":
                                case "USB Action":
                                case "Skip Action":
                                default:
                                    break;
                            }

                            if (isItemFound)
                                break;
                            goto case 0;
                        case 0:
                            switch (selectedTestCaseItem.SelectedActionItem.VerificationSelected)
                            {
                                case "Control Verification":
                                    int startIndex = 0;
                                    int previousFindIndex = -1;

                                    if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]) == 0)
                                    {
                                        if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]) >= 0 && (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1])) < selectedTestCaseItem.SelectedActionItem.VerifyTestControlList.Count)
                                            startIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]);

                                        previousFindIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[2]);
                                    }

                                    for (int i = startIndex; i < selectedTestCaseItem.SelectedActionItem.VerifyTestControlList.Count; i++)
                                    {
                                        switch (previousFindIndex)
                                        {
                                            case -1:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem == null)
                                                {
                                                    goto case 0;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 0;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 0;
                                            case 0:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem == null)
                                                {
                                                    goto case 1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 1;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 1;
                                            case 1:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem == null)
                                                {
                                                    goto case 2;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 2;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 2;
                                            case 2:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem == null)
                                                {
                                                    goto case 3;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 3;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 3;
                                            case 3:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem == null)
                                                {
                                                    goto case 4;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 4;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 4;
                                            case 4:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem == null)
                                                {
                                                    goto default;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 5;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto default;
                                            default:
                                                previousFindIndex = -1;
                                                break;
                                        }

                                        if (isItemFound)
                                            break;
                                    }
                                    break;
                                case "Ssh/Telnet Verification":
                                case "LUA Text Verification":
                                case "Log Verification":
                                case "Audio Precision Verification":
                                case "Responsalyzer":
                                case "USB verification":
                                case "Skip Action":
                                default:
                                    break;
                            }

                            if (isItemFound)
                                break;

                            goto default;
                        default:
                            if (selectedTestCaseItem.SelectedActionItem.PreviousFindIndex != "-1.-1.-1")
                                MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                            else
                                MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                            selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = "-1.-1.-1";
                            break;
                    }

                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    int startIndex = 0;

                    if (selectedTestPlanItem.TestCaseSelectedList.Count == 1)
                    {
                        int selectedIndex = selectedTestPlanItem.TestCaseList.IndexOf(selectedTestPlanItem.TestCaseSelectedList[0]);
                        if (selectedIndex >= 0 && selectedIndex != selectedTestPlanItem.PreviousFindIndex)
                            selectedTestPlanItem.PreviousFindIndex = -1;
                    }
                    else
                        selectedTestPlanItem.PreviousFindIndex = -1;


                    foreach (TreeViewExplorer item in selectedTestPlanItem.TestCaseSelectedList.ToList())
                    {
                        item.IsSelected = false;
                    }

                    if (!String.Equals(findText, selectedTestPlanItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestPlanItem.PreviousFindText = findText;
                        selectedTestPlanItem.PreviousFindIndex = -1;
                    }

                    if (selectedTestPlanItem.PreviousFindIndex >= 0 && (selectedTestPlanItem.PreviousFindIndex + 1) < selectedTestPlanItem.TestCaseList.Count)
                        startIndex = selectedTestPlanItem.PreviousFindIndex + 1;

                    for (int i = startIndex; i < selectedTestPlanItem.TestCaseList.Count; i++)
                    {
                        if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestPlanItem.TestCaseList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                        {
                            selectedTestPlanItem.TestCaseList[i].IsSelected = true;

                            if (selectedTestPlanItem.PreviousFindIndex == i)
                                isOnlyOneItemFound = true;

                            selectedTestPlanItem.PreviousFindIndex = i;
                            isItemFound = true;
                            break;
                        }
                    }

                    if (!isItemFound)
                    {
                        for (int i = 0; i < startIndex; i++)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestPlanItem.TestCaseList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestPlanItem.TestCaseList[i].IsSelected = true;

                                if (selectedTestPlanItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestPlanItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (isItemFound)
                    {
                        if (isOnlyOneItemFound)
                        {
                            MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    else
                    {
                        MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                    }
                }
                else if (selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    int startIndex = 0;

                    if (selectedTestSuiteItem.TestPlanSelectedList.Count == 1)
                    {
                        int selectedIndex = selectedTestSuiteItem.TestPlanList.IndexOf(selectedTestSuiteItem.TestPlanSelectedList[0]);
                        if (selectedIndex >= 0 && selectedIndex != selectedTestSuiteItem.PreviousFindIndex)
                            selectedTestSuiteItem.PreviousFindIndex = -1;
                    }
                    else
                        selectedTestSuiteItem.PreviousFindIndex = -1;


                    foreach (TreeViewExplorer item in selectedTestSuiteItem.TestPlanSelectedList.ToList())
                    {
                        item.IsSelected = false;
                    }

                    if (!String.Equals(findText, selectedTestSuiteItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestSuiteItem.PreviousFindText = findText;
                        selectedTestSuiteItem.PreviousFindIndex = -1;
                    }

                    if (selectedTestSuiteItem.PreviousFindIndex >= 0 && (selectedTestSuiteItem.PreviousFindIndex + 1) < selectedTestSuiteItem.TestPlanList.Count)
                        startIndex = selectedTestSuiteItem.PreviousFindIndex + 1;

                    for (int i = startIndex; i < selectedTestSuiteItem.TestPlanList.Count; i++)
                    {
                        if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestSuiteItem.TestPlanList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                        {
                            selectedTestSuiteItem.TestPlanList[i].IsSelected = true;

                            if (selectedTestSuiteItem.PreviousFindIndex == i)
                                isOnlyOneItemFound = true;

                            selectedTestSuiteItem.PreviousFindIndex = i;
                            isItemFound = true;
                            break;
                        }
                    }

                    if (!isItemFound)
                    {
                        for (int i = 0; i < startIndex; i++)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestSuiteItem.TestPlanList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestSuiteItem.TestPlanList[i].IsSelected = true;

                                if (selectedTestSuiteItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestSuiteItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (isItemFound)
                    {
                        if (isOnlyOneItemFound)
                        {
                            MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    else
                    {
                        MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void btn_FindPrevious_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string findText = textBox_Find.Text;
                bool isItemFound = false;
                bool isOnlyOneItemFound = false;

                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                bool isTestItemInEditMode = false;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (selectedTestCaseItem != null && isTestItemInEditMode)
                {
                    if (!String.Equals(findText, selectedTestCaseItem.SelectedActionItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestCaseItem.SelectedActionItem.PreviousFindText = findText;
                        selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = "-1.-1.-1";
                    }

                    switch (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]))
                    {
                        case -1:
                            switch (selectedTestCaseItem.SelectedActionItem.ActionSelected)
                            {
                                case "Control Action":
                                    int startIndex = selectedTestCaseItem.SelectedActionItem.SetTestControlList.Count - 1;
                                    int previousFindIndex = 4;

                                    if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]) == -1)
                                    {
                                        if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]) >= 0 && (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1])) < selectedTestCaseItem.SelectedActionItem.SetTestControlList.Count)
                                            startIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]);

                                        previousFindIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[2]) - 2;

                                    }

                                    for (int i = startIndex; i >= 0; i--)
                                    {
                                        switch (previousFindIndex)
                                        {
                                            case -1:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem == null)
                                                {
                                                    goto default;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentTypeSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 0;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto default;
                                            case 0:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem == null)
                                                {
                                                    goto case -1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlComponentNameSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 1;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case -1;
                                            case 1:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem == null)
                                                {
                                                    goto case 0;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertySelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 2;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 0;
                                            case 2:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem == null)
                                                {
                                                    goto case 1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].ChannelSelectionSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 3;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 1;
                                            case 3:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem == null)
                                                {
                                                    goto case 2;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].InputSelectionComboSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 4;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 2;
                                            case 4:
                                                if (selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem == null)
                                                {
                                                    goto case 3;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].TestControlPropertyInitialValueSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.SetTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = -1 + "." + i + "." + 5;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 3;
                                            default:
                                                previousFindIndex = 4;
                                                break;
                                        }

                                        if (isItemFound)
                                            break;
                                    }
                                    break;
                                case "Ssh/Telnet Action":
                                case "Firmware Action":
                                case "Designer Action":
                                case "Net Pairing Action":
								case "USB Action":
                                case "Skip Action":
                                default:
                                    break;
                            }

                            if (isItemFound)
                                break;
                            goto default;
                        case 0:
                            switch (selectedTestCaseItem.SelectedActionItem.VerificationSelected)
                            {
                                case "Control Verification":
                                    int startIndex = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList.Count - 1;
                                    int previousFindIndex = 4;

                                    if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[0]) == 0)
                                    {
                                        if (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]) >= 0 && (Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1])) < selectedTestCaseItem.SelectedActionItem.VerifyTestControlList.Count)
                                            startIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[1]);

                                        previousFindIndex = Convert.ToInt32(selectedTestCaseItem.SelectedActionItem.PreviousFindIndex.Split('.')[2]) - 2;
                                    }

                                    for (int i = startIndex; i >= 0; i--)
                                    {
                                        switch (previousFindIndex)
                                        {
                                            case -1:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem == null)
                                                {
                                                    goto default;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentTypeSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 0;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto default;
                                            case 0:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem == null)
                                                {
                                                    goto case -1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlComponentNameSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 1;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case -1;
                                            case 1:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem == null)
                                                {
                                                    goto case 0;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertySelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 2;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 0;
                                            case 2:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem == null)
                                                {
                                                    goto case 1;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].ChannelSelectionSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 3;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 1;
                                            case 3:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem == null)
                                                {
                                                    goto case 2;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].InputSelectionComboSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 4;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 2;
                                            case 4:
                                                if (selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem == null)
                                                {
                                                    goto case 3;
                                                }
                                                if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem, findText, CompareOptions.IgnoreCase) >= 0)
                                                {
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = true;
                                                    var itemValue = selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].TestControlPropertyInitialValueSelectedItem = itemValue;
                                                    selectedTestCaseItem.SelectedActionItem.VerifyTestControlList[i].isSkipSaveButtonEnable = false;

                                                    selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = 0 + "." + i + "." + 5;
                                                    isItemFound = true;
                                                    break;
                                                }
                                                goto case 3;
                                            default:
                                                previousFindIndex = -1;
                                                break;
                                        }

                                        if (isItemFound)
                                            break;
                                    }
                                    break;
                                case "Ssh/Telnet Verification":
                                case "LUA Text Verification":
                                case "Log Verification":
                                case "Audio Precision Verification":
                                case "Responsalyzer":
                                case "USB Verification":
                                case "Skip Action":
                                default:
                                    break;
                            }

                            if (isItemFound)
                                break;

                            goto case -1;
                        default:
                            if (selectedTestCaseItem.SelectedActionItem.PreviousFindIndex != "-1.-1.-1")
                                MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                            else
                                MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                            selectedTestCaseItem.SelectedActionItem.PreviousFindIndex = "-1.-1.-1";
                            break;
                    }
                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    int startIndex = 0;

                    if (selectedTestPlanItem.TestCaseSelectedList.Count == 1)
                    {
                        int selectedIndex = selectedTestPlanItem.TestCaseList.IndexOf(selectedTestPlanItem.TestCaseSelectedList[0]);
                        if (selectedIndex >= 0 && selectedIndex != selectedTestPlanItem.PreviousFindIndex)
                            selectedTestPlanItem.PreviousFindIndex = -1;
                    }
                    else
                        selectedTestPlanItem.PreviousFindIndex = -1;


                    foreach (TreeViewExplorer item in selectedTestPlanItem.TestCaseSelectedList.ToList())
                    {
                        item.IsSelected = false;
                    }

                    if (!String.Equals(findText, selectedTestPlanItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestPlanItem.PreviousFindText = findText;
                        selectedTestPlanItem.PreviousFindIndex = -1;
                    }

                    if (selectedTestPlanItem.PreviousFindIndex >= 0 && (selectedTestPlanItem.PreviousFindIndex - 1) >= 0)
                        startIndex = selectedTestPlanItem.PreviousFindIndex - 1;

                    if (!(startIndex == 0 && selectedTestPlanItem.PreviousFindIndex != 1))
                    {
                        for (int i = startIndex; i >= 0; i--)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestPlanItem.TestCaseList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestPlanItem.TestCaseList[i].IsSelected = true;

                                if (selectedTestPlanItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestPlanItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (!isItemFound)
                    {
                        for (int i = selectedTestPlanItem.TestCaseList.Count - 1; i >= startIndex; i--)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestPlanItem.TestCaseList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestPlanItem.TestCaseList[i].IsSelected = true;

                                if (selectedTestPlanItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestPlanItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (isItemFound)
                    {
                        if (isOnlyOneItemFound)
                        {
                            MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    else
                    {
                        MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                    }
                }
                else if (selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    int startIndex = 0;

                    if (selectedTestSuiteItem.TestPlanSelectedList.Count == 1)
                    {
                        int selectedIndex = selectedTestSuiteItem.TestPlanList.IndexOf(selectedTestSuiteItem.TestPlanSelectedList[0]);
                        if (selectedIndex >= 0 && selectedIndex != selectedTestSuiteItem.PreviousFindIndex)
                            selectedTestSuiteItem.PreviousFindIndex = -1;
                    }
                    else
                        selectedTestSuiteItem.PreviousFindIndex = -1;


                    foreach (TreeViewExplorer item in selectedTestSuiteItem.TestPlanSelectedList.ToList())
                    {
                        item.IsSelected = false;
                    }

                    if (!String.Equals(findText, selectedTestSuiteItem.PreviousFindText, StringComparison.CurrentCultureIgnoreCase))
                    {
                        selectedTestSuiteItem.PreviousFindText = findText;
                        selectedTestSuiteItem.PreviousFindIndex = -1;
                    }

                    if (selectedTestSuiteItem.PreviousFindIndex >= 0 && (selectedTestSuiteItem.PreviousFindIndex - 1) >= 0)
                        startIndex = selectedTestSuiteItem.PreviousFindIndex - 1;

                    if (!(startIndex == 0 && selectedTestSuiteItem.PreviousFindIndex != 1))
                    {
                        for (int i = startIndex; i >= 0; i--)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestSuiteItem.TestPlanList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestSuiteItem.TestPlanList[i].IsSelected = true;

                                if (selectedTestSuiteItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestSuiteItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (!isItemFound)
                    {
                        for (int i = selectedTestSuiteItem.TestPlanList.Count - 1; i >= startIndex; i--)
                        {
                            if (CultureInfo.CurrentCulture.CompareInfo.IndexOf(selectedTestSuiteItem.TestPlanList[i].ItemName, findText, CompareOptions.IgnoreCase) >= 0)
                            {
                                selectedTestSuiteItem.TestPlanList[i].IsSelected = true;

                                if (selectedTestSuiteItem.PreviousFindIndex == i)
                                    isOnlyOneItemFound = true;

                                selectedTestSuiteItem.PreviousFindIndex = i;
                                isItemFound = true;
                                break;
                            }
                        }
                    }

                    if (isItemFound)
                    {
                        if (isOnlyOneItemFound)
                        {
                            MessageBox.Show("No more occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                    }
                    else
                    {
                        MessageBox.Show("No occurances found", "Information", MessageBoxButton.OK, MessageBoxImage.Information);

                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void tabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                bool isTestItemInEditMode = false;

                if (selectedTestCaseItem != null)
                    isTestItemInEditMode = selectedTestCaseItem.IsEditModeEnabled;
                else if (selectedTestPlanItem != null)
                    isTestItemInEditMode = selectedTestPlanItem.IsEditModeEnabled;
                else if (selectedTestSuiteItem != null)
                    isTestItemInEditMode = selectedTestSuiteItem.IsEditModeEnabled;

                if (selectedTestCaseItem != null && isTestItemInEditMode)
                {
                    textBox_Find.IsEnabled = true;
                    button_FindNext.IsEnabled = true;
                    button_FindPrevious.IsEnabled = true;
                }
                else if (selectedTestPlanItem != null && isTestItemInEditMode)
                {
                    textBox_Find.IsEnabled = true;
                    button_FindNext.IsEnabled = true;
                    button_FindPrevious.IsEnabled = true;
                }
                else if (selectedTestSuiteItem != null && isTestItemInEditMode)
                {
                    textBox_Find.IsEnabled = true;
                    button_FindNext.IsEnabled = true;
                    button_FindPrevious.IsEnabled = true;
                }
                else
                {
                    textBox_Find.IsEnabled = false;
                    button_FindNext.IsEnabled = false;
                    button_FindPrevious.IsEnabled = false;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void toDatePicker_CalendarOpened(object sender, RoutedEventArgs e)
        {
            toDatePicker.SelectedDate = null;
        }

        private void comboSortValueSelection1_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            e.Handled = true;
        }

        private void comboSortTypeSelection_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            e.Handled = true;
        }

        private void btn_VerifyResponsalyzerMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestResponsalyzerItem originalTestResponsalyzerItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestResponsalyzerItem"))
                    originalTestResponsalyzerItem = (TestResponsalyzerItem)selectedComboBox.DataContext;

                if (originalTestResponsalyzerItem == null)
                    return;

                originalTestResponsalyzerItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                originalTestResponsalyzerItem.ParentTestActionItem.RemoveTestResponsalyzerItem(originalTestResponsalyzerItem);

                if (originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList.Count == 0)
                    originalTestResponsalyzerItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_VerifyResponsalyzerCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestResponsalyzerItem originalTestResponsalyzerItem = sourceElement.DataContext as TestResponsalyzerItem;
                if (originalTestResponsalyzerItem == null)
                    return;

                originalTestResponsalyzerItem.ParentTestActionItem.AddVerifyTestResponsalyzerItem(originalTestResponsalyzerItem);
                originalTestResponsalyzerItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                // DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_VerifyResponsalyzerMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestResponsalyzerItem originalTestResponsalyzerItem = sourceElement.DataContext as TestResponsalyzerItem;
                if (originalTestResponsalyzerItem == null)
                    return;

                int index = originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList.IndexOf(originalTestResponsalyzerItem);
                TestResponsalyzerItem targetTestResponsalyzerItem = null;

                if (index > 0)
                {
                    targetTestResponsalyzerItem = originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index - 1];
                    originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index - 1] = originalTestResponsalyzerItem;
                    originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index] = targetTestResponsalyzerItem;
                    originalTestResponsalyzerItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
                //DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btn_VerifyResponsalyzerMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestResponsalyzerItem originalTestResponsalyzerItem = sourceElement.DataContext as TestResponsalyzerItem;
                if (originalTestResponsalyzerItem == null)
                    return;

                int index = originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList.IndexOf(originalTestResponsalyzerItem);
                TestResponsalyzerItem targetTestResponsalyzerItem = null;

                if (index < originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList.Count - 1)
                {
                    targetTestResponsalyzerItem = originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index + 1];
                    originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index + 1] = originalTestResponsalyzerItem;
                    originalTestResponsalyzerItem.ParentTestActionItem.verifyTestResponsalyzerList[index] = targetTestResponsalyzerItem;
                    originalTestResponsalyzerItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
               // DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }
        }

        private void btnVerifyFileBrowse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestResponsalyzerItem sourceTestResponsalyzerItem = null;
                var sourceButton = (Button)e.OriginalSource;
                if (sourceButton != null && sourceButton.DataContext != null && sourceButton.DataContext.GetType().ToString() == "QSC_Test_Automation.TestResponsalyzerItem")
                    sourceTestResponsalyzerItem = (TestResponsalyzerItem)sourceButton.DataContext;
                if (sourceTestResponsalyzerItem == null)
                    return;
                else if (sourceTestResponsalyzerItem != null)
                {
                    OpenFileDialog openFileDialog = new OpenFileDialog();
                    openFileDialog.Filter = "Text Files (*.txt)|*.txt";
                    if (openFileDialog.ShowDialog() == true)
                    {
                        //string Date_time_AP = string.Format("{0:[MM-dd-yyyy_hh-mm-ss]}", DateTime.Now);
                        //string name = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);
                        //string extension = System.IO.Path.GetExtension(openFileDialog.FileName);

                        //string apfileName = name + Date_time_AP + extension;

                        sourceTestResponsalyzerItem.TestResponsalyzerVerificationFile = openFileDialog.FileName;
                        sourceTestResponsalyzerItem.IsNewReferenceFile = true;
                        sourceTestResponsalyzerItem.CopyItemSource = false;
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                // MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
               // DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
            }

        }

//        private void Help_Click(object sender, RoutedEventArgs e)
//        {
//            try
//            {
//                HelpManual hlp = new HelpManual();
//                hlp.ShowHelp();
//            }
//            catch (Exception ex)
//            {
//                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
//#if DEBUG
//                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
//#endif
//                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
//            }
//        }

//        private void TestAction_KeyDown(object sender, KeyEventArgs e)
//        {
//            try
//            {
//                HelpManual hlp = new HelpManual();

//                if (e.Key.ToString() == Key.F1.ToString())
//                {
//                    hlp.ShowHelp();
//                }
//            }
//            catch (Exception ex)
//            {
//                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
//#if DEBUG
//                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
//#endif
//                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
//            }
//        }

        private void controlElement_TargetUpdated(object sender, DataTransferEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement != null)
                sourceElement.Focus();
        }

        private void TreeViewDesigner_keyDown(object sender, KeyEventArgs e)
        {
            //if (e.Key == Key.Escape)
            //{
            //    FrameworkElement sourceElement = e.OriginalSource as FrameworkElement;

            //    if (sourceElement == null)
            //        return;

            //    TreeViewExplorer originalTreeViewExplorer = sourceElement.DataContext as TreeViewExplorer;

            //    if (originalTreeViewExplorer.ItemType == "TestSuite")
            //    {
            //        Btn_TestSuitedelete_Click(null, null);
            //    }

            //    if (originalTreeViewExplorer.ItemName == "TestPlan")
            //    {
            //        Btn_TestPlanCancel_Click(null, null);
            //    }

            //    if (originalTreeViewExplorer.ItemName == "TestCase")
            //    {
            //        Btn_TestCaseCancel_Click(null, null);
            //    }
            //}
        }
        private void Tabcontrol_Keydown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                TestCaseItem selectedTestCaseItem = tabControl.SelectedItem as TestCaseItem;
                TestPlanItem selectedTestPlanItem = tabControl.SelectedItem as TestPlanItem;
                TestSuiteItem selectedTestSuiteItem = tabControl.SelectedItem as TestSuiteItem;

                if (selectedTestSuiteItem != null)
                {
                    TestSuiteCancel(selectedTestSuiteItem);
                }
                else if (selectedTestPlanItem != null)
                {
                    TestPlanCancel(selectedTestPlanItem);
                }
                else if (selectedTestCaseItem != null)
                {
                    TestCaseCancel(selectedTestCaseItem);
                }
            }
        }
//        public bool checkprocess(Process example)
//        {
//            try
//            {
//                if (!example.HasExited)
//                    return true;
//            }
//            catch (Exception ex)
//            {
//                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
//#if DEBUG
//                ExecutionMessageBox("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
//#endif
//                return false;
//            }
//            return false;
//        }
    
    private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo()
                {
                    //FileName = "\\\\1uscmsqadbd01\\QAT_Help",
                   FileName = QatConstants.HelpVideoPath,
                    UseShellExecute = true,
                    Verb = "open"
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show("Help video path is not accessible");

            }
        }

        private void MenuItem_Click_1(object sender, RoutedEventArgs e)
        {
            try
            {
                DeviceDiscovery.CreateOverviewWindow();
            }
            catch (Exception ex)
            {
              

            }
        }

        private void Import_Click(object sender, RoutedEventArgs e)
        {
            if (DeviceDiscovery.IsImportAlreadyExist == false)
            {
                DeviceDiscovery.CreateImportWindow();
            }
        }

        private void Export_Click(object sender, RoutedEventArgs e)
        {
            DeviceDiscovery.CreateExportWindow();
        }

        private List<string> GetFilesFormDB(List<string> serverPath, string query, string combine1, string combine2)
        {
            try
            {
                string[] fileType = new string[5] { "Sine", "Sine, Dual", "Sine, Var Phase", "Noise", "IMD" };

                DataTable designtble = QscDatabase.SendCommand_Toreceive(query);
                DataTableReader read = designtble.CreateDataReader();
                while (read.Read())
                {
                    if (combine2 == "AP Waveform Files")
                    {
                        string fileName = read[0].ToString();

                        if (!fileType.Contains(fileName))
                        {
                            string server = Path.Combine(combine1, combine2, read[0].ToString());

                            if (!serverPath.Contains(server))
                                serverPath.Add(server);
                        }
                    }
                    else
                    {
                        string server = Path.Combine(combine1, combine2, read[0].ToString());

                        if (!serverPath.Contains(server))
                            serverPath.Add(server);
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return serverPath;
        }

        public void saveXML(List<int> tpId, List<string> hasErrorMsg, List<string> serverfolderPath, string localPath, string serverPath, string[] savedfilepath)
        {
            try
            {
                XmlDocument xdoc = new XmlDocument();
                var tagName = "<Export>";
                List<string> tptablelist = new List<string>();

                SqlConnection sqlConnection = QscDatabase.CreateConnection();
                sqlConnection.Open();


                /////////User Details Tag (SQl vr, QAT vr, Export)
                string sqlServerVersion = HttpUtility.HtmlEncode(sqlConnection.ServerVersion);
                string QATVersion = "2.1";
                string DBName_Designer = HttpUtility.HtmlEncode(QatConstants.DbDatabaseName);
                string ExportedBy = HttpUtility.HtmlEncode(Properties.Settings.Default.TesterName);

                tagName += "<UserDetails><SQLVersion>" + sqlServerVersion + "</SQLVersion><QATVersion>" + QATVersion + "</QATVersion><DesignerDBName>" + DBName_Designer + "</DesignerDBName><ExportedDetails><ExportedBy>" + ExportedBy + "</ExportedBy><ExportedOn> " + DateTime.Now.ToString() + "</ExportedOn></ExportedDetails></UserDetails>";

                tagName += "<FileDetails>";

                string tpquery = "sp_fkeys 'Testplan'";
                System.Data.DataTable tptbl = QscDatabase.SelectDTWithParameter(tpquery, string.Empty, string.Empty);
                DataTableReader dtRead = tptbl.CreateDataReader();
                while (dtRead.Read())
                {
                    if (dtRead[6] != System.DBNull.Value)
                    {
                        tptablelist.Add(dtRead[6].ToString());
                    }
                }

                tagName += "<DesignFiles>";

                tagName += GetTagFileName(serverfolderPath, serverPath, hasErrorMsg, "Designs", "Designfile");

                tagName += "</DesignFiles><APFiles>";

                tagName += GetTagFileName(serverfolderPath, serverPath, hasErrorMsg, "AP Project Files", "APTemplate");

                tagName += GetTagFileName(serverfolderPath, serverPath, hasErrorMsg, "AP Waveform Files", "APGeneratorFile");

                tagName += GetTagFileName(serverfolderPath, serverPath, hasErrorMsg, "Verification Files", "APVerficationFile");

                tagName += "</APFiles><ResponsalyzerFiles>";

                tagName += GetTagFileName(serverfolderPath, serverPath, hasErrorMsg, "Responsalyzer", "ResponsalyzerFile");

                tagName += "</ResponsalyzerFiles></FileDetails><TestPlan>";

                string tpxmlquery = "select * from Testplan where TestPlanID in ('" + string.Join("','", tpId) + "') for xml auto";

                DataTable tpxmltble = QscDatabase.SendCommand_Toreceive(tpxmlquery);
                DataTableReader Readers = tpxmltble.CreateDataReader();
                while (Readers.Read())
                {
                    tagName += Readers[0].ToString();
                }

                tagName += "</TestPlan>";

                /////////////Get All values from DB
                foreach (string gett in tptablelist)
                {
                    List<string> designtablelist = new List<string>();

                    string tpquery1 = string.Empty;
                    string querys = string.Empty;
                    if (gett == "TPDesignLinkTable")
                    {
                        tpquery1 = "sp_fkeys 'designtable'";
                        designtablelist.Add("designtable");
                        querys = "select DesignID from " + gett + " where TPID in ('" + string.Join("','", tpId) + "')";
                    }
                    else if (gett == "TPMonitorLinkTable")
                    {
                        tpquery1 = "sp_fkeys 'BackgroundMonitoring'";
                        designtablelist.Add("BackgroundMonitoring");
                        querys = "select BMID from " + gett + " where TPID in ('" + string.Join("','", tpId) + "')";
                    }
                    else if (gett == "TPTCLinkTable")
                    {
                        tpquery1 = "sp_fkeys 'Testcase'";
                        designtablelist.Add("Testcase");
                        querys = "select TCID from " + gett + " where TPID in ('" + string.Join("','", tpId) + "')";
                    }

                    System.Data.DataTable tptbl1 = QscDatabase.SelectDTWithParameter(tpquery1, string.Empty, string.Empty);
                    DataTableReader dtRead2 = tptbl1.CreateDataReader();
                    while (dtRead2.Read())
                    {
                        if (dtRead2[6] != System.DBNull.Value)
                            designtablelist.Add(dtRead2[6].ToString());
                    }

                    List<int> designIdlist = new List<int>();

                    DataTable tbles = QscDatabase.SendCommand_Toreceive(querys);
                    DataTableReader dtRead1 = tbles.CreateDataReader();
                    while (dtRead1.Read())
                    {
                        if (dtRead1[0] != System.DBNull.Value)
                            designIdlist.Add(Convert.ToInt32(dtRead1[0]));
                    }

                    if (gett != "TSTPLinkTable")
                    {
                        tagName += "<" + gett + ">";

                        foreach (string designtable in designtablelist)
                        {
                            tagName += "<" + designtable + ">";

                            string query1 = string.Empty;

                            if (gett == "TPDesignLinkTable")
                            {
                                query1 = "select * from " + designtable + " where DesignID in ('" + string.Join("','", designIdlist) + "') for xml auto";
                            }
                            else if (gett == "TPMonitorLinkTable")
                            {
                                query1 = "select * from " + designtable + " where BMID in ('" + string.Join("','", designIdlist) + "') for xml auto";
                            }
                            else if (gett == "TPTCLinkTable")
                            {
                                if (designtable == "Testcase")
                                {
                                    query1 = "select * from " + designtable + " where TestcaseID in ('" + string.Join("','", designIdlist) + "') for xml auto";
                                }
                                else
                                {
                                    query1 = "select * from " + designtable + " where TCID in ('" + string.Join("','", designIdlist) + "') for xml auto";
                                }
                            }

                            DataTable tble1 = QscDatabase.SendCommand_Toreceive(query1);
                            DataTableReader Reader = tble1.CreateDataReader();
                            while (Reader.Read())
                            {
                                tagName += Reader[0].ToString();
                            }

                            tagName += "</" + designtable + ">";
                        }

                        tagName += "</" + gett + ">";
                    }
                }

                tagName += "</Export>";

                xdoc.LoadXml(tagName);
                xdoc.Save(localPath + "\\ExportXMLFile.xml");

                var lastFolder = Path.GetDirectoryName(localPath);
                var randomName = new DirectoryInfo(lastFolder).Name;


                ////Compress temp folder as Zip File
                string savedfileName = string.Empty;
                if (!savedfilepath[1].EndsWith(".zip"))
                {
                    savedfileName = savedfilepath[1] + ".zip";
                }
                else
                {
                    savedfileName = savedfilepath[1];
                }

                string zipPath = Path.Combine(savedfilepath[0], savedfileName);

                if (File.Exists(zipPath))
                {
                    zipPath = Path.Combine(savedfilepath[0], savedfileName + "_" + randomName + ".zip");
                }

                ZipFile.CreateFromDirectory(localPath, zipPath);

                /////Delete Temp directory

                var directorycreate = new DirectoryInfo(@"C:\Users\" + Environment.UserName + @"\AppData\Local\Temp\QATExportedFiles");
                System.IO.DirectoryInfo exportdir = new DirectoryInfo(directorycreate.FullName);

                DeleteFolder(exportdir);
                exportdir.Delete();

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private string GetTagFileName(List<string> serverfolderName, string serverPath, List<string> hasErrorMsg, string compareFile, string xmlheaderName)
        {
            string tagName = string.Empty;
            try
            {
                foreach (string fileName in serverfolderName)
                {
                    string file_name = Path.GetFileName(fileName);

                    string serverpathWithFile = Path.Combine(serverPath, fileName);

                    string[] filesplit = serverpathWithFile.Split(Path.DirectorySeparatorChar);

                    if (filesplit[filesplit.Count() - 2] == compareFile)
                    {
                        file_name = HttpUtility.HtmlEncode(file_name);

                        if (hasErrorMsg.Contains(serverpathWithFile))
                            tagName += @"<" + xmlheaderName + @" DesignFileName=""" + file_name + @""" IsExportSucces=""false"" />";
                        else
                            tagName += @"<" + xmlheaderName + @" DesignFileName=""" + file_name + @""" IsExportSucces=""true"" />";
                    }
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return tagName;
        }

        private void DeleteFolder(DirectoryInfo maintempdir)
        {
            try
            {
                foreach (FileInfo files in maintempdir.GetFiles())
                {
                    files.Attributes &= ~FileAttributes.ReadOnly;
                    files.Delete();
                }

                foreach (DirectoryInfo dir in maintempdir.GetDirectories())
                {
                    DeleteFolder(dir);
                    dir.Delete();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

       

        private void btn_VerifyCECMinus_Click(object sender, RoutedEventArgs e)
        {
            TestVerifyCECItem originalTestVerifyCECItem = null;

            Button selectedComboBox = sender as Button;
            if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestVerifyCECItem"))
                originalTestVerifyCECItem = (TestVerifyCECItem)selectedComboBox.DataContext;

            if (originalTestVerifyCECItem == null)
                return;

            originalTestVerifyCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            originalTestVerifyCECItem.ParentTestActionItem.RemoveVerifyTestCECItem(originalTestVerifyCECItem);
            if (originalTestVerifyCECItem.ParentTestActionItem.VerifyTestCECList.Count == 0)
            {
                originalTestVerifyCECItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
            }
        }

        private void btn_VerifyCECCopy_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyCECItem originalTestVerifyCECItem = sourceElement.DataContext as TestVerifyCECItem;
            if (originalTestVerifyCECItem == null)
                return;

            originalTestVerifyCECItem.ParentTestActionItem.AddVerifyTestCECItem(originalTestVerifyCECItem);
            originalTestVerifyCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
        }
        private void btn_VerifyCecMoveUp_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyCECItem originalTestCECItem = sourceElement.DataContext as TestVerifyCECItem;
            if (originalTestCECItem == null)
                return;

            int index = originalTestCECItem.ParentTestActionItem.VerifyTestCECList.IndexOf(originalTestCECItem);
            TestVerifyCECItem targetTestCECItem = null;

            if (index > 0)
            {
                targetTestCECItem = originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index - 1];
                originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index - 1] = originalTestCECItem;
                originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index] = targetTestCECItem;
                originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
        }
        private void btn_VerifyCecMoveDown_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyCECItem originalTestCECItem = sourceElement.DataContext as TestVerifyCECItem;
            if (originalTestCECItem == null)
                return;

            int index = originalTestCECItem.ParentTestActionItem.VerifyTestCECList.IndexOf(originalTestCECItem);
            TestVerifyCECItem targetTestCECItem = null;

            if (index < originalTestCECItem.ParentTestActionItem.VerifyTestCECList.Count - 1)
            {
                targetTestCECItem = originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index + 1];
                originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index + 1] = originalTestCECItem;
                originalTestCECItem.ParentTestActionItem.VerifyTestCECList[index] = targetTestCECItem;
                originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
        }
        private void btn_SetCecMoveUp_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestCECItem originalTestCECItem = sourceElement.DataContext as TestCECItem;
            if (originalTestCECItem == null)
                return;

            int index = originalTestCECItem.ParentTestActionItem.SetTestCECList.IndexOf(originalTestCECItem);
            TestCECItem targetTestCECItem = null;

            if (index > 0)
            {
                targetTestCECItem = originalTestCECItem.ParentTestActionItem.SetTestCECList[index - 1];
                originalTestCECItem.ParentTestActionItem.SetTestCECList[index - 1] = originalTestCECItem;
                originalTestCECItem.ParentTestActionItem.SetTestCECList[index] = targetTestCECItem;
                originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
        }
        private void btn_SetCECMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestCECItem originalTestCECItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestCECItem"))
                    originalTestCECItem = (TestCECItem)selectedComboBox.DataContext;

                if (originalTestCECItem == null)
                    return;

                originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestCECItem.ParentTestActionItem.RemoveSetTestCECItem(originalTestCECItem);
                if (originalTestCECItem.ParentTestActionItem.SetTestCECList.Count == 0)
                {
                    originalTestCECItem.ParentTestActionItem.ActionSelected = "Skip Action";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SetCECCopy_Click(object sender, RoutedEventArgs e)
        {
            try {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCECItem originalTestCECItem = sourceElement.DataContext as TestCECItem;
                if (originalTestCECItem == null)
                    return;

                originalTestCECItem.ParentTestActionItem.AddSetTestCECItem(originalTestCECItem);
                originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetCecMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestCECItem originalTestCECItem = sourceElement.DataContext as TestCECItem;
                if (originalTestCECItem == null)
                    return;

                int index = originalTestCECItem.ParentTestActionItem.SetTestCECList.IndexOf(originalTestCECItem);
                TestCECItem targetTestCECItem = null;

                if (index < originalTestCECItem.ParentTestActionItem.SetTestCECList.Count - 1)
                {
                    targetTestCECItem = originalTestCECItem.ParentTestActionItem.SetTestCECList[index + 1];
                    originalTestCECItem.ParentTestActionItem.SetTestCECList[index + 1] = originalTestCECItem;
                    originalTestCECItem.ParentTestActionItem.SetTestCECList[index] = targetTestCECItem;
                    originalTestCECItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetUserCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserActionItem originalTestUserItem = sourceElement.DataContext as TestUserActionItem;
                if (originalTestUserItem == null)
                    return;

                originalTestUserItem.ParentTestActionItem.AddSetTestUserItem(originalTestUserItem);
                originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetUserMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestUserActionItem originalTestUserItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestUserActionItem"))
                    originalTestUserItem = (TestUserActionItem)selectedComboBox.DataContext;

                if (originalTestUserItem == null)
                    return;

                originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestUserItem.ParentTestActionItem.RemoveSetTestUserItem(originalTestUserItem);
                if (originalTestUserItem.ParentTestActionItem.SetTestUserActionList.Count == 0)
                {
                    originalTestUserItem.ParentTestActionItem.ActionSelected = "Skip Action";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SetUserMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserActionItem originalTestUserItem = sourceElement.DataContext as TestUserActionItem;
                if (originalTestUserItem == null)
                    return;

                int index = originalTestUserItem.ParentTestActionItem.SetTestUserActionList.IndexOf(originalTestUserItem);
                TestUserActionItem targetTestUserItem = null;

                if (index > 0)
                {
                    targetTestUserItem = originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index - 1];
                    originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index - 1] = originalTestUserItem;
                    originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index] = targetTestUserItem;
                    originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetUserMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserActionItem originalTestUserItem = sourceElement.DataContext as TestUserActionItem;
                if (originalTestUserItem == null)
                    return;

                int index = originalTestUserItem.ParentTestActionItem.SetTestUserActionList.IndexOf(originalTestUserItem);
                TestUserActionItem targetTestUserItem = null;

                if (index < originalTestUserItem.ParentTestActionItem.SetTestUserActionList.Count - 1)
                {
                    targetTestUserItem = originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index + 1];
                    originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index + 1] = originalTestUserItem;
                    originalTestUserItem.ParentTestActionItem.SetTestUserActionList[index] = targetTestUserItem;
                    originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_VerifyUserCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserVerifyItem originalTestVerifyUserItem = sourceElement.DataContext as TestUserVerifyItem;
                if (originalTestVerifyUserItem == null)
                    return;

                originalTestVerifyUserItem.ParentTestActionItem.AddVerifyTestUserItem(originalTestVerifyUserItem);
                originalTestVerifyUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_VerifyUserMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestUserVerifyItem originalTestVerifyUserItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestUserVerifyItem"))
                    originalTestVerifyUserItem = (TestUserVerifyItem)selectedComboBox.DataContext;

                if (originalTestVerifyUserItem == null)
                    return;

                originalTestVerifyUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestVerifyUserItem.ParentTestActionItem.RemoveVerifyTestUserItem(originalTestVerifyUserItem);
                if (originalTestVerifyUserItem.ParentTestActionItem.VerifyTestUserList.Count == 0)
                {
                    originalTestVerifyUserItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }


        private void btn_VerifyUserMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserVerifyItem originalTestUserItem = sourceElement.DataContext as TestUserVerifyItem;
                if (originalTestUserItem == null)
                    return;

                int index = originalTestUserItem.ParentTestActionItem.VerifyTestUserList.IndexOf(originalTestUserItem);
                TestUserVerifyItem targetTestUserItem = null;

                if (index > 0)
                {
                    targetTestUserItem = originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index - 1];
                    originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index - 1] = originalTestUserItem;
                    originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index] = targetTestUserItem;
                    originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        private void btn_VerifyUserMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestUserVerifyItem originalTestUserItem = sourceElement.DataContext as TestUserVerifyItem;
                if (originalTestUserItem == null)
                    return;

                int index = originalTestUserItem.ParentTestActionItem.VerifyTestUserList.IndexOf(originalTestUserItem);
                TestUserVerifyItem targetTestUserItem = null;

                if (index < originalTestUserItem.ParentTestActionItem.VerifyTestUserList.Count - 1)
                {
                    targetTestUserItem = originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index + 1];
                    originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index + 1] = originalTestUserItem;
                    originalTestUserItem.ParentTestActionItem.VerifyTestUserList[index] = targetTestUserItem;
                    originalTestUserItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }


        private void btn_SetQRCMCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestActionQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestActionQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                originalTestQRCMItem.ParentTestActionItem.AddSetTestQRCMItem(originalTestQRCMItem);
                originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetQRCMMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestActionQRCMItem originalTestQRCMItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestActionQRCMItem"))
                    originalTestQRCMItem = (TestActionQRCMItem)selectedComboBox.DataContext;

                if (originalTestQRCMItem == null)
                    return;

                originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestQRCMItem.ParentTestActionItem.RemoveSetTestQRCMItem(originalTestQRCMItem);
                if (originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList.Count == 0)
                {
                    originalTestQRCMItem.ParentTestActionItem.ActionSelected = "Skip Action";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_SetQRCM_MoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestActionQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestActionQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                int index = originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList.IndexOf(originalTestQRCMItem);
                TestActionQRCMItem targetTestQRCMItem = null;

                if (index > 0)
                {
                    targetTestQRCMItem = originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index - 1];
                    originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index - 1] = originalTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index] = targetTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_SetQRCM_MoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestActionQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestActionQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                int index = originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList.IndexOf(originalTestQRCMItem);
                TestActionQRCMItem targetTestQRCMItem = null;

                if (index < originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList.Count - 1)
                {
                    targetTestQRCMItem = originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index + 1];
                    originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index + 1] = originalTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.SetTestQRCMActionList[index] = targetTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }



        private void btn_VerifyQRCMCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestVerifyQRCMItem originalTestVerifyQRCMItem = sourceElement.DataContext as TestVerifyQRCMItem;
                if (originalTestVerifyQRCMItem == null)
                    return;

                originalTestVerifyQRCMItem.ParentTestActionItem.AddVerifyTestQRCMItem(originalTestVerifyQRCMItem);
                originalTestVerifyQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_VerifyQRCMMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestVerifyQRCMItem originalTestVerifyQRCMItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestVerifyQRCMItem"))
                    originalTestVerifyQRCMItem = (TestVerifyQRCMItem)selectedComboBox.DataContext;

                if (originalTestVerifyQRCMItem == null)
                    return;

                originalTestVerifyQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestVerifyQRCMItem.ParentTestActionItem.RemoveVerifyTestQRCMItem(originalTestVerifyQRCMItem);
                if (originalTestVerifyQRCMItem.ParentTestActionItem.VerifyTestQRCMList.Count == 0)
                {
                    originalTestVerifyQRCMItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_VerifyQRCM_MoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestVerifyQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestVerifyQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                int index = originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList.IndexOf(originalTestQRCMItem);
                TestVerifyQRCMItem targetTestQRCMItem = null;

                if (index > 0)
                {
                    targetTestQRCMItem = originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index - 1];
                    originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index - 1] = originalTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index] = targetTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }

        private void btn_VerifyQRCM_MoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestVerifyQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestVerifyQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                int index = originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList.IndexOf(originalTestQRCMItem);
                TestVerifyQRCMItem targetTestQRCMItem = null;

                if (index < originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList.Count - 1)
                {
                    targetTestQRCMItem = originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index + 1];
                    originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index + 1] = originalTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.VerifyTestQRCMList[index] = targetTestQRCMItem;
                    originalTestQRCMItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }
        

        private void btn_SetUsbMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestUsbAudioBridging originalTestUsbItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestUsbAudioBridging"))
                    originalTestUsbItem = (TestUsbAudioBridging)selectedComboBox.DataContext;

                if (originalTestUsbItem == null)
                    return;

                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestUsbItem.ParentTestActionItem.RemoveSetTestUsbItem(originalTestUsbItem);
                if (originalTestUsbItem.ParentTestActionItem.SetTestUsbList.Count == 0)
                {
                    originalTestUsbItem.ParentTestActionItem.ActionSelected = "Skip Action";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmb_ScriptDevicenamelist_DropDownOpened(object sender, EventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestScriptVerification originalTestScriptItem = sourceElement.DataContext as TestScriptVerification;
                if (originalTestScriptItem == null)
                    return;

                if (originalTestScriptItem.VerifyScriptActionSelectedItem != "Deploy Monitoring" && originalTestScriptItem.VerifyScriptActionSelectedItem != "CPU Monitoring" && originalTestScriptItem.VerifyScriptActionSelectedItem != "LoadFromCore Monitoring")
                {
                    ObservableCollection<string> devicenamelist = new ObservableCollection<string>();
                    Dictionary<string, string> devicenameWithModel = new Dictionary<string, string>();

                    foreach (string item in DeviceDiscovery.availableDeviceList_script)
                    {
                        string[] splitvalues = item.Split(',');
                        if (!splitvalues[0].ToUpper().StartsWith("PTZ") && (!devicenamelist.Contains(splitvalues[1])))
                        {
                            devicenamelist.Add(splitvalues[1]);
                        }

                        if (!devicenameWithModel.Keys.Contains(splitvalues[1].ToLower()) && !string.IsNullOrEmpty(splitvalues[1].ToLower()))
                            devicenameWithModel.Add(splitvalues[1].ToLower(), splitvalues[0].ToLower());
                    }

                    if (devicenamelist.Count == 0 && originalTestScriptItem.DevicenamelistSelectedItem == null)
                    {
                        MessageBox.Show("No devices available in the device discovery list", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                    }

                    originalTestScriptItem.Devicenamelist = devicenamelist;
                    originalTestScriptItem.DevicenameWithModel = devicenameWithModel;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        private void btn_Verify_ScriptMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestScriptVerification originalTestScriptItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestScriptVerification"))
                    originalTestScriptItem = (TestScriptVerification)selectedComboBox.DataContext;

                if (originalTestScriptItem == null)
                    return;

                originalTestScriptItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                originalTestScriptItem.ParentTestActionItem.RemoveVerifyScriptItem(originalTestScriptItem);

                if (originalTestScriptItem.ParentTestActionItem != null && originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList != null)
                {
                    int cpuAndDeployCount = originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList.Where(x => x.VerifyScriptActionSelectedItem == "CPU Monitoring" || x.VerifyScriptActionSelectedItem == "Deploy Monitoring" || x.VerifyScriptActionSelectedItem == "LoadFromCore Monitoring").Count();

                    if (cpuAndDeployCount > 0)
                        originalTestScriptItem.ParentTestActionItem.ScriptExecuteIterationChkbxEnable = false;
                    else
                        originalTestScriptItem.ParentTestActionItem.ScriptExecuteIterationChkbxEnable = true;
                }         
                
                if (originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList.Count == 0)
                {
                    originalTestScriptItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
                }               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }


        private void btn_VerifyScriptCopy_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestScriptVerification originalTestScriptItem = sourceElement.DataContext as TestScriptVerification;
                if (originalTestScriptItem == null)
                    return;

                originalTestScriptItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                originalTestScriptItem.ParentTestActionItem.AddVerifyTestScriptItem(originalTestScriptItem);            
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

        }
          

        private void btn_VerifyScriptMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestScriptVerification originalTestScriptItem = sourceElement.DataContext as TestScriptVerification;
                if (originalTestScriptItem == null)
                    return;


                int index = originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList.IndexOf(originalTestScriptItem);           

                if (index > 0)
                {
                    TestScriptVerification targetTestScriptItem = originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index - 1];
                    originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index - 1] = originalTestScriptItem;
                    originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index] = targetTestScriptItem;
                    originalTestScriptItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }         
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }


        private void btn_VerifyScriptMoveDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestScriptVerification originalTestScriptItem = sourceElement.DataContext as TestScriptVerification;
                if (originalTestScriptItem == null)
                    return;

                int index = originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList.IndexOf(originalTestScriptItem);            

                if (index < originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList.Count - 1)
                {
                    TestScriptVerification targetTestScriptItem = originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index + 1];
                    originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index + 1] = originalTestScriptItem;
                    originalTestScriptItem.ParentTestActionItem.VerifyTestScriptList[index] = targetTestScriptItem;
                    originalTestScriptItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif

            }
        }


        private void btn_SetUsbCopy_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            originalTestUsbItem.ParentTestActionItem.AddSetTestUsbItem(originalTestUsbItem);
            originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
        }

        private void btn_SetUsbMoveDown_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            int index = originalTestUsbItem.ParentTestActionItem.SetTestUsbList.IndexOf(originalTestUsbItem);
            TestUsbAudioBridging targetTestUsbItem = null;

            if (index < originalTestUsbItem.ParentTestActionItem.SetTestUsbList.Count - 1)
            {
                targetTestUsbItem = originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index + 1];
                originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index + 1] = originalTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index] = targetTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
        }

        private void btn_SetUsbMoveUp_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            int index = originalTestUsbItem.ParentTestActionItem.SetTestUsbList.IndexOf(originalTestUsbItem);
            TestUsbAudioBridging targetTestUsbItem = null;

            if (index > 0)
            {
                targetTestUsbItem = originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index - 1];
                originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index - 1] = originalTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.SetTestUsbList[index] = targetTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
        }

        private void btn_VerifyUsbMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TestUsbAudioBridging originalTestUsbItem = null;

                Button selectedComboBox = sender as Button;
                if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestUsbAudioBridging"))
                    originalTestUsbItem = (TestUsbAudioBridging)selectedComboBox.DataContext;

                if (originalTestUsbItem == null)
                    return;

                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

                originalTestUsbItem.ParentTestActionItem.RemoveVerifyTestUsbItem(originalTestUsbItem);
                if (originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList.Count == 0)
                {
                    originalTestUsbItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - ECxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btn_VerifyUsbCopy_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            originalTestUsbItem.ParentTestActionItem.AddVerifyTestUsbItem(originalTestUsbItem);
            originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
        }

        private void btn_VerifyUsbMoveUp_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            int index = originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList.IndexOf(originalTestUsbItem);
            TestUsbAudioBridging targetTestUsbItem = null;

            if (index > 0)
            {
                targetTestUsbItem = originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index - 1];
                originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index - 1] = originalTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index] = targetTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
        }

        private void btn_VerifyUsbMoveDown_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestUsbAudioBridging originalTestUsbItem = sourceElement.DataContext as TestUsbAudioBridging;
            if (originalTestUsbItem == null)
                return;

            int index = originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList.IndexOf(originalTestUsbItem);
            TestUsbAudioBridging targetTestUsbItem = null;

            if (index < originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList.Count - 1)
            {
                targetTestUsbItem = originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index + 1];
                originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index + 1] = originalTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.VerifyTestUsbList[index] = targetTestUsbItem;
                originalTestUsbItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
        }

        private void SortbyCategoryMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                copiedItemsDesigner.Clear();

                txt_Search.Clear();
                summaryTextBox.Clear();
                comboSortTypeSelection.SelectedItem = null;
                comboSortValueSelection1.SelectedItem = null;
                fromDatePicker.SelectedDate = null;
                toDatePicker.SelectedDate = null;
                FilterValueSelection = Visibility.Hidden;
                FilterEndDate = Visibility.Hidden;
                FilterStartDate = Visibility.Hidden;
                FilterSummaryText = Visibility.Hidden;
                FilterTextBoxGrid = Visibility.Hidden;

                isDesignerFilterListSelected = false;
                isDesignerSearchListSelected = false;

                GroupByCategory_usingInventoryList(true, mstrOrders);
                mstrOrders_originalList = mstrOrders;
                Mouse.OverrideCursor = null;
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;

                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void SetupcategoryTreeViewDesignerFromDB(bool updateTreeView, string sortType)
        {
            try
            {
                DBConnection QscDatabase = new DBConnection();
                List<TreeViewExplorer> sortCategoryLists = new List<TreeViewExplorer>();


                List<TreeViewExplorer> CategoryLists = GetCategoryName(QatConstants.DbTestSuiteTable, QatConstants.DbTestPlanTable, QatConstants.DbTestCaseTable);

                if (sortType == "Descending" || sortType == "Ascending" || sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                {
                    mstrOrders = sortType;

                    TreeViewExplorer[] alphaTestSuiteSorted = CategoryLists.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());

                    if (sortType == "Descending"|| sortType == "Date Created Descending")
                        Array.Reverse(alphaTestSuiteSorted);

                    sortCategoryLists = alphaTestSuiteSorted.ToList();
                }
                else
                {
                    mstrOrders = "No order";
                    sortCategoryLists = CategoryLists;
                }

                List<TreeViewExplorer> treeViewExplorerCatList = new List<TreeViewExplorer>();
                if (treeViewExplorerCategoryList != null && treeViewExplorerCategoryList.Count > 0)
                    treeViewExplorerCatList = new List<TreeViewExplorer>(treeViewExplorerCategoryList);

                foreach (TreeViewExplorer category in sortCategoryLists)
                {
                    List<TreeViewExplorer> Header = new List<TreeViewExplorer>();

                    TreeViewExplorer categoryHeader = null;

                    if (treeViewExplorerCatList != null && treeViewExplorerCatList.Count > 0)
                    {
                        categoryHeader = treeViewExplorerCatList.Find(p => p.ItemName == category.ItemName);

                        if (categoryHeader != null)
                            category.IsExpanded = categoryHeader.IsExpanded;
                    }

                    List<TreeViewExplorer> testSuiteList = QscDatabase.ReadCategoryTreeTable(QatConstants.DbTestSuiteTable, category.ItemName, null, this);
                    List<TreeViewExplorer> sortedtestSuiteList = new List<TreeViewExplorer>();

                    if (testSuiteList.Count > 0)
                    {
                        if (sortType == "Descending" || sortType == "Ascending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                            Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());
                            if (sortType == "Descending")
                                Array.Reverse(alphaTestSuiteSorted);
                            sortedtestSuiteList = alphaTestSuiteSorted.ToList();
                        }
						else if(sortType== "Date Created Ascending"|| sortType == "Date Created Descending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                            Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                            if (sortType == "Date Created Descending")
                                Array.Reverse(alphaTestSuiteSorted);
                            sortedtestSuiteList = alphaTestSuiteSorted.ToList();
                        }
                        else if(sortType == "No order")
                        {
                            mstrOrders = "No order";
                            sortedtestSuiteList = testSuiteList;
                        }

                        TreeViewExplorer testSuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                        testSuiteHeader.ChildrenCountForView = sortedtestSuiteList.Count;
                        testSuiteHeader.ChildrenCountViewIsEnabled = true;

                        if (categoryHeader != null)
                        {
                            TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testSuiteHeader.ItemName);

                            if (catChild != null)
                                testSuiteHeader.IsExpanded = catChild.IsExpanded;
                        }

                        testSuiteHeader.AddChildrenList(sortedtestSuiteList);

                        Header.Add(testSuiteHeader);
                    }

                    List<TreeViewExplorer> testPlanList = QscDatabase.ReadCategoryTreeTable(QatConstants.DbTestPlanTable, category.ItemName, null, this);
                    List<TreeViewExplorer> sortedtestPlanList = new List<TreeViewExplorer>();
                    if (testPlanList.Count > 0)
                    {
                        if (sortType == "Descending" || sortType == "Ascending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestplanSorted = testPlanList.ToArray();
                            Array.Sort(alphaTestplanSorted, new AlphanumComparatorFast());
                            if (sortType == "Descending")
                                Array.Reverse(alphaTestplanSorted);
                            sortedtestPlanList = alphaTestplanSorted.ToList();
                        }
                        else if (sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestplanSorted = testPlanList.ToArray();
                            Array.Sort(alphaTestplanSorted, new AlphanumComparatorFast_DateTime());
                            if (sortType == "Date Created Descending")
                                Array.Reverse(alphaTestplanSorted);
                            sortedtestPlanList = alphaTestplanSorted.ToList();
                        }
                        else if (sortType == "No order")
                        {
                            mstrOrders = "No order";
                            sortedtestPlanList = testPlanList;
                        }

                        TreeViewExplorer testPlanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                        testPlanHeader.ChildrenCountForView = sortedtestPlanList.Count;
                        testPlanHeader.ChildrenCountViewIsEnabled = true;

                        if (categoryHeader != null)
                        {
                            TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testPlanHeader.ItemName);

                            if (catChild != null)
                                testPlanHeader.IsExpanded = catChild.IsExpanded;
                        }

                        testPlanHeader.AddChildrenList(sortedtestPlanList);
                        Header.Add(testPlanHeader);
                    }

                    List<TreeViewExplorer> testCaseList = QscDatabase.ReadCategoryTreeTable(QatConstants.DbTestCaseTable, category.ItemName, null, this);
                    List<TreeViewExplorer> sortedtestCaseList = new List<TreeViewExplorer>();

                    if (testCaseList.Count > 0)
                    {
                        if (sortType == "Descending" || sortType == "Ascending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestcaseSorted = testCaseList.ToArray();
                            Array.Sort(alphaTestcaseSorted, new AlphanumComparatorFast());
                            if (sortType == "Descending")
                                Array.Reverse(alphaTestcaseSorted);
                            sortedtestCaseList = alphaTestcaseSorted.ToList();
                        }
                        else if (sortType == "Date Created Ascending" || sortType == "Date Created Descending")
                        {
                            mstrOrders = sortType;

                            TreeViewExplorer[] alphaTestcaseSorted = testCaseList.ToArray();
                            Array.Sort(alphaTestcaseSorted, new AlphanumComparatorFast_DateTime());
                            if (sortType == "Date Created Descending")
                                Array.Reverse(alphaTestcaseSorted);
                            sortedtestCaseList = alphaTestcaseSorted.ToList();
                        }
                        else if (sortType == "No order")
                        {
                            mstrOrders = "No order";
                            sortedtestCaseList = testCaseList;
                        }

                        TreeViewExplorer testCaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                        testCaseHeader.ChildrenCountForView = sortedtestCaseList.Count;
                        testCaseHeader.ChildrenCountViewIsEnabled = true;

                        if (categoryHeader != null)
                        {
                            TreeViewExplorer catChild = categoryHeader.Children.Find(p => p.ItemName == testCaseHeader.ItemName);

                            if (catChild != null)
                                testCaseHeader.IsExpanded = catChild.IsExpanded;
                        }

                        testCaseHeader.AddChildrenList(sortedtestCaseList);
                        Header.Add(testCaseHeader);
                    }

                    category.AddChildrenList(Header);
                }

                //treeViewExplorerCategoryList.Clear();
                treeViewExplorerCategoryList = new ObservableCollection<TreeViewExplorer>(sortCategoryLists);

                if (updateTreeView == true)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                }

                isGroupByCategory = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        public void GroupByCategory_usingInventoryList(bool updateTreeView, string sortType)
        {
            
            try
            {
                DBConnection QscDatabase = new DBConnection();
                Dictionary<string,TreeViewExplorer> sortCategoryDict = new Dictionary<string, TreeViewExplorer>(StringComparer.CurrentCultureIgnoreCase);
                List<TreeViewExplorer> sortCategoryLists = new List<TreeViewExplorer>();

                List<TreeViewExplorer> CategoryLists = GetCategoryName(QatConstants.DbTestSuiteTable, QatConstants.DbTestPlanTable, QatConstants.DbTestCaseTable);

                if (sortType == "Descending" || sortType == "Ascending" || sortType == "Date Created Ascending" || sortType == "Date Created Descending" || sortType == "No order")
                {
                    mstrOrders = sortType;

                    TreeViewExplorer[] alphaTestSuiteSorted = CategoryLists.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast());

                    if (sortType == "Descending" || sortType == "Date Created Descending")
                        Array.Reverse(alphaTestSuiteSorted);

                    sortCategoryLists = alphaTestSuiteSorted.ToList();
                }
               

                foreach (TreeViewExplorer category in sortCategoryLists)
                {
                    sortCategoryDict.Add(category.ItemName, category);

                }
                List<TreeViewExplorer> testSuiteList = treeViewExplorerDesignerList[QatConstants.TveDesignerTestSuiteIndex].Children;
                List<TreeViewExplorer> testPlanList = treeViewExplorerDesignerList[QatConstants.TveDesignerTestPlanIndex].Children;
                List<TreeViewExplorer> testCaseList = treeViewExplorerDesignerList[QatConstants.TveDesignerTestCaseIndex].Children;
                if (sortType == "No order")
                {
                    mstrOrders= "Date Created Ascending";
                    TreeViewExplorer[] alphaTestSuiteSorted = testSuiteList.ToArray();
                    Array.Sort(alphaTestSuiteSorted, new AlphanumComparatorFast_DateTime());
                    testSuiteList = alphaTestSuiteSorted.ToList();

                    //TestPlan
                    TreeViewExplorer[] alphaTestPlanSorted = testPlanList.ToArray();
                    Array.Sort(alphaTestPlanSorted, new AlphanumComparatorFast_DateTime());
                    testPlanList = alphaTestPlanSorted.ToList();

                    //TestCase
                    TreeViewExplorer[] alphaTestCaseSorted = testCaseList.ToArray();
                    Array.Sort(alphaTestCaseSorted, new AlphanumComparatorFast_DateTime());
                    testCaseList = alphaTestCaseSorted.ToList();
                    MenuAscending1.IsChecked = MenuAscending2.IsChecked = true;
                    MenuascendingName.IsChecked = ascendingName.IsChecked = false;
                    MenuascendingCreatedOn.IsChecked = ascendingCreatedon.IsChecked = true;

                    MenuDecending1.IsChecked = MenuDecending2.IsChecked = false;
                    MenudecendingName.IsChecked = descendingName.IsChecked = false;
                    MenudecendingCreatedOn.IsChecked = descendingCreatedon.IsChecked = false;

                }                                           
                foreach (TreeViewExplorer testSuite in testSuiteList)
                { 
                    if(testSuite.Category== string.Empty)
                    {
                        TreeViewExplorer testsuiteHeader = sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                        if (testsuiteHeader == null)
                        {
                            TreeViewExplorer testSuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testSuiteHeader.AddChildren(testSuite);
                            testSuiteHeader.ChildrenCountForView = testSuiteHeader.Children.Count;
                            testSuiteHeader.ChildrenCountViewIsEnabled = true;
                            sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].AddChildren(testSuiteHeader);
                        }
                        else
                        {
                            testsuiteHeader.AddChildren(testSuite);
                            testsuiteHeader.ChildrenCountForView = testsuiteHeader.Children.Count;
                        }

                    }
                    else if(sortCategoryDict.ContainsKey(testSuite.Category))
                    { 
                        TreeViewExplorer testsuiteHeader = sortCategoryDict[testSuite.Category].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestSuiteTitle);
                         if (testsuiteHeader == null)
                         {
                         	TreeViewExplorer testSuiteHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestSuiteTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                         	testSuiteHeader.AddChildren(testSuite);
                         	testSuiteHeader.ChildrenCountForView = testSuiteHeader.Children.Count;
                         	testSuiteHeader.ChildrenCountViewIsEnabled = true;
                         	sortCategoryDict[testSuite.Category].AddChildren(testSuiteHeader);
                        }
                        else
                        {
                        	testsuiteHeader.AddChildren(testSuite);
                        	testsuiteHeader.ChildrenCountForView = testsuiteHeader.Children.Count;
                       }
                    }

                }
                foreach (TreeViewExplorer testPlan in testPlanList)
                {
                    if (testPlan.Category == string.Empty)
                    {
                        TreeViewExplorer testplanHeader = sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestPlanTitle);
                        if (testplanHeader == null)
                        {
                            TreeViewExplorer testPlanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testPlanHeader.AddChildren(testPlan);
                            testPlanHeader.ChildrenCountForView = testPlanHeader.Children.Count;
                            testPlanHeader.ChildrenCountViewIsEnabled = true;
                            sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].AddChildren(testPlanHeader);
                        }
                        else
                        {
                            testplanHeader.AddChildren(testPlan);
                            testplanHeader.ChildrenCountForView = testplanHeader.Children.Count;
                        }


                    }
                    else if (sortCategoryDict.ContainsKey(testPlan.Category))
                    {
                        TreeViewExplorer testplanHeader = sortCategoryDict[testPlan.Category].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestPlanTitle);
                        if (testplanHeader == null)
                        {
                            TreeViewExplorer testPlanHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestPlanTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testPlanHeader.AddChildren(testPlan);
                            testPlanHeader.ChildrenCountForView = testPlanHeader.Children.Count;
                            testPlanHeader.ChildrenCountViewIsEnabled = true;
                            sortCategoryDict[testPlan.Category].AddChildren(testPlanHeader);

                        }
                        else
                        {
                            testplanHeader.AddChildren(testPlan);
                            testplanHeader.ChildrenCountForView = testplanHeader.Children.Count;
                        }
                    }

                }
                foreach (TreeViewExplorer testCase in testCaseList)
                {
                    
                    if (testCase.Category == string.Empty)
                    {
                        TreeViewExplorer testcaseHeader = sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestCaseTitle);
                        if (testcaseHeader == null)
                        {
                            TreeViewExplorer testCaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testCaseHeader.AddChildren(testCase);
                            testCaseHeader.ChildrenCountForView = testCaseHeader.Children.Count;
                            testCaseHeader.ChildrenCountViewIsEnabled = true;
                            sortCategoryDict[QatConstants.TveDesignerOtherCatHeader].AddChildren(testCaseHeader);
                      
                        }
                        else
                        {
                            testcaseHeader.AddChildren(testCase);
                            testcaseHeader.ChildrenCountForView = testcaseHeader.Children.Count;
                           
                        }


                    }
                    
                    else if (sortCategoryDict.ContainsKey(testCase.Category))
                    {
                        //string.Equals(testCase.Category, "Graphic Equalizer", StringComparison.CurrentCultureIgnoreCase)
                       
                        TreeViewExplorer testcaseHeader = sortCategoryDict[testCase.Category].Children.Find(x => x.ItemName == QatConstants.TveDesignerTestCaseTitle);
                        if (testcaseHeader == null)
                        {
                            TreeViewExplorer testCaseHeader = new TreeViewExplorer(0, QatConstants.TveDesignerTestCaseTitle, QatConstants.TveDesignerHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                            testCaseHeader.AddChildren(testCase);
                            testCaseHeader.ChildrenCountForView = testCaseHeader.Children.Count;
                            testCaseHeader.ChildrenCountViewIsEnabled = true;
                            sortCategoryDict[testCase.Category].AddChildren(testCaseHeader);
                           
                        }
                        else
                        {
                            testcaseHeader.AddChildren(testCase);
                            testcaseHeader.ChildrenCountForView = testcaseHeader.Children.Count;
                            
                        }
                    }

                }
               
                 treeViewExplorerCategoryList = new ObservableCollection<TreeViewExplorer>(sortCategoryDict.Values);

                if (updateTreeView == true)
                {
                    TreeViewDesigner.DataContext = null;
                    TreeViewDesigner.DataContext = treeViewExplorerCategoryList;
                }

                isGroupByCategory = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private List<TreeViewExplorer> GetCategoryName(string tableName1, string tableName2, string tableName3)
        {
            List<TreeViewExplorer> categoryList = new List<TreeViewExplorer>();

            try
            {
                string query = "select distinct x.Category from (select Category from " + tableName1 + " union select Category from " + tableName2 + " union select Category from " + tableName3 + ") x";
                SqlCommand cmd1 = new SqlCommand(query, QscDatabase.CreateConnection());
                SqlDataAdapter dataAdapt = new SqlDataAdapter(cmd1);
                DataTable tbl = new DataTable();
                dataAdapt.Fill(tbl);

                bool hasEmptyRows = false;
                for (int i = 0; i < tbl.Rows.Count; i++)
                {
                    TreeViewExplorer tableRow = null;

                    if (tbl.Rows[i][0].ToString() != string.Empty)
                    {
                        tableRow = new TreeViewExplorer(0, tbl.Rows[i][0].ToString(), QatConstants.TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                    }
                    else
                    {
                        hasEmptyRows = true;
                    }

                    if (tableRow != null && !categoryList.Contains(tableRow))
                    {
                        categoryList.Add(tableRow);
                    }
                }

                if (hasEmptyRows == true)
                {
                    TreeViewExplorer tableRow = new TreeViewExplorer(0, QatConstants.TveDesignerOtherCatHeader, QatConstants.TveDesignerCatHeaderItemType, null, null, null, null, null, null, null, null, null, null, 0, true);
                    categoryList.Add(tableRow);
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return categoryList;
        }

        private void SortbyNoneMenuItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;

                //if (isDesignerFilterListSelected)
                //{
                //    SetupFilterTreeViewDesignerFromDB(true, mstrOrders);
                //}
                //else
                //{
                    //SetupTreeViewDesignerFromDB(true, mstrOrders);
                    GroupByNone_usingCategoryList(true, mstrOrders);
                mstrOrders_originalList = mstrOrders;
                    isDesignerFilterListSelected = false;
                    isDesignerSearchListSelected = false;
                //}

                copiedItemsDesigner.Clear();
                //RefreshFilterItem();

                isGroupByCategory = false;

                comboSortTypeSelection.SelectedItem = null;
                comboSortValueSelection1.SelectedItem = null;
                fromDatePicker.SelectedDate = null;
                toDatePicker.SelectedDate = null;
                txt_Search.Clear();
                summaryTextBox.Clear();
                
                FilterValueSelection = Visibility.Hidden;
                FilterEndDate = Visibility.Hidden;
                FilterStartDate = Visibility.Hidden;
                FilterSummaryText = Visibility.Hidden;
                FilterTextBoxGrid = Visibility.Hidden;

                //RefreshFilterItem();
                //RefreshFilterItemCategory();

                Mouse.OverrideCursor = null;
            }
            catch (Exception ex)
            {
                Mouse.OverrideCursor = null;
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - EC12062", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void MenuItem_Click_2(object sender, RoutedEventArgs e)
        {
            try
            {
                DeviceDiscovery.CreateShortcutWindow();
            }
            catch (Exception ex)
            {


            }
        }

        private void Menu_Item_MouseCapture(object sender, MouseEventArgs e)
        {
            try
            {
                if (designerTreeContextMenuSource != null)
                {
                    if (designerTreeContextMenuSource.IsRenameModeEnabled == true)
                    {
                        string oldModifiedName = designerTreeContextMenuSource.Modifiedby;
                        designerTreeContextMenuSource.RenameItem();

                        if (String.IsNullOrEmpty(oldModifiedName) || oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                        {
                            if (!String.IsNullOrEmpty(selectedItemsDesigner[0].Modifiedby))
                            {
                                if (!modifiedByList.ContainsKey(selectedItemsDesigner[0].Modifiedby))
                                    modifiedByList.Add(selectedItemsDesigner[0].Modifiedby, 1);
                                else
                                    modifiedByList[selectedItemsDesigner[0].Modifiedby] = modifiedByList[selectedItemsDesigner[0].Modifiedby] + 1;
                            }

                            if (!String.IsNullOrEmpty(oldModifiedName) && oldModifiedName != selectedItemsDesigner[0].Modifiedby)
                            {

                                if (modifiedByList.ContainsKey(oldModifiedName))
                                {
                                    if (modifiedByList[oldModifiedName] == 1)
                                        modifiedByList.Remove(oldModifiedName);
                                    else
                                        modifiedByList[oldModifiedName] = modifiedByList[oldModifiedName] - 1;
                                }


                            }
                        }
                        insertselectionItem();
                    }
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        private void listviewtestsuite_scrollchanged(object sender, ScrollChangedEventArgs e)
        {
            try
            {
               
                ScrollViewer _scrollViewer = sender as ScrollViewer;
              
                if (IsScrolltoEnd != string.Empty && IsScrolltoEnd == "Bottom")
                {
                    _scrollViewer.ScrollToEnd();
                    IsScrolltoEnd = "Bottom";
                }
                if (IsScrolltoEnd != string.Empty && IsScrolltoEnd != "Bottom")
                {
                    _scrollViewer.UpdateLayout();
                    _scrollViewer.ScrollToVerticalOffset((_scrollViewer.ScrollableHeight / ListviewTSCount) *
                                    (Convert.ToDouble(IsScrolltoEnd) + 1));
                }
                IsScrolltoEnd = string.Empty;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
   
        private void listviewtestplan_scrollchanged(object sender, ScrollChangedEventArgs e)
        {
            try
            {
                ScrollViewer _scrollViewer = sender as ScrollViewer;
                if (IsScrolltoEnd != string.Empty && IsScrolltoEnd == "Bottom")
                {
                    _scrollViewer.ScrollToEnd();
                    IsScrolltoEnd = "Bottom";
                }
                if (IsScrolltoEnd != string.Empty && IsScrolltoEnd != "Bottom")
                {
                    _scrollViewer.UpdateLayout();
                    _scrollViewer.ScrollToVerticalOffset((_scrollViewer.ScrollableHeight / ListviewTPCount) *
                                    (Convert.ToDouble(IsScrolltoEnd) + 1));
                }
                IsScrolltoEnd = string.Empty;

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        private void Treeviewdesigner_previewtextinput(object sender, TextCompositionEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text == null)
                    return;
                AdornerLayer TxtAdornerLayer = null;
                var rect = Text.GetRectFromCharacterIndex(Text.CaretIndex);
                var point = rect.BottomRight;
                if (Text != null)
                {
                    Text.TextChanged += Text_TextChanged1;
                    TxtAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                    Warning = new TextblockWarning(TxtAdornerLayer, point.X, point.Y);
                }
                if (Regex.IsMatch(e.Text, @"[\\/:*?<>'%|""[\]&]"))
                {
                    if (TxtAdornerLayer != null && Text != null)
                    {
                        Warning.Remove(TxtAdornerLayer, Text);
                        TxtAdornerLayer.Add(new TextblockWarning(Text, point.X, point.Y));
                    }
                    e.Handled = true;
                }
                else
                {
                    Warning.Remove(TxtAdornerLayer, Text);
                    e.Handled = false;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

        }

        private void Text_TextChanged1(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void textBox_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void RemoveAdornerFromTextBox(TextBox Text)
        {
            try
            {
                AdornerLayer TxtAdornerLayer = null;
                TxtAdornerLayer = AdornerLayer.GetAdornerLayer(TreeViewDesigner);
                if (Warning != null)
                    Warning.Remove(TxtAdornerLayer, Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

     

        private void textBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void Treeviewdesigner_LostFocus(object sender, KeyboardFocusChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if(Text!=null)
                RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void TCname_textBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void TestPlan_TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                TextBox Text = e.OriginalSource as TextBox;
                if (Text != null)
                    RemoveAdornerFromTextBox(Text);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        #region TreeviewItemSelection

        private void BringIntoView(TreeViewExplorer selected, string designerHeaderType)
        {
            try
            {
                int designerHeaderIndex = 0;
                if (designerHeaderType == "TestSuite")
                {
                    designerHeaderIndex = QatConstants.TveDesignerTestSuiteIndex;
                }
                else if (designerHeaderType == "TestPlan")
                {
                    designerHeaderIndex = QatConstants.TveDesignerTestPlanIndex;
                }
                else if (designerHeaderType == "TestCase")
                {
                    designerHeaderIndex = QatConstants.TveDesignerTestCaseIndex;
                }
                else if (designerHeaderType == "Header")
                {
                    selected.IsSelected = true;
                    return;
                }
                if (selected == null)
                    return;


                var index = treeViewExplorerDesignerList[designerHeaderIndex].Children.FindIndex(a => a.ItemName == selected.ItemName);
                if (index > -1)
                {

                    SelectTreeItem(index, designerHeaderIndex);
                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14010", MessageBoxButton.OK, MessageBoxImage.Error);
            }


        }

        private void SelectTreeItem(int selectedItemIndex, int designerHeaderIndex)
        {
            try
            {
                ItemsControl itemsControl = TreeViewDesigner;
                bool foundContainer = false;
                int index = designerHeaderIndex;

                // Access the custom VSP that exposes BringIntoView
                MyVirtualizingStackPanel itemsHost = FindVisualChild<MyVirtualizingStackPanel>(itemsControl);
                if (itemsHost != null)
                {
                    // Due to virtualization, BringIntoView may not predict the offset correctly the first time.
                    ItemsControl nextItemsControl = null;
                    while (nextItemsControl == null)
                    {
                        foundContainer = true;
                        itemsHost.BringIntoView(index);
                        Dispatcher.Invoke(DispatcherPriority.Background, (DispatcherOperationCallback)delegate (object unused)
                        {
                            nextItemsControl = (ItemsControl)itemsControl.ItemContainerGenerator.ContainerFromIndex(index);
                            return null;
                        }, null);
                    }

                    itemsControl = nextItemsControl;
                    itemsControl.ApplyTemplate();
                    itemsControl.UpdateLayout();
                }

                if (!foundContainer || (itemsControl == null))
                {
                    // Abort the operation
                    return;
                }

                MyVirtualizingStackPanel itemsHost1 = FindVisualChild<MyVirtualizingStackPanel>(itemsControl);
                if (itemsHost1 != null)
                {
                    // Due to virtualization, BringIntoView may not predict the offset correctly the first time.
                    ItemsControl nextItemsControl1 = null;
                    while (nextItemsControl1 == null)
                    {
                        foundContainer = true;
                        itemsHost1.BringIntoView(selectedItemIndex);
                        Dispatcher.Invoke(DispatcherPriority.Background, (DispatcherOperationCallback)delegate (object unused)
                        {
                            nextItemsControl1 = (ItemsControl)itemsControl.ItemContainerGenerator.ContainerFromIndex(selectedItemIndex);
                            return null;
                        }, null);
                    }

                    itemsControl = nextItemsControl1;
                    itemsControl.ApplyTemplate();
                    itemsControl.UpdateLayout();
                }

                // If the desired selection is found, select it
                TreeViewItem desiredSelection = itemsControl as TreeViewItem;
                if (desiredSelection != null)
                {
                    desiredSelection.IsSelected = true;
                    desiredSelection.Focus();
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14026F", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private T FindVisualChild<T>(Visual visual) where T : Visual
        {
            try
            {
                for (int i = 0; i < VisualTreeHelper.GetChildrenCount(visual); i++)
                {
                    Visual child = (Visual)VisualTreeHelper.GetChild(visual, i);
                    if (child != null)
                    {
                        T correctlyTyped = child as T;
                        if (correctlyTyped != null)
                        {
                            return correctlyTyped;
                        }

                        T descendent = FindVisualChild<T>(child);
                        if (descendent != null)
                        {
                            return descendent;
                        }
                    }
                }

                return null;
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "Error Code - EC14026F", MessageBoxButton.OK, MessageBoxImage.Error);
                return null;
            }
            
        }

        #endregion

     

        private void CECtextbx_PreviewTextinput(object sender, TextCompositionEventArgs e)
        {
          
                //int hexNumber;
                //e.Handled = !int.TryParse(e.Text, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out hexNumber);
            
            if(!vldRegex(e.Text))
            {
                e.Handled = true;
            }

        }
        public bool vldRegex(string strInput)
        {           
            Regex myRegex = new Regex("^[a-fA-F0-9:]+$");     
            bool isValid = false;          
          
               isValid = myRegex.IsMatch(strInput);           
       
            return isValid;
        }

        private void cectextbx_PreviewKeydown(object sender, KeyEventArgs e)
        {
            string text = string.Empty;

            if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
            {
                text = Clipboard.GetText();
                if(!vldRegex(text))
                {
                    e.Handled = true;
                }
            }
            

        }

        private void btn_VerifyQRMinus_Click(object sender, RoutedEventArgs e)
        {
           
            TestVerifyQRItem originalTestVerifyQRItem = null;

            Button selectedComboBox = sender as Button;
            if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestVerifyQRItem"))
                originalTestVerifyQRItem = (TestVerifyQRItem)selectedComboBox.DataContext;

            if (originalTestVerifyQRItem == null)
                return;

            originalTestVerifyQRItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            originalTestVerifyQRItem.ParentTestActionItem.RemoveVerifyTestQRItem(originalTestVerifyQRItem);
            if (originalTestVerifyQRItem.ParentTestActionItem.VerifyTestQRList.Count == 0)
            {
                originalTestVerifyQRItem.ParentTestActionItem.VerificationSelected = "Skip Verification";
            }
        
    }

        private void btn_VerifyQRCopy_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyQRItem originalTestVerifyQRItem = sourceElement.DataContext as TestVerifyQRItem;
            if (originalTestVerifyQRItem == null)
                return;

            originalTestVerifyQRItem.ParentTestActionItem.AddVerifyTestQRItem(originalTestVerifyQRItem);
            originalTestVerifyQRItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
        }

        private void btn_VerifyQRMoveUp_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyQRItem originalTestQRItem = sourceElement.DataContext as TestVerifyQRItem;
            if (originalTestQRItem == null)
                return;

            int index = originalTestQRItem.ParentTestActionItem.VerifyTestQRList.IndexOf(originalTestQRItem);
            TestVerifyQRItem targetTestQRItem = null;

            if (index > 0)
            {
                targetTestQRItem = originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index - 1];
                originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index - 1] = originalTestQRItem;
                originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index] = targetTestQRItem;
                originalTestQRItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;

            }
        }

        private void btn_VerifyQRMoveDown_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            TestVerifyQRItem originalTestQRItem = sourceElement.DataContext as TestVerifyQRItem;
            if (originalTestQRItem == null)
                return;

            int index = originalTestQRItem.ParentTestActionItem.VerifyTestQRList.IndexOf(originalTestQRItem);
            TestVerifyQRItem targetTestQRItem = null;

            if (index < originalTestQRItem.ParentTestActionItem.VerifyTestQRList.Count - 1)
            {
                targetTestQRItem = originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index + 1];
                originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index + 1] = originalTestQRItem;
                originalTestQRItem.ParentTestActionItem.VerifyTestQRList[index] = targetTestQRItem;
                originalTestQRItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
        }

        private void txt_verifyQRcode_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            string text = string.Empty;

            if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
            {
                text = Clipboard.GetText();
                if (text.Contains("'"))
                {
                    e.Handled = true;
                }
            }
        }

        private void txt_verifyQRcode_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            if (e.Text == "'")
            {
                e.Handled = true;
            }
        }

        private void listView_TestPlan_PreviewDragOver(object sender, DragEventArgs e)
        {
            try
            {
                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;
                if (dragData.DragSourceType == "TestPlanListView")
               {
                    ListView testplanItemListView = sender as ListView;
                    if (testplanItemListView == null)
                        return;
                    Grid testplanItemgrid = VisualTreeHelper.GetParent(testplanItemListView) as Grid;
                    if (testplanItemgrid == null)
                        return;
                    ScrollViewer testplanItemscrollviewer = testplanItemgrid.Parent as ScrollViewer;
                    if (testplanItemscrollviewer == null)
                        return;
                    double verticalPos = e.GetPosition(testplanItemListView).Y;
                    autoScrollListView(testplanItemscrollviewer, verticalPos);
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }

        }

        private void listView_TestSuite_PreviewDragOver(object sender, DragEventArgs e)
        {
            try
            {
                DragDropItem dragData = (DragDropItem)e.Data.GetData(typeof(DragDropItem));
                if (dragData == null)
                    return;
                if (dragData.DragSourceType == "TestSuiteListView")
                {
                    ListView testsuiteItemListView = sender as ListView;
                    if (testsuiteItemListView == null)
                        return;
                    Grid testsuiteItemgrid = VisualTreeHelper.GetParent(testsuiteItemListView) as Grid;
                    if (testsuiteItemgrid == null)
                        return;
                    ScrollViewer testSuiteItemScrollviewer = testsuiteItemgrid.Parent as ScrollViewer;
                    if (testSuiteItemScrollviewer == null)
                        return;
                    double verticalPos = e.GetPosition(testsuiteItemListView).Y;
                    autoScrollListView(testSuiteItemScrollviewer, verticalPos);

                }


            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        private void autoScrollListView(ScrollViewer scrollviewer, double verticalPos)
        {
            try
            {
                double offset = 20;
            
                double tolerance = 20;
             
                if (verticalPos < scrollviewer.VerticalOffset + tolerance) // Top of visible list
                {
                    scrollviewer.ScrollToVerticalOffset(scrollviewer.VerticalOffset - offset);
                }
                else if (verticalPos > (scrollviewer.VerticalOffset + scrollviewer.ActualHeight) - tolerance) // Bottom of visible list
                {
                    scrollviewer.ScrollToVerticalOffset(scrollviewer.VerticalOffset + offset);

                    }
                }

            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

       

      

        private void testSuiteList_Previewmousewheel(object sender, MouseWheelEventArgs e)
        {
          try
          {
                listView_Previewmousewheel(sender, e);
             
           }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void testPlanList_Previewmousewheel(object sender, MouseWheelEventArgs e)
        {
            try
            {
                listView_Previewmousewheel(sender, e);
               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }
        private void listView_Previewmousewheel(object sender, MouseWheelEventArgs e)
        {
            try
            {

                var eventArg = new MouseWheelEventArgs(e.MouseDevice, e.Timestamp, e.Delta);
                if (eventArg == null)
                    return;
                eventArg.RoutedEvent = UIElement.MouseWheelEvent;
                eventArg.Source = sender;
                var grid = ((Control)sender).Parent as UIElement;
                if (grid == null)
                    return;
                grid.RaiseEvent(eventArg);

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void btn_SelectPcapPlus_Click(object sender, RoutedEventArgs e)
        {
            TestLogItem originalLogItem = null;

            Button selectedComboBox = sender as Button;
            if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.TestLogItem"))
                originalLogItem = (TestLogItem)selectedComboBox.DataContext;

            if (originalLogItem == null)
                return;

            originalLogItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            originalLogItem.AddPcapItem();
        }

        private void btn_PcapMinus_Click(object sender, RoutedEventArgs e)
        {
            PcapItem originalPcapItem = null;

            Button selectedComboBox = sender as Button;
            if (selectedComboBox != null && selectedComboBox.DataContext != null && String.Equals(selectedComboBox.DataContext.GetType().ToString(), "QSC_Test_Automation.PcapItem"))
                originalPcapItem = (PcapItem)selectedComboBox.DataContext;

            if (originalPcapItem == null)
                return;

            originalPcapItem.ParentTestLogItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            originalPcapItem.ParentTestLogItem.RemovePcapItem(originalPcapItem);
        }

        private void btn_PcapCopy_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            PcapItem originalPcapItem = sourceElement.DataContext as PcapItem;
            if (originalPcapItem == null)
                return;

            originalPcapItem.ParentTestLogItem.AddPcapItem(originalPcapItem);
            originalPcapItem.ParentTestLogItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
        }

        private void btn_PcapMoveDown_Click(object sender, RoutedEventArgs e)
        {
            FrameworkElement sourceElement = sender as FrameworkElement;
            if (sourceElement == null)
                return;

            PcapItem originalPcapItem = sourceElement.DataContext as PcapItem;
            if (originalPcapItem == null)
                return;

            int index = originalPcapItem.ParentTestLogItem.SetTestPcapList.IndexOf(originalPcapItem);
            PcapItem targetPcapItem = null;

            if (index < originalPcapItem.ParentTestLogItem.SetTestPcapList.Count - 1)
            {
                targetPcapItem = originalPcapItem.ParentTestLogItem.SetTestPcapList[index + 1];
                originalPcapItem.ParentTestLogItem.SetTestPcapList[index + 1] = originalPcapItem;
                originalPcapItem.ParentTestLogItem.SetTestPcapList[index] = targetPcapItem;
                originalPcapItem.ParentTestLogItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
            }
        }

        private void btn_PcapMoveUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                PcapItem originalPcapItem = sourceElement.DataContext as PcapItem;
                if (originalPcapItem == null)
                    return;

                int index = originalPcapItem.ParentTestLogItem.SetTestPcapList.IndexOf(originalPcapItem);
                PcapItem targetPcapItem = null;

                if (index > 0)
                {
                    targetPcapItem = originalPcapItem.ParentTestLogItem.SetTestPcapList[index - 1];
                    originalPcapItem.ParentTestLogItem.SetTestPcapList[index - 1] = originalPcapItem;
                    originalPcapItem.ParentTestLogItem.SetTestPcapList[index] = targetPcapItem;
                    originalPcapItem.ParentTestLogItem.ParentTestActionItem.ParentTestCaseItem.SaveButtonIsEnabled = true;
                }
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n " + ex.Message, "QAT Error Code - ECxxxxx", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Script_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                CheckBox sourceButton = sender as CheckBox;
                if (sourceButton == null)
                    return;

                TestPlanItem sourceTestPlanItem = sourceButton.DataContext as TestPlanItem;
                if (sourceTestPlanItem == null)
                    return;

                if(sourceButton.IsChecked== false)
                {
                    sourceTestPlanItem.IsNewTestDesign = true;
                    if (sourceTestPlanItem.TestItemName == null || sourceTestPlanItem.TestItemName.Trim() == string.Empty)
                    {
                        MessageBox.Show("Name is empty\n", "QAT Error Message", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }                 

                    sourceTestPlanItem.DesignName = "QAT_" + sourceTestPlanItem.TestItemName.Trim() + "_V" + (sourceTestPlanItem.DesignNameList.Count+1).ToString() + "_NO_QSYS_DESIGN";
                  
                }
                else
                {                
                    sourceTestPlanItem.DesignName = string.Empty;
                    sourceTestPlanItem.IsNewTestDesign = false;
             
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void Pcap_Txtbox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {                
                //if (e.Key==Key.OemSemicolon)
                //{                   
                //        e.Handled = true;

                //    base.OnPreviewKeyDown(e);
                //}
                
                if (e.Key == Key.V && Keyboard.Modifiers == ModifierKeys.Control)
                {
                    if (Clipboard.GetText().Contains(";"))                    
                        e.Handled = true;   

                    base.OnPreviewKeyDown(e);
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void Pcap_Txtbox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
           try
             {
                if (e.Text == ";")
                    e.Handled = true;
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void SetPayload_btn_click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestActionQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestActionQRCMItem;
                if (originalTestQRCMItem == null)
                    return;
              
                QRCM_Treeview qrcmWindow = new QRCM_Treeview(originalTestQRCMItem.SetPayloadContent, originalTestQRCMItem.QRCM_MethodsSelectedItem,originalTestQRCMItem.PayloadKey, true);
                qrcmWindow.Owner = this;
                qrcmWindow.ShowDialog();
                if (qrcmWindow.treeviewJSONDataToReturn.Trim() != string.Empty)
                    originalTestQRCMItem.SetPayloadContent = qrcmWindow.treeviewJSONDataToReturn.Trim();
					
                qrcmWindow.Close();
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void SetReference_btn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;

                TestVerifyQRCMItem originalTestQRCMItem = sourceElement.DataContext as TestVerifyQRCMItem;
                if (originalTestQRCMItem == null)
                    return;

                QRCM_Treeview qrcmWindow = new QRCM_Treeview(originalTestQRCMItem.SetReferenceContent, originalTestQRCMItem.QRCM_MethodsSelectedItem, originalTestQRCMItem.ReferenceKey,false);
                qrcmWindow.Owner = this;
                qrcmWindow.ShowDialog();
                if (qrcmWindow.treeviewJSONDataToReturn.Trim()!= string.Empty)
                  originalTestQRCMItem.SetReferenceContent = qrcmWindow.treeviewJSONDataToReturn.Trim();
				  
                qrcmWindow.Close();                
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }


        private void cmb_QRCMActionMethodName_DropDownOpened(object sender, EventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;
                TestActionQRCMItem sourceTestItem = sourceElement.DataContext as TestActionQRCMItem;

                if(sourceTestItem!= null &&(string.IsNullOrEmpty(sourceTestItem.ParentTestActionItem.ActionQRCMVersionSelected)))
                     MessageBox.Show("Please select QRCM reference version", "Error", MessageBoxButton.OK, MessageBoxImage.Error);               
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void cmb_QRCMVerifyMethodName_DropDownOpened(object sender, EventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;
                TestVerifyQRCMItem sourceTestItem = sourceElement.DataContext as TestVerifyQRCMItem;

                if (sourceTestItem != null && (string.IsNullOrEmpty(sourceTestItem.ParentTestActionItem.VerifyQRCMVersionSelected)))
                    MessageBox.Show("Please select QRCM reference version", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }      
        

        private void cmbActionQRCMversion_DropDownClosed(object sender, EventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;
                TestActionItem sourceTestItem = sourceElement.DataContext as TestActionItem;

                if (sourceTestItem.ActionQRCMVersionSelected != sourceTestItem.ActionQRCMPreVerSelected)
                {
                    MessageBoxResult result = MessageBoxResult.Yes;

                    if(sourceTestItem.ActionQRCMPreVerSelected!=null)
                       result = MessageBox.Show("QRCM action values will be lost, are you sure you want to change version?", "Warning", MessageBoxButton.YesNo, MessageBoxImage.Warning);

                    if (result == MessageBoxResult.Yes)
                    {
                    sourceTestItem.ActionQRCMPreVerSelected = sourceTestItem.ActionQRCMVersionSelected;
                    if (sourceTestItem != null && sourceTestItem.ActionQRCMVersionSelected != null && sourceTestItem.ActionQRCMVersionSelected != string.Empty)
                    {
                        if (sourceTestItem.ParentTestCaseItem.QRCMDictionary.Count > 0 && sourceTestItem.ParentTestCaseItem.QRCMDictionary.Keys.Contains(sourceTestItem.ActionQRCMVersionSelected))
                        {
                            ObservableCollection<QRCMInitialValues> CurrentVersionValues = sourceTestItem.ParentTestCaseItem.QRCMDictionary[sourceTestItem.ActionQRCMVersionSelected];
                            List<string> methodNamesAction = new List<string>();

                            foreach (QRCMInitialValues item in CurrentVersionValues)
                            {
                                if (item.IsActionTrue)
                                    methodNamesAction.Add(item.MethodNameUserView);
                            }

                            string[] methodNamesActionArraylist = methodNamesAction.ToArray();
                            Array.Sort(methodNamesActionArraylist, new AlphanumComparatorFaster());
                            ObservableCollection<string> methodsNameActionList = new ObservableCollection<string>(methodNamesActionArraylist.ToList());

                            foreach (TestActionQRCMItem setQRCMaction in sourceTestItem.SetTestQRCMActionList)
                            {
                                string methodname = setQRCMaction.QRCM_MethodsSelectedItem;

                                setQRCMaction.QRCM_MethodsInitialValues = CurrentVersionValues;
                                setQRCMaction.ActionQRCM_MethodsList = methodsNameActionList;

                                if (methodname != null && methodsNameActionList.Contains(methodname))
                                {
                                    setQRCMaction.QRCM_MethodsSelectedItem = methodname;
                                }
                            }
                        }
                    }
                }
                    else if(result== MessageBoxResult.No)
                    {
                       sourceTestItem.ActionQRCMVersionSelected = sourceTestItem.ActionQRCMPreVerSelected;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void cmbVerifyQRCMversion_DropDownClosed(object sender, EventArgs e)
        {
            try
            {
                FrameworkElement sourceElement = sender as FrameworkElement;
                if (sourceElement == null)
                    return;
                TestActionItem sourceTestItem = sourceElement.DataContext as TestActionItem;

                if (sourceTestItem.VerifyQRCMVersionSelected != sourceTestItem.VerifyQRCMPreVerSelected)
                {
                    MessageBoxResult result = MessageBoxResult.Yes;

                    if (sourceTestItem.VerifyQRCMPreVerSelected != null)
                        result = MessageBox.Show("QRCM verification values will be lost, are you sure you want to change version?", "Warning", MessageBoxButton.YesNo, MessageBoxImage.Warning);

                    if (result == MessageBoxResult.Yes)
                {
                    sourceTestItem.VerifyQRCMPreVerSelected = sourceTestItem.VerifyQRCMVersionSelected;

                    if (sourceTestItem != null && sourceTestItem.VerifyQRCMVersionSelected != null && sourceTestItem.VerifyQRCMVersionSelected != string.Empty)
                    {
                        if (sourceTestItem.ParentTestCaseItem.QRCMDictionary.Count > 0 && sourceTestItem.ParentTestCaseItem.QRCMDictionary.Keys.Contains(sourceTestItem.VerifyQRCMVersionSelected))
                        {
                            ObservableCollection<QRCMInitialValues> CurrentVersionValues = sourceTestItem.ParentTestCaseItem.QRCMDictionary[sourceTestItem.VerifyQRCMVersionSelected];
                            List<string> methodNamesVerify = new List<string>();

                            foreach (QRCMInitialValues item in CurrentVersionValues)
                            {
                                if (!item.IsActionTrue)
                                    methodNamesVerify.Add(item.MethodNameUserView);
                            }


                            string[] methodNameVerifyArraylist = methodNamesVerify.ToArray();
                            Array.Sort(methodNameVerifyArraylist, new AlphanumComparatorFaster());
                            ObservableCollection<string> methodsNameVerifyList = new ObservableCollection<string>(methodNameVerifyArraylist.ToList());

                            foreach (TestVerifyQRCMItem setQRCMverification in sourceTestItem.VerifyTestQRCMList)
                            {
                                string methodname = setQRCMverification.QRCM_MethodsSelectedItem;

                                setQRCMverification.QRCM_MethodsInitialValues = CurrentVersionValues;
                                setQRCMverification.VerifyQRCM_MethodsList = methodsNameVerifyList;

                                if (methodname != null && methodsNameVerifyList.Contains(methodname))
                                {
                                    setQRCMverification.QRCM_MethodsSelectedItem = methodname;
                                }
                            }
                        }
                    }
                }
                    else if (result == MessageBoxResult.No)
                    {
                        sourceTestItem.VerifyQRCMVersionSelected = sourceTestItem.VerifyQRCMPreVerSelected;
                    }
                }

            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif               
            }
        }

        private void cmbActionQRCMversion_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            try
            {
                e.Handled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        private void cmbActionQRCMversion_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                e.Handled = true;
            }
            catch (Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

    }

    //public class Alphanumericcomparison : IComparer
    //{
    //    public int Compare(object obj1, object obj2)
    //    {
    //        TreeViewExplorer firstItemName = obj1 as TreeViewExplorer;
    //        TreeViewExplorer secondItemName = obj2 as TreeViewExplorer;
    //        string itemName1 = firstItemName.ItemName;
    //        if (itemName1 == null)
    //        {
    //            return 0;
    //        }
    //        string itemName2 = firstItemName.ItemName;
    //        if (itemName2 == null)
    //        {
    //            return 0;
    //        }

    //        int itemLen1 = itemName1.Length;
    //        int itemLen2 = itemName2.Length;
    //        int itemMarker1 = 0;
    //        int itemMarker2 = 0;

    //        while (itemMarker1 < itemLen1 && itemMarker2 < itemLen2)
    //        {
    //            char character1 = itemName1[itemMarker1];
    //            char character2 = itemName2[itemMarker2];


    //            char[] characterspace1 = new char[itemLen1];
    //            int location1 = 0;
    //            char[] characterspace2 = new char[itemLen2];
    //            int location2 = 0;


    //            do
    //            {
    //                characterspace1[location1++] = character1;
    //                itemMarker1++;

    //                if (itemMarker1 < itemLen1)
    //                {
    //                    character1 = itemName1[itemMarker1];
    //                }
    //                else
    //                {
    //                    break;
    //                }
    //            } while (char.IsDigit(character1) == char.IsDigit(characterspace1[0]));

    //            do
    //            {
    //                characterspace2[location2++] = character2;
    //                itemMarker2++;

    //                if (itemMarker2 < itemLen2)
    //                {
    //                    character2 = itemName2[itemMarker2];
    //                }
    //                else
    //                {
    //                    break;
    //                }
    //            } while (char.IsDigit(character2) == char.IsDigit(characterspace2[0]));

    //            string numericstr1 = new string(characterspace1);
    //            string numericstr2 = new string(characterspace2);

    //            int verdict;

    //            if (char.IsDigit(characterspace1[0]) && char.IsDigit(characterspace2[0]))
    //            {
    //                int currentNumericChunk = int.Parse(numericstr1);
    //                int previousNumericChunk = int.Parse(numericstr2);
    //                verdict = currentNumericChunk.CompareTo(previousNumericChunk);
    //            }
    //            else
    //            {
    //                verdict = numericstr1.CompareTo(numericstr2);
    //            }

    //            if (verdict != 0)
    //            {
    //                return verdict;
    //            }
    //        }
    //        return itemLen1 - itemLen2;
    //    }
    //}

    public class AlphanumComparatorFast_DateTime : IComparer
    {
        public int Compare(object x, object y)
        {
            try
            {
                TreeViewExplorer one = x as TreeViewExplorer;
                TreeViewExplorer two = y as TreeViewExplorer;
                DateTime? s1 = one.Createdon;
                DateTime d = (DateTime)(s1);

                if (s1 == null)
                {
                    return 0;
                }
                DateTime? s2 = two.Createdon;
                DateTime e = (DateTime)(s2);
                if (s2 == null)
                {
                    return 0;
                }

                int result;

                result = DateTime.Compare(d, e);

                return result;
            }
            catch (Exception ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                        MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
                return 0;

            }

        }
    }
	
    public class AlphanumComparatorFast : IComparer
    {
        public int Compare(object x, object y)
        {
            try
            {
                TreeViewExplorer one = x as TreeViewExplorer;
                TreeViewExplorer two = y as TreeViewExplorer;
                string s1 = one.ItemName;
                if (s1 == null)
                {
                    return 0;
                }
                string s2 = two.ItemName;
                if (s2 == null)
                {
                    return 0;
                }

                int len1 = s1.Length;
                int len2 = s2.Length;
                int marker1 = 0;
                int marker2 = 0;

                // Walk through two the strings with two markers.
                while (marker1 < len1 && marker2 < len2)
                {
                    char ch1 = s1[marker1];
                    char ch2 = s2[marker2];

                    // Some buffers we can build up characters in for each chunk.
                    char[] space1 = new char[len1];
                    int loc1 = 0;
                    char[] space2 = new char[len2];
                    int loc2 = 0;

                    // Walk through all following characters that are digits or
                    // characters in BOTH strings starting at the appropriate marker.
                    // Collect char arrays.
                    do
                    {
                        space1[loc1++] = ch1;
                        marker1++;

                        if (marker1 < len1)
                        {
                            ch1 = s1[marker1];
                        }
                        else
                        {
                            break;
                        }
                    } while (char.IsDigit(ch1) == char.IsDigit(space1[0]));

                    do
                    {
                        space2[loc2++] = ch2;
                        marker2++;

                        if (marker2 < len2)
                        {
                            ch2 = s2[marker2];
                        }
                        else
                        {
                            break;
                        }
                    } while (char.IsDigit(ch2) == char.IsDigit(space2[0]));

                    // If we have collected numbers, compare them numerically.
                    // Otherwise, if we have strings, compare them alphabetically.
                    string str1 = new string(space1);
                    string str2 = new string(space2);

                    int result;

                    if (char.IsDigit(space1[0]) && char.IsDigit(space2[0]))
                    {
                        long thisNumericChunk = long.Parse(str1);
                        long thatNumericChunk = long.Parse(str2);
                        result = thisNumericChunk.CompareTo(thatNumericChunk);
                    }
                    else
                    {
                        result = str1.CompareTo(str2);
                    }

                    if (result != 0)
                    {
                        return result;
                    }
                }
                return len1 - len2;
            }
            catch (Exception  ex)
            {


                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
                //MessageBox.Show("Exception\n \n" + ex.Message, "QAT Error Code - EC14017F", MessageBoxButton.OK, MessageBoxImage.Error);
                return 0;

            }
            
        }
    }

    public class TextblockWarning : Adorner
    {
        double XPos=0;
        double YPos=0;
      

        public TextblockWarning(UIElement adornedElement, double X, double Y)
          : base(adornedElement)
        {
            XPos = X;
            YPos = Y;
        }

        protected override void OnRender(DrawingContext drawingContext)
        {
            try
            {
                if (AdornedElement.GetType().ToString() == "System.Windows.Controls.TextBox")
                {
                    var converter = new System.Windows.Media.BrushConverter();
                    var brush = (Brush)converter.ConvertFromString("#FFCB2E2E");
                    FormattedText FT = new FormattedText("Name cannot contain these characters  \\/:*?&<>[]\"'%|", CultureInfo.InvariantCulture, FlowDirection.LeftToRight,new Typeface("Consolas"), 12, Brushes.Transparent);
                    FT.BuildGeometry(new Point(10, YPos - 12));
                    Geometry textGeometry = FT.BuildGeometry(new Point(10, YPos));
                    drawingContext.DrawRoundedRectangle(brush, null, new Rect(5,YPos-2,FT.Width+10,FT.Height+5),4.0,4.0);
                    drawingContext.DrawGeometry(Brushes.White, new Pen(Brushes.White, 0.4), textGeometry);
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

        public void Remove(AdornerLayer Adl,TextBox Tx)
        {
            try
            {
                Adorner[] toRemoveArray = null;
                if (Adl != null && Tx != null)
                {
                    toRemoveArray = Adl.GetAdorners(Tx);
                }
                Adorner toRemove;
                if (toRemoveArray != null)
                {
                    toRemove = toRemoveArray[0];
                    Adl.Remove(toRemove);
                }
            }
            catch(Exception ex)
            {
                DeviceDiscovery.WriteToLogFile("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message);
#if DEBUG
                MessageBox.Show("Exception in " + ex.TargetSite.Name + ". Message:" + ex.Message, "QAT Error", MessageBoxButton.OK, MessageBoxImage.Error);
#endif
            }
        }

      
      
    }

    public class MyVirtualizingStackPanel : VirtualizingStackPanel
    {
        public void BringIntoView(int index)
        {
            this.BringIndexIntoView(index);
        }
    }
}
