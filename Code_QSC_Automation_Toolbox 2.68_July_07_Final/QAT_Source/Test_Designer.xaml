<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:src="clr-namespace:QSC_Test_Automation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="QSC_Test_Automation.Test_Designer"
        Title="QAT-Designer [build2.68]" x:Name="TestAction" Height="Auto" Width="Auto" MinWidth="1200" WindowStartupLocation="CenterScreen" ResizeMode="CanResize" Icon="Images/Final_QAT_Icon.ico"  Foreground="Black" Closing="TestAction_Closing" Loaded="TestAction_WindowLoaded" Background="#FF405579" ContentRendered="TestAction_ContentRendered" PreviewMouseWheel="TestAction_PreviewMouseWheel" PreviewKeyDown="TestAction_PreviewKeyDown">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/PresentationFramework.Royale;V3.0.0.0;31bf3856ad364e35;component\themes\royale.normalcolor.xaml" />
                <ResourceDictionary Source="TreeViewDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <src:ComboboxDisableConverter x:Key="ComboboxDisableConverter"/>
            <!--Data Template for TreeView with Context Menu-->
            <HierarchicalDataTemplate x:Key="TreeViewRenameDataTemplate" ItemsSource="{Binding Children, Mode=OneWay}">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter Content="{Binding ItemTextBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="2.0"/>
                </StackPanel>
            </HierarchicalDataTemplate>

            <!--firmware textbox display-->
            <Style TargetType="TextBox" x:Key="firmwaretext">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                        <Setter Property="Background">
                            <Setter.Value>
                                <VisualBrush Stretch="None">
                                    <VisualBrush.Visual>
                                        <TextBlock Text="Selected Location" Foreground="Black" FontSize="12"  FontStyle="Italic" TextAlignment="Left" />
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate  >
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!--<Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>-->
                                <AdornedElementPlaceholder x:Name="placeholder"  Grid.Row="1" />
                                <!--<Popup Name="mypopup"  AllowsTransparency="True" HorizontalAlignment="Left"  PopupAnimation="None" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocused , Mode=OneWay}" LayoutTransform="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocused , Mode=OneWay}">-->

                                <StackPanel Orientation="Horizontal">
                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"  
                                      StrokeThickness="0" />
                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"  FontSize="10"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent, Mode=OneWay}" />
                                    </Border>
                                </StackPanel>
                                <!--</Popup>-->
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <!--<Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                    </Trigger>
                </Style.Triggers>-->
            </Style>

            <Style x:Key="TreeViewItemStyleDesginer" TargetType="{x:Type TreeViewItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
                <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="1,0,0,0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid x:Name="ItemGrid" Margin="-60,0,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Bd" Padding="79,0,0,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <ToggleButton x:Name="Expander" Margin="60,0,0,0" HorizontalAlignment="Left" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                                <ItemsPresenter x:Name="ItemsHost" Margin="80,0,0,0" Grid.Column="0" Grid.Row="1"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMultiSelectOn, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="false"/>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=Bd}" Value="true"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GradientActiveCaptionBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMultiSelectOn, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="false"/>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="true"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GradientActiveCaptionBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Path=IsMultiSelectOn, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="true">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </DataTrigger>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Data Template for TreeView Item Name with fixed width -->
            <HierarchicalDataTemplate x:Key="TreeViewItemNameTemplate1" x:Shared="False">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter>

                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ItemName}" Width="850" TextWrapping="Wrap"  />
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>

                    </ContentPresenter>
                </StackPanel>
            </HierarchicalDataTemplate>

            <!-- Data Template for TreeView Item Name without fixed width -->
            <HierarchicalDataTemplate x:Key="TreeViewItemNameTemplate2" x:Shared="False">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter>

                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ItemName}" TextWrapping="Wrap"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>

                    </ContentPresenter>
                </StackPanel>
            </HierarchicalDataTemplate>

            <!-- Data Template for TreeView Item Name without fixed width and Check Box -->
            <HierarchicalDataTemplate x:Key="TreeViewItemNameTemplate3" x:Shared="False">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter>
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ItemTextBox.Text}" TextWrapping="Wrap"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>

                    </ContentPresenter>
                </StackPanel>
            </HierarchicalDataTemplate>

            <!-- Data Template for iLog Device Checkbox in Test Case -->
            <HierarchicalDataTemplate x:Key="iLogDeviceCheckBoxtDataTemplate" x:Shared="False">
                <Grid>
                    <CheckBox IsChecked="{Binding iLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding ItemDeviceName}" Margin="2,2,2,2"/>
                </Grid>
            </HierarchicalDataTemplate>

            <!-- Data Template for Configurator Device Checkbox in Test Case -->
            <HierarchicalDataTemplate x:Key="ConfiguratorLogDeviceCheckBoxtDataTemplate" x:Shared="False">
                <Grid>
                    <CheckBox IsChecked="{Binding ConfiguratorLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding ItemDeviceName}" Margin="2,2,2,2"/>
                </Grid>
            </HierarchicalDataTemplate>

            <!-- Data Template for Set Telnet Device Checkbox in Test Case -->
            <HierarchicalDataTemplate x:Key="TelnetDeviceCheckBoxtDataTemplate" x:Shared="False">
                <Grid>
                    <CheckBox IsChecked="{Binding TelnetIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding ItemDeviceName}" Margin="2,2,2,2"/>
                </Grid>
            </HierarchicalDataTemplate>

            <!-- Data Template for Radio Button with Content in Test Case -->
            <Style x:Key="ListBoxItemRadioButtonSytle" TargetType="ListBoxItem" x:Shared="false">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                            <RadioButton  Height="23" Content="{TemplateBinding Content}"  IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected}" MouseMove="RadioButton_MouseMove" GotFocus="RadioButton_GotFocus" GotKeyboardFocus="RadioButton_GotKeyboardFocus" GotMouseCapture="RadioButton_GotMouseCapture" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="NoScroll" x:Shared="False">
                <ItemsPresenter></ItemsPresenter>
            </ControlTemplate>

            <HierarchicalDataTemplate x:Key="SetControlContentDataTemplate" x:Shared="False">
                <AdornerDecorator>
                    <Grid Background="#FF9CAAC1" x:Name="ControlActionGrid" Margin="1,0,15,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Row="0" x:Name="stack_ComponentType" Grid.Column="0" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Component Type" x:Name="lbl_CompType" HorizontalAlignment="Left" Margin="-4,0,0,0" Height="25"/>
                            <ComboBox x:Name="cmb_ComponentType"  ItemsSource="{Binding TestControlComponentTypeList}" SelectedItem="{Binding TestControlComponentTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>

                            </ComboBox>

                        </StackPanel>
                        <StackPanel Grid.Column="1" x:Name="stack_ComponentName" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Component Name" x:Name="lbl_CompName" HorizontalAlignment="Left"  Width="120" Margin="-4,0,-5,0" Height="25" ToolTip="Component Name is same as External Prefix in the design file"/>
                            <ComboBox x:Name="cmb_ComponentName" ToolTip="Component Name is same as External Prefix in the design file" ItemsSource="{Binding TestControlComponentNameList}" SelectedItem="{Binding TestControlComponentNameSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                        <Style.Triggers>
                                            <DataTrigger  Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" Converter="{StaticResource ComboboxDisableConverter}" ConverterParameter="ComponentName">
                                                        <Binding RelativeSource="{RelativeSource AncestorType=ComboBox}" Path="DataContext.CustomControlDisableList" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay"/>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="Content" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        <Binding  RelativeSource="{RelativeSource AncestorType=ComboBox}" Path="DataContext.TestControlComponentTypeSelectedItem" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay"/>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.ColumnSpan="7">

                            <CheckBox Content="Loop" IsChecked="{Binding LoopIsChecked}" Visibility="{Binding LoopCheckVisibility}" Margin="5,30.671,0,-4.671" x:Name="Loop_checkBox" HorizontalAlignment="Left"/>

                            <Grid  x:Name="LoopStart_Grd" Margin="5,5,0,0" Height="22" Background="White" Visibility="{Binding LoopStartValueVisibility}" Width="auto" HorizontalAlignment="Left" VerticalAlignment="Bottom" >
                                <TextBox x:Name="LoopStart_textBox" Text="{Binding LoopStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopStart_textBox_PreviewTextInput" PreviewKeyDown="LoopStart_textBox_PreviewKeyDown" Width="80" PreviewKeyUp="TextBox_PreviewKeyUp"  AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop Start" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="80" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="80" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>


                            <Grid x:Name="LoopEnd_Grd"  Margin="5,5,0,0" Height="22" Visibility="{Binding LoopEndValueVisibility}" Background="White" Width="70" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                <TextBox x:Name="LoopEnd_textBox" Text="{Binding LoopEnd, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopEnd_textBox_PreviewTextInput" PreviewKeyDown="LoopEnd_textBox_PreviewKeyDown" Width="70" PreviewKeyUp="TextBox_PreviewKeyUp"  AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop End" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="70" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="70" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>

                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>

                            <Grid  Margin="5,5,0,0" x:Name="LoopIncrement_Grd" Height="22" Visibility="{Binding LoopIncrementValueVisibility}" Background="White" Width="120" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                <TextBox x:Name="LoopIncrement_textBox" Text="{Binding LoopIncrement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopIncrement_textBox_PreviewTextInput" PreviewKeyDown="LoopIncrement_textBox_PreviewKeyDown" Width="120" PreviewKeyUp="TextBox_PreviewKeyUp"  AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop Increment" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="120"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="120"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>
                                            </Style.Triggers>

                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>

                            <CheckBox  Content="Ramp time in seconds" IsChecked="{Binding RampIsChecked}" MouseMove="Ramp_checkBox_MouseMove" Margin="5,31.334,0,-1.334" Visibility="{Binding RampCheckVisibility}" x:Name="Ramp_checkBox" HorizontalAlignment="Left" />

                            <Grid  x:Name="RampValue_Grd" Margin="5,27.964,0,-0.705" Height="22" Background="White" Visibility="{Binding RampSettingVisibility}" Width="70" HorizontalAlignment="Right" >
                                <TextBox x:Name="RampValue_Textbox" Text="{Binding RampSetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Uid="Water Mark" PreviewKeyDown="RampValue_Textbox_PreviewKeyDown" PreviewTextInput="RampValue_Textbox_PreviewTextInput" Width="70" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Ramp Value" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="70" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="70"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>
                            <TextBlock  Text="Use control verification to verify final ramp value" FontSize="11" Margin="14,22.668,0,-2.668" Visibility="{Binding RampTextBlockVisibility}" x:Name="Ramp_Textblock" HorizontalAlignment="Left" Height="Auto" TextWrapping="Wrap" Width="130" />

                        </StackPanel>

                        <StackPanel Grid.Column="2" x:Name="stack_Property" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Control" x:Name="lbl_Property" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <ComboBox x:Name="cmb_Property" ItemsSource="{Binding TestControlPropertyList}" SelectedItem="{Binding TestControlPropertySelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>



                        <StackPanel Grid.Column="3" x:Name="stack_ChannelSelection" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Channel Selection" x:Name="lbl_channelSelection" HorizontalAlignment="Left" Height="25" Margin="-6,0,0,0" />
                            <ComboBox x:Name="cmb_channelSelection" IsEnabled="{Binding ChannelEnabled}" ItemsSource="{Binding ChannelSelectionList}" SelectedItem="{Binding ChannelSelectionSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>



                        <StackPanel Grid.Column="4" x:Name="stack_SettingType" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Value Type" x:Name="lbl_SettingType" HorizontalAlignment="Left" Height="25" Margin="-4,0,0,0" />
                            <ComboBox x:Name="cmb_SettingType" ItemsSource="{Binding InputSelectionComboList}" IsEnabled="{Binding InputSelectionEnabled}" SelectedItem="{Binding InputSelectionComboSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="5" x:Name="stack_Value" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Value" x:Name="lbl_value" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <TextBox x:Name="cmb_Value" Visibility="{Binding valueTextboxVisibility}" Height="22" IsEnabled="{Binding valueIsEnabled}" MaxLength="{Binding valueMaxLength,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Text="{Binding TestControlPropertyInitialValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  PreviewTextInput="cmb_Value_PreviewTextInput" PreviewKeyDown="cmb_Value_PreviewKeyDown"  PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                 <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBlock Foreground="#FFCB2E2E"  FontWeight="Medium" Text="{Binding DataTypeTextBlock,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" FontSize="11"  Visibility="{Binding valueIsEnabled}" Margin="0,0,0,0" x:Name="Value_Textblock" HorizontalAlignment="Stretch" Height="Auto" TextWrapping="Wrap"  VerticalAlignment="Bottom" d:LayoutOverrides="Width" />                       
                        </StackPanel>
                        <StackPanel Grid.Column="6" x:Name="stack_PlusMinus" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="9" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_SetControlMinus" VerticalAlignment="Top" Click="btn_SetControlMinus_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="7" x:Name="stack_Copy" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="9" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_SetControlCopy" VerticalAlignment="Top" Click="btn_SetControlCopy_Click"  Focusable="False">
                                <Image Stretch="Uniform"  Source="/Images/Copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="8"  x:Name="stack_MoveUp" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="10" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_SetControlMoveUp" VerticalAlignment="Top" Click="btn_SetControlMoveUp_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="11"  x:Name="stack_MoveDown" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="11" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_SetControlMoveDown" VerticalAlignment="Top" Click="btn_SetControlMoveDown_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                    </Grid>
                </AdornerDecorator>
            </HierarchicalDataTemplate>


            <HierarchicalDataTemplate x:Key="SetUserActionContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="UserActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>                                                          
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />                   
                    </Grid.RowDefinitions>  
                
                    <StackPanel x:Name="stack_Usertext" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1">                      
                        <Label Content="User Action" x:Name="lbl_UserText" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" Width="700" MinHeight="22">
                            <TextBox x:Name="txt_Usertext" ToolTip="Enter User text" TextWrapping="Wrap" Height="Auto" Text="{Binding ActionUserText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True"  d:LayoutOverrides="Height" AllowDrop="False">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter User text" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                    </StackPanel>
                    <Button Grid.Column="1" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="5,30,0,5"  x:Name="btn_SetUserMinus" Click="btn_SetUserMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5" x:Name="btn_SetUserCopy" Click="btn_SetUserCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUserMoveUp" Click="btn_SetUserMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUserMoveDown" Click="btn_SetUserMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetQRCMActionContentDataTemplate" x:Shared="False">
                <!--<AdornerDecorator>-->
                    <Grid Background="#FF9CAAC1" x:Name="QRCMActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>                       
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="240"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="130"/>                        
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                  
                    <StackPanel x:Name="stack_selectDevice" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Select Device name" x:Name="lbl_cameraselect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_devicesSelect" Width="140" ItemsSource="{Binding ActionQRCM_DevicesList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"   SelectedItem="{Binding QRCM_DeviceSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0"  Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="140" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_selectMethod" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Select method" x:Name="lbl_selectMethod" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_selectMethod" Width="230" ItemsSource="{Binding ActionQRCM_MethodsList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" DropDownOpened="cmb_QRCMActionMethodName_DropDownOpened" SelectedItem="{Binding QRCM_MethodsSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding MethodNameComboboxIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0"  MinHeight="23" Height="Auto"  HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="230" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>

                    <StackPanel x:Name="stack_UserInput" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1">                       
                        <Label Content="User input arguments" x:Name="lbl_UserInput" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" MinWidth="150" Height="22">
                            <TextBox x:Name="txt_Usertext" MinWidth="150" ToolTip="{Binding ArgumentTextBoxTooltip,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding ActionUserArguments, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  IsEnabled="{Binding ArgumentsTextboxIsEnabled,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" d:LayoutOverrides="Height" AllowDrop="False">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">                                  
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter user arguments" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>                                      
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>   
                        </Grid>
                        <!--<TextBlock x:Name="Notify_Textblock" Foreground="#FFCB2E2E"  FontWeight="Medium" Text="{Binding UserNotifyTextBlock,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" FontSize="13"  Visibility="{Binding valueIsEnabled}" Margin="0,0,0,0"  HorizontalAlignment="Stretch" Height="Auto" TextWrapping="Wrap"  VerticalAlignment="Bottom" d:LayoutOverrides="Width" />-->
                    </StackPanel>
                    <StackPanel x:Name="stack_setbtn" Grid.Column="3" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Button Grid.Column="3" Grid.Row="0" Margin="15,25,0,0" IsEnabled="{Binding SetPayloadBtnIsEnabled,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ButtonStyle5}" Content="Set Payload" x:Name="SetPayload_btn" HorizontalAlignment="Left" VerticalAlignment="Center" Click="SetPayload_btn_click"  Foreground="White" Focusable="False"   />
                    </StackPanel>
                        
                    <StackPanel x:Name="stack_QRCMminusbtn" Grid.Column="4" Grid.Row="0" Margin="0,15,0,20" Background="#FF9CAAC1" >
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0"  x:Name="btn_SetQRCMMinus" Click="btn_SetQRCMMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMCopybtn" Grid.Column="5" Grid.Row="0"  Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,15,0,0" x:Name="btn_SetQRCMCopy" Click="btn_SetQRCMCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMupbtn" Grid.Column="6" Grid.Row="0"  Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="6" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0" x:Name="btn_SetQRCMMoveUp" Click="btn_SetQRCM_MoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMdownbtn" Grid.Column="7" Grid.Row="0" Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="7" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0" x:Name="btn_SetQRCMMoveDown" Click="btn_SetQRCM_MoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    </StackPanel>
                </Grid>
                <!--</AdornerDecorator>-->
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetCECContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="CECActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <!--<ColumnDefinition Width="Auto"/>-->
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <!--<StackPanel x:Name="stack_CECAdapterselect" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="CECDeviceSelect" x:Name="lbl_CECAdapterselect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_CECAdapterselect" ItemsSource="{Binding AdapterList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"   SelectedItem="{Binding AdapterSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>-->
                    <StackPanel x:Name="stack_CECDeviceSelect" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Destination Device" x:Name="lbl_CECDeviceSelect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_CECDeviceSelect" ItemsSource="{Binding Deviceselection,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"  SelectedItem="{Binding DeviceselectionSelecetdItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_CECCommand" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="CEC Commands" x:Name="lbl_CECCommand" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_CECCommand" ItemsSource="{Binding CECCommandList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" SelectedItem="{Binding CECCommandListSelectedItem,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="200" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="200" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_CECOpcodeSelect" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" Visibility="{Binding CECActionOpcodeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                        <Label Content="CEC Opcode" x:Name="lbl_CECOpcodeSelect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" Width="250" Height="22">
                            <TextBox x:Name="txt_Opcode" ToolTip="Enter cec opcode" Text="{Binding CECActionOpcode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" d:LayoutOverrides="Height" AllowDrop="False" PreviewKeyDown="cectextbx_PreviewKeydown" PreviewTextInput="CECtextbx_PreviewTextinput">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter CEC Opcode as XX:YY:ZZ" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                    </StackPanel>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="5,30,0,5"  x:Name="btn_SetCecMinus" Click="btn_SetCECMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5" x:Name="btn_SetCecCopy" Click="btn_SetCECCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetCecMoveUp" Click="btn_SetCecMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="6" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetCecMoveDown" Click="btn_SetCecMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>


            <HierarchicalDataTemplate x:Key="VerifyQRContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="QRVerificationGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="260"/>
                        <!--<ColumnDefinition Width="Auto"/>-->
                        <!--<ColumnDefinition Width="Auto"/>-->
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <!--<RowDefinition Height="*" />
                        <RowDefinition Height="*" />-->
                    </Grid.RowDefinitions>
                    <StackPanel x:Name="stack_cameraselect" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Camera select" x:Name="lbl_cameraselect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_cameraselect" ItemsSource="{Binding CameraList1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"   SelectedItem="{Binding CameraSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRcodeSelect" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="QR code value" x:Name="lbl_QRcode" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" Width="250" Height="22">
                            <TextBox x:Name="txt_verifyQRcode" ToolTip="Enter QR code" Text="{Binding QRverificationcode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" d:LayoutOverrides="Height" AllowDrop="False" PreviewTextInput="txt_verifyQRcode_PreviewTextInput" PreviewKeyDown="txt_verifyQRcode_PreviewKeyDown">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter QR Opcode " Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                    </StackPanel>


                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,31,0,6"  x:Name="btn_VerifyQRMinus" Click="btn_VerifyQRMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6" x:Name="btn_VerifyQRCopy" Click="btn_VerifyQRCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyQRMoveU" Click="btn_VerifyQRMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyQRMoveDown" Click="btn_VerifyQRMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyScriptContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" Name="ScriptVerificationGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="210"/>
                        <ColumnDefinition Width="160"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="120" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <StackPanel x:Name="stack_Command" Grid.Column="0" Grid.Row="0" Margin="8,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Action" x:Name="lable_commands" HorizontalAlignment="Left"  Height="25"  VerticalAlignment="Bottom"/>
                        <ComboBox x:Name="VerifyScriptAction_txtbox" MinHeight="23" Width="200" ItemsSource="{Binding VerifyScriptAction}" SelectedItem="{Binding VerifyScriptActionSelectedItem,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="Auto" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_DeviceName" Grid.Column="1" Grid.Row="0" Margin="0,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Device name" x:Name="lbl_devicename" HorizontalAlignment="Left" Height="25"  VerticalAlignment="Bottom"/>
                        <ComboBox x:Name="cmb_Devicenamelist" MinHeight="23" Width="155" ItemsSource="{Binding Devicenamelist}" HorizontalContentAlignment="Stretch" Text="{Binding DevicenamelistSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEditable="True" IsReadOnly="True"  DropDownOpened="cmb_ScriptDevicenamelist_DropDownOpened" >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}"  Width="Auto" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>

                    <StackPanel x:Name="stack_cpu" Grid.Column="2" Grid.Row="0" Margin="8,5,0,5" Background="#FF9CAAC1" Visibility="{Binding CPUnumbercomboVisibility,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                        <Label Content="CPU Number" x:Name="lable_cpu" HorizontalAlignment="Left" Height="25" VerticalAlignment="Bottom"/>
                        <ComboBox x:Name="CPUnumberTxtBx" MinHeight="23" Width="200" ItemsSource="{Binding CPUNumberList}" SelectedItem="{Binding CPUNumberSelectedItem, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="Auto" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <!--<StackPanel x:Name="stack_CustomCommand" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" Visibility="{Binding CustomCommandVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">-->
                    <Label Grid.Column="3" Grid.Row="0" Content="SSH Command" x:Name="lable_CustomCommand" Margin="10,4,0,27"  HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Grid Grid.Column="3" MinWidth="50" Grid.Row="0" Background="White" Height="24" Margin="10,25,0,0" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                        <TextBox x:Name="CustomCommand_txtbox" VerticalAlignment="Top" Height="24" Text="{Binding CustomCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  MinWidth="90" IsEnabled="{Binding CustomCommandTextboxIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" d:LayoutOverrides="Height" AllowDrop="False" >
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Enter command" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                    <!--</StackPanel>-->
                    <!--<StackPanel x:Name="stack_RegexMatch" Grid.Column="3" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >-->
                    <Label Grid.Column="4" Grid.Row="0"  Content="Regex Text" x:Name="lable_RegexMatch" Margin="10,3,0,30" HorizontalAlignment="Left" Height="25"  d:LayoutOverrides="TopMargin, BottomMargin" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Grid Background="White" MinWidth="50" Margin="10,25,0,0" Height="24" Grid.Column="4" Grid.Row="0" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" >
                        <TextBox x:Name="Regex_Match_txtbox" VerticalAlignment="Top" Height="24" Text="{Binding RegexMatch, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinWidth="90"  IsEnabled="{Binding RegexTextboxIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" d:LayoutOverrides="Height" AllowDrop="False" >
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Enter regex text" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                    <!--</StackPanel>-->
                    <!--<StackPanel x:Name="stack_skipdevices" Grid.Column="0" Grid.Row="1" Margin="300,0,0,7" Background="#FF9CAAC1" Orientation="Vertical" Grid.ColumnSpan="5">
                        <CheckBox x:Name="checkboxSkipdevices" Focusable="False" HorizontalAlignment="Left"  Content="Verify for all devices in design"  VerticalAlignment="Top" Margin="0,30,13,-10" Height="18" ToolTip= "Check to verify all devices in design" IsChecked="{Binding VerifyDesignDevicesIsChecked, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" Visibility="{Binding VerifyDesignDevicesVisibility,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />
                        -->
                    <!--<Label x:Name="lable_skipdevices" HorizontalAlignment="Left" Height="28" VerticalAlignment="Top" Margin="20,-15,0,0"  Content="Verify for all devices in design" IsEnabled="{Binding VerifyDesignDevicesIsEnable}"/>-->
                    <!--
                    </StackPanel>-->
                    <StackPanel x:Name="stack_UpLimit" Grid.Column="0" Grid.Row="1" Margin="2,5,63.037,7" Background="#FF9CAAC1" Orientation="Vertical" Grid.ColumnSpan="4">
                        <Label x:Name="lable_Upper_value" HorizontalAlignment="Left" Height="28" VerticalAlignment="Top" Content="Upper Limit"  Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBox x:Name="Upper_value_txtbox" Height="23" Width="70" Margin="1,-5,0,0" Text="{Binding Upperlimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="ScriptlimitTxtbox_PreviewTextInput" PreviewKeyDown="ScriptlimitTxtbox_PreviewKeyDown" HorizontalAlignment="Left">
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                        <Label Content="Lower Limit"  x:Name="lable_Lower_value" Margin="84,-46,0,0" Height="28" HorizontalAlignment="Left" VerticalAlignment="Top"  Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"></Label>
                        <TextBox  x:Name="Lower_value_txtbox" Margin="87,-23,0,0" Height="23" Width="70" HorizontalAlignment="Left" Text="{Binding Lowerlimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="ScriptlimitTxtbox_PreviewTextInput" PreviewKeyDown="ScriptlimitTxtbox_PreviewKeyDown">
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                        <Label  x:Name="lable_Unit_comparevalues" Content="Unit" Margin="168,-63,0,0" HorizontalAlignment="Left" Height="28" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" ></Label>
                        <ComboBox x:Name="cmb_Upper_Lower_Unit"  HorizontalAlignment="Left" Margin="170,-23,0,0"  Width="70" Height="23" IsEnabled="{Binding LimitUnitIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding LimitUnitlist}" SelectedItem="{Binding LimitUnitSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding CPUVisibility,  Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}"  Width="Auto" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <CheckBox x:Name="checkbox1Skipdevices" Focusable="False" HorizontalAlignment="Left" Margin="260,-20,0,0"  Content="Verify all devices in design"  VerticalAlignment="Top" Height="18" ToolTip= "Check to verify script for all devices in design" IsChecked="{Binding VerifyDesignDevicesIsChecked, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" Visibility="{Binding VerifyDesignDevicesVisibility,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />
                    </StackPanel>
                    <StackPanel Grid.Column="{Binding StackColumposition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="stack_PlusMinus" Margin="4,5,-70,5" Background="#FF9CAAC1" >
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Width="24"  Margin="0,26,0,1" x:Name="btn_VerifyScriptMinus" VerticalAlignment="Top" HorizontalAlignment="Left" Click="btn_Verify_ScriptMinus_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Width="24"  Margin="30,-23,0,1" x:Name="btn_VerifyScriptCopy" VerticalAlignment="Top" HorizontalAlignment="Left" Click="btn_VerifyScriptCopy_Click"  Focusable="False">
                            <Image Stretch="Uniform"  Source="/Images/Copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Width="24"  Margin="60,-23,0,1" x:Name="btn_VerifyScriptMoveUp" VerticalAlignment="Top"  HorizontalAlignment="Left" Click="btn_VerifyScriptMoveUp_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Width="24" Margin="90,-23,0,1" x:Name="btn_VerifyScriptMoveDown" VerticalAlignment="Top" HorizontalAlignment="Left" Click="btn_VerifyScriptMoveDown_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyQRCMContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="QRCMVerificationGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>                     
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="240"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="130"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                  
                    <StackPanel x:Name="stack_selectDevice" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Select Device name" x:Name="lbl_cameraselect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_devicesSelect" Width="140" ItemsSource="{Binding VerifyQRCM_DevicesList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding QRCM_DeviceSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0"  Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="140" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_selectMethod" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Select method" x:Name="lbl_selectMethod" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_selectMethod" Width="230" ItemsSource="{Binding VerifyQRCM_MethodsList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" DropDownOpened="cmb_QRCMVerifyMethodName_DropDownOpened" SelectedItem="{Binding QRCM_MethodsSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" IsEnabled="{Binding MethodNameComboboxIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" MinHeight="23" Height="Auto"  HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="230" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UserInput" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1">
                        <Label Content="User input arguments" x:Name="lbl_UserInput" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" MinWidth="150" Height="22">
                            <TextBox x:Name="txt_Usertext" MinWidth="150" ToolTip="{Binding ArgumentTextBoxTooltip,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding VerifyUserArguments, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  IsEnabled="{Binding ArgumentsTextboxIsEnabled,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" d:LayoutOverrides="Height" AllowDrop="False">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter user arguments" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                        <TextBlock x:Name="Notify_Textblock" Foreground="#FFCB2E2E"  FontWeight="Medium" Text="{Binding UserNotifyTextBlock,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" FontSize="12"  Visibility="{Binding valueIsEnabled}" Margin="0,2,0,0"  HorizontalAlignment="Stretch" Height="Auto" TextWrapping="Wrap"  VerticalAlignment="Bottom" d:LayoutOverrides="Width" />
                    </StackPanel>

                    <StackPanel x:Name="stack_setButton" Grid.Column="3" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Button Grid.Column="3" Grid.Row="0" Margin="10,26,0,0"  Style="{StaticResource ButtonStyle5}" IsEnabled="{Binding SetReferenceBtnIsEnabled,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Content="Set Reference" x:Name="SetReference_btn" HorizontalAlignment="Left"  Click="SetReference_btn_Click"  Foreground="White" Focusable="False"   />
                    </StackPanel>

                    <StackPanel x:Name="stack_QRCMminusbtn" Grid.Column="4" Grid.Row="0" Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0"  x:Name="btn_VerifyQRCMMinus" Click="btn_VerifyQRCMMinus_Click" VerticalAlignment="Center" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMCopybtn" Grid.Column="5" Grid.Row="0"  Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,15,0,0" x:Name="btn_VerifyQRCMCopy" Click="btn_VerifyQRCMCopy_Click" VerticalAlignment="Center"  Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMupbtn" Grid.Column="6" Grid.Row="0"  Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="6" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0" x:Name="btn_VerifyQRCMMoveUp" Click="btn_VerifyQRCM_MoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel x:Name="stack_QRCMdownbtn" Grid.Column="7" Grid.Row="0" Margin="0,15,0,20" Background="#FF9CAAC1" >
                        <Button Grid.Column="7" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,15,0,0" x:Name="btn_VerifyQRCMMoveDown" Click="btn_VerifyQRCM_MoveDown_Click" VerticalAlignment="Center" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>

                </Grid>
            </HierarchicalDataTemplate>



            <HierarchicalDataTemplate x:Key="VerifyUserContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="UserVerificationGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>                                       
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />                      
                    </Grid.RowDefinitions>
                  
                    <StackPanel x:Name="stack_UserVerify" Grid.Column="0" Grid.Row="0" Margin="10,5,30,5" Background="#FF9CAAC1" Grid.ColumnSpan="2">
                        <Label Content="User verification" x:Name="lbl_UserVerifytxt" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" Width="700" MinHeight="22">
                            <TextBox x:Name="txt_UserVerify" ToolTip="Enter user text" TextWrapping="Wrap" Height="Auto" AcceptsReturn="True"  Text="{Binding VerifyUserText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" d:LayoutOverrides="Height" AllowDrop="False">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter User text" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                    </StackPanel>


                    <Button Grid.Column="1" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,31,0,6"  x:Name="btn_VerifyUserMinus" Click="btn_VerifyUserMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6" x:Name="btn_VerifyUserCopy" Click="btn_VerifyUserCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyUserMoveUp" Click="btn_VerifyUserMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyUserMoveDown" Click="btn_VerifyUserMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>           
            
            
            <HierarchicalDataTemplate x:Key="VerifyCECContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="CECVerificationGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="260"/>
                        <!--<ColumnDefinition Width="Auto"/>-->
                        <!--<ColumnDefinition Width="Auto"/>-->
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <!--<StackPanel x:Name="stack_CECAdapterselect" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="CECDeviceSelect" x:Name="lbl_CECAdapterselect" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_CECAdapterselect" ItemsSource="{Binding AdapterList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"   SelectedItem="{Binding AdapterSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>-->
                    <StackPanel x:Name="stack_CECOpcodeSelect" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" Grid.ColumnSpan="2">
                        <Label Content="CEC Opcode" x:Name="lbl_CECOpcode" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0" />
                        <Grid Background="White" Width="250" Height="22">
                            <TextBox x:Name="txt_verifyOpcode" ToolTip="Enter cec opcode" Text="{Binding CECverificationOpcode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" d:LayoutOverrides="Height" AllowDrop="False" PreviewTextInput="CECtextbx_PreviewTextinput" PreviewKeyDown="cectextbx_PreviewKeydown">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Enter CEC Opcode as XX:YY:ZZ" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                    </StackPanel>


                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,31,0,6"  x:Name="btn_VerifyCecMinus" Click="btn_VerifyCECMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6" x:Name="btn_VerifyCECCopy" Click="btn_VerifyCECCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyCecMoveU" Click="btn_VerifyCecMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,31,0,6"   x:Name="btn_VerifyCecMoveDown" Click="btn_VerifyCecMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetTelnetContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="TelnetActionGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <ComboBox x:Name="TelnetDeviceCombobox" ItemsSource="{Binding TelnetSelectedDeviceItem}" SelectedItem="{Binding TelnetSelectedDevice, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" VerticalAlignment="Top" Margin="0,5,0,5" Width="200"/>
                    <Grid Grid.Column="1" Background="White" Height="22" x:Name="grd_Command" Margin="5,0,5,0">
                        <TextBox x:Name="txt_Command" Text="{Binding TelnetCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" d:LayoutOverrides="Height" AllowDrop="False">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Telnet Command" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,5,0,5" x:Name="btn_SetTelnetMinus" VerticalAlignment="Top" Click="btn_SetTelnetMinus_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,5,0,5" x:Name="btn_SetTelnetCopy" VerticalAlignment="Top" Click="btn_SetTelnetCopy_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,5,0,5" x:Name="btn_SetTelnetMoveUp" VerticalAlignment="Top" Click="btn_SetTelnetMoveUp_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,5,0,5" x:Name="btn_SetTelnetMoveDown" VerticalAlignment="Top" Click="btn_SetTelnetMoveDown_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <!--<StackPanel x:Name="stackPannel_Cmd" Grid.Column="0" Grid.Row="0">
                        <Grid Background="White" Height="22" x:Name="grd_Command">
                            <TextBox ContextMenu="{x:Null}" x:Name="txt_Command" Text="{Binding TelnetCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" GotFocus="cmb_Value_GotFocus"  GotKeyboardFocus="cmb_Value_GotFocus" GotMouseCapture="cmb_Value_GotFocus">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Telnet Command" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Grid>
                    </StackPanel>
                    <Label Content="Device to send command To: " Grid.Row="1" Height="28" HorizontalAlignment="Left" Margin="3,0,0,0" x:Name="label10" VerticalAlignment="Top" Width="213" />
                    <Button Grid.Column="1" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,1,3,0" x:Name="btn_SetTelnetMinus" VerticalAlignment="Top" Click="btn_SetTelnetMinus_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,1,3,0" x:Name="btn_SetTelnetCopy" VerticalAlignment="Top" Click="btn_SetTelnetCopy_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,1,3,0" x:Name="btn_SetTelnetMoveUp" VerticalAlignment="Top" Click="btn_SetTelnetMoveUp_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,1,3,0" x:Name="btn_SetTelnetMoveDown" VerticalAlignment="Top" Click="btn_SetTelnetMoveDown_Click" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Grid Margin="6,6,6,6" x:Name="gridA" Grid.Row="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        -->
                    <!--<ItemsControl x:Name="TelnetDeviceCheckBox" ItemsSource="{Binding TelnetDeviceItem}" ItemTemplate="{StaticResource TelnetDeviceCheckBoxtDataTemplate}" Grid.Column="0" Grid.Row="0" VerticalAlignment="Top" Margin="0,0,0,0"/>-->
                    <!--
                        <ComboBox x:Name="TelnetDeviceCombobox" ItemsSource="{Binding TelnetSelectedDeviceItem}" SelectedItem="{Binding TelnetSelectedDevice, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Grid.Row="0" VerticalAlignment="Top" Margin="0,0,0,0" Width="300"/>
                    </Grid>-->
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetFirmwareContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="firmwareActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="243*" />

                        <ColumnDefinition Width="100*" />

                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="29" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Label Grid.Row="1" Content="Firmware Upgrade/Downgrade Test Case" x:Name="label12" VerticalContentAlignment="Top" VerticalAlignment="Stretch" Margin="6,0,50.196,0" Height="Auto" HorizontalAlignment="Stretch" d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin"/>
                    <Label Content="Select Installation Type:" x:Name="Installlabel" VerticalContentAlignment="Top" VerticalAlignment="Stretch" Height="Auto" HorizontalAlignment="Left" d:LayoutOverrides="TopMargin, BottomMargin" Margin="7,0,-7,0" Width="359.64"/>
                    <Button Content="Browse" Grid.Row="6" x:Name="button30" VerticalAlignment="Stretch" Grid.Column="1" Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" Margin="3.906,6,0,7" d:LayoutOverrides="TopMargin, BottomMargin" Width="70" HorizontalAlignment="Left" Click="firmwareLocationBrowse_Click"/>
                    <ListBox Background="#FF9CAAC1" Grid.Row="2" BorderThickness="0" ItemsSource="{Binding FirmwareTypeContentList}" SelectedItem="{Binding FirmwareTypeSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemContainerStyle="{StaticResource ListBoxItemRadioButtonSytle}" Template="{StaticResource NoScroll}" d:IsHidden="True"/>
                    <DatePicker Grid.Row="2" IsEnabled="{Binding selectionoption}"  Text="{Binding  FirmwareDate,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Width="101.64" Height="23" Grid.ColumnSpan="1"  HorizontalAlignment="Left" Margin="258,-28,0,0" BorderBrush="Black">
                        <!--<DatePicker.Resources>
                            <Style TargetType="DatePickerTextBox">
                                <Setter Property="Control.Template">,Path =,StringFormat = {}{0:dd-MM-yyyy}
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <TextBox x:Name="PART_TextBox" Height="22"
     Text="{Binding Path=SelectedDate, StringFormat = {}{0:dd-MM-yyyy}, 
     RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}}" />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DatePicker.Resources>-->
                    </DatePicker>
                    <!--<QSC_Test_Automation:Timepicker IsEnabled="{Binding selectionoption}" Grid.Row="1" Grid.Column="0" Width="133.927" Height="22" Grid.ColumnSpan="1"  HorizontalAlignment="Left" Margin="360,-28,0,0" BorderBrush="Black" VerticalAlignment="Stretch"/>-->
                    <!--<ctrl:Timepicker Hours="10" Minutes="10" Seconds="30" x:Name="Timepicker"/>-->
                    <!--<xctk:DateTimePicker Grid.Row="1" IsEnabled="{Binding selectionoption}" Value="{Binding FirmwareDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Width="101.64" Height="22" Grid.ColumnSpan="1"  HorizontalAlignment="Left" Margin="258,-28,0,0" BorderBrush="Black"/>-->
                    <Grid  Margin="12,3,10,3" Grid.Row="6" Grid.Column="0" Background="White"  Width="Auto" Height="26">
                        <TextBox BorderThickness="0" Text="{Binding FirmwareBrowseLocation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="Path" VerticalAlignment="Stretch"  Width="Auto" Height="auto" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Selected Location" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                    <ComboBox HorizontalAlignment="Left" Width="209.64" Margin="150,2.96,0,4.04"  x:Name="cmb_InstallationType" ItemsSource="{Binding InstallSelectionComboList}" IsEnabled="{Binding InstallSelectionEnabled}" SelectedItem="{Binding InstallSelectionComboSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  >
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}" Width="200" TextWrapping="Wrap" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <CheckBox x:Name="ChkBx_MeasureFirmwareUpgradeTime" Content="Measure Firmware Upgrade/Downgrade Time" Margin="400,7,-100,0" Focusable="False" ToolTip= "Check to measure firmware upgradation time" IsChecked="{Binding MeasureFirmwareUpTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <ComboBox HorizontalAlignment="Left" Grid.Row="2"  Grid.Column="0" Grid.ColumnSpan="1"  Width="95"  Margin="360,-28,0,0"  x:Name="cmb_Timeselection" ItemsSource="{Binding TimeSelectionComboList}" IsEnabled="{Binding TimeSelectionEnabled}" Text="{Binding TimeSelectionComboSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" IsEditable="True"  IsTextSearchEnabled="True"  IsTextSearchCaseSensitive="False" StaysOpenOnEdit="True">
                    </ComboBox>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetDesignerContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="DesignerActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="255*"/>
                        <ColumnDefinition Width="440*"/>                       
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="33" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="23" />
                        <RowDefinition Height="23" />
                    </Grid.RowDefinitions>
                    <Label Content="Q-Sys Designer Application Related Test Case" Height="29" HorizontalAlignment="Left" Margin="6,6,0,0" x:Name="lbl_connectDesign" VerticalAlignment="Top" Width="268" Grid.ColumnSpan="2" Grid.RowSpan="2"  />
                    <Label Content="Connect the Designer" Grid.Row="1" HorizontalAlignment="Left" Margin="15,5,0,0" x:Name="lbl_disconnectDesign" Width="159" Height="26" VerticalAlignment="Top" ToolTip="Redeploy the design to core" />
                    <Label Content="Disconnect the Designer" Grid.Row="2" x:Name="lbl_disconnectDesigner" Margin="15,0,0,0" Width="157" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Disconnect the connection between designer and core" />
                    <Label Content="Emulate the Design" Grid.Row="3" x:Name="lbl_Emulate_the_Design" Margin="15,0,0,0" Width="159" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Emulate the design" />
                    <Label Content="Deploy Monitoring" Grid.Row="4" x:Name="lbl_measureTime" Margin="15,0,0,0"  Width="159" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Connect to designer with measure deploy time" />
                    <Label Content="Load from core and connect" Grid.Row="5" x:Name="load_from_core_Time" Margin="15,0,0,0"  Width="159" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Loads design from core and measures time to connect with QSD" />
                    <RadioButton Content="" Grid.Row="1" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="radioButton5" VerticalAlignment="Top" IsChecked="{Binding ConnectDesigner}" ToolTip="Redeploy the design to core" />
                    <RadioButton Content="" Grid.Row="2" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="radioButton6" VerticalAlignment="Top"   IsChecked="{Binding DisconnectDesigner}" ToolTip="Disconnect the connection between designer and core" IsEnabled="{Binding DisconnectDesignerEnable}"/>
                    <RadioButton Content="" Grid.Row="3" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="radioButton7" VerticalAlignment="Top"  IsChecked="{Binding EmulateDesigner}" ToolTip="Emulate the design" />
                    <RadioButton Content="" Grid.Row="4" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="measuretime" VerticalAlignment="Top"  IsChecked="{Binding ChkNoOfTimeDeployCheck}" ToolTip="Connect the design and measure deploy time" IsEnabled="{Binding DisconnectDesignerEnable}"/>
                    <RadioButton Content="" Grid.Row="5" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="loadfromcoretime" VerticalAlignment="Top"  IsChecked="{Binding Loadfromcore}" ToolTip="Connect the design and measure load from core time" IsEnabled="{Binding DisconnectDesignerEnable}" />
                    <TextBlock HorizontalAlignment="Left" Foreground="#004080" TextWrapping="Wrap"  Text="Action will fail if core dynamically paired during execution " FontSize="11" Margin="55,10,0,2" FontWeight="DemiBold" Grid.Row="4" Grid.Column="1" Height="Auto" Visibility="{Binding TxtNoOfTimeDeployVisible,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                        <TextBlock.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=DesignerActionGrid, Path=IsEnabled}" Value="false">
                                        <Setter Property="TextBlock.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Left" Foreground="#004080" TextWrapping="Wrap"  Text="Action will fail if core dynamically paired during execution " FontSize="11" Margin="55,6,5,5" Grid.RowSpan="1"  FontWeight="DemiBold" Grid.Row="1" Grid.Column="1" Height="Auto" Visibility="{Binding Isnewdesignchecked,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                        <TextBlock.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=DesignerActionGrid, Path=IsEnabled}" Value="false">
                                        <Setter Property="TextBlock.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                    <TextBox x:Name="txt_NoOfTimes" Grid.Row="1" Grid.Column="1" Text="{Binding NoOfTimesDeployed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding IterationVisibility,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" HorizontalAlignment="Left" VerticalAlignment="Bottom"  Margin="420.497,0,0,0" ToolTip="Enter number of times redeploy" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown"  PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False"   Height="22" TextWrapping="Wrap"  Width="46.503" MaxLength="5" >
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>

                    <CheckBox x:Name="checkBox" Focusable="False" Grid.Column="1" Margin="26,10,138.763,0" Height="29" ToolTip= "Uncheck to perform Designer action in existing design" IsChecked="{Binding newdesigncheck, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"  IsEnabled="{Binding newdesigncheckEnable}" />
                    <Label Content="   Check to perform Designer action in new design" x:Name="lbl_newdesign_checkbox" Width="340" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="1" Margin="36,4,138.763,0" Height="26" ToolTip= "Uncheck to perform Designer action in existing design"/>
                    <Label Content="Timeout :" x:Name="lbl_DesignerWaitTime" Width="60" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="1" Margin="360,5,53,0" Height="26" Visibility="{Binding IsEnabledDesignerTimeout}" />
                    <Label Content="Iteration :" x:Name="Iteration_to_run" Width="60.497" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1" Grid.Column="1" Margin="360,5,0,0" Height="26" Visibility="{Binding IterationVisibility,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />
                    <TextBox x:Name="txbox_DesignerWaitTime" Grid.Column="1" Text="{Binding DesignerTimeout, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding IsEnabledDesignerTimeout}" HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="420,6,5,3"  Height="22" TextWrapping="Wrap"  Width="47" MaxLength="5" ToolTip="{Binding TimeoutTooltip,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <ComboBox x:Name="cmb_DesignerWaitTime" Grid.Row="0" Grid.Column="1" ItemsSource="{Binding DesignerTimeoutUnit}" Visibility="{Binding IsEnabledDesignerTimeout}" SelectedItem="{Binding DesignerTimeoutUnitSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="475,7,0,3" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />
                </Grid>
            </HierarchicalDataTemplate>

            <!--<HierarchicalDataTemplate x:Key="SetDesignerContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="DesignerActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="170*"/>
                        <ColumnDefinition Width="420*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="33" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="23" />
                    </Grid.RowDefinitions>
                    <Label Content="Q-Sys Designer Application Related Test Case" Height="29" HorizontalAlignment="Left" Margin="6,6,0,0" x:Name="lbl_connectDesign" VerticalAlignment="Top" Width="268" Grid.ColumnSpan="2" Grid.RowSpan="2"  />
                    <Label Content="Connect the Designer" Grid.Row="1" HorizontalAlignment="Left" Margin="15,0,0,0" x:Name="lbl_disconnectDesign" Width="159" Height="26" VerticalAlignment="Top" ToolTip="Redeploy the design to core" />
                    <Label Content="Disconnect the Designer" Grid.Row="2" x:Name="lbl_disconnectDesigner" Margin="15,0,0,0" Width="157" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Disconnect the connection between designer and core" />
                    <Label Content="Emulate the Design" Grid.Row="3" x:Name="lbl_Emulate_the_Design" Margin="15,0,0,0" Width="159" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Emulate the design" />
                    <Label Content="Connect the designer with Measure time" Grid.Row="3" x:Name="lbl_measureTime" Margin="15,0,0,0" Width="159" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top" ToolTip="Connect to designer with measure deploy time" />
                    <RadioButton Content="" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left" Margin="26,7,0,0" Name="radioButton5" VerticalAlignment="Top" IsChecked="{Binding ConnectDesigner}" ToolTip="Redeploy the design to core" />
                    -->
            <!--<StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="40,7,0,0" >
                        <CheckBox Margin="15,0,0,0" x:Name="ChkBx_MeasureDeployTime" Content="Measure Time" Focusable="False" Grid.Column="2" Grid.Row="1" ToolTip= "Check to apply design redeploy iteration" IsChecked="{Binding ChkNoOfTimeDeployCheck, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Isnewdesignchecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Grid Margin="10,0,0,0" Background="White" Width="100" Height="20" Visibility="{Binding TxtNoOfTimeDeployVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                            <TextBox x:Name="txt_NoOfTimes" Text="{Binding NoOfTimesDeployed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Enter number of times redeploy" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown"  PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="Redeploy Iteration" Foreground="Black"  FontStyle="Italic" TextAlignment="Left"  Height="22" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                <Setter Property="Background">
                                                    <Setter.Value>
                                                        <VisualBrush Stretch="None">
                                                            <VisualBrush.Visual>
                                                                <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right"  Height="22" />
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed"/>
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                        <TextBlock Margin="15,0,0,0" HorizontalAlignment="Left" Foreground="#004080" TextWrapping="Wrap" Text="Action will fail if core dynamically paired during execution" FontSize="11" FontWeight="DemiBold" Grid.Row="1" Grid.Column="1" Visibility="{Binding Isnewdesignchecked,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                            <TextBlock.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=DesignerActionGrid, Path=IsEnabled}" Value="false">
                                            <Setter Property="TextBlock.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>-->
            <!--
                    <RadioButton Content="" Grid.Row="2" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="radioButton6" VerticalAlignment="Top"   IsChecked="{Binding DisconnectDesigner}" ToolTip="Disconnect the connection between designer and core" IsEnabled="{Binding DisconnectDesignerEnable}"/>
                    <RadioButton Content="" Grid.Row="3" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="radioButton7" VerticalAlignment="Top"  IsChecked="{Binding EmulateDesigner}" ToolTip="Emulate the design" />
                    <RadioButton Content="" Grid.Row="4" Grid.Column="1" Height="20" HorizontalAlignment="Left" Margin="26,7,0,0" x:Name="measuretime" VerticalAlignment="Top"  IsChecked="{Binding ChkNoOfTimeDeployCheck}" ToolTip="Emulate the design" />

                    <CheckBox x:Name="checkBox" Content="   Check to perform Designer action in new design" Focusable="False" Grid.Column="1" Margin="26,12,138,0" Height="29" ToolTip= "Uncheck to perform Designer action in existing design" IsChecked="{Binding newdesigncheck, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"  IsEnabled="{Binding newdesigncheckEnable}" />
                    -->
            <!--<Label Content="   Check to perform Designer action in new design" x:Name="lbl_newdesign_checkbox" Width="340" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Column="1" Margin="36,4,138.763,0" Height="26" ToolTip= "Uncheck to perform Designer action in existing design"/>-->
            <!--
             </Grid>
            </HierarchicalDataTemplate>-->

            <HierarchicalDataTemplate x:Key="SetNetPairingContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="DesignerActionGrid" >
                    <DataGrid CanUserSortColumns="False" SelectionUnit="Cell" RowHeaderWidth="0" Grid.Row="0" IsReadOnly="True"  ItemsSource="{Binding DutDeviceList}" AutoGenerateColumns="False" Name="dataGrid_ConfigFile" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" Background="#FF9CAAC1" >
                        <DataGrid.Columns>
                            <DataGridTextColumn Width="200" Binding="{Binding ItemDeviceType}"  >
                                <DataGridTextColumn.HeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                                        <Setter Property="Background" Value="#FF9CAAC1" />
                                        <Setter Property="Height" Value="23" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <TextBlock TextWrapping="Wrap" Text="Device Type"></TextBlock>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </DataGridTextColumn.HeaderStyle>
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Width="*" Binding="{Binding ItemDeviceName}" >
                                <DataGridTextColumn.HeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                                        <Setter Property="Background" Value="#FF9CAAC1" />
                                        <Setter Property="Height" Value="23" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <TextBlock TextWrapping="Wrap" Text="Device Name in design"></TextBlock>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </DataGridTextColumn.HeaderStyle>
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <DataGridTemplateColumn Header="Net Pairing" Width="*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ComboBox Name="cmb_ActionTabNetPairing" ItemsSource="{Binding ItemNetPairingListForXAML}" SelectedItem="{Binding ItemNetPairingSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  VerticalContentAlignment="Center">
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                        </ComboBox>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.HeaderStyle>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                                        <Setter Property="Background" Value="#FF9CAAC1" />
                                        <Setter Property="Height" Value="23" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </Style>
                                </DataGridTemplateColumn.HeaderStyle>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="SetUsbAudioContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="UsbAudioActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <StackPanel x:Name="stack_UsbAudioBridgeType" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Bridge Name" x:Name="lbl_UsbAudioBridgeType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioBridgeType" ItemsSource="{Binding BridgeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding UsbAudioBridgeDeviceComboEnable,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay,NotifyOnTargetUpdated=True}"  SelectedItem="{Binding UsbAudioBridgeTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbAudioType" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Device Type" x:Name="lbl_UsbAudioType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioType" ItemsSource="{Binding UsbAudioDeviceTypeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"  SelectedItem="{Binding UsbAudioTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbAudioDevices" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Audio Endpoint" x:Name="lbl_UsbAudioDevices" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioDevices" ItemsSource="{Binding UsbAudioDeviceDisplay,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding ElementName=cmb_UsbAudioBridgeType,Path=IsEnabled}" SelectedItem="{Binding UsbAudioDeviceSelectedItem,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbDefaultDeviceType" Grid.Column="3" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Set device as" x:Name="lbl_UsbUsbDefaultDeviceType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbUsbDefaultDeviceType" ItemsSource="{Binding UsbDefaultDevicesOption,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding ElementName=cmb_UsbAudioBridgeType,Path=IsEnabled}" SelectedItem="{Binding UsbDefaultDeviceOptionSelectedItem,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="140" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,30,0,5"  x:Name="btn_SetUsbMinus" Click="btn_SetUsbMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5" x:Name="btn_SetUsbCopy" Click="btn_SetUsbCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="6" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUsbMoveUp" Click="btn_SetUsbMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="7" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUsbMoveDown" Click="btn_SetUsbMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectActionPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate x:Key="VerifyControlContentDataTemplare" x:Shared="False">
                <!--<ScrollViewer VerticalScrollBarVisibility="Auto" >-->
                <AdornerDecorator>
                    <Grid Background="#FF9CAAC1" x:Name="ControlActionGrid" Margin="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <!--<ColumnDefinition Width="90" />-->
                            <ColumnDefinition Width="78" />
                            <ColumnDefinition Width="78" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />

                        </Grid.ColumnDefinitions>
                        <StackPanel x:Name="stack_ComponentType" Grid.Column="0" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Component Type" x:Name="lbl_CompType" HorizontalAlignment="Left" Height="25" Margin="-2,0,-0.01,0"/>
                            <ComboBox x:Name="cmb_ComponentType"  ItemsSource="{Binding TestControlComponentTypeList}" SelectedItem="{Binding TestControlComponentTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>

                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="1" x:Name="stack_ComponentName" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Component Name" x:Name="lbl_CompName" HorizontalAlignment="Left" Height="25" Width="120" Margin="-2,0,0,0" ToolTip="Component Name is same as External Prefix in the design file"/>
                            <ComboBox x:Name="cmb_ComponentName" ToolTip="Component Name is same as External Prefix in the design file" ItemsSource="{Binding TestControlComponentNameList}" SelectedItem="{Binding TestControlComponentNameSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.ColumnSpan="7">

                            <CheckBox Content="Loop" IsChecked="{Binding LoopIsChecked}" Visibility="{Binding LoopCheckVisibility}" Margin="5,8.664,0,5.336" x:Name="Loop_checkBox" HorizontalAlignment="Left"/>

                            <Grid  x:Name="LoopStart_Grd" Margin="5,5,0,5" Height="22" Background="White" Visibility="{Binding LoopStartValueVisibility}" Width="auto" HorizontalAlignment="Left" VerticalAlignment="Bottom" >
                                <TextBox x:Name="LoopStart_textBox" Text="{Binding LoopStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopStart_textBox_PreviewTextInput" PreviewKeyDown="LoopStart_textBox_PreviewKeyDown" Width="80" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop Start" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="80" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="80" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>


                            <Grid x:Name="LoopEnd_Grd"  Margin="5,5,0,5" Height="22" Visibility="{Binding LoopEndValueVisibility}" Background="White" Width="70" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                <TextBox x:Name="LoopEnd_textBox" Text="{Binding LoopEnd, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopEnd_textBox_PreviewTextInput" PreviewKeyDown="LoopEnd_textBox_PreviewKeyDown" Width="70" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop End" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="70" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="70" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>

                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>

                            <Grid  Margin="5,5,0,5" x:Name="LoopIncrement_Grd" Height="22" Visibility="{Binding LoopIncrementValueVisibility}" Background="White" Width="120" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                <TextBox x:Name="LoopIncrement_textBox" Text="{Binding LoopIncrement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="LoopIncrement_textBox_PreviewTextInput" PreviewKeyDown="LoopIncrement_textBox_PreviewKeyDown" Width="120" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Setter Property="Validation.ErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid>
                                                            <Border BorderBrush="#FFCB2E2E" BorderThickness="0" Background="#11FF0000" IsHitTestVisible="False" x:Name="errorBorder"/>
                                                            <AdornedElementPlaceholder x:Name="placeholder" />
                                                            <Popup AllowsTransparency="True" HorizontalAlignment="Left" HorizontalOffset="0" VerticalOffset="0" PopupAnimation="Fade" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}" IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsFocused, Mode=OneWay}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Polygon  VerticalAlignment="Center" Points="0,4 4,0 4,8" Fill="#FFCB2E2E" Stretch="Fill" Stroke="#FFCB2E2E"
                                      StrokeThickness="0" />
                                                                    <Border Background="#FFCB2E2E" CornerRadius="4" Padding="4">
                                                                        <TextBlock HorizontalAlignment="Center" Foreground="White" FontWeight="Medium" Margin="2,0,0,0"
                                                   Text="{Binding ElementName=placeholder, Path=AdornedElement.ToolTip, Mode=OneWay}" />
                                                                    </Border>
                                                                </StackPanel>
                                                            </Popup>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Loop Increment" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Width="120"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Width="120"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <Trigger Property="Validation.HasError" Value="True">
                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                                </Trigger>
                                            </Style.Triggers>

                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>

                        </StackPanel>

                        <StackPanel Grid.Column="2" x:Name="stack_Property" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Control" x:Name="lbl_Property" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <ComboBox x:Name="cmb_Property" ItemsSource="{Binding VerifyTestControlPropertyList}" SelectedItem="{Binding TestControlPropertySelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="3" x:Name="stack_ChannelSelection" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Channel Selection" x:Name="lbl_channelSelection" HorizontalAlignment="Left" Height="25" Margin="-4,0,0,0" />
                            <ComboBox x:Name="cmb_channelSelection" ItemsSource="{Binding ChannelSelectionList}" IsEnabled="{Binding ChannelEnabled}" SelectedItem="{Binding ChannelSelectionSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="4" x:Name="stack_SettingType" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Value Type" x:Name="lbl_SettingType" HorizontalAlignment="Left" Height="25" Margin="-4,0,0,0" />
                            <ComboBox x:Name="cmb_SettingType" ItemsSource="{Binding InputSelectionComboList}" IsEnabled="{Binding InputSelectionEnabled}" SelectedItem="{Binding InputSelectionComboSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="5" x:Name="stack_Value" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Value" x:Name="lbl_value" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <TextBox  x:Name="cmb_Value" Height="22" MaxLength="{Binding valueMaxLength,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding TestControlPropertyInitialValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  PreviewTextInput="cmb_Value_PreviewTextInput" PreviewKeyDown="cmb_Value_PreviewKeyDown"  IsEnabled="{Binding valueIsEnabled}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <!--<TextBox x:Name="cmb_Value" Height="22" MaxLength="{Binding valueMaxLength,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding TestControlPropertyInitialValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" PreviewTextInput="cmb_Value_PreviewTextInput" PreviewKeyDown="cmb_Value_PreviewKeyDown"  IsEnabled="{Binding valueIsEnabled}" GotFocus="cmb_Value_GotFocus"  GotKeyboardFocus="cmb_Value_GotFocus" GotMouseCapture="cmb_Value_GotFocus">-->
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBlock  Foreground="#FFCB2E2E" FontWeight="Medium" Text="{Binding DataTypeTextBlock,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" FontSize="11"  Visibility="{Binding valueIsEnabled}" Margin="0,0,0,0" x:Name="Value_Textblock" HorizontalAlignment="Stretch" Height="Auto" TextWrapping="Wrap" VerticalAlignment="Bottom" d:LayoutOverrides="Width" />
                            <!--<ComboBox ContextMenu="{x:Null}" x:Name="combobox_Value" ItemsSource="{Binding InitialComboList}" Visibility="{Binding valueComboboxVisibility}" SelectedItem="{Binding TestControlComboValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,-22,0,0"  HorizontalAlignment="Stretch" Width="Auto" RenderTransformOrigin="0.568,-0.211" />-->
                        </StackPanel>
                        <!--<StackPanel Grid.Column="6" x:Name="stack_TolerenceType" Margin="5,5,0,5" Background="#FF9CAAC1">
                        <Label Content="Tolerence Type" x:Name="lbl_TolerenceType" HorizontalAlignment="Left" Height="25" Margin="-4,0,0,0" />
                        <ComboBox x:Name="cmb_TolerenceType" ItemsSource="{Binding InputSelectionComboList}" IsEnabled="{Binding InputSelectionEnabled}" SelectedItem="{Binding InputSelectionComboSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>-->
                        <StackPanel Grid.Column="6" x:Name="stack_UpperLimit" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Upper Limit" x:Name="lbl_UpperLimit" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <TextBox x:Name="cmb_UpperLimit" Height="22" MaxLength="{Binding valueMaxLength,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding MaximumLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" IsEnabled="{Binding MaxLimitIsEnabled}" PreviewKeyDown="cmb_UpperLimit_PreviewKeyDown" PreviewTextInput="cmb_UpperLimit_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False" >
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <!--<ComboBox ContextMenu="{x:Null}" x:Name="combobox_Value" ItemsSource="{Binding InitialComboList}" Visibility="{Binding valueComboboxVisibility}" SelectedItem="{Binding TestControlComboValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,-22,0,0"  HorizontalAlignment="Stretch" Width="Auto" RenderTransformOrigin="0.568,-0.211" />-->
                        </StackPanel>
                        <StackPanel Grid.Column="7" x:Name="stack_LowerLimit" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Lower Limit" x:Name="lbl_LowerLimit" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <TextBox x:Name="cmb_LowerLimit" Height="22" MaxLength="{Binding valueMaxLength,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding MinimumLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" IsEnabled="{Binding MinLimitIsEnabled}" PreviewKeyDown="cmb_LowerLimit_PreviewKeyDown" PreviewTextInput="cmb_LowerLimit_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <!--<ComboBox ContextMenu="{x:Null}" x:Name="combobox_Value" ItemsSource="{Binding InitialComboList}" Visibility="{Binding valueComboboxVisibility}" SelectedItem="{Binding TestControlComboValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,-22,0,0"  HorizontalAlignment="Stretch" Width="Auto" RenderTransformOrigin="0.568,-0.211" />-->
                        </StackPanel>
                        <StackPanel Grid.Column="8" x:Name="stack_PlusMinus" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="9" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_VerifyControlMinus" VerticalAlignment="Top" Click="btn_VerifyControlMinus_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="9" x:Name="stack_VerifyCopy" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="9" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_VerifyControlCopy" VerticalAlignment="Top" Click="btn_VerifyControlCopy_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="10" Grid.Row="0" x:Name="stack_MoveUp" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="10" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_VerifyControlMoveUp" VerticalAlignment="Top" Click="btn_VerifyControlMoveUp_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="11" Grid.Row="0" x:Name="stack_VerifyMoveDown" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="11" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_VerifyControlMoveDown" VerticalAlignment="Top" Click="btn_VerifyControlMoveDown_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                    </Grid>
                </AdornerDecorator>
                <!--</ScrollViewer>-->
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyResponseAnalyzerContentDataTemplate" x:Shared="False">
                <!--<ScrollViewer VerticalScrollBarVisibility="Auto" >-->
                <AdornerDecorator>
                    <Grid Background="#FF9CAAC1" x:Name="ControlActionGrid" Margin="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>

                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="90" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="30" />

                        </Grid.ColumnDefinitions>
                        <StackPanel x:Name="stack_ResponsalyzerName" Grid.Column="0" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Responsalyzer Name" x:Name="lbl_ResponsalyzerName" HorizontalAlignment="Left" Height="25" Margin="-2,0,-0.01,0"/>
                            <ComboBox x:Name="cmb_ResponsalyzerName"  ItemsSource="{Binding TestResponsalyzerNameList}" SelectedItem="{Binding TestResponsalyzerNameSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Width="Auto" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}"  TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}},
                                      Path=ActualWidth}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="1" x:Name="stack_ResponsalyzerType" Margin="5,5,0,5" Background="#FF9CAAC1" >
                            <Label Content="Response Type Selection" x:Name="lbl_ResponsalyzerType" HorizontalAlignment="Left" Height="25" Width="140" Margin="-2,0,0,0"/>
                            <ComboBox x:Name="cmb_ResponsalyzerType"  ItemsSource="{Binding TestResponsalyzerTypeList}" SelectedItem="{Binding TestResponsalyzerTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Width="Auto" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}"  TextWrapping="Wrap"  MaxWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}},
                                      Path=ActualWidth}"  />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Grid.Column="2" x:Name="stack_VerificationFile" Margin="5,5,0,5" Background="#FF9CAAC1">
                            <Label Content="Verification File" x:Name="lbl_VerificationFile" HorizontalAlignment="Left" Height="25" Margin="-2,0,0,0"/>
                            <TextBox x:Name="cmb_VerificationFile" IsEnabled="False" Height="22" Text="{Binding TestResponsalyzerVerificationFile, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" IsReadOnly="True" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>

                            <!--<ComboBox ContextMenu="{x:Null}" x:Name="combobox_Value" ItemsSource="{Binding InitialComboList}" Visibility="{Binding valueComboboxVisibility}" SelectedItem="{Binding TestControlComboValueSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,-22,0,0"  HorizontalAlignment="Stretch" Width="Auto" RenderTransformOrigin="0.568,-0.211" />-->
                        </StackPanel>
                        <StackPanel Grid.Column="3" x:Name="stack_Browse" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button  Grid.Column="3" Name="btnVerifyFileBrowse" Content="Browse" HorizontalAlignment="Stretch" Margin="0,26,0,1" Style="{StaticResource ButtonStyle1}" Foreground="White" Focusable="False" VerticalAlignment="Center" Click="btnVerifyFileBrowse_Click" d:LayoutOverrides="Width" />
                        </StackPanel>
                        <StackPanel Grid.Column="4" x:Name="stack_PlusMinus" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="4" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_VerifyResponsalyzerMinus" VerticalAlignment="Top" Click="btn_VerifyResponsalyzerMinus_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="5" x:Name="stack_VerifyCopy" Margin="2,5,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="5" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_VerifyResponsalyzerCopy" VerticalAlignment="Top" Click="btn_VerifyResponsalyzerCopy_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="6" Grid.Row="0" x:Name="stack_MoveUp" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="6" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_VerifyResponsalyzerMoveUp" VerticalAlignment="Top" Click="btn_VerifyResponsalyzerMoveUp_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                        <StackPanel Grid.Column="7" Grid.Row="0" x:Name="stack_VerifyMoveDown" Margin="2,31,0,5" Background="#FF9CAAC1">
                            <Button Grid.Column="7" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_VerifyResponsalyzerMoveDown" VerticalAlignment="Top" Click="btn_VerifyResponsalyzerMoveDown_Click" Focusable="false">
                                <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <Button.Style>
                                    <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                                <Setter Property="Button.Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                    </Grid>
                </AdornerDecorator>
                <!--</ScrollViewer>-->
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyTelnetContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <ListBox Background="#FF9CAAC1" Grid.Row="0" BorderThickness="0" ItemsSource="{Binding TelnetVerifyTypeList}" SelectedItem="{Binding TelnetVerifyTypeSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemContainerStyle="{StaticResource ListBoxItemRadioButtonSytle}" Template="{StaticResource NoScroll}"/>
                    <Grid Grid.Column="1" Height="22" HorizontalAlignment="Left" Margin="115,5,0,0">
                        <ComboBox Height="23" Width="122"  ItemsSource="{Binding KeywordTypeList}" SelectedItem="{Binding KeywordTypeVerify}" ToolTip="{Binding keywordTypetooltip, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding TelnetFailureTextIsEnabled}"  Margin="-280,0,3,-21" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                    </Grid>
                    <Grid Background="White" Grid.Column="1" Width="500"  Margin="-15,0,-130,0" Height="23" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                        <TextBox Text="{Binding TelnetFailureText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="txt_Search1" Height="23" VerticalAlignment="Top"  IsEnabled="{Binding TelnetFailureTextIsEnabled}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False" Grid.ColumnSpan="3">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Enter Keyword For Failure Criteria" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyUsbAudioContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" x:Name="UsbAudioActionGrid" IsEnabled="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <StackPanel x:Name="stack_UsbAudioBridgeType" Grid.Column="1" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Bridge Name" x:Name="lbl_UsbAudioBridgeType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioBridgeType" ItemsSource="{Binding BridgeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding UsbAudioBridgeDeviceComboEnable,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay,NotifyOnTargetUpdated=True}" SelectedItem="{Binding UsbAudioBridgeTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbAudioType" Grid.Column="0" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Device Type" x:Name="lbl_UsbAudioType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioType" ItemsSource="{Binding UsbAudioDeviceTypeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}"  SelectedItem="{Binding UsbAudioTypeSelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">

                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbAudioDevices" Grid.Column="2" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Audio Endpoint" x:Name="lbl_UsbAudioDevices" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbAudioDevices" ItemsSource="{Binding UsbAudioDeviceDisplay,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding ElementName=cmb_UsbAudioBridgeType,Path=IsEnabled}" SelectedItem="{Binding UsbAudioDeviceSelectedItem,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="120" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel x:Name="stack_UsbDefaultDeviceType" Grid.Column="3" Grid.Row="0" Margin="10,5,0,5" Background="#FF9CAAC1" >
                        <Label Content="Set device as" x:Name="lbl_UsbUsbDefaultDeviceType" HorizontalAlignment="Left" Height="27" Margin="-2,0,0,0"/>
                        <ComboBox x:Name="cmb_UsbUsbDefaultDeviceType" ItemsSource="{Binding UsbDefaultDevicesOption,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" IsEnabled="{Binding ElementName=cmb_UsbAudioBridgeType,Path=IsEnabled}" SelectedItem="{Binding UsbDefaultDeviceOptionSelectedItem,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True}" TargetUpdated="controlElement_TargetUpdated"  Margin="-2,0,0,0" Width="150" Height="23" HorizontalAlignment="Left">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Width="140" TextWrapping="Wrap" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                    <Button Grid.Column="4" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,30,0,5"  x:Name="btn_SetUsbMinus" Click="btn_VerifyUsbMinus_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="5" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5" x:Name="btn_SetUsbCopy" Click="btn_VerifyUsbCopy_Click" VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="6" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUsbMoveUp" Click="btn_VerifyUsbMoveUp_Click"  VerticalAlignment="Center"  Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/Move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="7" Grid.Row="0" HorizontalAlignment="Right" Background="Transparent" BorderBrush="SteelBlue" Height="22"  Margin="0,30,0,5"   x:Name="btn_SetUsbMoveDown" Click="btn_VerifyUsbMoveDown_Click" VerticalAlignment="Center" Focusable="false">
                        <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Button.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=btn_SelectVerificationPlus, Path=Visibility}" Value="Hidden">
                                        <Setter Property="Button.Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate x:Key="VerifyLuaContentDataTemplare" x:Shared="False">
                <Grid Height="75" Background="#FF9CAAC1" IsEnabled="False">
                    <TextBox ToolTip="Keyword to Search in Output" Margin="14,25,0,0" Height="25" VerticalAlignment="Top" x:Name="controlkey_textbox" HorizontalAlignment="Left" Width="200" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>

                    <Button Content="Save Logs"  HorizontalAlignment="Left" Margin="243,25,0,25" x:Name="controlSave_button" RenderTransformOrigin="0.5,0.5"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="0.4"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Button.RenderTransform>
                    </Button>


                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyLogPcapContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"  />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0">
                        <Label Content="Protocol Name :" Height="27" HorizontalAlignment="Left" Margin="33,0,0,0" x:Name="label26" VerticalAlignment="Top"  />
                        <TextBox Text="{Binding PcapProtocolName , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Protocol Name" Margin="33,0,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" PreviewKeyDown="Pcap_Txtbox_PreviewKeyDown" PreviewTextInput="Pcap_Txtbox_PreviewTextInput"  AllowDrop="False" IsEnabled="{Binding PcapProtocolNameTxtIsEnabled}" >
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed"/>
                            </TextBox.ContextMenu>
                        </TextBox>
                    </StackPanel>

                    <StackPanel Grid.Column="1">
                        <Label Content="Field Text :" Height="27" HorizontalAlignment="Left" Margin="20,0,0,0" x:Name="label27" VerticalAlignment="Top"  />
                        <TextBox Text="{Binding PcapFieldText , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Field Text" Grid.Column="1" Margin="20,0,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False" IsEnabled="{Binding PcapProtocolNameTxtIsEnabled}" >
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed"/>
                            </TextBox.ContextMenu>
                        </TextBox>
                    </StackPanel>
                    <StackPanel Grid.Column="2" x:Name="stack_PlusMinus" Margin="2,0,0,5" Background="#FF9CAAC1">
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_PcapMinus" VerticalAlignment="Top" Click="btn_PcapMinus_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/Minus.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectPcapPlus, Path=Visibility}" Value="Collapsed">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel Grid.Column="3" x:Name="stack_VerifyCopy" Margin="2,0,0,5" Background="#FF9CAAC1">
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,26,0,1" x:Name="btn_PcapCopy" VerticalAlignment="Top" Click="btn_PcapCopy_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/copy.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectPcapPlus, Path=Visibility}" Value="Collapsed">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel Grid.Column="4" Margin="2,26,0,5" Background="#FF9CAAC1">
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_PcapMoveUp" VerticalAlignment="Top" Click="btn_PcapMoveUp_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/move-up.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectPcapPlus, Path=Visibility}" Value="Collapsed">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <StackPanel Grid.Column="5" Margin="2,26,0,5" Background="#FF9CAAC1">
                        <Button Background="Transparent" BorderBrush="SteelBlue" Height="22" Margin="0,0,0,1" x:Name="btn_PcapMoveDown" VerticalAlignment="Top" Click="btn_PcapMoveDown_Click" Focusable="false">
                            <Image Stretch="Uniform"  Source="/Images/move-down.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=btn_SelectPcapPlus, Path=Visibility}" Value="Collapsed">
                                            <Setter Property="Button.Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyLogContentDataTemplare" x:Shared="False">
                <Grid Background="#FF9CAAC1" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <!--<RowDefinition Height="*" />-->
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="160"  />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Content="Log Verification" Grid.Row="0" Height="27" HorizontalAlignment="Left" Margin="0,0,0,0" x:Name="label23" VerticalAlignment="Top" Width="100"  />
                    <CheckBox Content="ilog" Grid.Row="1" IsChecked="{Binding iLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox27" VerticalAlignment="Center" Width="100" />
                    <!--<CheckBox Content="Configurator Log" Grid.Row="2" IsChecked="{Binding ConfiguratorIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox7" VerticalAlignment="Center" Width="130" />-->
                    <CheckBox Content="Event Log" Grid.Row="3" IsChecked="{Binding EventLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox8" VerticalAlignment="Center" Width="100" />
                    <CheckBox Content="SIP Log" Grid.Row="4" IsChecked="{Binding SIPLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox9" VerticalAlignment="Center" Width="100" />
                    <CheckBox Content="Qsys App Log" Grid.Row="5" IsChecked="{Binding QsysAppLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Height="20" HorizontalAlignment="Left" Margin="33,0,0,0" x:Name="checkBox10" VerticalAlignment="Center" Width="100" />
                    <!--<CheckBox Content="SoftPhone Log" Grid.Row="6" IsChecked="{Binding SoftPhoneLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox11" VerticalAlignment="Top" Width="100" />-->
                    <CheckBox Content="UCI Viewer Log" Grid.Row="7" IsChecked="{Binding UCIViewerLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox12" VerticalAlignment="Center" Width="100" />
                    <CheckBox Content="Kernel Log" Grid.Row="8" IsChecked="{Binding KernelLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox13" VerticalAlignment="Center" Width="100" />
                    <CheckBox Content="Windows Event Logs" Grid.Row="9" IsChecked="{Binding WindowsEventLogsIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" x:Name="checkBox14" VerticalAlignment="Top" Width="140" />
                    <ComboBox Grid.Column="1" Grid.Row="1" IsEnabled="{Binding iLog_combobox_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding iLog_selected_item , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Log_verification_kernellog , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" HorizontalAlignment="right" Margin="10,0,0,0" x:Name="comboBox26" VerticalAlignment="Center" Width="174" />
                    <ComboBox Grid.Column="1" Grid.Row="8" IsEnabled="{Binding kernelLog_combobox_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  SelectedItem="{Binding kernalLog_selected_item , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  ItemsSource="{Binding Log_verification_kernellog , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" HorizontalAlignment="right"  Margin="10,0,0,0" x:Name="comboBox23" VerticalAlignment="Center" Width="174" />
                    <TextBox IsEnabled="{Binding ilogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding ilogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="1" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <!--<TextBox IsEnabled="{Binding configuratorlogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Text="{Binding configuratorlogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="2" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>-->
                    <TextBox IsEnabled="{Binding eventlogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding eventlogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="3" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox IsEnabled="{Binding siplogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding siplogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="4" Margin="10,2,5,2"  VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox IsEnabled="{Binding qsysapplogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Text="{Binding qsysapplogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="5" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <!--<TextBox ContextMenu="{x:Null}" IsEnabled="{Binding softphonelogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding softphonelogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="6" Height="18" Margin="10,3,5,0" />-->
                    <TextBox IsEnabled="{Binding UCIlogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding UCIlogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="7" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox IsEnabled="{Binding kernallogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding kernallogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="8" Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox IsEnabled="{Binding windowseventlogtext_enable , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding windowseventlogtext , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Search Keyword" Grid.Column="2" Grid.Row="9"  Margin="10,2,5,2" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <GroupBox Grid.Row="10" Grid.ColumnSpan="3" Background="#FF9CAAC1" BorderBrush="Black" >
                        <GroupBox.Header>
                            <TextBlock><Run Text="Pcap Log"/></TextBlock>
                        </GroupBox.Header>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="160"  />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <CheckBox Content="Pcap Log" Grid.Row="0" IsChecked="{Binding PcapLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Margin="33,20,0,0" x:Name="checkBox15" VerticalAlignment="Top" />
                            <Label Content="Stop capture after :" Grid.Row="0" Grid.Column="2" Height="27" HorizontalAlignment="Left" Margin="26,2,0,0" x:Name="label24" VerticalAlignment="Top"  />
                            <TextBlock  Width="Auto" Margin="180,24,0,0" Text="Verification will pass, if field text AVAILABLE in captured Pcap log file" Foreground="#004080"  HorizontalAlignment="Right" VerticalAlignment="Center"  Visibility="{Binding Pcaplabeltextvisibility}" TextWrapping="Wrap"  FontSize="11" FontWeight="DemiBold" Grid.Row="0" Grid.Column="2" Height="Auto" />
                            <!--<Label Content="Verification will pass, if field text AVAILABLE in captured Pcap log file" FontSize="11" x:Name="labelpcapmessage" Foreground="#004080" FontWeight="DemiBold" HorizontalAlignment="Right" Margin="0,0,0,-20" Grid.Row="0" Grid.Column="2" Height="27" Visibility="{Binding Pcaplabeltextvisibility}"  />-->

                            <Label  x:Name="label_selectLanPcap"  Content="Select LAN :"  Margin="-3,3,0,0" Grid.Row="0" Grid.Column="1" Height="27" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                            <Label  x:Name="label_selectFilterPcap" Content="Select filter :"  Margin="80,3,0,0" Grid.Row="0" Grid.Column="1" Height="27" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                            <Label  x:Name="label_filterByIpPcap" Content="Filter by IP :"  Margin="167,3,0,0" Grid.Row="0" Grid.Column="1" Height="27" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                            <StackPanel Grid.Row="0" Grid.Column="1">
                                <ComboBox x:Name="cmb_selectLan_pcap" Margin="0,25,0,0" Width="65" Height="22" VerticalAlignment="Top" HorizontalAlignment="Left" IsEnabled="{Binding PcapCaptureTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding PcapSelectLanCombo}" SelectedItem="{Binding PcapSelectLanComboSelecteditem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <ComboBox x:Name="cmb_selectFilter_pcap" Margin="85,-22,0,-10" Width="65" Height="22" VerticalAlignment="Top" HorizontalAlignment="Left" IsEnabled="{Binding PcapCaptureTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding PcapSelectFilterCombo}" SelectedItem="{Binding PcapSelectFilterComboSelecteditem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                                <TextBox x:Name="txtbox_filterbyIp_pcap" Margin="170,-22,5,-10" Width="120" Height="22" VerticalAlignment="Top" HorizontalAlignment="Left" IsEnabled="{Binding PcapCaptureTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding PcapFilterByIP, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                                <CheckBox x:Name="chkbx_Notfilterbyip" VerticalAlignment="Top" HorizontalAlignment="Left" IsChecked="{Binding PcapNotFilterByIP, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="295,-18,0,0"/>
                                <Label x:Name="Label_not_filterbyip" Content="!IP" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="307,-24,0,0"/>
                            </StackPanel>
                            <StackPanel Grid.Row="0" Grid.Column="2" Orientation="Horizontal"  Margin="20,24,0,0">
                                <TextBox IsEnabled="{Binding PcapCaptureTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding PcaplogDelaySetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="10,0,5,2" x:Name="txt_DelayforAction" Style="{x:Null}" Width="47" VerticalAlignment="Top" HorizontalAlignment="Left" MaxLength="5" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown"  PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                                <ComboBox x:Name="cmb_pcapTime" IsEnabled="{Binding PcapCaptureUnitVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding PcapdelayCombo}" SelectedItem="{Binding PcapDelayUnitSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                <Button Background="Transparent" Visibility="{Binding SelectPcapPlusButtonVisibility}" BorderBrush="SteelBlue" Height="22" Margin="10,0,0,1" x:Name="btn_SelectPcapPlus" VerticalAlignment="Top" Click="btn_SelectPcapPlus_Click"  HorizontalAlignment="Left" Width="24.333">
                                    <Image Stretch="Uniform"  Source="/Images/Add.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                </Button>
                            </StackPanel>
                            <ScrollViewer Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="5" VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                <ItemsControl x:Name="tabItemVerifypcap" ItemsSource="{Binding SetTestPcapList}" ItemTemplate="{StaticResource VerifyLogPcapContentDataTemplate}">
                                </ItemsControl>
                            </ScrollViewer>
                        </Grid>
                    </GroupBox>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="APxSettingsListDataTemplate" x:Shared="False">
                <GroupBox Background="#FF9CAAC1" BorderBrush="Black" >
                    <GroupBox.Header>
                        <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Ap Settings"/></TextBlock>
                    </GroupBox.Header>
                    <Grid Background="#FF9CAAC1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Label x:Name="lbl_mode" Content="Mode :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="95,0,0,0"/>
                        <ComboBox x:Name="cmb_ClockType" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Margin="180,0,0,0" SelectedValue="{Binding cmbTypeOfMode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Content">
                            <ComboBoxItem>BenchMode</ComboBoxItem>
                            <ComboBoxItem>SequenceMode</ComboBoxItem>
                        </ComboBox>
                        <Grid Name="Grid_BenchMode" Grid.Row="1"  Background="#FF9CAAC1" Margin="5,0,5,0" Visibility="{Binding BenchModeGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100" />
                                <ColumnDefinition Width="150" />
                                <ColumnDefinition Width="50" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Btn_GenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkBenchGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,10,0,5" IsChecked="{Binding ChkBenchGenON,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <Label Grid.Row="1" x:Name="lbl_BenchWaveform" Content="Waveform :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <ComboBox Grid.Row="1" Grid.Column="1" x:Name="cmb_BenchWaveform" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" ItemsSource="{Binding cmb_BenchWaveformList, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_BenchWaveform,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectionChanged="cmb_BenchWaveform_SelectionChanged" />
                            <CheckBox Grid.Row="2" Grid.Column="1" x:Name="chkBx_BenchLevelTrackCh" Content="Level Track Ch1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,5,0,0" IsChecked="{Binding chkBx_BenchLevelTrackCh,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <Label Grid.Row="1" Grid.Column="3" x:Name="lbl_BenchLevel" Content="Level" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                            <Label Grid.Row="1" Grid.Column="4" x:Name="lbl_BenchDcOffset" Content="DC Offset" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                            <Label Grid.Row="2" Grid.Column="3" x:Name="lbl_BenchCh1" Content="Ch1 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0"/>
                            <TextBox Grid.Row="2" Grid.Column="3" x:Name="cmb_BenchLevel" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="2" Grid.Column="4" x:Name="cmb_BenchDcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="3" Grid.Column="3" x:Name="lbl_BenchCh2" Content="Ch2 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh2Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="3" Grid.Column="3" x:Name="cmb_BenchLevelCh2" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchLevelCh2Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="3" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh2" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh2Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>

                            <Label Grid.Row="4" Grid.Column="3" x:Name="lbl_BenchCh3" Content="Ch3 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh3Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="4" Grid.Column="3" x:Name="cmb_BenchLevelCh3" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Visibility="{Binding txtBenchLevelCh3Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="4" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh3" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh3Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="5" Grid.Column="3" x:Name="lbl_BenchCh4" Content="Ch4 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh4Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="5" Grid.Column="3" x:Name="cmb_BenchLevelCh4" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchLevelCh4Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="5" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh4" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh4Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="6" Grid.Column="3" x:Name="lbl_BenchCh5" Content="Ch5 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh5Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="6" Grid.Column="3" x:Name="cmb_BenchLevelCh5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchLevelCh5Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="6" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh5Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>

                            <Label Grid.Row="7" Grid.Column="3" x:Name="lbl_BenchCh6" Content="Ch6 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh6Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="7" Grid.Column="3" x:Name="cmb_BenchLevelCh6" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchLevelCh6Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="7" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh6" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh6Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>

                            <Label Grid.Row="8" Grid.Column="3" x:Name="lbl_BenchCh7" Content="Ch7 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh7Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="8" Grid.Column="3" x:Name="cmb_BenchLevelCh7" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchLevelCh7Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="8" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh7" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh7Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="9" Grid.Column="3" x:Name="lbl_BenchCh8" Content="Ch8 :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,5,0" Visibility="{Binding lblBenchCh8Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="9" Grid.Column="3" x:Name="cmb_BenchLevelCh8" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,0,5,0" Text="{Binding txt_BenchLevelCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Visibility="{Binding txtBenchLevelCh8Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="9" Grid.Column="4" x:Name="cmb_BenchDcOffsetCh8" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding txt_BenchDcOffsetCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchDcOffsetCh8Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="10" Grid.Column="3" x:Name="lbl_BenchFrequencyA" Content="Frequency A:" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            <TextBox Grid.Row="10" Grid.Column="3" x:Name="cmb_BenchfrequencyA" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,5,5,5" Text="{Binding txt_BenchfrequencyA,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="11" Grid.Column="3" x:Name="lbl_BenchFrequencyB" Content="Frequency B:" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding lblBenchFreqBVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="11" Grid.Column="3" x:Name="cmb_BenchfrequencyB" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="75,5,5,5" Text="{Binding txt_BenchfrequencyB,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtBenchFreqBVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="12" Grid.Column="0" x:Name="lbl_BenchChannels" Content="Channels :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,0,0,0"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="0,5,0,0" IsChecked="{Binding ChkBenchCh1Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh1EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="15,5,0,0" IsChecked="{Binding ChkBenchCh2Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh2EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="30,5,0,0" IsChecked="{Binding ChkBenchCh3Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh3EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="45,5,0,0" IsChecked="{Binding ChkBenchCh4Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh4EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="60,5,0,0" IsChecked="{Binding ChkBenchCh5Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh5EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="75,5,0,0" IsChecked="{Binding ChkBenchCh6Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh6EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="90,5,0,0" IsChecked="{Binding ChkBenchCh7Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh7EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="btn_BenchCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="105,5,0,0" IsChecked="{Binding ChkBenchCh8Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkBenchCh8EnableVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <Label Grid.Column="0" Grid.Row="13" x:Name="lbl_ReadingType"  IsEnabled="False" Content="Reading Type :" Visibility ="Hidden"  HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <ComboBox Grid.Column="1" Grid.Row="13" IsEnabled="False" x:Name="comboBox1" Visibility ="Hidden" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" SelectedItem="{Binding cmb_SeqModeReadingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                        <Grid Name="Grid_SeqMode" Grid.Row="1"  Background="#FF9CAAC1" Margin="5,0,5,0" Visibility="{Binding SeqModeGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100" />
                                <ColumnDefinition Width="200" />
                                <ColumnDefinition Width="210" />
                                <ColumnDefinition Width="130" />
                            </Grid.ColumnDefinitions>
                            <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Btn_SeqGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkSeqGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15,15,5,15" IsChecked="{Binding ChkSeqGenON,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <Label Grid.Row="1" x:Name="lbl_SeqWaveform" Content="Waveform :" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                            <ComboBox Grid.Row="1" Grid.Column="1" x:Name="cmb_seqWaveform" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="0,0,0,0" ItemsSource="{Binding cmb_SeqWaveformList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmbSeqWaveForm,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectionChanged="cmb_seqWaveform_SelectionChanged"/>
                            <Label Grid.Row="2" x:Name="lbl_SeqTestCh" Content="Test Channel :" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                            <ComboBox Grid.Row="2" Grid.Column="1" x:Name="cmb_seqTestCh" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="0" ItemsSource="{Binding cmbSeqTestChList, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmbSeqTestChannel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <CheckBox Grid.Row="3" Grid.Column="1" x:Name="chkBx_SeqLevelTrackCh" Content="Level Track Ch1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,5,0,0" IsChecked="{Binding ChkSeqTrackCh, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Label Grid.Row="2" Grid.Column="2" x:Name="lbl_SeqLevel" Content="Level" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Label Grid.Row="2" Grid.Column="3" x:Name="lbl_SeqDcOffset" Content="DC Offset" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="36,5,30,0"/>
                            <Label Grid.Row="3" Grid.Column="2" x:Name="lbl_SeqCh1" Content="Ch1 :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <TextBox Grid.Row="3" Grid.Column="2" x:Name="cmb_SeqLevelCh1" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="3" Grid.Column="3" x:Name="cmb_SeqDcOffset" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="4" Grid.Column="2" x:Name="lbl_SeqCh2" Content="Ch2 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh2Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="4" Grid.Column="2" x:Name="cmb_SeqLevelCh2" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh2Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="4" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh2" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh2Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="5" Grid.Column="2" x:Name="lbl_SeqCh3" Content="Ch3 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh3Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="5" Grid.Column="2" x:Name="cmb_SeqLevelCh3" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh3, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh3Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="5" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh3" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh3, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh3Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="6" Grid.Column="2" x:Name="lbl_SeqCh4" Content="Ch4 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh4Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="6" Grid.Column="2" x:Name="cmb_SeqLevelCh4" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh4, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh4Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="6" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh4" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh4, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh4Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="7" Grid.Column="2" x:Name="lbl_SeqCh5" Content="Ch5 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh5Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="7" Grid.Column="2" x:Name="cmb_SeqLevelCh5" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh5, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh5Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="7" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh5" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh5, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh5Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="8" Grid.Column="2" x:Name="lbl_SeqCh6" Content="Ch6 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh6Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="8" Grid.Column="2" x:Name="cmb_SeqLevelCh6" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh6, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh6Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="8" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh6" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh6, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh6Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="9" Grid.Column="2" x:Name="lbl_SeqCh7" Content="Ch7 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh7Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="9" Grid.Column="2" x:Name="cmb_SeqLevelCh7" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh7, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh7Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="9" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh7" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh7, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh7Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="10" Grid.Column="2" x:Name="lbl_SeqCh8" Content="Ch8 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblSeqCh8Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="10" Grid.Column="2" x:Name="cmb_SeqLevelCh8" HorizontalAlignment="Right" VerticalAlignment="Center" Width="120" Margin="55,0,5,0" Text="{Binding TxtSeqLevelCh8, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqLevelCh8Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <TextBox Grid.Row="10" Grid.Column="3" x:Name="cmb_SeqDcOffsetCh8" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" Text="{Binding TxtSeqLevelDcCh8, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqDCOffsetCh8Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="11" Grid.Column="2" x:Name="lbl_SeqFrequencyA" Content="Frequency A :" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            <TextBox Grid.Row="11" Grid.Column="2" x:Name="cmb_SeqfrequencyA" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="85,5,5,5" Text="{Binding TxtSeqFreqA, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="12" Grid.Column="2" x:Name="lbl_SeqFrequencyB" Content="Frequency B :" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding lblSeqFreqBVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBox Grid.Row="12" Grid.Column="2" x:Name="cmb_SeqfrequencyB" HorizontalAlignment="Center" VerticalAlignment="Center" Width="120" Margin="85,5,5,5" Text="{Binding TxtSeqFreqB, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtSeqFreqBVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <Label Grid.Row="12" Grid.Column="0" x:Name="lbl_SeqChannels" Content="Channels :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,5,0,0"/>
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="0,0,1,0" IsChecked="{Binding ChkSeqCh1Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh1EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="15,0,1,0" IsChecked="{Binding ChkSeqCh2Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh2EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="30,0,1,0" IsChecked="{Binding ChkSeqCh3Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh3EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="45,0,1,0" IsChecked="{Binding ChkSeqCh4Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh4EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="60,0,1,0" IsChecked="{Binding ChkSeqCh5Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh5EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="75,0,1,0" IsChecked="{Binding ChkSeqCh6Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh6EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="90,0,1,0" IsChecked="{Binding ChkSeqCh7Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh7EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_SeqCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="105,0,2,0" IsChecked="{Binding ChkSeqCh8Enable,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkSeqCh8EnableVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Label Grid.Row="13" Grid.Column="0" x:Name="lbl_Delay" Content="Delay :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <TextBox Grid.Row="13" Grid.Column="1" x:Name="txt_Delay" HorizontalAlignment="Left" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" Width="120" Text="{Binding TxtSeqDelay,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                        </Grid>
                        <Grid Grid.Row="1" Name="Grid_BlankPage" Background="#FF9CAAC1" Visibility="Hidden" />
                    </Grid>
                </GroupBox>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="APxLevelAndGainListDataTemplate" x:Shared="False">
                <!--<GroupBox Grid.Row="2" Grid.ColumnSpan="2" Background="#FF9CAAC1" BorderBrush="Black">
                    <GroupBox.Header>
                        <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Ap Verification"/></TextBlock>
                    </GroupBox.Header>
                    <Grid Background="#FF9CAAC1" Margin="-1,0,1,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Label x:Name="label" Content="Verification :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="75,5,0,0"/>
                        <ComboBox x:Name="cmb_VerificationType" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="180,5,0,0" SelectedValue="{Binding cmbTypeOfVerfication, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Content">
                            <ComboBoxItem IsEnabled="False">Frequency sweep</ComboBoxItem>
                            <ComboBoxItem>Level and Gain</ComboBoxItem>
                            <ComboBoxItem IsEnabled="False">Phase</ComboBoxItem>
                            <ComboBoxItem IsEnabled="False">Stepped Frequency Sweep</ComboBoxItem>
                            <ComboBoxItem IsEnabled="False">THD</ComboBoxItem>
                        </ComboBox>-->
                <Grid Name="GrpBx_LevelAndGain"  Background="#FF9CAAC1"  Grid.Row="1" Margin="0,5,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition Width="150" />
                        <ColumnDefinition Width="50" />
                        <ColumnDefinition Width="200" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Chk_GainGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkGainGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,20,5,15" IsChecked="{Binding ChkGainGenON, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="1" x:Name="lbl_Waveform" Content="Waveform :" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="1" Grid.Column="1" x:Name="cmb_GainWaveform" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" ItemsSource="{Binding cmbGainWaveformList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_GainWaveform,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectionChanged="cmb_GainWaveform_SelectionChanged"/>
                    <CheckBox Grid.Row="2" Grid.Column="1" x:Name="chkBx_GainLevelTrackCh" Content="Level Track Ch1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5" IsChecked="{Binding chkBx_GainLevelTrackCh,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="1" Grid.Column="3" x:Name="lbl_Level" Content="Level" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    <Label Grid.Row="1" Grid.Column="4" x:Name="lbl_DcOffset" Content="DC Offset" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    <Label Grid.Row="2" Grid.Column="3" x:Name="lbl_Ch1" Content="Ch1 :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    <TextBox Grid.Row="2" Grid.Column="3" x:Name="txt_GainCh1Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh1Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="2" Grid.Column="4" x:Name="txt_GainDcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh1Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="3" Grid.Column="3" x:Name="lbl_Ch2" Content="Ch2 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh2Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="3" Grid.Column="3" x:Name="txt_GainCh2Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh2Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh2Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="3" Grid.Column="4" x:Name="txt_GainCh2DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh2Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh2Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="4" Grid.Column="3" x:Name="lbl_Ch3" Content="Ch3 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh3Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="4" Grid.Column="3" x:Name="txt_GainCh3Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh3Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh3Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="4" Grid.Column="4" x:Name="txt_GainCh3DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh3Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh3Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="5" Grid.Column="3" x:Name="lbl_Ch4" Content="Ch4 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh4Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="5" Grid.Column="3" x:Name="txt_GainCh4Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh4Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh4Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="5" Grid.Column="4" x:Name="txt_GainCh4DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh4Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh4Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="6" Grid.Column="3" x:Name="lbl_Ch5" Content="Ch5 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh5Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="6" Grid.Column="3" x:Name="txt_GainCh5Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh5Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh5Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="6" Grid.Column="4" x:Name="txt_GainCh5DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh5Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh5Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="7" Grid.Column="3" x:Name="lbl_Ch6" Content="Ch6 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh6Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="7" Grid.Column="3" x:Name="txt_GainCh6Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh6Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh6Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="7" Grid.Column="4" x:Name="txt_GainCh6DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh6Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh6Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="8" Grid.Column="3" x:Name="lbl_Ch7" Content="Ch7 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh7Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="8" Grid.Column="3" x:Name="txt_GainCh7Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh7Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh7Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="8" Grid.Column="4" x:Name="txt_GainCh7DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh7Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh7Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="9" Grid.Column="3" x:Name="lbl_Ch8" Content="Ch8 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblGainCh8Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="9" Grid.Column="3" x:Name="txt_GainCh8Level" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainCh8Level,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainLevelCh8Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="9" Grid.Column="4" x:Name="txt_GainCh8DcOffset" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5,0,5,0" Text="{Binding txt_GainDcCh8Offset,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainDCOffsetCh8Visible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="10" Grid.Column="3" x:Name="lbl_Frequency" Content="Frequency A: " HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="10" Grid.Column="3" x:Name="txt_Gainfrequency" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainfrequencyA,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="11" Grid.Column="3" x:Name="lbl_FrequencyB" Content="Frequency B:" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding lblGainFreqBVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="11" Grid.Column="3" x:Name="txt_GainfrequencyB" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="78,0,0,0" Text="{Binding txt_GainfrequencyB,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtGainFreqBVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="11" Grid.Column="0" x:Name="lbl_Channels" Content="Channels :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,5,0,0"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="0,5,1,15" IsChecked="{Binding btn_GainCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh1EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="15,5,1,15" IsChecked="{Binding btn_GainCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh2EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="30,5,1,15" IsChecked="{Binding btn_GainCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh3EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="45,5,1,15" IsChecked="{Binding btn_GainCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh4EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="60,5,1,15" IsChecked="{Binding btn_GainCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh5EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="75,5,1,15" IsChecked="{Binding btn_GainCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh6EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="90,5,1,15" IsChecked="{Binding btn_GainCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh7EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="11" Grid.Column="1" x:Name="btn_GainCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="105,5,2,15" IsChecked="{Binding btn_GainCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkGainCh8EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="12" Grid.Column="0" x:Name="lbl_Verify" Content="Gain Verification:" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Label Grid.Row="13" Grid.Column="0" x:Name="lbl_GainCh1" Content="Ch1 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh1Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="13" Grid.Column="1" x:Name="txt_GainCh1" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh1Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="14" Grid.Column="0" x:Name="lbl_GainCh2" Content="Ch2 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh2Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="14" Grid.Column="1" x:Name="txt_GainCh2" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh2Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="15" Grid.Column="0" x:Name="lbl_GainCh3" Content="Ch3 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh3Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="15" Grid.Column="1" x:Name="txt_GainCh3" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh3Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="16" Grid.Column="0" x:Name="lbl_GainCh4" Content="Ch4 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh4Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="16" Grid.Column="1" x:Name="txt_GainCh4" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh4Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="17" Grid.Column="0" x:Name="lbl_GainCh5" Content="Ch5 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh5Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="17" Grid.Column="1" x:Name="txt_GainCh5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh5Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="18" Grid.Column="0" x:Name="lbl_GainCh6" Content="Ch6 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh6Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="18" Grid.Column="1" x:Name="txt_GainCh6" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh6Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="19" Grid.Column="0" x:Name="lbl_GainCh7" Content="Ch7 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh7Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="19" Grid.Column="1" x:Name="txt_GainCh7" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh7Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="20" Grid.Column="0" x:Name="lbl_GainCh8" Content="Ch8 :" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding lblGainVerifyCh8Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="20" Grid.Column="1" x:Name="txt_GainCh8" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtGainCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtGainCh8Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="12" Grid.Column="3" x:Name="lbl_Uptolerance" Content="Upper Tolerance:" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Label Grid.Row="12" Grid.Column="3" Grid.ColumnSpan="4" x:Name="lbl_Lowtolerance" Content="Lower Tolerance:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="130,0,0,0"/>
                    <TextBox Grid.Row="13" Grid.Column="3" x:Name="txt_GainCh1UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh1Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="13" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh1LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh1Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="14" Grid.Column="3" x:Name="txt_GainCh2UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh2Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="14" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh2LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh2Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="15" Grid.Column="3" x:Name="txt_GainCh3UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh3Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="15" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh3LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh3Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="16" Grid.Column="3" x:Name="txt_GainCh4UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh4Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="16" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh4LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh4Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="17" Grid.Column="3" x:Name="txt_GainCh5UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh5Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="17" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh5LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh5Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="18" Grid.Column="3" x:Name="txt_GainCh6UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh6Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="18" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh6LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh6Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="19" Grid.Column="3" x:Name="txt_GainCh7UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh7Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="19" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh7LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh7Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="20" Grid.Column="3" x:Name="txt_GainCh8UpTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="0,0,0,0" Text="{Binding TxtUpToleranceGainCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtUpToleranceGainCh8Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <TextBox Grid.Row="20" Grid.Column="3" Grid.ColumnSpan="4" x:Name="txt_GainCh8LowTol" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="22" Margin="130,2,0,2" Text="{Binding TxtLowToleranceGainCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowToleranceGainCh8Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_Gain_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                </Grid>
                <!--</Grid>
                </GroupBox>-->
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="APxFreqResponseListDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="130" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <CheckBox Grid.Column="1" x:Name="Chk_FreqGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="Start " HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,20,0,10" IsChecked="{Binding StartGenON, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="1" Grid.Column="0" x:Name="lbl_StartFreq" Content="Start Frequency :" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="1" Grid.Column="1" x:Name="txt_StartFreq" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5" Text="{Binding txtStartFreq,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="2" Grid.Column="0" x:Name="lbl_StopFreq" Content="Stop Frequency :" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="2" Grid.Column="1" x:Name="txt_StopFreq" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5" Text="{Binding txtStopFreq,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="3" Grid.Column="0" x:Name="lbl_level" Content="Level :" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="3" Grid.Column="1" x:Name="txtLevel" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Height="23" Margin="5" Text="{Binding txtLevel,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="4" Grid.Column="0" x:Name="lbl_Channel" Content="Channels :" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh1Enable" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="0,5,1,15" IsChecked="{Binding IsEnableCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch1EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btn_Ch2Enable" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="15,5,1,15" IsChecked="{Binding IsEnableCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch2EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh3Enable" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="30,5,1,15" IsChecked="{Binding IsEnableCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch3EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh4Enable" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="45,5,1,15" IsChecked="{Binding IsEnableCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch4EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh5Enable" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="60,5,1,15" IsChecked="{Binding IsEnableCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch5EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh6Enable" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="75,5,1,15" IsChecked="{Binding IsEnableCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch6EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh7Enable" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="90,5,1,15" IsChecked="{Binding IsEnableCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch7EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="4" Grid.Column="1" x:Name="btnCh8Enable" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="105,5,2,15" IsChecked="{Binding IsEnableCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch8EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="5" Grid.Column="0" x:Name="lbl_Verification" Content="Verification File:" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <TextBox Grid.Row="5" Grid.Column="2" IsEnabled="False" x:Name="txt_BrowseFreqVerication" HorizontalAlignment="Left" VerticalAlignment="Center" Width="250" Height="23" Margin="-30,0,0,0" Text="{Binding txtFreqVerification,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Button Grid.Row="5" Grid.Column="1" Name="btn_Browse" Content="Browse" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle1}" Foreground="White" Focusable="False" Margin="5,0,0,0" VerticalAlignment="Center" Click="btn_FreqVerificationBrowse_Click" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="ApxSteppedFreqSweepTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="130" />
                        <ColumnDefinition Width="250" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Chk_SteppedFreqGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,20,5,15" IsChecked="{Binding ChkGenON, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="1" Grid.Column="0" x:Name="lbl_SteppedStartFreq" Content="Start Frequency :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="1" Grid.Column="1" x:Name="Txt_SteppedStartFreq" HorizontalAlignment="Left" VerticalAlignment="Top" Height="23" Width="120" Margin="5" Text="{Binding StartFrequency, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="2" Grid.Column="0" x:Name="lbl_SteppedStopFreq" Content="Stop Frequency :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="2" Grid.Column="1" x:Name="Txt_SteppedStopFreq" HorizontalAlignment="Left" VerticalAlignment="Top" Height="23" Width="120" Margin="5" Text="{Binding StopFrequency, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="3" Grid.Column="0" x:Name="lbl_SteppedSweep" Content="Sweep :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <ComboBox Grid.Row="3" Grid.Column="1" x:Name="Txt_SteppedSweep" HorizontalAlignment="Left" VerticalAlignment="Top" Height="23" Width="120" Margin="5" ItemsSource="{Binding cmbSweepList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding SelectedSweep, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="4" Grid.Column="0" x:Name="lbl_SteppedPoints" Content="Points :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="4" Grid.Column="1" x:Name="Txt_SteppedPoints" HorizontalAlignment="Left" VerticalAlignment="Top" Height="23" Width="120" Margin="5" Text="{Binding Steppedpoints, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="5" Grid.Column="0" x:Name="lbl_SteppedLevel" Content="Level :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="5" Grid.Column="1" x:Name="Txt_SteppedLevel" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Height="23" Margin="5" Text="{Binding SteppedLevel, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>

                    <Label Grid.Row="6" Grid.Column="0" x:Name="lbl_SteppedRefChannel" Content="Phase Ref Channel :" HorizontalAlignment="Right" VerticalAlignment="Top" />
                    <ComboBox Grid.Row="6" Grid.Column="1" x:Name="Txt_PhaseRefCh" HorizontalAlignment="Left" VerticalAlignment="Top" Height="23" Width="120" Margin="5" ItemsSource="{Binding cmbPhaseRefChList, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmbPhaseRefChannel, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="7" Grid.Column="0" x:Name="lbl_SteppedChannels" Content="Channels :" HorizontalAlignment="Right" VerticalAlignment="Top" />
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="5,5,1,5" IsChecked="{Binding IsEnableCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch1Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="20,5,1,5" IsChecked="{Binding IsEnableCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch2Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="35,5,1,5" IsChecked="{Binding IsEnableCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch3Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="50,5,1,5" IsChecked="{Binding IsEnableCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch4Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="65,5,1,5" IsChecked="{Binding IsEnableCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch5Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="80,5,1,5" IsChecked="{Binding IsEnableCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch6Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="95,5,1,5" IsChecked="{Binding IsEnableCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch7Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="7" Grid.Column="1" x:Name="ToggleCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="110,5,2,5" IsChecked="{Binding IsEnableCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding Ch8Visible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="8" Grid.Column="0" x:Name="lbl_Verification" Content="Verification File:" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <TextBox Grid.Row="9" Grid.Column="1" IsEnabled="False" x:Name="txt_BrowseSteppedFreqVerication" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="23" Margin="5" Text="{Binding txtSteppedFreqVerification,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Button Grid.Row="9" Grid.Column="0" Name="btn_SteppedBrowse" Content="Browse" HorizontalAlignment="Right" Style="{StaticResource ButtonStyle1}" Foreground="WhiteSmoke" Focusable="False" Margin="5" VerticalAlignment="Center" Click="btn_steppedFreqVerificationBrowse_Click" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="ApxInterChannelPhaseTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="130" />
                        <ColumnDefinition Width="140" />
                        <ColumnDefinition Width="200" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Btn_InterChGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,20,5,15" IsChecked="{Binding ChkGenON, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <CheckBox Grid.Row="1" Grid.Column="1" x:Name="chkBx_InterChLevelTrackCh" Content="Level Track Ch1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5" IsChecked="{Binding SteppedTrackChannel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="0" Grid.Column="2" x:Name="lbl_InterChLevel" Content="Level" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="5,20,5,0"/>
                    <Label Grid.Row="1" Grid.Column="2" x:Name="lbl_InterChCh1" Content="Ch1 :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    <TextBox Grid.Row="1" Grid.Column="2" x:Name="cmb_InterChLevel1" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh1, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="2" Grid.Column="2" x:Name="lbl_InterChCh2" Content="Ch2 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh2Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="2" Grid.Column="2" x:Name="cmb_InterChLeve2" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh2, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh2Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="3" Grid.Column="2" x:Name="lbl_InterChCh3" Content="Ch3 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh3Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="3" Grid.Column="2" x:Name="cmb_InterChLeve3" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh3, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh3Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="4" Grid.Column="2" x:Name="lbl_InterChCh4" Content="Ch4 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh4Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="4" Grid.Column="2" x:Name="cmb_InterChLeve4" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh4, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh4Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="5" Grid.Column="2" x:Name="lbl_InterChCh5" Content="Ch5 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh5Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="5" Grid.Column="2" x:Name="cmb_InterChLeve5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh5, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh5Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="6" Grid.Column="2" x:Name="lbl_InterChCh6" Content="Ch6 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh6Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="6" Grid.Column="2" x:Name="cmb_InterChLeve6" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh6, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh6Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="7" Grid.Column="2" x:Name="lbl_InterChCh7" Content="Ch7 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh7Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="7" Grid.Column="2" x:Name="cmb_InterChLeve7" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh7, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh7Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="8" Grid.Column="2" x:Name="lbl_InterChCh8" Content="Ch8 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lbllevelCh8Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="8" Grid.Column="2" x:Name="cmb_InterChLeve8" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="50,0,5,0" Text="{Binding LevelCh8, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtlevelCh8Visible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="9" Grid.Column="0" x:Name="lbl_InterChFrequency" Content="Frequency :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="9" Grid.Column="1" x:Name="cmb_InterChfrequency" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5" Text="{Binding TxtFreqA, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="Txt_APx_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="10" Grid.Column="0" x:Name="lbl_InterChRefCh" Content="Ref Channel :" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,5,0,0"/>
                    <ComboBox Grid.Row="10" Grid.Column="1" x:Name="cmb_InterChRefCh" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,10,0,5" ItemsSource="{Binding RefChannelList, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding CmbRefChannelSelected, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="11" Grid.Column="0" x:Name="lbl_InterChMeterRange" Content="Meter Range :" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="11" Grid.Column="1" x:Name="cmb_InterChMeterRange" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5" ItemsSource="{Binding MeterRangeList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding MeterRangeSelected, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="12" Grid.Column="0" x:Name="lbl_InterChChannels" Content="Channels :" HorizontalAlignment="Right" VerticalAlignment="Top" />
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="5,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch1Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch1Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="20,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch2Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch2Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="35,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch3Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch3Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="50,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch4Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch4Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="65,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch5Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch5Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="80,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch6Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch6Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="95,0,0,10" Background="#FFC79B6C" IsChecked="{Binding Isch7Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch7Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="12" Grid.Column="1" x:Name="Btn_InterChCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Grid.ColumnSpan="1" Margin="110,0,2,10" Background="#FFC79B6C" IsChecked="{Binding Isch8Enable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Ch8Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="13" Grid.Column="0" x:Name="lbl_Verification" Content="Verification File:" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <TextBox Grid.Row="13" Grid.Column="2" IsEnabled="False" x:Name="txt_BrowsePhaseVerication" HorizontalAlignment="Left" VerticalAlignment="Center" Width="250" Height="23" Margin="-30,0,0,0" Text="{Binding txtPhaseVerification,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Button Grid.Row="13" Grid.Column="1" Name="btn_PhaseBrowse" Content="Browse" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle1}" Foreground="White" Focusable="False" Margin="5,0,0,0" VerticalAlignment="Center" Click="btn_PhaseVerificationBrowse_Click" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="ApxTHDNTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="50" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Grid.Column="1" x:Name="Chk_ThdnGenOn" Style="{StaticResource OrangeSwitchStyle}" Content="{Binding ChkGenONContent,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,10,5,15" IsChecked="{Binding ChkGenON, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <CheckBox Grid.Row="1" Grid.Column="1" x:Name="chkBx_THDLevelTrackCh" Content="Level Track Ch1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,5,0" IsChecked="{Binding chkBx_ThdnLevelTrackCh, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="0" Grid.Column="3" x:Name="lbl_THDLevel" Content="Level" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                    <Label Grid.Row="1" Grid.Column="3" x:Name="lbl_THDCh1" Content="Ch1 :" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    <TextBox Grid.Row="1" Grid.Column="3" x:Name="txt_THDLevel" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Text="{Binding txtCh1Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="2" Grid.Column="3" x:Name="lbl_THDCh2" Content="Ch2 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh2Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="2" Grid.Column="3" x:Name="txt_THDLevelCh2" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh2Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh2Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="3" Grid.Column="3" x:Name="lbl_THDCh3" Content="Ch3 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh3Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="3" Grid.Column="3" x:Name="txt_THDLevelCh3" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh3Visibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh3Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="4" Grid.Column="3" x:Name="lbl_THDCh4" Content="Ch4 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh4Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="4" Grid.Column="3" x:Name="txt_THDLevelCh4" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh4Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh4Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="5" Grid.Column="3" x:Name="lbl_THDCh5" Content="Ch5 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh5Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="5" Grid.Column="3" x:Name="txt_THDLevelCh5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh5Visibility,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh5Content,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="6" Grid.Column="3" x:Name="lbl_THDCh6" Content="Ch6 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh6Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="6" Grid.Column="3" x:Name="txt_THDLevelCh6" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh6Visibility,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh6Content, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="7" Grid.Column="3" x:Name="lbl_THDCh7" Content="Ch7 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh7Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="7" Grid.Column="3" x:Name="txt_THDLevelCh7" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh7Visibility,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh7Content, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="8" Grid.Column="3" x:Name="lbl_THDCh8" Content="Ch8 :" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding lblCh8Visibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="8" Grid.Column="3" x:Name="txt_THDLevelCh8" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="35,0,0,0" Visibility="{Binding txtCh8Visibility,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Text="{Binding txtCh8Content, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="8" Grid.Column="0" x:Name="lbl_THDFrequency" Content="Frequency :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="8" Grid.Column="1" x:Name="txt_THDfrequency" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="6,1,0,4" Text="{Binding txt_THDfrequency,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="9" Grid.Column="0" x:Name="lbl_THDHighPassFilter" Content="High-pass Filter :" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="9" Grid.Column="1" x:Name="cmb_THDHighPassFilter" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" ItemsSource="{Binding cmb_THDHighPassFilterList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_THDHighPassFilter,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="9" Grid.Column="2" x:Name="txt_Highpassvalue" HorizontalAlignment="Center" VerticalAlignment="Center" Width="50" Margin="0,0,0,0" Height="20" Text="{Binding TxtHighpass,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtHighpassVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="10" Grid.Column="0" x:Name="lbl_THDLowPassFilter" Content="Low-pass Filter :" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="10" Grid.Column="1" x:Name="cmb_THDLowPassFilter" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="120" Margin="5,0,0,2" ItemsSource="{Binding cmb_THDLowPassFilterList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_THDLowPassFilter,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Row="10" Grid.Column="2" x:Name="txt_Lowpassvalue" HorizontalAlignment="Center" VerticalAlignment="Center" Width="50" Margin="0,0,0,0" Height="20" Text="{Binding TxtLowpass,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TxtLowpassVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="11" Grid.Column="0" x:Name="lbl_THDWeighting" Content="Weighting :" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="11" Grid.Column="1" x:Name="cmb_THDWeighting" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" ItemsSource="{Binding cmb_THDWeightingList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_THDWeighting,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="12" Grid.Column="0" x:Name="lbl_THDTuningMode" Content="Notch Tuning Mode :" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <ComboBox Grid.Row="12" Grid.Column="1" x:Name="cmb_THDTuningMode" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="5,0,5,0" ItemsSource="{Binding cmb_THDTuningModeList,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding cmb_THDTuningMode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="13" Grid.Column="0" x:Name="lbl_FilterFrequency" Content="Filter Frequency :" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{Binding lblFilterFrequencyVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Row="13" Grid.Column="1" x:Name="txt_Filterfrequency" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="6,1,0,4" Text="{Binding txtFilterFrequency,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding txtFilterFrequencyVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Label Grid.Row="14" Grid.Column="0" x:Name="lbl_THDChannels" Content="Channels :" HorizontalAlignment="Right" VerticalAlignment="Top" />
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh1" Content="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="5,5,1,15" IsChecked="{Binding btn_THDCh1,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh1EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh2" Content="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="20,5,1,15" IsChecked="{Binding btn_THDCh2,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh2EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh3" Content="3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="35,5,1,15" IsChecked="{Binding btn_THDCh3,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh3EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh4" Content="4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="50,5,1,15" IsChecked="{Binding btn_THDCh4,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh4EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh5" Content="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="65,5,1,15" IsChecked="{Binding btn_THDCh5,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh5EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh6" Content="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="80,5,1,15" IsChecked="{Binding btn_THDCh6,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh6EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh7" Content="7" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="95,5,1,15" IsChecked="{Binding btn_THDCh7,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh7EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <ToggleButton Grid.Row="14" Grid.Column="1" x:Name="btn_THDCh8" Content="8" HorizontalAlignment="Left" VerticalAlignment="Top" Width="16" Margin="110,5,2,15" IsChecked="{Binding btn_THDCh8,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Background="#FFC79B6C" Visibility="{Binding chkThdnCh8EnableVisible,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Grid.Row="15" Grid.Column="0" x:Name="lbl_Verification" Content="Verification File:" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    <TextBox Grid.Row="15" Grid.Column="1" IsEnabled="False" x:Name="txt_BrowseTHDNVerication" HorizontalAlignment="Left" VerticalAlignment="Center" Height="23" Margin="100,2,0,2" Text="{Binding txtTHDNVerification,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.ColumnSpan="3" Width="250" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                        <TextBox.ContextMenu>
                            <ContextMenu Visibility="Collapsed" />
                        </TextBox.ContextMenu>
                    </TextBox>
                    <Button Grid.Row="15" Grid.Column="1" Grid.ColumnSpan="3" Name="btn_THDNBrowse" Content="Browse" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle1}" Foreground="White" Focusable="False" Margin="5,0,0,0" VerticalAlignment="Center" Click="btn_THDNBrowse_Click" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="VerifyAPContentDataTemplate" x:Shared="False">
                <Grid Background="#FF9CAAC1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="180" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Button Name="btn_Browse" Content="AP config files" Grid.Row="0" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle2}" Foreground="White" Focusable="False" Click="btn_Browse_Click" Margin="33,3,0,0" VerticalAlignment="Top"  Height="27" />
                    <!--<Button Name="btn_Settings" Content="AP Settings" Grid.Row="1" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle2}" Foreground="White" Focusable="False" Click="btn_Settings_Click" Margin="33,3,0,0" VerticalAlignment="Top"  Height="27" />
                    <Button Name="btn_Testing" Content="Verification" Grid.Row="2" HorizontalAlignment="Left" Style="{StaticResource ButtonStyle2}" Foreground="White" Focusable="False" Click="btn_Testing_Click" Margin="33,3,0,0" VerticalAlignment="Top"  Height="27" />-->
                    <Grid Height="22" Width="Auto" Background="White" Margin="5" Grid.Column="1" IsEnabled="False" >
                        <TextBox Text="{Binding APxLocationTimeStamp, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="AP Project File Name" Grid.Row="0" Grid.Column="2" HorizontalAlignment="Stretch" Width="Auto"  Height="22" VerticalAlignment="Bottom" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="APx project default path" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                    </Grid>
                    <ItemsControl Visibility="{Binding ApSettingsVisibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxSettings" ItemsSource="{Binding APxSettingsList}" ItemTemplate="{StaticResource APxSettingsListDataTemplate}"/>
                    <GroupBox  Grid.Row="2" Grid.ColumnSpan="2" Background="#FF9CAAC1" BorderBrush="Black" Visibility="{Binding ApVerifyVisibility, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                        <GroupBox.Header>
                            <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Ap Verification"/></TextBlock>
                        </GroupBox.Header>
                        <Grid Background="#FF9CAAC1" Margin="-1,0,1,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Label x:Name="label" Content="Verification :" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="75,5,0,0"/>
                            <ComboBox x:Name="cmb_VerificationType" HorizontalAlignment="Left" VerticalAlignment="Center" Width="120" Margin="180,5,0,0" SelectedValue="{Binding cmbTypeOfVerfication, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Content">
                                <ComboBoxItem>Frequency sweep</ComboBoxItem>
                                <ComboBoxItem>Level and Gain</ComboBoxItem>
                                <ComboBoxItem>Phase</ComboBoxItem>
                                <ComboBoxItem>Stepped Frequency Sweep</ComboBoxItem>
                                <ComboBoxItem>THD+N</ComboBoxItem>
                            </ComboBox>
                            <ItemsControl Visibility="{Binding GainGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxGain" ItemsSource="{Binding APxLevelAndGainList}" ItemTemplate="{StaticResource APxLevelAndGainListDataTemplate}"/>
                            <ItemsControl Visibility="{Binding FreqResponseGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxFrqResponse" ItemsSource="{Binding APxFreqResponseList}" ItemTemplate="{StaticResource APxFreqResponseListDataTemplate}"/>
                            <ItemsControl Visibility="{Binding InterChPhaseGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxPhase" ItemsSource="{Binding APxInterChPhaseList}" ItemTemplate="{StaticResource ApxInterChannelPhaseTemplate}"/>
                            <ItemsControl Visibility="{Binding SteppedFreqSweepGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxSteppedSweep" ItemsSource="{Binding APxSteppedFreqSweepList}" ItemTemplate="{StaticResource ApxSteppedFreqSweepTemplate}"/>
                            <ItemsControl Visibility="{Binding THDNGridVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tabItemVerifyApxTHDN" ItemsSource="{Binding APxTHDNList}" ItemTemplate="{StaticResource ApxTHDNTemplate}"/>
                        </Grid>
                    </GroupBox>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="TestSaveLogDataTemplare" x:Shared="False">
                <Grid Margin="10,20,10,10" Background="#FF9CAAC1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300" />
                        <ColumnDefinition Width="200*" />
                        <ColumnDefinition Width="200*" />
                    </Grid.ColumnDefinitions>
                    <Label Content="Save any Log at Test case Level " Height="26" HorizontalAlignment="Left" Margin="1,0,0,-1" x:Name="label20" Grid.ColumnSpan="2"/>
                    <ComboBox ItemsSource="{Binding ActionSaveLogEventList}" SelectedItem="{Binding ActionSaveLogEventSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Margin="-20,1,0,0" x:Name="cmb_logOption" VerticalAlignment="Top" HorizontalAlignment="Left" Width="120" />
                    <CheckBox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Content="Save qsys log for all peripheral" Margin="110,5,0,0" HorizontalAlignment="Left" x:Name="Chk_skipPeripheralQsysLog" IsChecked="{Binding saveQsysylogPeripheralSelection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding saveQsysylogIsenabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Focusable="False" Height="24" VerticalAlignment="Top" />

                    <CheckBox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Content="ScreenShot"  HorizontalAlignment="Left" Margin="350,5,0,0" x:Name="Chk_screenshot"  IsEnabled="{Binding ScreenShotIsEnable}" IsChecked="{Binding screenshotselection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Focusable="False" Height="24" VerticalAlignment="Top" />
                    <!--<Label Content="Logs to be Saved in Events of Failure" Grid.Row="1" Height="32" HorizontalAlignment="Left" VerticalAlignment="Top" x:Name="log_label" />-->
                    <Grid Grid.Row="2" Grid.Column="0" IsEnabled="{Binding LogGridIsEnabled}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <!--<CheckBox IsChecked="{Binding ActionLogiLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="ilog" Grid.Row="0" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0" VerticalAlignment="Top" Width="47" x:Name="ilog_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogConfiguratorIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Configurator" Grid.Row="1" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" x:Name="config_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogEvenetLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Event Log" Grid.Row="2" Height="20" HorizontalAlignment="Left" Margin="33,4,0,0" VerticalAlignment="Top" Width="74" x:Name="event_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogSipLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="SIP Log" Grid.Row="3" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" x:Name="SIP_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogQsysAppLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Qsys App Log" Grid.Row="4" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" Width="98" x:Name="Qsys_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogSoftPhoneLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="SoftPhone Log" Grid.Row="5" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" x:Name="sphone_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogUciViewerLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="UCI Viewer Log" Grid.Row="6" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" Width="108" x:Name="uci_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogKernelLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Kernel Log" Grid.Row="7" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" Width="108" x:Name="kernel_chkbox" />
                        <CheckBox IsChecked="{Binding ActionLogWindowsEventLogIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Windows Event Logs" Grid.Row="8" Height="20" HorizontalAlignment="Left" Margin="33,3,0,0"  VerticalAlignment="Top" Width="132" x:Name="windows_chkbox" />-->
                    </Grid>
                    <!--<Label Grid.Column="1" Grid.Row="1" Content="Devices for iLog" Margin="-20,10,0,0"/>-->
                    <ItemsControl x:Name="iLogDeviceCheckBox" IsEnabled="{Binding iLogDeviceItemIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding iLogDeviceItem}" ItemTemplate="{StaticResource iLogDeviceCheckBoxtDataTemplate}" Grid.Column="1" Grid.Row="2" VerticalAlignment="Top" Margin="0,0,0,0"/>
                    <!--<Label Grid.Column="2" Grid.Row="1" Content="Devices for Configurator" Margin="-25,10,0,0"/>-->
                    <ItemsControl x:Name="ConfiguratorDeviceCheckBox" IsEnabled="{Binding ConfiguratorDeviceItemIsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding ConfiguratorLogDeviceItem}" ItemTemplate="{StaticResource ConfiguratorLogDeviceCheckBoxtDataTemplate}" Grid.Column="2" Grid.Row="2" VerticalAlignment="Top" Margin="0,0,0,0"/>
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="ActionTabContentDataTemplate" x:Shared="False">
                <Grid x:Name="gridActionTab" Margin="0,0,20,0" IsEnabled="{Binding ActionTabGridIsEnabled}" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding ActionGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinHeight="{Binding ActionGridMinHeight}"/>
                        <RowDefinition Height="3" />
                        <RowDefinition Height="{Binding VerifyGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinHeight="{Binding VerifyGridMinHeight}" />
                        <RowDefinition Height="3" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <!--<GroupBox Grid.Row="0" Grid.RowSpan="2" BorderBrush="Black" Margin="5,10,-15,0" x:Name="Action_Gbox"  >
                        <GroupBox.Header>
                            <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Action"/></TextBlock>
                        </GroupBox.Header>
                    </GroupBox>-->
                    <!--<GroupBox BorderBrush="Black" Margin="5,5,-15,1" x:Name="verify_Gbox" Grid.Row="2" Grid.RowSpan="2" >
                        <GroupBox.Header>
                            <TextBlock  Style="{StaticResource TextBlockStyle}"><Run Text="Verification"/></TextBlock>
                        </GroupBox.Header>
                    </GroupBox>-->
                    <GridSplitter Height="5" HorizontalAlignment="Stretch" Grid.Row="1" Margin="5,0,-15,0" Background="Transparent"/>
                    <GridSplitter Height="5" HorizontalAlignment="Stretch" Grid.Row="3" Margin="5,0,-15,0" Background="Transparent"/>
                    <GroupBox BorderBrush="Black" Margin="6,0,-15,0" x:Name="Error_Gbox" Grid.Row="6" Height="90" >
                        <GroupBox.Header>
                            <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Error Handling"/></TextBlock>
                        </GroupBox.Header>
                    </GroupBox>
                    <GroupBox BorderBrush="Black" Margin="5,5,-15,0" x:Name="log_Gbox" Grid.Row="7" >
                        <GroupBox.Header>
                            <TextBlock Style="{StaticResource TextBlockStyle}"><Run Text="Logs"/></TextBlock>
                        </GroupBox.Header>
                    </GroupBox>
                    <GroupBox BorderBrush="Black" x:Name="Action_Gbox" Margin="5,5,-15,1" SizeChanged="ControlAction_SizeChanged">
                        <GroupBox.Header>
                            <TextBlock Height="19" Style="{StaticResource TextBlockStyle}"><Run Text="Action"/></TextBlock>
                        </GroupBox.Header>
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="55" />
                                <RowDefinition Height="{Binding TestActionGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinHeight="{Binding TestActionGridMinHeight}"/>
                            </Grid.RowDefinitions>
                            <Label Grid.Row="0" Content="Select Action: " Margin="4.649,10,0,0" x:Name="label1" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <ComboBox Grid.Row="0" x:Name="cmb_actionType" Height="25" Margin="111.896,10,0,0" HorizontalAlignment="Left" Width="174.653" VerticalAlignment="Top" 
                                      ItemsSource="{Binding TestActionList}" SelectedItem="{Binding ActionSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Button Grid.Row="0" Background="Transparent" Visibility="{Binding SelectActionPlusButtonVisibility}" BorderBrush="SteelBlue" Height="25" Margin="291.528,10,0,0" x:Name="btn_SelectActionPlus" VerticalAlignment="Top" Click="btn_btn_SelectActionPlus_Click"  HorizontalAlignment="Left" Width="24.333">
                                <Image Stretch="Uniform"  Source="/Images/Add.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            </Button>
                            <Label Grid.Row="0" Content="Action Delay :" x:Name="lbl_Delay" Margin="329.838,10,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <TextBox Grid.Row="0" Text="{Binding ActionDelaySetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="441.029,10,0,0" x:Name="txt_DelayforAction" Style="{x:Null}" Width="47" VerticalAlignment="Top" HorizontalAlignment="Left" MaxLength="5" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown"  PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <ComboBox Grid.Row="0" x:Name="cmb_DelayforAction" ItemsSource="{Binding ActionDelayUnitList}" SelectedItem="{Binding ActionDelayUnitSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="496.002,10,0,0" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <Label Grid.Row="0" Content="Reference version :" x:Name="lbl_QRCMversion" Margin="580,9,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"  Visibility="{Binding ActionQRCMVersionVisibility}" />
                            <ComboBox Grid.Row="0" x:Name="cmb_QRCMReferenceversion" ItemsSource="{Binding ActionQRCMVersionList}" Visibility="{Binding ActionQRCMVersionVisibility}" DropDownClosed="cmbActionQRCMversion_DropDownClosed" PreviewMouseWheel="cmbActionQRCMversion_PreviewMouseWheel" PreviewKeyDown="cmbActionQRCMversion_PreviewKeyDown"  SelectedItem="{Binding ActionQRCMVersionSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="696,10,0,0" Width="60"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />

                            <!--<ScrollViewer x:Name="scrollViewerSetControl" Grid.Column="0" Grid.Row="1" MaxHeight="{Binding ActionGridMaxHeight}" VerticalScrollBarVisibility="Auto" SizeChanged="scrollViewerSetControl_SizeChanged">-->
                            <TabControl x:Name="tabSetContol" Background="#FF9CAAC1" BorderThickness="0" Grid.Column="0" Grid.Row="1">
                                <TabItem Header="Control" x:Name="tabItem1" Background="#FF9CAAC1" BorderThickness="0" IsSelected="{Binding SetTestControlIsSelected, Mode=OneWay}" Visibility="{Binding SetTestControlVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemSetControl" ItemsSource="{Binding SetTestControlList}" ItemTemplate="{StaticResource SetControlContentDataTemplate}">
                                        <ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer >
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="Telnet" x:Name="tabItem2" Background="#FF9CAAC1" IsSelected="{Binding SetTestTelnetIsSelected, Mode=OneWay}" Visibility="{Binding SetTestTelnetVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemSetTelnet" ItemsSource="{Binding SetTestTelnetList}" ItemTemplate="{StaticResource SetTelnetContentDataTemplare}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="CEC Action" x:Name="tabItemCEC" Background="#FF9CAAC1" IsSelected="{Binding SetTestCECIsSelected, Mode=OneWay}" Visibility="{Binding SetTestCECVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemSetCEC" ItemsSource="{Binding SetTestCECList}" ItemTemplate="{StaticResource SetCECContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="User Action" x:Name="tabItemUserAction" Background="#FF9CAAC1" IsSelected="{Binding SetTestUserActionIsSelected, Mode=OneWay}" Visibility="{Binding SetTestUserActionVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemUserSetPrompt" ItemsSource="{Binding SetTestUserActionList}" ItemTemplate="{StaticResource SetUserActionContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="QRCM Action" x:Name="tabItemQRCMAction" Background="#FF9CAAC1" IsSelected="{Binding SetTestQRCMIsSelected, Mode=OneWay}" Visibility="{Binding SetTestQRCMVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemControlQRCM_Action" ItemsSource="{Binding SetTestQRCMActionList}" ItemTemplate="{StaticResource SetQRCMActionContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="Firmware" x:Name="tabItem3" Background="#FF9CAAC1" IsSelected="{Binding SetTestFirmwareIsSelected, Mode=OneWay}" Visibility="{Binding SetTestFirmwareVisibility, Mode=OneWay}" >
                                    <ItemsControl x:Name="tabItemSetFirmware" ItemsSource="{Binding SetTestFirmwareList}" ItemTemplate="{StaticResource SetFirmwareContentDataTemplare}">
                                        <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="Designer" x:Name="tabItem4" Background="#FF9CAAC1" IsSelected="{Binding SetTestDesignerIsSelected, Mode=OneWay}" Visibility="{Binding SetTestDesignerVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemSetDesigner" ItemsSource="{Binding SetTestDesignerList}" ItemTemplate="{StaticResource SetDesignerContentDataTemplare}">
                                        <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="NetPairing" x:Name="tabItem5" Background="#FF9CAAC1" IsSelected="{Binding SetTestNetPairingIsSelected, Mode=OneWay}" Visibility="{Binding SetTestNetPairingVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemSetNetPairing" ItemsSource="{Binding SetTestNetPairingList}" ItemTemplate="{StaticResource SetNetPairingContentDataTemplare}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="Usb Action" x:Name="tabItem12" Background="#FF9CAAC1" IsSelected="{Binding SetTestUsbIsSelected, Mode=OneWay}" Visibility="{Binding SetTestUsbVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemUsbAudio" ItemsSource="{Binding SetTestUsbList}" ItemTemplate="{StaticResource SetUsbAudioContentDataTemplare}">
                                        <ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer >
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="Skip" x:Name="tabItem10" Background="#FF9CAAC1" IsSelected="{Binding SetTestSkipIsSelected, Mode=OneWay}" Visibility="{Binding SetTestSkipVisibility, Mode=OneWay}">
                                    <!--<Grid Height="50" Background="#FF9CAAC1" x:Name="SkipActionGrid"/>-->
                                </TabItem>
                                <TabControl.Style>
                                    <Style TargetType="TabControl">
                                        <!--<Setter Property="Margin" Value="0,5,0,0"/>-->
                                        <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
                                                <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TabControl.Style>
                            </TabControl>
                            <!--</ScrollViewer>-->
                            <StackPanel Width="Auto" HorizontalAlignment="Left" Margin="570,10,0,0">
                                <TextBlock HorizontalAlignment="Left" Foreground="#004080" TextWrapping="Wrap" Visibility="{Binding usbActionText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Text="Don't set default playback/Recording device or default communication playback/Recording device more than once" FontSize="11"  FontWeight="DemiBold" Grid.Row="0" Height="Auto" />
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                    <GroupBox BorderBrush="Black" Margin="5,5,-15,1" x:Name="verify_Gbox" Grid.Row="2" SizeChanged="ControlVerify_SizeChanged">
                        <GroupBox.Header>
                            <TextBlock Height="19" Style="{StaticResource TextBlockStyle}"><Run Text="Verification"/></TextBlock>
                        </GroupBox.Header>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="55" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="{Binding TestVerificationGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinHeight="{Binding TestVerificationGridMinHeight}" />
                            </Grid.RowDefinitions>
                            <Label Grid.Row="0" Content="Select Verification:" VerticalAlignment="Top" Margin="4.649,10,0,0" HorizontalAlignment="Left" />
                            <TextBlock  Width="Auto" Margin="570,0,0,10" Text="Verification will pass, if text NOT AVAILABLE in the captured log file" Foreground="#004080" HorizontalAlignment="Left" VerticalAlignment="Center"  Visibility="{Binding Loglabeltextvisibility}" TextWrapping="Wrap" FontSize="11"  FontWeight="DemiBold" Grid.Row="0" Height="Auto" />
                            <!--<TextBlock  Width="Auto" Margin="550,0,0,10" Text="Verification will pass, if text NOT AVAILABLE in the captured log file" Foreground="#004080" HorizontalAlignment="Right" VerticalAlignment="Center"  Visibility="{Binding Loglabeltextvisibility}" TextWrapping="Wrap" FontSize="11"  FontWeight="DemiBold" Grid.Row="0" Height="Auto" />-->
                            <!--<Label x:Name="Loglabelmessage" Content="Verification will pass, if entered text not available in the log file."  Margin="10,0,0,0" Grid.Row="1" Grid.Column="2" Foreground="#004080" FontWeight="DemiBold" HorizontalAlignment="Right" VerticalAlignment="Bottom" Height="27" Visibility="{Binding Loglabeltextvisibility}"/>-->
                            <ComboBox Grid.Row="0" Height="25" Margin="111.896,10,0,0" Width="174.653" HorizontalAlignment="Left" VerticalAlignment="Top" x:Name="cmb_verificationType"
                                      ItemsSource="{Binding TestVerificationList}" SelectedItem="{Binding VerificationSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Button Grid.Row="0" Background="Transparent" Visibility="{Binding SelectVerificationPlusButtonVisibility}" BorderBrush="SteelBlue" Height="25" Margin="291.549,10.96,0,0" x:Name="btn_SelectVerificationPlus" VerticalAlignment="Top" Click="btn_SelectVerificationPlus_Click"  HorizontalAlignment="Left" Width="24.333" RenderTransformOrigin="1.039,7.808">
                                <Image Stretch="Uniform"  Source="/Images/Add.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="1.691,0.543" />
                            </Button>
                            <Label Grid.Row="0" Content="Verification Delay :" x:Name="label2" Margin="331.04,10,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <TextBox Grid.Row="0" Text="{Binding Verificationdelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="442.029,10,0,0" x:Name="txt_Delay" Style="{x:Null}" Width="47" VerticalAlignment="Top" HorizontalAlignment="Left" MaxLength="5" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <ComboBox Grid.Row="0" x:Name="cmb_Delay" ItemsSource="{Binding ActionDelayUnitList}" SelectedItem="{Binding VerificationdelayType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="495.975,10,0,0" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            <Label Grid.Row="0" Content="Reference version :" x:Name="lbl_referenceVersion" Margin="580,9,0,0" Visibility="{Binding VerifyQRCMVersionVisibility}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <ComboBox Grid.Row="0" x:Name="cmb_VerifyReferenceversion" ItemsSource="{Binding VerifyQRCMVersionList}" DropDownClosed="cmbVerifyQRCMversion_DropDownClosed" PreviewMouseWheel="cmbActionQRCMversion_PreviewMouseWheel" PreviewKeyDown="cmbActionQRCMversion_PreviewKeyDown" Visibility="{Binding VerifyQRCMVersionVisibility}"  SelectedItem="{Binding VerifyQRCMVersionSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="696,10,0,0" Width="60"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" />
                            
                            <Label Margin="10,0,0,0"  Grid.Row="1" Visibility="{Binding cectext, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Verify from cec response commands received after current :" HorizontalAlignment="Left" d:LayoutOverrides="HorizontalAlignment" />
                            <ComboBox Margin="340,2,0,0"  Grid.Row="1" Width="150"  Height="25" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding cecVerificationbox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding verifylogfrom}" SelectedItem="{Binding cecVerificationbox_selected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="cecverifylogcollect" FontSize="11" d:LayoutOverrides="HorizontalAlignment" />


                            <CheckBox x:Name="script_ExecuteIterationChkbox" Focusable="False" HorizontalAlignment="Left"  Content="Duration"  Grid.Row="1" VerticalAlignment="Top" Margin="10,5,0,0" Height="18" ToolTip= "Enable to specify loop values" IsChecked="{Binding ExecuteIterationChkboxIsChecked, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"  Visibility="{Binding ScriptExecuteIterationChkbxVisibility, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"  />
                            <Label x:Name="script_checktime_label"  Grid.Row="1" Margin="124,0,263,10"  Content="Check every" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" ></Label>
                            <TextBox Grid.Row="1" x:Name="txt_scriptCheckEveryDelay" Text="{Binding Script_checktimeTextbox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="205,2,220,0" HorizontalAlignment="Left" Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="47" VerticalAlignment="Top"  MaxLength="4" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" >
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <ComboBox Grid.Row="1" x:Name="cmb_script_checktime" ItemsSource="{Binding Script_checktimeUnitList}" SelectedItem="{Binding Script_ChecktimeUnitSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="260,2,163,0" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />

                            <Label x:Name="script_durationtime_label"  Grid.Row="1" Content="Until"   Margin="331,0,123,0" HorizontalAlignment="Left" VerticalAlignment="Top"  Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" ></Label>
                            <TextBox Grid.Row="1" x:Name="txt_scriptDuration" Text="{Binding Script_DurationTextbox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="372,2,80,0"  Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="47" VerticalAlignment="Top" HorizontalAlignment="Left" MaxLength="4" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" >
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>
                            <ComboBox Grid.Row="1" x:Name="cmb_script_durationtime" ItemsSource="{Binding Script_durationtimeUnitList}" SelectedItem="{Binding Script_DurationTimeUnitSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Visibility="{Binding ScriptCheckTimeVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="427,2,25,0" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" IsEnabled="{Binding ScriptExecuteIterationChkbxEnable, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />

                            <!--<ComboBox.Style>
                                    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                                        <Style.Triggers>
                                            <DataTrigger 
                                                Binding="{Binding ElementName=txt_Delay,Path=Text.Length}" Value="0">
                                                <Setter Property="ComboBox.IsEnabled"  Value="False" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.Style>
                            </ComboBox>-->
                            <!--<ScrollViewer x:Name="scrollViewerVerifyControl" Grid.Column="0" Grid.Row="1" MaxHeight="{Binding VerifyGridMaxHeight}" VerticalScrollBarVisibility="Auto" SizeChanged="scrollViewerVerifyControl_SizeChanged">-->
                            <TabControl Grid.Row="2" x:Name="tabControl19" Background="#FF9CAAC1" BorderThickness="0">
                                <TabItem Header="Control" x:Name="tabItem6" Background="#FF9CAAC0" IsSelected="{Binding VerifyTestControlIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestControlVisibility, Mode=OneWay}" >
                                    <Grid >
                                        <ItemsControl x:Name="tabItemVerifyControl" ItemsSource="{Binding VerifyTestControlList}" ItemTemplate="{StaticResource VerifyControlContentDataTemplare}">
                                            <ItemsControl.Template>
                                                <ControlTemplate TargetType="ItemsControl">
                                                    <Border>
                                                        <ScrollViewer >
                                                            <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True" />
                                                        </ScrollViewer>
                                                    </Border>
                                                </ControlTemplate>
                                            </ItemsControl.Template>
                                        </ItemsControl>
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Telnet" x:Name="tabItem7" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestTelnetIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestTelnetVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemVerifyTelnet" ItemsSource="{Binding VerifyTestTelnetList}" ItemTemplate="{StaticResource VerifyTelnetContentDataTemplare}">
                                        <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="CEC Verification" x:Name="tabItemCECVerify" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestCECIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestCECVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemVerifyCEC" ItemsSource="{Binding VerifyTestCECList}" ItemTemplate="{StaticResource VerifyCECContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="User Verification" x:Name="tabItemUserVerification" Background="#FF9CAAC1" IsSelected="{Binding UserVerificationIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestUserVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemUserVerify" ItemsSource="{Binding VerifyTestUserList}" ItemTemplate="{StaticResource VerifyUserContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="QRCM Verification" x:Name="tabItemQRCMVerification" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestQRCMIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestQRCMVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemControlQRCMVerify" ItemsSource="{Binding VerifyTestQRCMList}" ItemTemplate="{StaticResource VerifyQRCMContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="QR code verification" x:Name="tabItemQRVerify" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestQRIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestQRVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemVerifyQR" ItemsSource="{Binding VerifyTestQRList}" ItemTemplate="{StaticResource VerifyQRContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>
                                <TabItem Header="USB Verification" x:Name="tabItem13" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestUsbIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestUsbVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemVerifyUSB" ItemsSource="{Binding VerifyTestUsbList}" ItemTemplate="{StaticResource VerifyUsbAudioContentDataTemplare}">
                                        <ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer >
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="LUA Text" x:Name="tabItem8" Height="23" VerticalAlignment="Bottom" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestLuaIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestLuaVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemVerifyLua" ItemsSource="{Binding VerifyTestLuaList}" ItemTemplate="{StaticResource VerifyLuaContentDataTemplare}">
                                        <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="Log" x:Name="tabItem9" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestLogIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestLogVisibility, Mode=OneWay}">
                                    <ItemsControl x:Name="tabItemVerifyLog" ItemsSource="{Binding VerifyTestLogList}" ItemTemplate="{StaticResource VerifyLogContentDataTemplare}">
                                        <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                    </ItemsControl>
                                </TabItem>
                                <TabItem Header="APx" x:Name="tabItem11" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestApxIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestApxVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                                        <ItemsControl x:Name="tabItemVerifyApx" ItemsSource="{Binding VerifyTestApxList}" ItemTemplate="{StaticResource VerifyAPContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>

                                <TabItem Header="APx" x:Name="tabItemResponsalyzer" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestResponalyzerIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestResponalyzerVisibility, Mode=OneWay}">
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="200">
                                        <ItemsControl x:Name="tabItemVerifyResponsalyzer" ItemsSource="{Binding verifyTestResponsalyzerList}" ItemTemplate="{StaticResource VerifyResponseAnalyzerContentDataTemplate}">
                                            <!--<ItemsControl.Template>
                                            <ControlTemplate TargetType="ItemsControl">
                                                <Border>
                                                    <ScrollViewer CanContentScroll="True" IsDeferredScrollingEnabled="True">
                                                        <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True"/>
                                                    </ScrollViewer>
                                                </Border>
                                            </ControlTemplate>
                                        </ItemsControl.Template>-->
                                        </ItemsControl>
                                    </ScrollViewer>
                                </TabItem>



                                <TabItem Header="Script Verification" x:Name="tabItemScriptVerify" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestScriptIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestScriptVisibility, Mode=OneWay}">
                                    <Grid >
                                        <ItemsControl  x:Name="tabItemVerifyScript" ItemsSource="{Binding VerifyTestScriptList}" ItemTemplate="{StaticResource VerifyScriptContentDataTemplate}">
                                            <ItemsControl.Template>
                                                <ControlTemplate TargetType="ItemsControl">
                                                    <Border>
                                                        <ScrollViewer >
                                                            <VirtualizingStackPanel IsItemsHost="True"  VirtualizingStackPanel.VirtualizationMode="Recycling" VirtualizingStackPanel.IsVirtualizing="True" />
                                                        </ScrollViewer>
                                                    </Border>
                                                </ControlTemplate>
                                            </ItemsControl.Template>
                                        </ItemsControl>
                                    </Grid>
                                </TabItem>

                                <TabItem Header="Skip1" x:Name="tabItem0" Background="#FF9CAAC1" IsSelected="{Binding VerifyTestSkipIsSelected, Mode=OneWay}" Visibility="{Binding VerifyTestSkipVisibility, Mode=OneWay}">
                                    <!--<Grid Height="50" Background="#FF9CAAC1"/>-->
                                </TabItem>
                                <TabControl.Style>
                                    <Style TargetType="TabControl">
                                        <!--<Setter Property="Margin" Value="0,5,0,0"/>-->
                                        <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
                                                <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TabControl.Style>
                            </TabControl>
                            <!--</ScrollViewer>-->
                            <StackPanel Width="Auto" HorizontalAlignment="Left" Margin="570,10,0,0">
                                <TextBlock HorizontalAlignment="Left" Foreground="#004080"  Visibility="{Binding usbVerificationText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" Text="Don't verify default playback/Recording device or default communication playback/Recording device more than once" FontSize="11"  FontWeight="DemiBold" Grid.Row="0" Height="Auto" d:LayoutOverrides="VerticalAlignment" />
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                    <Grid Grid.Row="6">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="205" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Content="Rerun the failed TestCase" Height="28" HorizontalAlignment="Left" Margin="57,62,0,8" x:Name="Rerun_chkbox" />
                        <!--<Grid Background="White" Grid.Column="1" Height="23" Margin="5,55,0,2" Width="200" HorizontalAlignment="Left">-->
                        <TextBox Grid.Column="1" Height="23" Margin="5,55,0,2" Width="100" HorizontalAlignment="Left" IsEnabled="{Binding ActionErrorHandlingReRunIsEnabled}" Text="{Binding ActionErrorHandlingReRunCount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Iteration of failure after which we stop the loop" x:Name="Ittration_txtbox" PreviewTextInput="Ittration_txtbox_PreviewTextInput" PreviewKeyDown="Ittration_txtbox_PreviewKeyDown" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                        <!--</Grid>-->
                        <ListBox Grid.Row="0" Margin="26,28,0,0" Background="#FF9CAAC1" BorderThickness="0" ItemsSource="{Binding ActionErrorHandlingTypeTypeList}" SelectedItem="{Binding ActionErrorHandlingTypeSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemContainerStyle="{StaticResource ListBoxItemRadioButtonSytle}" Template="{StaticResource NoScroll}"/>
                        <Label Content="Rerun Delay :" x:Name="lbl_delay" Grid.Column="1" HorizontalAlignment="Left" Height="28" Margin="246.087,0,0,10" VerticalAlignment="Bottom" />
                        <TextBox Text="{Binding Rerundelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Grid.Column="1" Height="22" Margin="323,0,0,12" x:Name="txt_DelayForError" Style="{x:Null}" Width="47" VerticalAlignment="Bottom" HorizontalAlignment="Left" MaxLength="5" PreviewTextInput="Txt_Delay_PreviewTextInput" PreviewKeyDown="txt_Delay_PreviewKeyDown" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                        <ComboBox Grid.Column="1" x:Name="cmb_DelayForErrorHand" ItemsSource="{Binding ActionDelayUnitList}" SelectedItem="{Binding RerundelayType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="378.5,0,-15,12" Width="55"  Height="22" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                        <!--<ComboBox.Style>
                                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                                    <Style.Triggers>
                                        <DataTrigger 
                                                Binding="{Binding ElementName=txt_DelayForError,Path=Text.Length}" Value="0">
                                            <Setter Property="ComboBox.IsEnabled"  Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.Style>
                        </ComboBox>-->
                    </Grid>
                    <Grid Grid.Row="7" Margin="10,20,10,10" x:Name="grid9">
                        <ItemsControl ItemsSource="{Binding TestSaveLogItemList}" ItemTemplate="{StaticResource TestSaveLogDataTemplare}"/>
                    </Grid>
                </Grid>
            </HierarchicalDataTemplate>

            <!--Data Template Action Tab Item Binding-->
            <HierarchicalDataTemplate x:Key="ActionTabItemDataTemplate" x:Shared="False">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter Content="{Binding TestActionItemNameTextBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding TestActionTabItemNameVisibility}" Margin="0,0,5,0" />
                    <Button Background="Transparent" Margin="2,0,2,0" Visibility="{Binding TestActionTabDeleteButtonVisibility}" BorderBrush="Transparent" Height="12" VerticalAlignment="Center" Click="btn_TestActionTabDelete_Click"  HorizontalAlignment="Right" Width="auto" >
                        <Image Stretch="Uniform" Margin="-12,-4,-12,-4" Source="/Images/Delete.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  />
                    </Button>
                </StackPanel>
            </HierarchicalDataTemplate>

            <ControlTemplate x:Key="ActionTabControlTemplate" TargetType="{x:Type TabControl}">
                <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="ColumnDefinition0"/>
                        <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                        <RowDefinition x:Name="RowDefinition1" Height="*"/>
                    </Grid.RowDefinitions>
                    <WrapPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="True" Margin="2,2,30,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" AllowDrop="True" MouseMove="ActionTab_MouseMove" Drop="ActionTab_Drop" PreviewMouseLeftButtonDown="ActionTab_MouseLeftButtonDown"/>
                    <Button Background="Transparent" Visibility="{Binding TestActionTabPlusButtonVisibility}" BorderBrush="SteelBlue" Height="25" VerticalAlignment="Top" Click="btn_TestActionTabPlus_Click"  HorizontalAlignment="Right" Width="29.333">
                        <Image Stretch="Uniform"  Source="/Images/myadd.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                    </Button>
                    <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="TabStripPlacement" Value="Bottom">
                        <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                        <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                        <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                        <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                        <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                    </Trigger>
                    <Trigger Property="TabStripPlacement" Value="Left">
                        <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                        <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                        <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                        <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                        <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                        <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                        <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                        <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                        <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                    </Trigger>
                    <Trigger Property="TabStripPlacement" Value="Right">
                        <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                        <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                        <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                        <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                        <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                        <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                        <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                        <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                        <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="TabControlStyleDesigner" TargetType="{x:Type TabControl}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Padding" Value="4"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="#FF879BB3"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFFCFCFE" Offset="0"/>
                            <GradientStop Color="#FFF4F3EE" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="ColumnDefinition0"/>
                                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                    <RowDefinition x:Name="RowDefinition1" Height="*"/>
                                </Grid.RowDefinitions>
                                <Button Background="Transparent" BorderBrush="SteelBlue" Height="25" VerticalAlignment="Top" Click="Button_HideInventory_Click"  HorizontalAlignment="Left" Width="29.333">
                                    <Button.Template>
                                        <ControlTemplate>
                                            <StackPanel>
                                                <Image Name="DesignerImageExpand" Stretch="Uniform"  Source="/Images/double-right.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="22" />
                                                <Image Name="DesignerImageCollapse" Stretch="Uniform"  Source="/Images/double-left.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="22" />
                                            </StackPanel>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsVisible, ElementName=grid3}" Value="true">
                                                    <Setter TargetName="DesignerImageExpand" Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsVisible, ElementName=grid3}" Value="true">
                                                    <Setter TargetName="DesignerImageCollapse" Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                                <WrapPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="True" Margin="30,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                <Border x:Name="ContentPanel" BorderBrush="#FFD0CEBF" BorderThickness="0,0,1,1" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Border>
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                                    <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                                    <Setter Property="Background">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                <GradientStop Color="#FFFCFCFE" Offset="0"/>
                                                <GradientStop Color="#FFF4F3EE" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                                    <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                    <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,-1,2"/>
                                    <Setter Property="Background">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                                <GradientStop Color="#FFFCFCFE" Offset="0"/>
                                                <GradientStop Color="#FFF4F3EE" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                                    <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                                    <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                    <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                    <Setter Property="Margin" TargetName="HeaderPanel" Value="-1,2,2,2"/>
                                    <Setter Property="BorderBrush" Value="#FFC9C7BA"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Data Template Designer Tab Item Binding-->
            <HierarchicalDataTemplate x:Key="DesignrTabItemDataTemplate" x:Shared="False">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter Content="{Binding TestItemHeaderName}" Margin="0,0,5,0" />
                    <Button Background="Transparent" Margin="2,0,2,0" BorderBrush="Transparent" Height="12" VerticalAlignment="Center" Click="Button_Click_DesignrTabDelete"  HorizontalAlignment="Right" Width="auto" >
                        <Image Stretch="Uniform" Margin="-12,-4,-12,-4" Source="/Images/Delete.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  />
                    </Button>
                </StackPanel>
            </HierarchicalDataTemplate>

            <Style x:Key="DesignerTabItemStyle" TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
                <Setter Property="Padding" Value="12,2"/>
                <Setter Property="BorderThickness" Value="1,1,1,0"/>
                <Setter Property="BorderBrush" Value="#FF879BB3"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="0.2"/>
                            <GradientStop Color="#FFA5A6A8" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Border SnapsToDevicePixels="True">
                                <Grid Margin="0,0,1,0">
                                    <Grid x:Name="Transform">
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3,3,0,0"/>
                                        <Border x:Name="HighlightBorder" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" Height="3" VerticalAlignment="Top"/>
                                    </Grid>
                                    <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                        <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                    </Border>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="HighlightBorder" Value="#FFE68B2C"/>
                                    <Setter Property="Background" TargetName="HighlightBorder" Value="#FFFFC73C"/>
                                    <Setter Property="Background" TargetName="Bd">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="0.3"/>
                                                <GradientStop Color="#FFC6DAF2" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="BorderBrush" TargetName="HighlightBorder" Value="#FFE68B2C"/>
                                    <Setter Property="Background" TargetName="HighlightBorder" Value="#FFFFC73C"/>
                                    <Setter Property="Background" TargetName="Bd" Value="#FFFCFCFE"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="LayoutTransform" TargetName="Transform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleY="-1" ScaleX="1"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <Setter Property="LayoutTransform" TargetName="Transform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <Setter Property="LayoutTransform" TargetName="Transform">
                                        <Setter.Value>
                                            <RotateTransform Angle="90"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    <Setter Property="Background" TargetName="Bd" Value="#FFF5F4EA"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#FFC9C7BA"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="TabStripPlacement" Value="Top"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="TabStripPlacement" Value="Bottom"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="-2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="TabStripPlacement" Value="Left"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="-2,-2,-1,-2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True"/>
                                        <Condition Property="TabStripPlacement" Value="Right"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="-1,-2,-2,-2"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}}" Value="1">
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <HierarchicalDataTemplate x:Key="TestSuiteTabItemDataTemplate" x:Shared="False">
                <Grid>
                    <Grid Name="TestSuiteGrid" Margin="6,0,0,5" Background="#FF9CAAC1" Visibility="{Binding TestSuiteGridVisibility, FallbackValue=Collapsed}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="27*"/>
                            <ColumnDefinition Width="100*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="65" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="38" />
                        </Grid.RowDefinitions>
                        <Grid Margin="10,0,10,0" Name="Testsuitenamegrid" Grid.ColumnSpan="2" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="220*"/>
                                <ColumnDefinition Width="230" />
                                <ColumnDefinition Width="120" />
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="1" Content=" Continuous Background Monitoring" FontSize="12"  FontStretch="Normal" Margin="126,36,-6,0" Name="btn_TestSuiteVerification" IsEnabled="{Binding BackgroundVerfificationButtonIsEnabled}" HorizontalAlignment="Left"  VerticalAlignment="Top"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle4}" Click="btn_TestSuiteVerification_Click" Width="230" Grid.ColumnSpan="2"/>
                            <Label  Margin="-10,7,0,35" Content="Test Suite Name" FontSize="12" Foreground="Black" FontWeight="DemiBold" Height="23" Width="99" VerticalContentAlignment="Center" HorizontalAlignment="Left"/>
                            <Button Content="Create Test Plan" IsEnabled="{Binding CreateNewTestPlanIsEnabled}" FontStretch="Normal" Margin="0,8,0,0" Name="btn_CreateNewTestPlan" Grid.Row="0" Grid.Column="2" Click="btn_CreateNewTestPlan_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle2}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <Grid Grid.Column="0" Margin="88,-21,5,5" Height="22" Background="White" Grid.ColumnSpan="2">
                                <TextBox  MaxLength="260" IsEnabled="{Binding ItemNameTextBoxIsEnabled}" LostFocus="TSname_textBox_LostFocus" Text="{Binding TestItemName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnExceptions=True}" AllowDrop="False" Name="TSname_textBox" PreviewKeyDown="textBox_PreviewKeyDown" PreviewTextInput="TextBox_PreviewTextInput" LostKeyboardFocus="textBox_LostKeyboardFocus" TextChanged="textBox_TextChanged"    Height="23" Margin="0,-1,0,1" PreviewKeyUp="TextBox_PreviewKeyUp">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Enter Testsuite Name" Foreground="Black"  FontStyle="Italic" TextAlignment="Left"  Height="22" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right"  Height="22" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed"/>
                                    </TextBox.ContextMenu>
                                </TextBox>
                                <Button Background="Transparent" HorizontalAlignment="Right" x:Name="settings_TS" Click="propertiesMenuItem_Click"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0" Visibility="{Binding TestSuiteSettingsVisible}">
                                    <Button.Template>
                                        <ControlTemplate>
                                            <Border HorizontalAlignment="Center" VerticalAlignment="Center" >
                                                <Image Source="Images/settings.png" Width="18" Height="20" />
                                            </Border>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                            </Grid>
                        </Grid>
                        <Grid Grid.Row="1" Margin="5,0,-5,0" Name="TPFromTSgrid" Grid.ColumnSpan="2" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="220*"/>
                                <ColumnDefinition Width="230" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                        <ScrollViewer Margin="0,0,0,0" Grid.Row="2" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Grid.ColumnSpan="2" ScrollViewer.ScrollChanged="listviewtestsuite_scrollchanged" >
                            <Grid Grid.Row="1">
                                <ListView  SelectionMode="Extended" AllowDrop="True" Margin="10,0,10,0" Name="listView_TestSuite" IsEnabled="{Binding TestPlanListIsEnabled}" Drop="Lv_ExecutionInventory_Drop"  PreviewMouseWheel="testSuiteList_Previewmousewheel"  PreviewDragOver="listView_TestSuite_PreviewDragOver"  SelectionChanged="listView_TestSuite_SelectionChanged" MouseMove="Lv_TestSuite_MouseMove"   ItemsSource="{Binding TestPlanList}" ItemTemplate="{StaticResource TreeViewItemNameTemplate2}" PreviewMouseDown="listView_TestSuite_PreviewMouseDown"  ContextMenuOpening="TSContextMenu_ContextMenuOpening" GiveFeedback="listView_TestSuite_GiveFeedback" MouseDoubleClick="listView_TestSuite_MouseDoubleClick">
                                    <ListView.Style>
                                        <Style TargetType="{x:Type ListView}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="0">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Drag Test Plan from Test Plan list and drop here" FontFamily="Consolas" FontSize="16"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Items, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Drag Test Plan from LHS and drop here" FontFamily="Consolas" FontSize="16"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Style>

                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListViewItem}">
                                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Style.Resources>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF3399FF"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#FF3399FF"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                                            </Style.Resources>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <ListView.ContextMenu>
                                        <ContextMenu  Visibility="{Binding TestPlanListContextMenuVisibility}">
                                            <!--<MenuItem Header="Cut" Click="TSCut_Click" IsEnabled="{Binding IsCutMenuEnabled}"/>-->
                                            <MenuItem Header="Copy" InputGestureText="Ctrl+C" Click="TSCopy_Click" IsEnabled="{Binding IsCopyMenuEnabled}"/>
                                            <MenuItem Header="Paste" Click="TSPaste_Click" InputGestureText="Ctrl+V" IsEnabled="{Binding IsPasteMenuEnabled}"/>
                                            <MenuItem Header="Remove" Click="MenuItemTS_Click" IsEnabled="{Binding IsRemoveMenuEnabled}"/>
                                            <MenuItem Header="RemoveAll" Click="TSRmoveAll_Click" IsEnabled="{Binding IsRemoveAllMenuEnabled}"/>
                                        </ContextMenu>
                                    </ListView.ContextMenu>
                                </ListView>
                            </Grid>
                        </ScrollViewer>
                        <Button Content="Save" IsEnabled="{Binding SaveButtonIsEnabled}" IsDefault="{Binding SaveButtonIsDefault}" Visibility="{Binding SaveCloseVisibility}" HorizontalAlignment="Right"  Name="btn_TestSuiteSave" VerticalAlignment="Top" Grid.Row="4" Click="Btn_TestSuiteSave_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}"  Grid.Column="1"  Margin="0,10,90,0" />
                        <!--<Button Content="Save &amp; Close" IsEnabled="{Binding SaveButtonIsEnabled}" Visibility="{Binding SaveCloseVisibility}"   HorizontalAlignment="Right"  Name="btn_TestSuiteSaveandclose" VerticalAlignment="Top"  Grid.Row="4" Click="Btn_TestsuiteSaveandclose_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle1}" Margin="0,10,90,0" Grid.Column="1" />-->
                        <Button Grid.Row="4" Content="Cancel" IsEnabled="{Binding CancelButtonIsEnabled}" Visibility="{Binding SaveCloseVisibility}" HorizontalAlignment="Right"  Name="btn_TestSuitedelete" VerticalAlignment="Top" Click="Btn_TestSuitedelete_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" Margin="0,10,10,0" Grid.Column="1"/>
                    </Grid>
                    <Grid Name="TestPlanGrid" Margin="6,2,0,5" Background="#FF9CAAC1" Visibility="{Binding TestPlanGridVisibility, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="110" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="38" />
                        </Grid.RowDefinitions>
                        <Grid Margin="10,0,10,0" Name="TestPlannamegrid" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50*"/>
                                <ColumnDefinition Width="250"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="40" />
                                <RowDefinition Height="35" />
                                <RowDefinition Height="35" />
                            </Grid.RowDefinitions>
                            <Button Grid.Row="1" Grid.Column="1" FontStretch="Normal" Content="Load Design" Name="btn_browseDesign1" IsEnabled="{Binding DesignBrowseButtonIsEnabled}" Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle5}" VerticalAlignment="Top" HorizontalAlignment="Left" Click="btn_browseDesign1_Click" Margin="159,6,0,0"/>
                            <CheckBox  x:Name="Script" Grid.Row="1" ToolTip="Uncheck to create testplan without design" Grid.Column="1" Click="Script_Checked" IsChecked="{Binding IsDesignChecked, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding HasDesignCheckBoxIsEnabled}" FontWeight="DemiBold" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="133,10,0,0" />
                            <Button Grid.Column="1" Content="Continuous Background Monitoring" FontStretch="Normal" Margin="-96,6,0,0" Name="btn_Verification_TestPlan" IsEnabled="{Binding BackgroundVerfificationButtonIsEnabled}" Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle4}" VerticalAlignment="Top" HorizontalAlignment="Right" Click="btn_Verification_TestPlan_Click" Grid.Row="2"   />
                            <Button Content="Create TestCase" IsEnabled="{Binding CreateNewTestCaseIsEnabled}" FontStretch="Normal" Margin="129,-28,0,0" Name="btn_CreateNewTestCase" Grid.Row="1" Grid.Column="1" Click="Btn_CreateNewTestCase_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle2}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <Label  Margin="-10,10,0,7" Content="Test Plan Name" FontSize="12" Foreground="Black" FontWeight="DemiBold" Height="23" Width="96" VerticalContentAlignment="Center" HorizontalAlignment="Left"/>
                            <Label  Margin="-9,2,0,5" Content="Design Name" FontSize="12" Foreground="Black" FontWeight="DemiBold" Width="96" VerticalContentAlignment="Center" HorizontalAlignment="Left" Grid.Row="1"/>

                            <Grid Margin="84.5,12,126,7" Background="White" Height="22" Grid.ColumnSpan="2">
                                <TextBox MaxLength="260" IsEnabled="{Binding ItemNameTextBoxIsEnabled}" AllowDrop="False" LostFocus="TestPlan_TextBox_LostFocus" TextChanged="TestPlan_TextBox_TextChanged" Text="{Binding TestItemName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Name="TPname_textBox" PreviewKeyDown="textBox_PreviewKeyDown" PreviewTextInput="TextBox_PreviewTextInput" Height="22" PreviewKeyUp="TextBox_PreviewKeyUp">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Enter Testplan Name" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Height="22" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Height="22"  />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed"/>
                                    </TextBox.ContextMenu>
                                </TextBox>

                                <Button Background="Transparent" HorizontalAlignment="Right" x:Name="settings_TP" Click="propertiesMenuItem_Click" Visibility="{Binding TestPlanSettingsVisible}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0">
                                    <Button.Template>
                                        <ControlTemplate>
                                            <Border HorizontalAlignment="Center" VerticalAlignment="Center" >
                                                <Image Source="Images/settings.png" Width="18" Height="20"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>


                            </Grid>
                            <Grid Grid.Row="1" Margin="84,7,127,7" Background="White" Grid.ColumnSpan="2" Height="22">
                                <TextBox ToolTip="Design Name" IsEnabled="False" Height="22" Text="{Binding DesignName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Name="DesignName" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Design Name" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" Height="22"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" Height="22" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>

                            </Grid>
                        </Grid>
                        <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="1"  Grid.ColumnSpan="2" HorizontalAlignment="Right" Margin="0,0,240,5">
                            <CheckBox  x:Name="ChkNoofDeploy" Content="Number of times Redeploy"   IsChecked="{Binding IsNoOfDeployChecked, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding DeployChkBoxEnable, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" FontWeight="DemiBold" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="0,0,5,3" />
                            <ComboBox  x:Name="Cmb_Deploy"  Width="120"  IsEnabled="{Binding SelectedDeployItemEnable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding DeployItemList, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding SelectedDeployItem,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                        </StackPanel>
                        <ScrollViewer  Margin="0,0,0,0" Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" ScrollViewer.ScrollChanged="listviewtestplan_scrollchanged">
                            <Grid Grid.Row="1" Margin="0,0,0,0">
                                <ListView SelectionMode="Extended" AllowDrop="True" Margin="10,0,10,0" Name="lst_TestPlan" IsEnabled="{Binding TestCaseListIsEnabled}" SelectionChanged="lst_TestPlan_SelectionChanged" PreviewDragOver="listView_TestPlan_PreviewDragOver"  Drop="Lv_TestPlan_Drop" PreviewMouseWheel="testPlanList_Previewmousewheel" MouseMove="lst_TestPlan_MouseMove"  ItemsSource="{Binding TestCaseList}" ItemTemplate="{StaticResource TreeViewItemNameTemplate2}" PreviewMouseDown="lst_TestPlan_PreviewMouseDown" ContextMenuOpening="TPContextMenu_ContextMenuOpening" GiveFeedback="lst_TestPlan_GiveFeedback" MouseDoubleClick="lst_TestPlan_MouseDoubleClick">
                                    <ListView.Style>
                                        <Style TargetType="{x:Type ListView}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="0">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Drag Test Case from Test Case list and drop here" FontFamily="Consolas" FontSize="16"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Items, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Drag Test Case from LHS and drop here" FontFamily="Consolas" FontSize="16"/>
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Style>

                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListViewItem}">
                                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Style.Resources>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF3399FF"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#FF3399FF"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                                            </Style.Resources>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <ListView.ContextMenu>
                                        <ContextMenu Visibility="{Binding TestCaseListContextMenuVisibility}">
                                            <!--<MenuItem Header="Cut" Click="TPCut_Click" IsEnabled="{Binding IsCutMenuEnabled}"/>-->
                                            <MenuItem Name="TPCopy" Header="Copy" Click="TPCopy_Click" InputGestureText="Ctrl+C" IsEnabled="{Binding IsCopyMenuEnabled}"/>
                                            <MenuItem Name="TPPaste" Header="Paste" Click="TPPaste_Click" InputGestureText="Ctrl+V" IsEnabled="{Binding IsPasteMenuEnabled}"/>
                                            <MenuItem Header="Remove" Click="MenuItemTP_Click" IsEnabled="{Binding IsRemoveMenuEnabled}"/>
                                            <MenuItem Header="RemoveAll" Click="TPRmoveAll_Click" IsEnabled="{Binding IsRemoveAllMenuEnabled}"/>
                                        </ContextMenu>
                                    </ListView.ContextMenu>
                                </ListView>
                            </Grid>
                        </ScrollViewer>
                        <Button Content="Save" IsEnabled="{Binding SaveButtonIsEnabled}" IsDefault="{Binding SaveButtonIsDefault}" Visibility="{Binding SaveCloseVisibility}" Name="btn_TestPlanSave" VerticalAlignment="Top"  Grid.Row="2" Click="Btn_TestPlanSave_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" HorizontalAlignment="Right" Margin="0,10,90,0" />
                        <!--<Button Content="Save &amp; Close" IsEnabled="{Binding SaveButtonIsEnabled}" Visibility="{Binding SaveCloseVisibility}" Name="btn_TestPlanSaveandclose" VerticalAlignment="Top"  Grid.Row="2" Click="Btn_TestPlanSaveclose_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle1}" HorizontalAlignment="Right" Margin="0,10,90,0" />-->
                        <Button Content="Cancel"  IsEnabled="{Binding CancelButtonIsEnabled}" Visibility="{Binding SaveCloseVisibility}" Name="btn_TestPlanCancel" VerticalAlignment="Top"  Grid.Row="2" Click="Btn_TestPlanCancel_Click" Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" HorizontalAlignment="Right"  Margin="0,10,10,0"/>
                    </Grid>
                    <Grid Name="TestCaseGrid" Margin="6,0,0,5" Background="#FF9CAAC1" Visibility="{Binding TestCaseGridVisibility, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="38" />
                            <RowDefinition Height="76" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="38" />
                        </Grid.RowDefinitions>
                        <Grid Margin="5,0,-5,0" Name="TestCasenamegrid" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50*"/>
                                <ColumnDefinition Width="50*" />
                            </Grid.ColumnDefinitions>
                            <Label  Margin="0,6,0,9" Content="Testcase Name" FontSize="12" Foreground="Black" FontWeight="DemiBold" Height="23" Width="94" VerticalContentAlignment="Center" HorizontalAlignment="Left"/>

                            <Grid Background="White" Margin="93,7,17,9" Grid.ColumnSpan="2" Height="22">
                                <TextBox MaxLength="260" IsEnabled="{Binding ItemNameTextBoxIsEnabled}" AllowDrop="False" Name="TCname_textBox" Text="{Binding TestItemName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" LostFocus="TCname_textBox_LostFocus" TextChanged="TCname_textBox_TextChanged" PreviewKeyDown="textBox_PreviewKeyDown"  Height="22" PreviewTextInput="TextBox_PreviewTextInput" PreviewKeyUp="TextBox_PreviewKeyUp">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Enter Testcase Name" Foreground="Black"  FontStyle="Italic" TextAlignment="Left" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                                <Button Background="Transparent"  HorizontalAlignment="Right" x:Name="settings_TC" Click="propertiesMenuItem_Click" Visibility="{Binding TestCaseSettingsVisible}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0">
                                    <Button.Template>
                                        <ControlTemplate>
                                            <Border HorizontalAlignment="Center" VerticalAlignment="Center" >
                                                <Image Source="Images/settings.png" Width="18" Height="20" />
                                            </Border>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                            </Grid>
                        </Grid>
                        <ScrollViewer Margin="10,5,10,0" Grid.Row="2" VerticalScrollBarVisibility="Auto" >
                            <Grid Grid.Row="2" Background="#FF9CAAC1" x:Name="TestActionGrid" Margin="10,5,10,0">
                                <TabControl x:Name="tabControlAction" Background="#FF9CAAC1" Margin="10,5,10,0"
											ContentTemplate="{StaticResource ActionTabContentDataTemplate}"
											ItemTemplate="{StaticResource ActionTabItemDataTemplate}"
											ItemsSource="{Binding TestActionItemList}" 
											SelectedItem="{Binding SelectedActionItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Template="{DynamicResource ActionTabControlTemplate}" ItemContainerStyle="{StaticResource DesignerTabItemStyle}">
                                    <TabControl.Style>
                                        <Style TargetType="TabControl">
                                            <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
                                                    <Setter Property="BorderThickness" Value="0,0,0,0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TabControl.Style>
                                </TabControl>
                            </Grid>
                        </ScrollViewer>
                        <Button Grid.Row="7" IsEnabled="{Binding SaveButtonIsEnabled}" IsDefault="{Binding SaveButtonIsDefault}" Visibility="{Binding SaveCloseVisibility}" Content="Save" x:Name="button_TCSave" HorizontalAlignment="Right" VerticalAlignment="Top" Click="Btn_TCSave_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" Margin="0,10,90,0" />
                        <!--<Button Grid.Row="3" IsEnabled="{Binding SaveButtonIsEnabled, Mode=OneWay}" Visibility="{Binding SaveCloseVisibility}" Content="Save &amp; Close"  x:Name="button_TCSaveClose" HorizontalAlignment="Right" VerticalAlignment="Top" Click="button_TCSaveClose_Click"  Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle1}" Margin="0,10,90,0" />-->
                        <Button Content="Cancel" IsEnabled="{Binding CancelButtonIsEnabled}" Visibility="{Binding SaveCloseVisibility}" HorizontalAlignment="Right" x:Name="btn_TestCaseCancel" VerticalAlignment="Top" Grid.Row="3" Click="Btn_TestCaseCancel_Click" Foreground="White" Focusable="False" Style="{StaticResource ButtonStyle3}" Margin="0,10,10,0"/>
                        <Grid Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="250*"/>
                                <ColumnDefinition Width="250*" />
                            </Grid.ColumnDefinitions>
                            <ComboBox x:Name="cmb_SelectedTestPlan" Grid.Column="0" Margin="98,7,12.5,45" IsEnabled="{Binding SelectTestPlanIsEnabled}" ItemsSource="{Binding TestPlanList}" ItemTemplate="{StaticResource TreeViewItemNameTemplate1}" SelectedItem="{Binding TestPlanSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="24" Grid.ColumnSpan="2" IsTextSearchEnabled="True" TextSearch.TextPath="ItemName"  />

                            <TextBox Grid.Column="0" x:Name="txt_DesignName" Text="{Binding DesignNameSelected}" Height="22" Margin="98,44,12,10" Grid.ColumnSpan="2" TextWrapping="Wrap" IsEnabled="False" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                <TextBox.ContextMenu>
                                    <ContextMenu Visibility="Collapsed" />
                                </TextBox.ContextMenu>
                            </TextBox>

                        </Grid>
                        <Label  Margin="6,4,0,44" FontWeight="DemiBold" Content="Testplan Name" FontSize="12" Foreground="Black" Height="28" Width="94" VerticalContentAlignment="Center" HorizontalAlignment="Left" Grid.Row="1"/>
                        <Label  Margin="6,40,0,8" FontWeight="DemiBold" Content="Design Name" FontSize="12" Foreground="Black" Height="28" Width="94" VerticalContentAlignment="Center" HorizontalAlignment="Left" Grid.Row="1"/>
                    </Grid>
                    <Grid Name="TestHeaderGrid" Background="#FF9CAAC1" Visibility="{Binding TestHeaderGridVisibility, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="25" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TextBlock HorizontalAlignment="Center" Grid.Row="0" Margin="5,5,0,0" Height="27" Name="txt_HeaderName" Text="{Binding TestItemName}" Foreground="Black" FontWeight="Bold"/>
                        <ListView Grid.Row="1" Background="white" SelectionMode="Extended" AllowDrop="True" Margin="0,0,0,0" Name="listView_designerlist" ItemsSource="{Binding TestItemList}" ItemTemplate="{StaticResource TreeViewItemNameTemplate2}" MouseDoubleClick="listView_designerlist_MouseDoubleClick" >

                        </ListView>
                    </Grid>
                </Grid>
            </HierarchicalDataTemplate>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="25"/>
            <RowDefinition Height="456*" />
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>
        <Border BorderBrush="Black" BorderThickness="1" ></Border>
        <Border BorderBrush="Black" BorderThickness="1" Grid.RowSpan="6"></Border>
        <Menu Background="#FFC0CAD9" Grid.Row="0" Height="25" HorizontalAlignment="Stretch" Margin="0,0,0,0" Name="Menu_mainWindow" VerticalAlignment="Top" GotMouseCapture="Menu_Item_MouseCapture">
            <MenuItem Name="FileMenu" Header="File" SubmenuOpened="EditMenu_SubmenuOpened">
                <MenuItem Name="MenuAscending1" Header="Sort by ascending">
                    <MenuItem  Name="MenuascendingName" Header="Name" Click="SortbyascendingMenuItem_Click"/>
                    <MenuItem  Name="MenuascendingCreatedOn" Header="CreatedOn" Click="SortCreatedonbyascendingMenuItem_Click"/>
                </MenuItem>
                <MenuItem Name="MenuDecending1" Header="Sort by descending">
                    <MenuItem  Name="MenudecendingName" Header="Name" Click="SortbydecendingMenuItem_Click"/>
                    <MenuItem  Name="MenudecendingCreatedOn" Header="CreatedOn" Click="SortCreatedonbydecendingMenuItem_Click"/>
                </MenuItem>

                <!--<MenuItem Name="MenuDateCreated1" Header="Sort by Date Created" Click="MenuDateCreated1_Click"/>-->
                <MenuItem Name="MenuRunner1" Header="QAT-Runner" Click="Executionwindow_Click"/>
                <MenuItem Name="MenuRefresh1" Header="Refresh" Click="RefreshMenuItem_Click"/>
                <MenuItem Name="MenuImport" Header="Import" Click="Import_Click" />
                <MenuItem Name="MenuExport" Header="Export" Click="Export_Click"/>
            </MenuItem>
            <MenuItem Name="EditMenu" Header="Edit" SubmenuOpened="EditMenu_SubmenuOpened">
                <MenuItem Name="MenuOpenBlankTab1" InputGestureText="Ctrl+T" Header="Open Blank Tab" Click="OpenBlankTab_Click"/>
                <MenuItem Name="MenuNew1" InputGestureText="Ctrl+N" Header="New" Click="NewMenu1Item_Click"/>
                <MenuItem Name="MenuCopy1" InputGestureText="Ctrl+C" Header="Copy" Click="CopyMenuItem_Click"/>
                <MenuItem Name="MenuPaste1" InputGestureText="Ctrl+V" Header="Paste" Click="PasteMenuItem_Click"/>
                <MenuItem Name="MenuView1" InputGestureText="Ctrl+O" Header="View" Click="OpenMenu1Item_Click"/>
                <MenuItem Name="MenuEdit1" InputGestureText="Ctrl+E" Header="Edit" Click="EditMenu1Item_Click"/>
                <MenuItem Name="MenuRename1" Header="Rename" Click="RenameMenuItem_Click"/>
                <MenuItem Name="MenuDelete1" Header="Delete" Click="DeleteMenuItem_Click"/>
                <MenuItem Name="MenuProperties1" Header="Properties" Click="propertiesMenuItem_Click"/>
                <MenuItem Name="MenuUndo1" Header="Undo" InputGestureText="Ctrl+Z" Click="UndoMenuItem_Click"/>
                <MenuItem Name="MenuRedo1" Header="Redo" InputGestureText="Ctrl+Y" Click="RedoMenuItem_Click"/>
                <MenuItem Name="MenuCategory1" Header="Group by Category" Click="SortbyCategoryMenuItem_Click"/>
                <MenuItem Name="MenuGroupByNone1" Header="Group by None" Click="SortbyNoneMenuItem_Click"/>
            </MenuItem>
            <MenuItem Name="ViewMenu" Header="View">
                <MenuItem Header="Zoom In" InputGestureText="Shift++" Name="ZoomIn" Click="ZoomIn_Click"/>
                <MenuItem Header="Zoom Out" InputGestureText="Shift+-" Name="ZoomOut" Click="ZoomOut_Click"/>
                <MenuItem Header="Actual Size" Name="ActualSize" Click="ActualSize_Click"/>
            </MenuItem>
            <MenuItem Name="HelpMenu" Header="Help">
                <MenuItem Header="View Help Videos " IsEnabled="True" Click="MenuItem_Click"/>
                <MenuItem Header="QAT Shortcuts" IsEnabled="True" Click="MenuItem_Click_2" ></MenuItem>
                <MenuItem Header="About QSC Test Automation" IsEnabled="true" Click="MenuItem_Click_1"/>
            </MenuItem>
            <!--<MenuItem Header="Search">
                <MenuItem Header="Search Inverntory" Click="Btn_Search_Click"/>
            </MenuItem>-->
            <MenuItem Header="Preferences" InputGestureText="Alt+P" Click="ServerMenuItem_Click_Designer"/>
        </Menu>
        <Grid Grid.Row="1" Margin="0,0,0,0" Name="grid2" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="15*" />
                <ColumnDefinition Width="61*" />
            </Grid.ColumnDefinitions>
            <Grid Margin="0,0,5,0"  Name="grid3"  >
                <GroupBox Foreground="WhiteSmoke"  Margin="10,5,0,10" Name="group_InventoryWindow" BorderBrush="Black" BorderThickness="0.5" Background="#FF405579">
                    <GroupBox.Header>
                        <TextBlock Style="{StaticResource TextBlockHeaderStyle}">Inventory</TextBlock>
                    </GroupBox.Header>
                    <Grid Margin="0,0,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50" />
                            <RowDefinition Height="25" />
                            <RowDefinition Height="25" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0" Margin="0,0,0,0" Name="grid5" Background="#FF405579">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="40" />
                                <ColumnDefinition Width="237*" />
                                <ColumnDefinition Width="40" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="Search" Grid.Column="0" Margin="0,17,0,-2" FontSize="12" Foreground="White" FontWeight="DemiBold" />
                            <Grid Background="White" Grid.Column="1" Margin="0,14,0,10" Grid.ColumnSpan="2" Height="22">
                                <TextBox AllowDrop="False" Name="txt_Search" TextChanged="txt_Search_TextChanged" PreviewKeyUp="TextBox_PreviewKeyUp">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Search Inventory" Foreground="Black"  FontStyle="Italic" TextAlignment="Center" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="{x:Null}">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Search Inventory" Foreground="Black" FontStyle="Italic" TextAlignment="Center" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>-->
                                                <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsFocused}" Value="White">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>-->
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>
                            <!--<TextBox ContextMenu="{x:Null}" Grid.Column="1" ToolTip="Search from Inventory" AllowDrop="False" Margin="0,14,8,10" Name="txt_Search" Grid.ColumnSpan="2" TextChanged="txt_Search_TextChanged"/>-->
                            <!--<Button Grid.Column="2" Content="Search" Margin="0,15,0,0" Name="btn_Search" VerticalAlignment="Top" Click="Btn_Search_Click" >
                                <Button.Template>
                                    <ControlTemplate>
                                        <Image Height="30" Source= "Images/search.png"/>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>-->
                            <Button Background="Transparent" HorizontalAlignment="Right" x:Name="Cancelbutton" Click="SearchBoxKeyDown" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Grid.Column="2" Margin="0,4,0,0">
                                <Button.Template>
                                    <ControlTemplate>
                                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" >
                                            <Image Source="Images/delete.gif" Height="20"/>
                                        </Border>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                        </Grid>
                        <Grid Grid.Row="1" Margin="0,0,0,0" Name="filterGrid1" Background="#FF405579">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="40" />
                                <ColumnDefinition Width="237*" />

                            </Grid.ColumnDefinitions>
                            <Label Content="Filter"  FontSize="12" Foreground="White" Height="30" VerticalAlignment="Top"  Grid.Column="0" Margin="0,-4,0,-1" FontWeight="DemiBold" />
                            <ComboBox Text="Sorting Type" Name="comboSortTypeSelection" Height="22" FontSize="12"  DropDownOpened="comboSortTypeSelection_DropDownOpened" DropDownClosed="comboSortTypeSelection_DropDownClosed"   Margin="0,-3,0,6" Grid.Column="1" PreviewMouseWheel="comboSortTypeSelection_PreviewMouseWheel"/>

                            <!--<ComboBox Text="Search" Name="comboSortValueSelection2" Grid.Column="2" Margin="0,0,0,0" FontSize="12" DropDownClosed="comboSortValueSelection2_DropDownClosed" />-->
                        </Grid>
                        <Grid Grid.Row="2" Margin="0,0,0,0" Name="filterGrid2" Background="#FF405579">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60*" />
                                <ColumnDefinition Width="60*" />
                            </Grid.ColumnDefinitions>

                            <ComboBox Text="Search" Name="comboSortValueSelection1" Height="20" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,0,0,0" FontSize="12" Visibility="{ Binding FilterValueSelection,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"   DropDownClosed="comboSortValueSelection1_DropDownClosed" PreviewMouseWheel="comboSortValueSelection1_PreviewMouseWheel"/>
                            <!--<Grid Background="White" Grid.Column="0" Margin="0,14,8,10" Grid.ColumnSpan="2" Height="22">-->
                            <Grid Background="White" Name="summarygrid" Grid.Column="0" Margin="0,0,0,0" Grid.ColumnSpan="2" Height="20" Visibility="{Binding FilterTextBoxGrid,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                                <TextBox Name="summaryTextBox" Height="20" Grid.Column="0" Grid.ColumnSpan="2"  Margin="0,0,0,0" FontSize="12" TextChanged="summaryTextBox_TextChanged" Visibility="{ Binding FilterSummaryText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" PreviewKeyUp="TextBox_PreviewKeyUp" AllowDrop="False">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="Summary Keyword" Foreground="Black"  FontStyle="Italic" TextAlignment="Center" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <VisualBrush Stretch="None">
                                                                <VisualBrush.Visual>
                                                                    <TextBlock Text="" Foreground="Black"  FontStyle="Italic" TextAlignment="Right" />
                                                                </VisualBrush.Visual>
                                                            </VisualBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                    <TextBox.ContextMenu>
                                        <ContextMenu Visibility="Collapsed" />
                                    </TextBox.ContextMenu>
                                </TextBox>
                            </Grid>
                            <DatePicker   Grid.Column="0" Margin="0,0,0,0" BorderBrush="Black" Name="fromDatePicker" Visibility="{Binding FilterStartDate,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" >
                                <DatePicker.Resources>
                                    <Style TargetType="DatePickerTextBox">
                                        <Setter Property="Text" Value="From Date"/>
                                    </Style>
                                </DatePicker.Resources>
                            </DatePicker>
                            <DatePicker   Name="toDatePicker" Grid.Column="1" Margin="0,0,0,0" BorderBrush="Black" Visibility="{ Binding FilterEndDate,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedDateChanged="toDatePicker_SelectedDateChanged" CalendarOpened="toDatePicker_CalendarOpened">
                                <DatePicker.Resources>
                                    <Style TargetType="DatePickerTextBox">
                                        <Setter Property="Text" Value="To Date"/>
                                    </Style>
                                </DatePicker.Resources>
                            </DatePicker>
                            <!--<ComboBox Text="Search" Name="comboSortValueSelection2" Grid.Column="2" Margin="0,0,0,0" FontSize="12" DropDownClosed="comboSortValueSelection2_DropDownClosed" />-->



                        </Grid>
                        <Grid Grid.Row="3" Margin="0,0,0,0" Name="grid6" ContextMenuOpening="TreeViewDesignerGrid_ContextMenuOpening">
                            <Grid.LayoutTransform>
                                <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding ElementName=RunnerSlider, Path=Value}" ScaleY="{Binding ElementName=RunnerSlider, Path=Value}"/>
                            </Grid.LayoutTransform>

                            <ContextMenuService.ContextMenu>
                                <ContextMenu Name="DesignerTreeContextMenu" >
                                    <MenuItem Name="MenuOpenBlankTab2" InputGestureText="Ctrl+T" Header="Open Blank Tab" Click="OpenBlankTab_Click"/>
                                    <MenuItem Name="MenuNew2" InputGestureText="Ctrl+N" Header="New" Click="NewMenuItem_Click"/>
                                    <MenuItem Name="MenuCopy2" Header="Copy" Click="CopyMenuItem_Click" InputGestureText="Ctrl+C"/>
                                    <MenuItem Name="MenuPaste2" Header="Paste" Click="PasteMenuItem_Click" InputGestureText="Ctrl+V"/>
                                    <MenuItem Name="MenuView2" InputGestureText="Ctrl+O" Header="View" Click="OpenMenuItem_Click"/>
                                    <MenuItem Name="MenuEdit2" InputGestureText="Ctrl+E" Header="Edit" Click="EditMenuItem_Click"/>
                                    <MenuItem Name="MenuRename2" Header="Rename" Click="RenameMenuItem_Click"/>
                                    <MenuItem Name="MenuDelete2" Header="Delete" Click="DeleteMenuItem_Click"/>
                                    <MenuItem Name="MenuProperties2" Header="Properties" Click="propertiesMenuItem_Click"/>
                                    <MenuItem Name="MenuAscending2"  Header="Sort by ascending"  >
                                        <MenuItem  Name="ascendingName" Header="Name"  Click="SortbyascendingMenuItem_Click"/>
                                        <MenuItem  Name="ascendingCreatedon" Header="CreatedOn" Click="SortCreatedonbyascendingMenuItem_Click"/>
                                    </MenuItem>
                                    <MenuItem Name="MenuDecending2"  Header="Sort by descending" >
                                        <MenuItem  Name="descendingName" Header="Name" Click="SortbydecendingMenuItem_Click"/>
                                        <MenuItem Name="descendingCreatedon" Header="CreatedOn" Click="SortCreatedonbydecendingMenuItem_Click"/>
                                    </MenuItem>

                                    <!--<MenuItem Name="MenuDateCreated2" Header="Sort by Date Created" Click="MenuDateCreated1_Click"/>-->
                                    <MenuItem Name="MenuRefresh2" Header="Refresh" Click="RefreshMenuItem_Click"/>
                                    <MenuItem Name="MenuAddItem2" Header="Add Item" ItemsSource="{Binding}" ItemTemplate="{StaticResource TreeViewItemNameTemplate3}" Click="MenuAddItem2_Click">
                                    </MenuItem>
                                    <MenuItem Name="MenuCategory2" Header="Group by Category" Click="SortbyCategoryMenuItem_Click"/>
                                    <MenuItem Name="MenuGroupByNone2" Header="Group by None" Click="SortbyNoneMenuItem_Click"/>
                                </ContextMenu>
                            </ContextMenuService.ContextMenu>
                            <TreeView Name="TreeViewDesigner" Grid.Row="2" FontWeight="SemiBold" Background="#FFF9F5F2" ItemsSource="{Binding}"  ItemContainerStyle ="{StaticResource TreeViewItemStyleMultiSelect}" ItemTemplate="{StaticResource TreeViewRenameDataTemplate}" PreviewMouseDown="TreeViewDesigner_PreviewMouseDownUp" PreviewMouseUp="TreeViewDesigner_PreviewMouseDownUp" MouseMove="TreeViewDesigner_MouseMove" PreviewKeyDown="TreeViewDesigner_PreviewKeyDownUp" PreviewKeyUp="TreeViewDesigner_PreviewKeyDownUp" AllowDrop="True" Drop="TreeViewDesigner_Drop" PreviewTextInput="Treeviewdesigner_previewtextinput" LostKeyboardFocus="Treeviewdesigner_LostFocus"  GiveFeedback="TreeViewDesigner_GiveFeedback" SelectedItemChanged="TreeViewDesigner_SelectedItemChanged" KeyDown="TreeViewDesigner_keyDown"   VirtualizingStackPanel.IsVirtualizing="True"  VirtualizingStackPanel.VirtualizationMode="Standard" ScrollViewer.CanContentScroll="True" TreeView.SnapsToDevicePixels="True" VirtualizingStackPanel.ScrollUnit="Pixel" >
                                <TreeView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <src:MyVirtualizingStackPanel IsItemsHost="True" CanVerticallyScroll="True"/>
                                    </ItemsPanelTemplate>
                                </TreeView.ItemsPanel>

                            </TreeView>

                        </Grid>
                    </Grid>
                </GroupBox>
            </Grid>
            <Grid Grid.Column="1" Name="grid4" Margin="0,0,5,5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Find"  FontSize="12" Foreground="White" Height="30" VerticalAlignment="Center"  Margin="0,0,0,0" FontWeight="DemiBold" />
                        <TextBox AllowDrop="False" Name="textBox_Find" Background="White" Margin="10,0,0,0" Grid.ColumnSpan="2" Height="22" Width="100" VerticalAlignment="Center" PreviewKeyUp="TextBox_PreviewKeyUp">
                            <TextBox.ContextMenu>
                                <ContextMenu Visibility="Collapsed" />
                            </TextBox.ContextMenu>
                        </TextBox>
                        <Button Name="button_FindNext" IsEnabled="True" Content="Find Next" Grid.Column="3" HorizontalContentAlignment="Center" HorizontalAlignment="Right" BorderThickness="0" UseLayoutRounding="False"  Foreground="WhiteSmoke" Focusable="False" Style="{StaticResource ButtonStyle1}" Height="23" VerticalAlignment="Center" BorderBrush="#FFB9D1EA" Width="85" Click="btn_FindNext_Click" Margin="10,0,0,0" />
                        <Button Name="button_FindPrevious" IsEnabled="True" Content="Find Previous" Grid.Column="3" HorizontalContentAlignment="Center" HorizontalAlignment="Right" BorderThickness="0" UseLayoutRounding="False"  Foreground="WhiteSmoke" Focusable="False" Style="{StaticResource ButtonStyle1}" Height="23" VerticalAlignment="Center" BorderBrush="#FFB9D1EA" Width="85" Click="btn_FindPrevious_Click" Margin="10,0,0,0" />
                    </StackPanel>
                </Grid>
                <Grid Grid.Row="1">
                    <Grid.LayoutTransform>
                        <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding ElementName=RunnerSlider, Path=Value}" ScaleY="{Binding ElementName=RunnerSlider, Path=Value}"/>
                    </Grid.LayoutTransform>
                    <TabControl Grid.Column="1" Name="tabControl" ContentTemplate="{StaticResource TestSuiteTabItemDataTemplate}" BorderBrush="#FFF2F2F2" Background="#FF405579" MouseDoubleClick="tabControl_MouseDoubleClick" Style="{DynamicResource TabControlStyleDesigner}"  ItemsSource="{Binding}" ItemTemplate="{StaticResource DesignrTabItemDataTemplate}" ItemContainerStyle="{StaticResource DesignerTabItemStyle}"
                                SelectionChanged="tabControl_SelectionChanged" KeyDown="Tabcontrol_Keydown">
                    </TabControl>
                </Grid>
            </Grid>
        </Grid>
        <TextBlock Style="{StaticResource  TextBlockHeaderStyle}"  Margin="20,0,0,0" HorizontalAlignment="Left" x:Name="LoadDesignStatus" FontSize="15"   Grid.Row="2"/>
        <TextBlock Text="Zoom" Foreground="White" Grid.Row="2" HorizontalAlignment="Right" Margin="0,0,110,0"/>
        <TextBlock x:Name="tbMemory" Text="{Binding MemoryValueSelection,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Foreground="White" Grid.Row="2" HorizontalAlignment="Right" Margin="0,0,220,0"/>
        <Slider x:Name="RunnerSlider" Grid.Row="2"  HorizontalAlignment="Right" Width="100" Minimum="1" Maximum="2" IsMoveToPointEnabled="True"/>
    </Grid>
</Window>
